<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>anatomy.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/</path>
    <filename>anatomy_8dox</filename>
  </compound>
  <compound kind="file">
    <name>Channel.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/</path>
    <filename>_channel_8dox</filename>
  </compound>
  <compound kind="file">
    <name>Fbo.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/gl/</path>
    <filename>gl_2_fbo_8dox</filename>
  </compound>
  <compound kind="file">
    <name>Fbo.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/guides/gl/</path>
    <filename>guides_2gl_2_fbo_8dox</filename>
  </compound>
  <compound kind="file">
    <name>CinderBoost.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/guides/cinderboost/</path>
    <filename>_cinder_boost_8dox</filename>
  </compound>
  <compound kind="file">
    <name>Images.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/guides/</path>
    <filename>_images_8dox</filename>
  </compound>
  <compound kind="file">
    <name>ImplShared.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/guides/</path>
    <filename>_impl_shared_8dox</filename>
  </compound>
  <compound kind="file">
    <name>MovieWriter.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/guides/qtime/</path>
    <filename>guides_2qtime_2_movie_writer_8dox</filename>
  </compound>
  <compound kind="file">
    <name>MovieWriter.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/qtime/</path>
    <filename>qtime_2_movie_writer_8dox</filename>
  </compound>
  <compound kind="file">
    <name>CinderResources.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/guides/resources/</path>
    <filename>_cinder_resources_8dox</filename>
  </compound>
  <compound kind="file">
    <name>screensavers.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/guides/screensavers/</path>
    <filename>screensavers_8dox</filename>
  </compound>
  <compound kind="file">
    <name>chapter1.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/guides/tour/</path>
    <filename>chapter1_8dox</filename>
  </compound>
  <compound kind="file">
    <name>chapter2.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/guides/tour/</path>
    <filename>chapter2_8dox</filename>
  </compound>
  <compound kind="file">
    <name>chapter3.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/guides/tour/</path>
    <filename>chapter3_8dox</filename>
  </compound>
  <compound kind="file">
    <name>chapter4.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/guides/tour/</path>
    <filename>chapter4_8dox</filename>
  </compound>
  <compound kind="file">
    <name>chapter5.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/guides/tour/</path>
    <filename>chapter5_8dox</filename>
  </compound>
  <compound kind="file">
    <name>flocking1.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/guides/tour/</path>
    <filename>flocking1_8dox</filename>
  </compound>
  <compound kind="file">
    <name>flocking2.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/guides/tour/</path>
    <filename>flocking2_8dox</filename>
  </compound>
  <compound kind="file">
    <name>flocking3.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/guides/tour/</path>
    <filename>flocking3_8dox</filename>
  </compound>
  <compound kind="file">
    <name>flocking4.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/guides/tour/</path>
    <filename>flocking4_8dox</filename>
  </compound>
  <compound kind="file">
    <name>flocking5.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/guides/tour/</path>
    <filename>flocking5_8dox</filename>
  </compound>
  <compound kind="file">
    <name>tour.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/guides/tour/</path>
    <filename>tour_8dox</filename>
  </compound>
  <compound kind="file">
    <name>XmlTree.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/guides/</path>
    <filename>guides_2_xml_tree_8dox</filename>
  </compound>
  <compound kind="file">
    <name>XmlTree.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/</path>
    <filename>_xml_tree_8dox</filename>
  </compound>
  <compound kind="file">
    <name>mainpage.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/</path>
    <filename>mainpage_8dox</filename>
  </compound>
  <compound kind="file">
    <name>Surface.dox</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/docs/doxygen/docsrc/</path>
    <filename>_surface_8dox</filename>
  </compound>
  <compound kind="file">
    <name>App.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_app_8h</filename>
    <class kind="struct">cinder::app::BooleanOrEventCombiner</class>
    <class kind="struct">cinder::app::BooleanAndEventCombiner</class>
    <class kind="struct">cinder::app::BitwiseAndEventCombiner</class>
    <class kind="class">cinder::app::App</class>
    <class kind="class">cinder::app::App::Settings</class>
    <namespace>cinder</namespace>
    <namespace>boost</namespace>
    <namespace>boost::asio</namespace>
    <namespace>cinder::app</namespace>
    <member kind="function">
      <type>WindowRef</type>
      <name>getWindow</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>afeb2e43e06158272354e1e40acd5933e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumWindows</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>af3276cc127972aae95821bb8040fcd5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>WindowRef</type>
      <name>getWindowIndex</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a2985ea6574830fd79e5495fdd1bb0c40</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWindowWidth</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>ac8c6ecaf9d91c5eedfd6b127a60e939d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWindowPos</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a3349e60c6269679adc08924cf2581c2b</anchor>
      <arglist>(const Vec2i &amp;windowPos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWindowPos</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a9652f82dd8d8dce8604f00ad64b29fe7</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWindowHeight</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a71d6248e05c9a15ad660a5243da38a70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWindowSize</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a456aafdb7f865c9911c1157b24f128b4</anchor>
      <arglist>(int windowWidth, int windowHeight)</arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>getWindowCenter</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>aecde9ce685f3170fe6aec9bf9797e42e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getWindowSize</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a9926e7943f83caba9b76f49aa6e569d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getWindowPos</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a12b88f25efe6dc52cbe1f1e996581268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getWindowAspectRatio</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a78b0039ce9950289e91d23e0bed2c2af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>getWindowBounds</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>ae1eacebf2877007904c42db342bd477d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getWindowContentScale</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>aa2c52f58d6e1cfdc8aa8287edc8bb7db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFrameRate</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>acfee5b85b698f272b32dc85f15482356</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrameRate</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>ace1f4b40afd89750f01fbf25591e16c4</anchor>
      <arglist>(float frameRate)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFullScreen</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>af1b267bb5cad7c3272dcdc9541dfe093</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFullScreen</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a07621a24f0d0b240fbf4e467df04366d</anchor>
      <arglist>(bool fullScreen=true)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toPixels</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>aedc49f198938fb4f0da65cfda2fb9494</anchor>
      <arglist>(float s)</arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>toPixels</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a5181c415ca75e55bc5df40d333f471ae</anchor>
      <arglist>(Vec2f s)</arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>toPixels</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a11fbcf2570c1af0a59986f9241e11623</anchor>
      <arglist>(Vec2i s)</arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>toPixels</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>ac762ce1e231202d6b0fa525087c8a11a</anchor>
      <arglist>(const Area &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Rectf</type>
      <name>toPixels</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a4a7c6f5716bea18ac663eea197c8885b</anchor>
      <arglist>(const Rectf &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toPoints</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a933264ecfd9cf6ca8ce9424502900dad</anchor>
      <arglist>(float s)</arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>toPoints</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>aefc83e14984e324525841f6b20c285db</anchor>
      <arglist>(Vec2f s)</arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>toPoints</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>aaa34a32090cc7f9be114ac5447faf1eb</anchor>
      <arglist>(Vec2i s)</arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>toPoints</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a4c2e698e5a3290da8ab743d08849fd77</anchor>
      <arglist>(const Area &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Rectf</type>
      <name>toPoints</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>ac6ae91fbfc6d841ec21d4d9c0f626b37</anchor>
      <arglist>(const Rectf &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getElapsedSeconds</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>ac9ac93a362ec7149815a860c0770b302</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getElapsedFrames</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>af76ee9ed608078551bf9e7bc1c1cb950</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DataSourceRef</type>
      <name>loadResource</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a93522b1858f745f7d9438d6d124ae11b</anchor>
      <arglist>(const std::string &amp;macPath, int mswID, const std::string &amp;mswType)</arglist>
    </member>
    <member kind="function">
      <type>DataSourceRef</type>
      <name>loadResource</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a11d41f77da4bda80ecf79d10d723c082</anchor>
      <arglist>(const std::string &amp;macPath)</arglist>
    </member>
    <member kind="function">
      <type>DataSourceRef</type>
      <name>loadResource</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a35b4c0a1fc81b125b6c631afba157efa</anchor>
      <arglist>(int mswID, const std::string &amp;mswType)</arglist>
    </member>
    <member kind="function">
      <type>DataSourceRef</type>
      <name>loadAsset</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a2adb4a8655beb1e2df15ea2900603fb2</anchor>
      <arglist>(const fs::path &amp;relativePath)</arglist>
    </member>
    <member kind="function">
      <type>fs::path</type>
      <name>getAssetPath</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a172adb53b949b130909739d61330f9e7</anchor>
      <arglist>(const fs::path &amp;relativePath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAssetDirectory</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>afefc7fb3a33191c56945b1535931ba82</anchor>
      <arglist>(const fs::path &amp;dirPath)</arglist>
    </member>
    <member kind="function">
      <type>fs::path</type>
      <name>getAppPath</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>adbcd2288c588c616e9c99a9d2fa1fba0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fs::path</type>
      <name>getOpenFilePath</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a2b94464715221084bce6621a114f8121</anchor>
      <arglist>(const fs::path &amp;initialPath=&quot;&quot;, std::vector&lt; std::string &gt; extensions=std::vector&lt; std::string &gt;())</arglist>
    </member>
    <member kind="function">
      <type>fs::path</type>
      <name>getSaveFilePath</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a44f71e4a8a11c5060bc8d9ff98ebcbe9</anchor>
      <arglist>(const fs::path &amp;initialPath=&quot;&quot;, std::vector&lt; std::string &gt; extensions=std::vector&lt; std::string &gt;())</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>console</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a72f7349e12a6766075862ed953868abe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Timeline &amp;</type>
      <name>timeline</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>adbceabeac84eb6a43f1f4bbcce29f64c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Surface</type>
      <name>copyWindowSurface</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a60fd3454189e7d6f8fc697a77978094b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Surface</type>
      <name>copyWindowSurface</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a98849c9bd18d5a5c5910718ec297e279</anchor>
      <arglist>(const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreWindowContext</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a16565c79ea1b892e783f5ba69070a272</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>inline::CGContextRef</type>
      <name>createWindowCgContext</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1c69679f56ccf5a12678c1481144fbdb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AppBasic.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_app_basic_8h</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
    <member kind="variable">
      <type></type>
      <name>__pad0__</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a3aaa20e3953abddfe255492f45082fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BooleanAndEventCombiner</type>
      <name>EventSignalShouldQuit</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>ac203ec26a44dbda34030a8c15b85dca4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AppCocoaTouch.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_app_cocoa_touch_8h</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
    <member kind="enumeration">
      <type></type>
      <name>InterfaceOrientation</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1e19beaf18c41d11111186e34c5c9588</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Unknown</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1e19beaf18c41d11111186e34c5c9588ab4febc60aa25dca244a378932eb0cdf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Portrait</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1e19beaf18c41d11111186e34c5c9588af3edf95f4407e48b13d615167f301f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PortraitUpsideDown</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1e19beaf18c41d11111186e34c5c9588ac8f424c9cef950f20750dca9e2d8c36d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LandscapeLeft</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1e19beaf18c41d11111186e34c5c9588ad505e6aaa43959b776ac0192c4b058b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LandscapeRight</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1e19beaf18c41d11111186e34c5c9588a0aab4c75704e315b3492910ea2a1954b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PortraitAll</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1e19beaf18c41d11111186e34c5c9588afedd797e44be66da25ac679ec6e0b8a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LandscapeAll</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1e19beaf18c41d11111186e34c5c9588a8988a5cab65e97c7a39ef1a6863a3011</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>All</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1e19beaf18c41d11111186e34c5c9588a17d75410cc1dc2880e52758e3dc9aa8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BitwiseAndEventCombiner&lt; uint32_t &gt;</type>
      <name>EventSignalSupportedOrientations</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a85973d651490d206a0d9881567c45620</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AppCocoaView.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_app_cocoa_view_8h</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
  </compound>
  <compound kind="file">
    <name>AppImplCocoaBasic.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_app_impl_cocoa_basic_8h</filename>
  </compound>
  <compound kind="file">
    <name>AppImplCocoaRendererGl.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_app_impl_cocoa_renderer_gl_8h</filename>
  </compound>
  <compound kind="file">
    <name>AppImplCocoaRendererQuartz.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_app_impl_cocoa_renderer_quartz_8h</filename>
  </compound>
  <compound kind="file">
    <name>AppImplCocoaScreenSaver.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_app_impl_cocoa_screen_saver_8h</filename>
    <class kind="class">AppImplCocoaScreenSaver</class>
  </compound>
  <compound kind="file">
    <name>AppImplCocoaTouchRendererGl.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_app_impl_cocoa_touch_renderer_gl_8h</filename>
  </compound>
  <compound kind="file">
    <name>AppImplCocoaTouchRendererQuartz.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_app_impl_cocoa_touch_renderer_quartz_8h</filename>
  </compound>
  <compound kind="file">
    <name>AppImplMsw.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_app_impl_msw_8h</filename>
    <class kind="struct">tagTOUCHINPUT</class>
    <class kind="class">cinder::app::AppImplMsw</class>
    <class kind="class">cinder::app::WindowImplMsw</class>
    <class kind="class">cinder::app::BlankingWindow</class>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
    <member kind="typedef">
      <type>struct tagTOUCHINPUT</type>
      <name>TOUCHINPUT</name>
      <anchorfile>_app_impl_msw_8h.html</anchorfile>
      <anchor>a2defbb7fef9594a8a3365614390665a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct tagTOUCHINPUT *</type>
      <name>PTOUCHINPUT</name>
      <anchorfile>_app_impl_msw_8h.html</anchorfile>
      <anchor>a5069001ef648b52ba447a7bab10d537c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TOUCHINPUT const *</type>
      <name>PCTOUCHINPUT</name>
      <anchorfile>_app_impl_msw_8h.html</anchorfile>
      <anchor>a6c68aa5e707e3391e11635d3522bd3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class BlankingWindow &gt;</type>
      <name>BlankingWindowRef</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a97fd1ac1b2206c380778a9a8185532a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DECLARE_HANDLE</name>
      <anchorfile>_app_impl_msw_8h.html</anchorfile>
      <anchor>af04a8b6a475beb5a113fd00e0067a6f5</anchor>
      <arglist>(HTOUCHINPUT)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AppImplMswBasic.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_app_impl_msw_basic_8h</filename>
    <class kind="class">cinder::app::AppImplMswBasic</class>
    <class kind="class">cinder::app::WindowImplMswBasic</class>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
  </compound>
  <compound kind="file">
    <name>AppImplMswRenderer.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_app_impl_msw_renderer_8h</filename>
    <class kind="class">cinder::app::AppImplMswRenderer</class>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
  </compound>
  <compound kind="file">
    <name>AppImplMswRendererGdi.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_app_impl_msw_renderer_gdi_8h</filename>
    <class kind="class">cinder::app::AppImplMswRendererGdi</class>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
  </compound>
  <compound kind="file">
    <name>AppImplMswRendererGl.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_app_impl_msw_renderer_gl_8h</filename>
    <class kind="class">cinder::app::AppImplMswRendererGl</class>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
  </compound>
  <compound kind="file">
    <name>AppImplMswScreenSaver.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_app_impl_msw_screen_saver_8h</filename>
    <class kind="class">cinder::app::AppImplMswScreenSaver</class>
    <class kind="class">cinder::app::WindowImplMswScreenSaver</class>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
  </compound>
  <compound kind="file">
    <name>AppNative.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_app_native_8h</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
    <member kind="typedef">
      <type>AppBasic</type>
      <name>AppNative</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>aba1cfc1d6453b74bfe98c135ca3a83e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AppScreenSaver.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_app_screen_saver_8h</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
    <member kind="function">
      <type>C cinder::app::AppScreenSaver *</type>
      <name>ScreenSaverFactoryMethod</name>
      <anchorfile>_app_screen_saver_8h.html</anchorfile>
      <anchor>a419e102107033a8f6074df3f52605fb3</anchor>
      <arglist>(void *impl)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CinderView.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_cinder_view_8h</filename>
    <class kind="protocol">CinderViewDelegate-p</class>
  </compound>
  <compound kind="file">
    <name>CinderViewCocoaTouch.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_cinder_view_cocoa_touch_8h</filename>
    <class kind="protocol">CinderViewCocoaTouchDelegate-p</class>
  </compound>
  <compound kind="file">
    <name>Event.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_event_8h</filename>
    <class kind="struct">cinder::app::EventCombiner</class>
    <class kind="class">cinder::app::Event</class>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Window &gt;</type>
      <name>WindowRef</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a174fc1a532214ee1c6709836e30dfb55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FileDropEvent.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_file_drop_event_8h</filename>
    <class kind="class">cinder::app::FileDropEvent</class>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a53bc4602c1a1b0568d8d77ea12572b61</anchor>
      <arglist>(std::ostream &amp;out, const FileDropEvent &amp;event)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KeyEvent.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_key_event_8h</filename>
    <class kind="class">cinder::app::KeyEvent</class>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
  </compound>
  <compound kind="file">
    <name>MouseEvent.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_mouse_event_8h</filename>
    <class kind="class">cinder::app::MouseEvent</class>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
  </compound>
  <compound kind="file">
    <name>Renderer.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_renderer_8h</filename>
    <class kind="class">cinder::app::Renderer</class>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
    <member kind="typedef">
      <type>struct _CGLContextObject *</type>
      <name>CGLContextObj</name>
      <anchorfile>_renderer_8h.html</anchorfile>
      <anchor>a5b0a3a409f962ed24f2808f44a1e73ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _CGLPixelFormatObject *</type>
      <name>CGLPixelFormatObj</name>
      <anchorfile>_renderer_8h.html</anchorfile>
      <anchor>a39e57807166ee8c72ed0e6ef84012e0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct CGContext *</type>
      <name>CGContextRef</name>
      <anchorfile>_renderer_8h.html</anchorfile>
      <anchor>a7aa3016a6bdc581ba1aab0bfe283e166</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class Renderer &gt;</type>
      <name>RendererRef</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>ac0853b8cebb1960f1e447a9ee702e6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class RendererGl &gt;</type>
      <name>RendererGlRef</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>ab93a6c43656f0e9b6c073d9af543123b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TouchEvent.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_touch_event_8h</filename>
    <class kind="class">cinder::app::TouchEvent</class>
    <class kind="class">cinder::app::TouchEvent::Touch</class>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>adbc1c49973da95cc8de67019be9f92c8</anchor>
      <arglist>(std::ostream &amp;out, const TouchEvent::Touch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a95e76bc0770eb6f21f7143884ba16d87</anchor>
      <arglist>(std::ostream &amp;out, const TouchEvent &amp;event)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Window.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>_window_8h</filename>
    <class kind="protocol">WindowImplCocoa-p</class>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
    <member kind="variable">
      <type>EventCombiner&lt; MouseEvent &gt;</type>
      <name>EventSignalMouse</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a15f2dcd8edde81a939e76b6ef9a6720f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>__pad1__</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a8cfe450355148a0afdaeac62db7c0e5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EventCombiner&lt; TouchEvent &gt;</type>
      <name>EventSignalTouch</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1d208a6ec662442765a76243b5541f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>__pad2__</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>ae6f74488fb7130c0de5c1bc4f87ab894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EventCombiner&lt; KeyEvent &gt;</type>
      <name>EventSignalKey</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a90b2776e78df7849cbdb04f6aaf60cb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>__pad3__</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a73fbc38f0cd8b63c675d7e2d87f59722</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EventCombiner&lt; FileDropEvent &gt;</type>
      <name>EventSignalFileDrop</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a6538af004eddca7dc3025f61378565e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>__pad4__</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>afb4ef5aa5770e3d273623448ffb9b265</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Arcball.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_arcball_8h</filename>
    <class kind="class">cinder::Arcball</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Area.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_area_8h</filename>
    <class kind="class">cinder::RectT</class>
    <class kind="class">cinder::Area</class>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>pair&lt; Area, Vec2i &gt;</type>
      <name>clippedSrcDst</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>af91512ff3a962a41682cf7f51296ddbd</anchor>
      <arglist>(const Area &amp;srcSurfaceBounds, const Area &amp;srcArea, const Area &amp;dstSurfaceBounds, const Vec2i &amp;dstLT)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Callback.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/audio/</path>
    <filename>_callback_8h</filename>
    <class kind="class">cinder::audio::LoaderSourceCallback</class>
    <class kind="class">cinder::audio::Callback</class>
    <class kind="class">cinder::audio::LoaderSourceCallback</class>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
    <member kind="function">
      <type>std::shared_ptr&lt; Callback&lt; T, U &gt; &gt;</type>
      <name>createCallback</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a5614cbce261d8a25f72fb3321e52e878</anchor>
      <arglist>(T *callbackObj, void(T::*callbackFn)(uint64_t inSampleOffset, uint32_t inSampleCount, BufferT&lt; U &gt; *ioBuffer), bool ownCallbackObj=false, uint32_t aSampleRate=44100, uint16_t aChannelCount=2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CircularBuffer.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/audio/</path>
    <filename>_circular_buffer_8h</filename>
    <class kind="class">cinder::audio::CircularBuffer</class>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
  </compound>
  <compound kind="file">
    <name>CocoaCaConverter.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/audio/</path>
    <filename>_cocoa_ca_converter_8h</filename>
    <class kind="class">cinder::audio::CocoaCaConverter</class>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
  </compound>
  <compound kind="file">
    <name>FftProcessor.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/audio/</path>
    <filename>_fft_processor_8h</filename>
    <class kind="class">cinder::audio::FftProcessorImpl</class>
    <class kind="class">cinder::audio::FftProcessor</class>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class FftProcessor &gt;</type>
      <name>FftProcessorRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>acae2a72b999c2c1f6abbd1cbba77b965</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; float &gt;</type>
      <name>calculateFft</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a6a5af388a78f29c7e08ae536f9fe0950</anchor>
      <arglist>(Buffer32fRef aBuffer, uint16_t aBandCount)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FftProcessorImplAccelerate.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/audio/</path>
    <filename>_fft_processor_impl_accelerate_8h</filename>
    <class kind="class">cinder::audio::FftProcessorImplAccelerate</class>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
  </compound>
  <compound kind="file">
    <name>Input.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/audio/</path>
    <filename>_input_8h</filename>
    <class kind="class">cinder::audio::Input</class>
    <class kind="class">cinder::audio::InputExc</class>
    <class kind="class">cinder::audio::InvalidDeviceInputExc</class>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; InputDevice &gt;</type>
      <name>InputDeviceRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a484d1198972361a905be10136a2817b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InputImplAudioUnit.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/audio/</path>
    <filename>_input_impl_audio_unit_8h</filename>
    <class kind="class">cinder::audio::InputImplAudioUnit</class>
    <class kind="class">cinder::audio::InputImplAudioUnit::Device</class>
    <class kind="class">cinder::audio::InputImplAudioUnit::Device</class>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
  </compound>
  <compound kind="file">
    <name>Io.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/audio/</path>
    <filename>_io_8h</filename>
    <class kind="class">cinder::audio::Io</class>
    <class kind="class">cinder::audio::Target</class>
    <class kind="class">cinder::audio::Source</class>
    <class kind="class">cinder::audio::Loader</class>
    <class kind="class">cinder::audio::IoException</class>
    <class kind="class">cinder::audio::IoExceptionFailedLoad</class>
    <class kind="class">cinder::audio::IoExceptionSourceNotFound</class>
    <class kind="class">cinder::audio::IoExceptionUnsupportedDataType</class>
    <class kind="class">cinder::audio::IoExceptionUnsupportedDataFormat</class>
    <class kind="struct">cinder::audio::IoRegistrar</class>
    <class kind="struct">cinder::audio::IoRegistrant</class>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class Source &gt;</type>
      <name>SourceRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>ab7d4b1fe91a68a0c2c940dd7c23ae02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class Target &gt;</type>
      <name>TargetRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a4f25a52551fda15ec52bb9374d140423</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class Loader &gt;</type>
      <name>LoaderRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a6337b56d4de52ccd8c13d1a48ff062ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HRESULT(*</type>
      <name>LoaderDataCallback</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a78e91307e5b04f000feb02d042205be0</anchor>
      <arglist>)(void *audioData, uint32_t dataSize, void *track, uint64_t sampleTime, uint32_t sampleDuration)</arglist>
    </member>
    <member kind="function">
      <type>SourceRef</type>
      <name>load</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a71a6f579c46fcbee416f53d492659913</anchor>
      <arglist>(const std::string &amp;path, std::string extension=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>SourceRef</type>
      <name>load</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>ad161d0384fac997ae448920d9b1c2b08</anchor>
      <arglist>(DataSourceRef dataSource, std::string extension=&quot;&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Output.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/audio/</path>
    <filename>_output_8h</filename>
    <class kind="class">cinder::audio::Track</class>
    <class kind="class">cinder::audio::OutputImpl</class>
    <class kind="class">cinder::audio::Output</class>
    <class kind="class">cinder::audio::OutputException</class>
    <class kind="class">cinder::audio::OutOfTracksException</class>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
    <member kind="typedef">
      <type>int32_t</type>
      <name>TrackId</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a52f950a215e17b4764484c15a0fdf47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class cinder::audio::Track &gt;</type>
      <name>TrackRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a0d4f8fef341ddf26a23aa04f0c4991b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OutputImplAudioUnit.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/audio/</path>
    <filename>_output_impl_audio_unit_8h</filename>
    <class kind="class">cinder::audio::TargetOutputImplAudioUnit</class>
    <class kind="class">cinder::audio::OutputImplAudioUnit</class>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
  </compound>
  <compound kind="file">
    <name>OutputImplXAudio.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/audio/</path>
    <filename>_output_impl_x_audio_8h</filename>
    <class kind="class">cinder::audio::TargetOutputImplXAudio</class>
    <class kind="class">cinder::audio::OutputImplXAudio</class>
    <class kind="class">cinder::audio::OutputImplXAudio::Track</class>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
  </compound>
  <compound kind="file">
    <name>PcmBuffer.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/audio/</path>
    <filename>_pcm_buffer_8h</filename>
    <class kind="struct">cinder::audio::BufferT</class>
    <class kind="struct">cinder::audio::BufferListT</class>
    <class kind="class">cinder::audio::PcmBufferT</class>
    <class kind="class">cinder::audio::PcmBufferException</class>
    <class kind="class">cinder::audio::InvalidChannelPcmBufferException</class>
    <class kind="class">cinder::audio::OutOfRangePcmBufferException</class>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
    <member kind="typedef">
      <type>enum cinder::audio::ChannelIdentifier</type>
      <name>ChannelIdentifier</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>ac508d0ce6b1b1f5aaec602dfdcf63c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferT&lt; void &gt;</type>
      <name>BufferGeneric</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a8c8514772b4d44ad7f47f1dee58f2b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferT&lt; uint8_t &gt;</type>
      <name>Buffer8u</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a101d6a024c6c4bd0595b60167c2b9cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferT&lt; int8_t &gt;</type>
      <name>Buffer8i</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a0be141e33c7bc67947649f81edb35803</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferT&lt; uint16_t &gt;</type>
      <name>Buffer16u</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a751f44fc722be2db190b312856c51694</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferT&lt; int16_t &gt;</type>
      <name>Buffer16i</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>abf928cf033267dbd0a0a2f019707aeb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferT&lt; int32_t &gt;</type>
      <name>Buffer32i</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a0bf244baa09f4801e93ed942e52866d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferT&lt; uint32_t &gt;</type>
      <name>Buffer32u</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a6075f70f94728d59a1c70e579482b99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferT&lt; float &gt;</type>
      <name>Buffer32f</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>af3c21f226a016d532ffe43fe52a7aea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BufferT&lt; float &gt; &gt;</type>
      <name>Buffer32fRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a4ec75c5c56f501a9fca6d890d085f338</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferListT&lt; void &gt;</type>
      <name>BufferList</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>ab1fa59c8df393e231a3696d86553b3d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferListT&lt; float &gt;</type>
      <name>BufferList32f</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a468e7f7ecb9275d22465db9cc91c225c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BufferList32f &gt;</type>
      <name>BufferList32fRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>af9775f8e6ef105ecae8fa7b4e75a8843</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PcmBufferT&lt; float &gt;</type>
      <name>PcmBuffer32f</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>ac53cba7fe139d383e383e39efecd184f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; PcmBuffer32f &gt;</type>
      <name>PcmBuffer32fRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>aeffed732a048fdec550d4af2fd03ae31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ChannelIdentifier</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a8fdfd3e4f82c33e1d27d4ff144285774</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHANNEL_FRONT_LEFT</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a8fdfd3e4f82c33e1d27d4ff144285774aec80148f1564971dd558b558bb225b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHANNEL_FRONT_RIGHT</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a8fdfd3e4f82c33e1d27d4ff144285774a8d2456cc6c09dc3ea0a25db593aa0eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>silenceBuffers</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>af986afc385f4791e0bf89d24c5fbf78d</anchor>
      <arglist>(BufferList *aBufferList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteBuffer</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>abe628b8bdeca67efcc407327f1403ffb</anchor>
      <arglist>(BufferT&lt; T &gt; *aBuffer)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; BufferListT&lt; T &gt; &gt;</type>
      <name>createBufferList</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a267f308a9190dd9cf693bd693b38040a</anchor>
      <arglist>(uint32_t sampleCount, uint16_t channelCount, bool isInterleaved)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteBufferList</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a83a977dc921cb0f709063f52cff37435</anchor>
      <arglist>(BufferListT&lt; T &gt; *aBufferList)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SourceFile.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/audio/</path>
    <filename>_source_file_8h</filename>
    <class kind="class">cinder::audio::LoaderSourceFile</class>
    <class kind="class">cinder::audio::SourceFile</class>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class SourceFile &gt;</type>
      <name>SourceFileRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>abe5b8ef165f01d450f1dfd17f186c483</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class LoaderSourceFile &gt;</type>
      <name>LoaderSourceFileRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a4993a96a1c4996c58f724016d7721a90</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SourceFileWav.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/audio/</path>
    <filename>_source_file_wav_8h</filename>
    <class kind="class">cinder::audio::LoaderSourceFileWav</class>
    <class kind="class">cinder::audio::SourceFileWav</class>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class SourceFileWav &gt;</type>
      <name>SourceFileWavRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a70cb06afb5b273f6923732fa03820a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class LoaderSourceFileWav &gt;</type>
      <name>LoaderSourceFileWavRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a08411a1165b2762f1e59256aaff32b7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SourceFileWindowsMedia.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/audio/</path>
    <filename>_source_file_windows_media_8h</filename>
    <class kind="class">cinder::audio::LoaderSourceFileWindowsMedia</class>
    <class kind="class">cinder::audio::SourceFileWindowsMedia</class>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class SourceFileWindowsMedia &gt;</type>
      <name>SourceFileWindowsMediaRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>abbf912b5b3e95836b114f88b9f6c3eef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class LoaderSourceFileWindowsMedia &gt;</type>
      <name>LoaderSourceFileWindowsMediaRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a3353f59285df9da38d4390b8648a0b2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AxisAlignedBox.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_axis_aligned_box_8h</filename>
    <class kind="class">cinder::AxisAlignedBox3f</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>BandedMatrix.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_banded_matrix_8h</filename>
    <class kind="class">cinder::BandedMatrix</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>BandedMatrix&lt; float &gt;</type>
      <name>BandedMatrixf</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4acf2e2bc83a66a0e405fde00c2a82de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BandedMatrix&lt; double &gt;</type>
      <name>BandedMatrixd</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a582c91052512906459ce2eae364f1c63</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Base64.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_base64_8h</filename>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>toBase64</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a8841b796ca305d493be56a368289c63c</anchor>
      <arglist>(const std::string &amp;input, int charsPerLine=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toBase64</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a7368373544e97253ba9c8dbebccd548e</anchor>
      <arglist>(const Buffer &amp;input, int charsPerLine=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toBase64</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a77e21721709ec967013bbc7171e78413</anchor>
      <arglist>(const void *input, size_t inputSize, int charsPerLine=0)</arglist>
    </member>
    <member kind="function">
      <type>Buffer</type>
      <name>fromBase64</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a84c1f015347ec232442b63a6c1464b15</anchor>
      <arglist>(const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>Buffer</type>
      <name>fromBase64</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a573f9808147d6c9e45f77dbf60f20c49</anchor>
      <arglist>(const Buffer &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>Buffer</type>
      <name>fromBase64</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a39acecf05dcb4c37d9fb36fa1d2ffed5</anchor>
      <arglist>(const void *input, size_t inputSize)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BSpline.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_b_spline_8h</filename>
    <class kind="class">cinder::BSplineBasis</class>
    <class kind="class">cinder::BSpline</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>BSpline&lt; Vec2f &gt;</type>
      <name>BSpline2f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4f457a2b8d99ab115bd1316ef461854b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BSpline&lt; Vec3f &gt;</type>
      <name>BSpline3f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>af881eef1dc044d32b8d7ce9f226fe21e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BSplineFit.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_b_spline_fit_8h</filename>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>BSpline&lt; T &gt;</type>
      <name>fitBSpline</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a42536dadeb39f694b31e42bfdf8e5013</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;samples, int degree, int outputSamples)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Buffer.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_buffer_8h</filename>
    <class kind="class">cinder::Buffer</class>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>Buffer</type>
      <name>compressBuffer</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5732b504521585d47ff4a5882c6a7d7a</anchor>
      <arglist>(const Buffer &amp;aBuffer, int8_t compressionLevel, bool resizeResult)</arglist>
    </member>
    <member kind="function">
      <type>Buffer</type>
      <name>decompressBuffer</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>acbb53753d5980aff0d29f485fc43b26e</anchor>
      <arglist>(const Buffer &amp;aBuffer, bool resizeResult, bool useGZip)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Camera.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_camera_8h</filename>
    <class kind="class">cinder::Camera</class>
    <class kind="class">cinder::CameraPersp</class>
    <class kind="class">cinder::CameraOrtho</class>
    <class kind="class">cinder::CameraStereo</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Capture.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_capture_8h</filename>
    <class kind="class">cinder::Capture</class>
    <class kind="class">cinder::Capture::Device</class>
    <class kind="struct">cinder::Capture::Obj</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class Capture &gt;</type>
      <name>CaptureRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aa0967d1963a3e51cbdad1fda8dddf36d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaptureImplAvFoundation.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_capture_impl_av_foundation_8h</filename>
    <class kind="class">cinder::CaptureImplAvFoundationDevice</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>CaptureImplCocoaDummy.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_capture_impl_cocoa_dummy_8h</filename>
    <class kind="class">cinder::CaptureImplCocoaDummyDevice</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>CaptureImplDirectShow.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_capture_impl_direct_show_8h</filename>
    <class kind="class">cinder::CaptureImplDirectShow</class>
    <class kind="class">cinder::CaptureImplDirectShow::Device</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>CaptureImplQtKit.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_capture_impl_qt_kit_8h</filename>
    <class kind="class">cinder::CaptureImplQtKitDevice</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Channel.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_channel_8h</filename>
    <class kind="class">cinder::ChannelT</class>
    <class kind="class">cinder::ChannelT::Iter</class>
    <class kind="class">cinder::ChannelT::ConstIter</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageSource &gt;</type>
      <name>ImageSourceRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aca11590d504e68de86f3a57444c2eb70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ChannelT&lt; uint8_t &gt;</type>
      <name>Channel</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a01a19731f74d719ca973b24d0567373f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ChannelT&lt; uint8_t &gt;</type>
      <name>Channel8u</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1870220d9d40c02c4cf4ff135b22f3ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ChannelT&lt; uint16_t &gt;</type>
      <name>Channel16u</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a91dd9a6adc754492cb14be54f49d589f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ChannelT&lt; float &gt;</type>
      <name>Channel32f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a55542066ef5e4df2176ef692419aa2dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ChanTraits.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_chan_traits_8h</filename>
    <class kind="struct">cinder::CHANTRAIT</class>
    <class kind="struct">cinder::CHANTRAIT&lt; uint8_t &gt;</class>
    <class kind="struct">cinder::CHANTRAIT&lt; uint16_t &gt;</class>
    <class kind="struct">cinder::CHANTRAIT&lt; float &gt;</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Cinder.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_cinder_8h</filename>
    <namespace>cinder</namespace>
    <member kind="variable">
      <type>namespace</type>
      <name>ci</name>
      <anchorfile>_cinder_8h.html</anchorfile>
      <anchor>ad7c72989de97de796f20842b495a71f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CinderMath.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_cinder_math_8h</filename>
    <class kind="struct">cinder::math</class>
    <class kind="struct">cinder::math&lt; float &gt;</class>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>float</type>
      <name>toRadians</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a58fcd32682c783702ba286c45461ef0a</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>toRadians</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a58d7e5dcc9af7b7126244d563ce7ccf2</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toDegrees</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a15dd7288be984f011acc0ce3d94d6094</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>toDegrees</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a7d491d9648b463ff7e6c2bdd7796843f</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lerp</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab5ba4695d2834e0a5ae92239967e6884</anchor>
      <arglist>(const T &amp;a, const T &amp;b, L factor)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lmap</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>af7f7062e11558323dd6d478b3ab75806</anchor>
      <arglist>(T val, T inMin, T inMax, T outMin, T outMax)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bezierInterp</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>af802093fd5b545817598a52b7a03c934</anchor>
      <arglist>(T a, T b, T c, T d, L t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bezierInterpRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a0424bbbeed35858cb84c757bd2af2503</anchor>
      <arglist>(const T &amp;a, const T &amp;b, const T &amp;c, const T &amp;d, L t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>constrain</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a8f2890f3e88827988771e37f9954bd29</anchor>
      <arglist>(T val, T minVal, T maxVal)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sinx_over_x</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a392089cbf345bd89da084a54c45fb385</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>log2floor</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>abdf2e5797e2b8111a03ee3ab0a20e3a1</anchor>
      <arglist>(uint32_t x)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>log2ceil</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4a4fb9612a16029e421ca1356603387d</anchor>
      <arglist>(uint32_t x)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>nextPowerOf2</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6bfdf96389bcb6fe80b91ee5eddbbd4d</anchor>
      <arglist>(uint32_t x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solveLinear</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab3bf9f8700dbc0abe80aef923810c5d3</anchor>
      <arglist>(T a, T b, T result[1])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solveQuadratic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a10cc7dbd84b34468b626f9db35dbd353</anchor>
      <arglist>(T a, T b, T c, T result[2])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solveCubic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a9e1ccfc2c09536517cffb2a3563826a9</anchor>
      <arglist>(T a, T b, T c, T d, T result[3])</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>EPSILON_VALUE</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a9281e216c0a051535fd4382246debff0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CinderResources.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_cinder_resources_8h</filename>
  </compound>
  <compound kind="file">
    <name>Clipboard.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_clipboard_8h</filename>
    <class kind="class">cinder::Clipboard</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>CinderCocoa.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/cocoa/</path>
    <filename>_cinder_cocoa_8h</filename>
    <class kind="class">cinder::cocoa::SafeNsString</class>
    <class kind="class">cinder::cocoa::SafeNsData</class>
    <class kind="class">cinder::cocoa::SafeNsAutoreleasePool</class>
    <namespace>cinder</namespace>
    <namespace>cinder::cocoa</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; struct __CFString &gt;</type>
      <name>SafeCfString</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>abaa4987f1249360cec40dd23f99902b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageSourceCgImage &gt;</type>
      <name>ImageSourceCgImageRef</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a941445731c9ea96ab644711ad9ff654d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>safeCfRelease</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>ab780329d073b3477b1789a9fc0c42bf0</anchor>
      <arglist>(const CFTypeRef cfRef)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>safeCocoaRelease</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a4b52b404e162f913cf47bde4fe9987a3</anchor>
      <arglist>(void *nsObject)</arglist>
    </member>
    <member kind="function">
      <type>CGContextRef</type>
      <name>createCgBitmapContext</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a68e52c84a0469f51a84cc2103289fe0e</anchor>
      <arglist>(const Surface8u &amp;surface)</arglist>
    </member>
    <member kind="function">
      <type>CGContextRef</type>
      <name>getWindowContext</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>af85e55ad00907aae72d5d48d46310da6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Surface8u</type>
      <name>convertNsBitmapDataRep</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a1ff7538b0e2cc11ec6a80bc0acaeea50</anchor>
      <arglist>(const NSBitmapImageRep *rep, bool assumeOwnership=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convertCfString</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>acae25ccc339a777367d894ef8c6a9587</anchor>
      <arglist>(CFStringRef str)</arglist>
    </member>
    <member kind="function">
      <type>CFStringRef</type>
      <name>createCfString</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a1ddcb6e6efe5afe5d4bd21f2e29d84b0</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>SafeCfString</type>
      <name>createSafeCfString</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a88db0ccda4fe1cb11ea2b78c86bffe78</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convertNsString</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a3b73659a87bc7e00046cb89aa32ccbed</anchor>
      <arglist>(NSString *str)</arglist>
    </member>
    <member kind="function">
      <type>CFURLRef</type>
      <name>createCfUrl</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a4a09ce61e00d3ccbe4e9ab384eb8d06d</anchor>
      <arglist>(const cinder::Url &amp;url)</arglist>
    </member>
    <member kind="function">
      <type>CFAttributedStringRef</type>
      <name>createCfAttributedString</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>af9a038a31df75f7f6a5fef7b50cbb1b8</anchor>
      <arglist>(const std::string &amp;str, const cinder::Font &amp;font, const ColorA &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>CFAttributedStringRef</type>
      <name>createCfAttributedString</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a8ce49ba3b5f8eea1a2dbb4daa74b80bb</anchor>
      <arglist>(const std::string &amp;str, const cinder::Font &amp;font, const ColorA &amp;color, bool ligate)</arglist>
    </member>
    <member kind="function">
      <type>CGColorRef</type>
      <name>createCgColor</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a021f161b77c405922c4c34d4d3524d60</anchor>
      <arglist>(const Color &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>CGColorRef</type>
      <name>createCgColor</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a2e3410eb17e519fed8649c3b0e62a332</anchor>
      <arglist>(const ColorA &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>CGRect</type>
      <name>createCgRect</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>ac36c036a81203213106c3fcd2f9dff3c</anchor>
      <arglist>(const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>CgRectToArea</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a5c94d3c9efa228bd8faddba0d2b58d3a</anchor>
      <arglist>(const CGRect &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>CGSize</type>
      <name>createCgSize</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a7212bb3b2977e6de9d40be9455a69b3f</anchor>
      <arglist>(const Vec2i &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>CGSize</type>
      <name>createCgSize</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a8cbc4b513560dab46ea9426893230b80</anchor>
      <arglist>(const Vec2f &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertCgPath</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>ab2488133691d9534e4d64fa81879c0bc</anchor>
      <arglist>(CGPathRef cgPath, Shape2d *resultShape, bool flipVertical=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCvPixelFormatTypeFromSurfaceChannelOrder</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a1302c5fcbf511bfe2a787a6d0fa77fe7</anchor>
      <arglist>(const SurfaceChannelOrder &amp;sco)</arglist>
    </member>
    <member kind="function">
      <type>CFDataRef</type>
      <name>createCfDataRef</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a4621271b8dd0e6d8f19311ba48e5241d</anchor>
      <arglist>(const cinder::Buffer &amp;buffer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CinderCocoaTouch.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/cocoa/</path>
    <filename>_cinder_cocoa_touch_8h</filename>
    <class kind="class">cinder::cocoa::SafeUiImage</class>
    <namespace>cinder</namespace>
    <namespace>cinder::cocoa</namespace>
    <member kind="function">
      <type>Surface8u</type>
      <name>convertUiImage</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a66d03723aafbd0d34291b3b09040efcc</anchor>
      <arglist>(UIImage *uiImage, bool assumeOwnership=false)</arglist>
    </member>
    <member kind="function">
      <type>SafeUiImage</type>
      <name>createUiImage</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>abf3aea6c2c02b9fa1be4d827ebfa28cb</anchor>
      <arglist>(const ImageSourceRef imageSource)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeToSavedPhotosAlbum</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>aae9f44096ff909f0ca5af4f954156ab7</anchor>
      <arglist>(const ImageSourceRef imageSource)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Color.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_color_8h</filename>
    <class kind="class">cinder::ColorT</class>
    <class kind="class">cinder::ColorAT</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>ColorT&lt; float &gt;</type>
      <name>Color</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a957e45ea5178e7c7264bfe19ba91992b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ColorT&lt; float &gt;</type>
      <name>Colorf</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a37f78dd41b0dd9c37cec5007055181de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ColorT&lt; uint8_t &gt;</type>
      <name>Color8u</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a0c860907658a359cf5cfc87639998563</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ColorAT&lt; float &gt;</type>
      <name>ColorA</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a13f71c63cea5bb08f5d971d72fbf6a09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ColorAT&lt; float &gt;</type>
      <name>ColorAf</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac4f81fbed94173c020008c7fd066fdca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ColorAT&lt; uint8_t &gt;</type>
      <name>ColorA8u</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad0f6124d9a275729dfecaa7f4f2774e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ColorModel</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5092f51b2e343b235efb131db224da80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CM_RGB</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5092f51b2e343b235efb131db224da80ae7b4bcdb80ed0b225ea2ecffc61aed91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CM_HSV</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5092f51b2e343b235efb131db224da80a2a413968d599720022665839ba3fffb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ColorT&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4c8d3f8fe316acc15e4f144f37f562c8</anchor>
      <arglist>(Y s, const ColorT&lt; T &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>ColorAT&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>afcf72d08feeb11c3114050530dc265e4</anchor>
      <arglist>(Y s, const ColorAT&lt; T &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>Colorf</type>
      <name>hsvToRGB</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad627ee892a85f4f7b20fa094c879427c</anchor>
      <arglist>(const Vec3f &amp;hsv)</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>rgbToHSV</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a632321978b47c840213ac98c81d2eea0</anchor>
      <arglist>(const Colorf &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5bcbe587c4e08df583013092cce963f9</anchor>
      <arglist>(std::ostream &amp;lhs, const ColorT&lt; float &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a047613bd717a0a87431989fecfce1781</anchor>
      <arglist>(std::ostream &amp;lhs, const ColorAT&lt; float &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a9066b34c941dc78d4a39fbd7aeec553a</anchor>
      <arglist>(std::ostream &amp;lhs, const ColorT&lt; uint8_t &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ade77e8174dd97899554b42fd2f7d048c</anchor>
      <arglist>(std::ostream &amp;lhs, const ColorAT&lt; uint8_t &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConcurrentCircularBuffer.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_concurrent_circular_buffer_8h</filename>
    <class kind="class">cinder::ConcurrentCircularBuffer</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>ConvexHull.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_convex_hull_8h</filename>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>PolyLine2f</type>
      <name>calcConvexHull</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a052b9449d2ea491f999cd47eb8dee06a</anchor>
      <arglist>(const std::vector&lt; Vec2f &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>PolyLine2f</type>
      <name>calcConvexHull</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab7f5fa62477895da8e125629bb9717db</anchor>
      <arglist>(const Vec2f *points, size_t numPoints)</arglist>
    </member>
    <member kind="function">
      <type>PolyLine2f</type>
      <name>calcConvexHull</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab6b42220f9858667a79421eac2e37760</anchor>
      <arglist>(const Shape2d &amp;shape)</arglist>
    </member>
    <member kind="function">
      <type>PolyLine2f</type>
      <name>calcConvexHull</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6642f6337dcd97cf57e0d4f057d601e7</anchor>
      <arglist>(const Path2d &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>PolyLine2f</type>
      <name>calcConvexHull</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1d709510392e9741a5ab5295f910aa03</anchor>
      <arglist>(const PolyLine2f &amp;polyLine)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DataSource.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_data_source_8h</filename>
    <class kind="class">cinder::DataSource</class>
    <class kind="class">cinder::DataSourcePath</class>
    <class kind="class">cinder::DataSourceUrl</class>
    <class kind="class">cinder::DataSourceBuffer</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class DataSource &gt;</type>
      <name>DataSourceRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>abf9b2897625343b11326b9e785d44fc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class DataSourcePath &gt;</type>
      <name>DataSourcePathRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5fc82ff55b90ff558594b4c9655575f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class DataSourceUrl &gt;</type>
      <name>DataSourceUrlRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a93ced4993f8378d8ad5f28c7338b343d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class DataSourceBuffer &gt;</type>
      <name>DataSourceBufferRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac03726349c1b445f28f939f9768571c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>DataSourceRef</type>
      <name>loadFile</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5914d1dcf8a37d479ed1186326a8eae7</anchor>
      <arglist>(const fs::path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>DataSourceRef</type>
      <name>loadUrl</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad213a3dfdd12dc114836664756ce28ca</anchor>
      <arglist>(const Url &amp;url, const UrlOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>DataSourceRef</type>
      <name>loadUrl</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a87eaee595ba54a4e230096ef654222a9</anchor>
      <arglist>(const std::string &amp;urlString, const UrlOptions &amp;options=UrlOptions())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DataTarget.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_data_target_8h</filename>
    <class kind="class">cinder::DataTarget</class>
    <class kind="class">cinder::DataTargetPath</class>
    <class kind="class">cinder::DataTargetStream</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class DataTarget &gt;</type>
      <name>DataTargetRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a7fd1772289ec39e6cef6da865f4c5161</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class DataTargetPath &gt;</type>
      <name>DataTargetPathRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac169764013541dad8f518ca4ed474e80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class DataTargetStream &gt;</type>
      <name>DataTargetStreamRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a3f1aaab3d6b81532c2f393409471bba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>DataTargetPathRef</type>
      <name>writeFile</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1262c33ede2938ea16f22143758f96bb</anchor>
      <arglist>(const fs::path &amp;path, bool createParents=true)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Display.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_display_8h</filename>
    <class kind="class">cinder::Display</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>CGDirectDisplayID</name>
      <anchorfile>_display_8h.html</anchorfile>
      <anchor>a68108ec63c0f14d3f07ba43d377d28e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class Display &gt;</type>
      <name>DisplayRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a57f2c2374c4301b55bc5f6ded77d3ad4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Easing.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_easing_8h</filename>
    <class kind="struct">cinder::EaseNone</class>
    <class kind="struct">cinder::EaseInQuad</class>
    <class kind="struct">cinder::EaseOutQuad</class>
    <class kind="struct">cinder::EaseInOutQuad</class>
    <class kind="struct">cinder::EaseOutInQuad</class>
    <class kind="struct">cinder::EaseInCubic</class>
    <class kind="struct">cinder::EaseOutCubic</class>
    <class kind="struct">cinder::EaseInOutCubic</class>
    <class kind="struct">cinder::EaseOutInCubic</class>
    <class kind="struct">cinder::EaseInQuart</class>
    <class kind="struct">cinder::EaseOutQuart</class>
    <class kind="struct">cinder::EaseInOutQuart</class>
    <class kind="struct">cinder::EaseOutInQuart</class>
    <class kind="struct">cinder::EaseInQuint</class>
    <class kind="struct">cinder::EaseOutQuint</class>
    <class kind="struct">cinder::EaseInOutQuint</class>
    <class kind="struct">cinder::EaseOutInQuint</class>
    <class kind="struct">cinder::EaseInSine</class>
    <class kind="struct">cinder::EaseOutSine</class>
    <class kind="struct">cinder::EaseInOutSine</class>
    <class kind="struct">cinder::EaseOutInSine</class>
    <class kind="struct">cinder::EaseInExpo</class>
    <class kind="struct">cinder::EaseOutExpo</class>
    <class kind="struct">cinder::EaseInOutExpo</class>
    <class kind="struct">cinder::EaseOutInExpo</class>
    <class kind="struct">cinder::EaseInCirc</class>
    <class kind="struct">cinder::EaseOutCirc</class>
    <class kind="struct">cinder::EaseInOutCirc</class>
    <class kind="struct">cinder::EaseOutInCirc</class>
    <class kind="struct">cinder::EaseInBounce</class>
    <class kind="struct">cinder::EaseOutBounce</class>
    <class kind="struct">cinder::EaseInOutBounce</class>
    <class kind="struct">cinder::EaseOutInBounce</class>
    <class kind="struct">cinder::EaseInBack</class>
    <class kind="struct">cinder::EaseOutBack</class>
    <class kind="struct">cinder::EaseInOutBack</class>
    <class kind="struct">cinder::EaseOutInBack</class>
    <class kind="struct">cinder::EaseInElastic</class>
    <class kind="struct">cinder::EaseOutElastic</class>
    <class kind="struct">cinder::EaseInOutElastic</class>
    <class kind="struct">cinder::EaseOutInElastic</class>
    <class kind="struct">cinder::EaseInAtan</class>
    <class kind="struct">cinder::EaseOutAtan</class>
    <class kind="struct">cinder::EaseInOutAtan</class>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>float</type>
      <name>easeNone</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aeb0499f1d9aef8a4bc94f3c2fc2e840b</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInQuad</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a8cb4db9f9378635d8cfeaf84857a884d</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutQuad</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab64ed1c6bb650a29df83dbc1b1568b66</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInOutQuad</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a71a4ca8d5df601f6edc54afcd6e56211</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutInQuad</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a754c5de7e4a3f8ccb155fa92fa96d1da</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInCubic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a03c3c7b2f59cc0194ecfdd05aa648e37</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutCubic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a467bf2c001ff148d1e110facc6c2c6f8</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInOutCubic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a61be228494be6b9cbc7d8b4bd641d100</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutInCubic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>afb25e174959ade822ef21a7d2fd6b8d4</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInQuart</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a684baa1ace5db911066542e543d11f5d</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutQuart</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac27137a9ea8f06474ea11d44064ac73f</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInOutQuart</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a460fa62c47c43670d16134c847d3543e</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutInQuart</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac2a04fb1b62121158a13084e0888839b</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInQuint</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a517d1bd987afd1f88d130fe065073576</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutQuint</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a7092c573b41c4969fc5ae4bc2ddecb97</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInOutQuint</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a55bb4775c0bd9280f2abd2474819def2</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutInQuint</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aac9e142ddc082ed26cc717afd767ec9f</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInSine</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aafd807f639ad81149494f66bbf159838</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutSine</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a643af8c93db6a1a0cee0abde2125554a</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInOutSine</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5322436c956f7b9eef26759d6834eddb</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutInSine</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a2353e1dd8ed6c39a75972e8d6c38cc6a</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInExpo</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aca0ff180655ab50eadfea71a7336eba8</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutExpo</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad5c0b36cf2a776245e97a9388b2a90ab</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInOutExpo</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>acf881767739a6d1e23f818910044e60b</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutInExpo</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a3177b6a52949f43c72d8caa601f058bc</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInCirc</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a042095cf2c66b0a7510dfd1f3096a146</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutCirc</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>afebeb8b03d62a61f6b1a5e31eaafbc23</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInOutCirc</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a7fce0fcea04051e45df54d13ac1ebeae</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutInCirc</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1cfcb6817aa420e5cb310c2eefb92506</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInBounce</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4edc572c15125138d105a797f2d2863b</anchor>
      <arglist>(float t, float a=1.70158f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutBounce</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1e3216ca72228cf15e1d67e2d2fda054</anchor>
      <arglist>(float t, float a=1.70158f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInOutBounce</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a880841c340688b14bbe111a2e86088f7</anchor>
      <arglist>(float t, float a=1.70158f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutInBounce</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aee857ee0670516b88423b781cff9ea6f</anchor>
      <arglist>(float t, float a=1.70158f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInBack</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad6331c7c6ef02d67a3c7fbea7e54c8d9</anchor>
      <arglist>(float t, float s=1.70158f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutBack</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a85f73eee00b69036af5f672e9dae6449</anchor>
      <arglist>(float t, float s=1.70158f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInOutBack</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab2dd0b86c67a04bc98f049d67db168bd</anchor>
      <arglist>(float t, float s=1.70158f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutInBack</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad7bdc56b774169887c76e9664e3185af</anchor>
      <arglist>(float t, float s)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInElastic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad7d98eea46f712206c91782dbe8d6f98</anchor>
      <arglist>(float t, float amplitude, float period)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutElastic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4ad93bca24dad2e4beb577a2c38353c4</anchor>
      <arglist>(float t, float amplitude, float period)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInOutElastic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aab4bdf9a775db0b4b14df599dc3e0dbc</anchor>
      <arglist>(float t, float amplitude, float period)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutInElastic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aa7062e137e1eda02e6e89daec8290684</anchor>
      <arglist>(float t, float amplitude, float period)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInAtan</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a45e3cb2d5a2b1e46071a1027e7d16893</anchor>
      <arglist>(float t, float a=15)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutAtan</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a85844d4d294d4a095296398c2188e761</anchor>
      <arglist>(float t, float a=15)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInOutAtan</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab0fd1a709378df4ee23e37dc3f0934b8</anchor>
      <arglist>(float t, float a=15)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Exception.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_exception_8h</filename>
    <class kind="class">cinder::Exception</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Filesystem.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_filesystem_8h</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Filter.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_filter_8h</filename>
    <class kind="class">cinder::FilterBase</class>
    <class kind="class">cinder::FilterBox</class>
    <class kind="class">cinder::FilterTriangle</class>
    <class kind="class">cinder::FilterQuadratic</class>
    <class kind="class">cinder::FilterCubic</class>
    <class kind="class">cinder::FilterCatmullRom</class>
    <class kind="class">cinder::FilterMitchell</class>
    <class kind="class">cinder::FilterSincBlackman</class>
    <class kind="class">cinder::FilterGaussian</class>
    <class kind="class">cinder::FilterBesselBlackman</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Font.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_font_8h</filename>
    <class kind="class">cinder::Font</class>
    <class kind="class">cinder::FontInvalidNameExc</class>
    <class kind="class">cinder::FontGlyphFailureExc</class>
    <namespace>Gdiplus</namespace>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>struct CGFont *</type>
      <name>CGFontRef</name>
      <anchorfile>_font_8h.html</anchorfile>
      <anchor>aabd557d5976bf50018bc5c7a5387b4b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct __CTFont *</type>
      <name>CTFontRef</name>
      <anchorfile>_font_8h.html</anchorfile>
      <anchor>a8623626cb3d129a77589ca880e42710b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Frustum.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_frustum_8h</filename>
    <class kind="class">cinder::Frustum</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>Frustum&lt; float &gt;</type>
      <name>Frustumf</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a854319a8f823ab524be30a45ec01570c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Frustum&lt; double &gt;</type>
      <name>Frustumd</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aa159b6b0d0efbf740bc22c3ecdc11e3e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Function.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_function_8h</filename>
    <class kind="class">cinder::CallbackMgr</class>
    <namespace>cinder</namespace>
    <namespace>cinder::signals</namespace>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>CallbackId</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6dab31a04afdccbcf04fcb31bc8029c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DisplayList.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/gl/</path>
    <filename>_display_list_8h</filename>
    <class kind="class">cinder::gl::DisplayList</class>
    <class kind="struct">cinder::gl::DisplayList::Obj</class>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
  </compound>
  <compound kind="file">
    <name>Fbo.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/gl/</path>
    <filename>_fbo_8h</filename>
    <class kind="class">cinder::gl::Renderbuffer</class>
    <class kind="class">cinder::gl::Fbo</class>
    <class kind="struct">cinder::gl::Fbo::Format</class>
    <class kind="struct">cinder::gl::Fbo::Obj</class>
    <class kind="class">cinder::gl::FboException</class>
    <class kind="class">cinder::gl::FboExceptionInvalidSpecification</class>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
  </compound>
  <compound kind="file">
    <name>gl.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/gl/</path>
    <filename>gl_8h</filename>
    <class kind="struct">cinder::gl::SaveTextureBindState</class>
    <class kind="struct">cinder::gl::BoolState</class>
    <class kind="struct">cinder::gl::ClientBoolState</class>
    <class kind="struct">cinder::gl::SaveColorState</class>
    <class kind="struct">cinder::gl::SaveFramebufferBinding</class>
    <class kind="class">cinder::gl::Exception</class>
    <class kind="class">cinder::gl::ExceptionUnknownTarget</class>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Texture &gt;</type>
      <name>TextureRef</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ae9fbc0fd7428f918be8294799459d9cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; VboMesh &gt;</type>
      <name>VboMeshRef</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>aba53e650f3d3915f1e0c886e6199ef13</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExtensionAvailable</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a6c76f801af6a41e90339894d17b0f8db</anchor>
      <arglist>(const std::string &amp;extName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a2fbfcc011e3992ebe4a239464a97d896</anchor>
      <arglist>(const ColorA &amp;color=ColorA::black(), bool clearDepthBuffer=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableVerticalSync</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a96b372396a487d30379d021091a7028f</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableVerticalSync</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a8d4ab0f8ad1b3cd4a8cf6b74e947df3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVerticalSyncEnabled</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>aa9a4c34953184e41a17945ee947128e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrices</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>aae701f052de1bf3c1b0d2dc05f4512c6</anchor>
      <arglist>(const Camera &amp;cam)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setModelView</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ac191bbc2207f7fc6f957f4bb26cac0d3</anchor>
      <arglist>(const Camera &amp;cam)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjection</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a4f9ad12f54702f3762361f804e2ec86e</anchor>
      <arglist>(const Camera &amp;cam)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushModelView</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a617d10ce027c18747bbd9692d05f92af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popModelView</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a3ed49d64da76eb531f83210ef5785052</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushModelView</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>aea4b11e044329d15c1c9986aac5e201e</anchor>
      <arglist>(const Camera &amp;cam)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushProjection</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a7e2993b15e507172b41ffe7c54ad0bc7</anchor>
      <arglist>(const Camera &amp;cam)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushMatrices</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>aa1486b02795149205c80dadecae79cc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popMatrices</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a1645efbc66ebd194c335d98749edd466</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multModelView</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a202555d6f2d2b848718cf2163e4b91d9</anchor>
      <arglist>(const Matrix44f &amp;mtx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multProjection</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ab09199dace7ac26064834905787ba81c</anchor>
      <arglist>(const Matrix44f &amp;mtx)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44f</type>
      <name>getModelView</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a148ea0d64757892bc845d11de72e6612</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix44f</type>
      <name>getProjection</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>aaeabb4c7249545d78d7044e2f4d4de50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatricesWindowPersp</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a7345b64510638b473e6234fea828aeb6</anchor>
      <arglist>(int screenWidth, int screenHeight, float fovDegrees=60.0f, float nearPlane=1.0f, float farPlane=1000.0f, bool originUpperLeft=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatricesWindowPersp</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>abd5c6c9b115fbda4c2c71f9aa69dc040</anchor>
      <arglist>(const Vec2i &amp;screenSize, float fovDegrees=60.0f, float nearPlane=1.0f, float farPlane=1000.0f, bool originUpperLeft=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatricesWindow</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a42ef86d897997bb2841cb354e6e77d91</anchor>
      <arglist>(int screenWidth, int screenHeight, bool originUpperLeft=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatricesWindow</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ad37886f223dd0e415baba31c59c36993</anchor>
      <arglist>(const Vec2i &amp;screenSize, bool originUpperLeft=true)</arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>getViewport</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a734dca12be3a9257f93d7559faaf318e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewport</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a383ed8cd0c1ced7335aeb24866dd8a5e</anchor>
      <arglist>(const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a9be60d97976007f2313107ed053bd0b8</anchor>
      <arglist>(const Vec2f &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ab27ce1fa3c14f9fb122cf37fd8b2b2ca</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a3dd2ab22d1b4227cc4c063aff5483a1e</anchor>
      <arglist>(const Vec3f &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a622ff4651b1d02cc23cfc913fe9d3679</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ae3bda300feb39b6cff8b26289b4bafd0</anchor>
      <arglist>(const Vec3f &amp;scl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a3b636879e0423592010a372d285eb958</anchor>
      <arglist>(const Vec2f &amp;scl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a4bab17be7953bcb3f69c162142a8bac0</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ae2826ab8097c5b5e862579d5fb93aba9</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a23d2e23fb9fec3817ca824ffa13870bc</anchor>
      <arglist>(const Vec3f &amp;xyz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ad2db4645848b2c95b0fa7d2637232189</anchor>
      <arglist>(const Quatf &amp;quat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a535cac17a8ed7ad52b4f745f2cfd76b3</anchor>
      <arglist>(float degrees)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>begin</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a5839c578556194a5e391f590926da66d</anchor>
      <arglist>(GLenum mode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a63fb36d011c4d899c04dc153235ffeb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vertex</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a2270404ec863d91306718ec2cef26971</anchor>
      <arglist>(const Vec2f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vertex</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a0f3ab18c9fa9b104f1098569ff3ced27</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vertex</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a9eb28a62f71f9708e16ebeecb605dc5c</anchor>
      <arglist>(const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vertex</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ab22ec6641fa98b38332d1338f6d14fd1</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>texCoord</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ad2d97e2b737fe5e9e5f4ee3ac0f96611</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>texCoord</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>aa3c8e73eb4ae8da7ef7cf21ddc52ef7c</anchor>
      <arglist>(const Vec2f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>texCoord</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a361492da629ec4eb9adf3930d50d8393</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>texCoord</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a769662a3fefb9ca0566adbee820470d4</anchor>
      <arglist>(const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>color</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a8a78cf5a47edfa85ca17a42b166ccaaf</anchor>
      <arglist>(float r, float g, float b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>color</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a8cc82192f2455ab5b992dcdd50af8932</anchor>
      <arglist>(float r, float g, float b, float a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>color</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a8d09fc0c6af91ea1337ff04f7996f50c</anchor>
      <arglist>(const Color8u &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>color</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a97f2f086f019c50f60eeaa654711a696</anchor>
      <arglist>(const ColorA8u &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>color</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a3c10044dd03d623fb0c32c0dc2e9e2ca</anchor>
      <arglist>(const Color &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>color</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>af956a20e7350e9d0c3c9d3f534165b39</anchor>
      <arglist>(const ColorA &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ad661cc5c41727eaca6cb2b8bee32bc0f</anchor>
      <arglist>(GLenum state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a29cc277c287e66d0d006a70f7460e13b</anchor>
      <arglist>(GLenum state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableAlphaBlending</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a2cb8982a5a007376031745ac074bed4c</anchor>
      <arglist>(bool premultiplied=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableAlphaBlending</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a827c4891a9cdb131dcf0900d3cc3afb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableAdditiveBlending</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a461bcc8262ee0119ddf6d04e54f1bc5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableAlphaTest</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a5828de179aa09656761214c42081e744</anchor>
      <arglist>(float value=0.5f, int func=GL_GREATER)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableAlphaTest</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ade99b6754a467585930762c731ed427e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableWireframe</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>afa2bc5dcc9b47fffe453c766aeab921d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableWireframe</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a48c341d76de7f03662aa441cbd9fbe2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableDepthRead</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a29c89789e81816aae727bb4fa67f0557</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableDepthWrite</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a1124315ba7afda1825556d86f63119b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableDepthRead</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a39fc0f8808d3c838e8e672206155ae92</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableDepthWrite</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>af0f288e79355d2caa51a668e95c34762</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lineWidth</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a1d2adc8b6b4a51e1e251b54cd7a86527</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ac95d12e2e84beefa8fa5cf03208da8c6</anchor>
      <arglist>(const Vec2f &amp;start, const Vec2f &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a026dddf77657af2220d4777b57b4e0a3</anchor>
      <arglist>(const Vec3f &amp;start, const Vec3f &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawCube</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>aded1f26c4551ea294c38dcd0f53f0f78</anchor>
      <arglist>(const Vec3f &amp;center, const Vec3f &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawColorCube</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ad437c0db1a58bf32b1446417d26cce6d</anchor>
      <arglist>(const Vec3f &amp;center, const Vec3f &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStrokedCube</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a83b1ccb52359bdc68b8780c19a7fad1e</anchor>
      <arglist>(const Vec3f &amp;center, const Vec3f &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStrokedCube</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a7714e121a55263dcf702c8447e790dcc</anchor>
      <arglist>(const AxisAlignedBox3f &amp;aab)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSphere</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>afb36eda0e75914ad146ac8aba3777f50</anchor>
      <arglist>(const Vec3f &amp;center, float radius, int segments=12)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ada9a13926b78fe2e15b591e98b6bc12b</anchor>
      <arglist>(const class Sphere &amp;sphere, int segments=12)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolidCircle</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a225b1296ceeaa8b2393339fc39debf7a</anchor>
      <arglist>(const Vec2f &amp;center, float radius, int numSegments=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStrokedCircle</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ac4287584c2ab9bb57cd24a298163144a</anchor>
      <arglist>(const Vec2f &amp;center, float radius, int numSegments=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolidEllipse</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ad06d9caec735920707ba046487925cf6</anchor>
      <arglist>(const Vec2f &amp;center, float radiusX, float radiusY, int numSegments=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStrokedEllipse</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a19a690b7e9222448fa2da276c217a304</anchor>
      <arglist>(const Vec2f &amp;center, float radiusX, float radiusY, int numSegments=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolidRect</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>aa864abe460f72df3a3feffba6877b08e</anchor>
      <arglist>(const Rectf &amp;rect, bool textureRectangle=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStrokedRect</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a27354e3ff26fc32199ffc04b7e6d68db</anchor>
      <arglist>(const Rectf &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolidRoundedRect</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>af5af358ebe7bd7a2e6dbedc3c413a144</anchor>
      <arglist>(const Rectf &amp;r, float cornerRadius, int numSegmentsPerCorner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStrokedRoundedRect</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ad4ea89711fca3684f5c0ec306b029e0e</anchor>
      <arglist>(const Rectf &amp;r, float cornerRadius, int numSegmentsPerCorner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolidTriangle</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a575b200164060d5cee4babd275e58fa6</anchor>
      <arglist>(const Vec2f &amp;pt1, const Vec2f &amp;pt2, const Vec2f &amp;pt3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolidTriangle</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ad3d31ce09f238fa22e6d5262a00e5ddd</anchor>
      <arglist>(const Vec2f pts[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolidTriangle</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a4abdfa02bfd91d992341690ff32f8662</anchor>
      <arglist>(const Vec2f &amp;pt1, const Vec2f &amp;pt2, const Vec2f &amp;pt3, const Vec2f &amp;texPt1, const Vec2f &amp;texPt2, const Vec2f &amp;texPt3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolidTriangle</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>af4c10b6df7ebf4be348e7915d4857e89</anchor>
      <arglist>(const Vec2f pts[3], const Vec2f texCoord[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStrokedTriangle</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a9bbd432933f5b882dbe23d46f8162bb8</anchor>
      <arglist>(const Vec2f &amp;pt1, const Vec2f &amp;pt2, const Vec2f &amp;pt3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStrokedTriangle</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ae67bb2baa2e39a0008cb36d3a8784beb</anchor>
      <arglist>(const Vec2f pts[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawCoordinateFrame</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a16ea664ce9bbde923821d82b724e880d</anchor>
      <arglist>(float axisLength, float headLength, float headRadius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawVector</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a9c01e8443ea98da5e3a406711452a749</anchor>
      <arglist>(const Vec3f &amp;start, const Vec3f &amp;end, float headLength=0.2f, float headRadius=0.05f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawFrustum</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a14256c1806be1e7252c5718ce2aaa267</anchor>
      <arglist>(const Camera &amp;cam)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTorus</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a43d519840986615ae3542ff5d4f44141</anchor>
      <arglist>(float outterRadius, float innerRadius, int longitudeSegments=12, int latitudeSegments=12)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawCylinder</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a70f28209c6bdb11553d4c45d368fd06d</anchor>
      <arglist>(float baseRadius, float topRadius, float height, int slices=12, int stacks=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a32eda5f8b4d5c89777b3f2b89df46119</anchor>
      <arglist>(const class PolyLine&lt; Vec2f &gt; &amp;polyLine)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>af005a57cab16e4a208203c117cf0ebcd</anchor>
      <arglist>(const class PolyLine&lt; Vec3f &gt; &amp;polyLine)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>af71325bdfeb97381c624f3c1357560fd</anchor>
      <arglist>(const class Path2d &amp;path2d, float approximationScale=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a14af9189a09f376ca2b2c6098b1de818</anchor>
      <arglist>(const class Shape2d &amp;shape2d, float approximationScale=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolid</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>aaad7e3de316294933d094c4ec6a39b7d</anchor>
      <arglist>(const class Path2d &amp;path2d, float approximationScale=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolid</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ad541218e8a8d06a27f6ea7797d6b77e9</anchor>
      <arglist>(const class Shape2d &amp;shape2d, float approximationScale=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolid</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a723e2a81138fce60f586ac933346f6e1</anchor>
      <arglist>(const PolyLine2f &amp;polyLine)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a6e90ecae18934dbeb555853c66011ed5</anchor>
      <arglist>(const TriMesh2d &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRange</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a47f6d947ec0277e2830b46d3be4fa53a</anchor>
      <arglist>(const TriMesh2d &amp;mesh, size_t startTriangle, size_t triangleCount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a9e62bfdae870f732ca59f92d448ed645</anchor>
      <arglist>(const TriMesh &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRange</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a86ef42d8b0f944f0198499df22bfed86</anchor>
      <arglist>(const TriMesh &amp;mesh, size_t startTriangle, size_t triangleCount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a375f873fcf7056a2f0d00ecea7257b46</anchor>
      <arglist>(const VboMesh &amp;vbo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a0cd5aadafa3009a7a6bf77127bd12fee</anchor>
      <arglist>(const VboMeshRef &amp;vbo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRange</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a7b4a1d5705efa1a8fe35c8b31666eb58</anchor>
      <arglist>(const VboMesh &amp;vbo, size_t startIndex, size_t indexCount, int vertexStart=-1, int vertexEnd=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRange</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a8f862dd93fab8dafd4dddd82b3b919e0</anchor>
      <arglist>(const VboMeshRef &amp;vbo, size_t startIndex, size_t indexCount, int vertexStart=-1, int vertexEnd=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawArrays</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ad10685b4d7ffb087bb4f8199fdcae1f1</anchor>
      <arglist>(const VboMesh &amp;vbo, GLint first, GLsizei count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawArrays</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a26c004a1966e6984ac0731e81a6ac6e2</anchor>
      <arglist>(const VboMeshRef &amp;vbo, GLint first, GLsizei count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawBillboard</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a4b0879c7123cf2cf31ef1b1f7e9a4e71</anchor>
      <arglist>(const Vec3f &amp;pos, const Vec2f &amp;scale, float rotationDegrees, const Vec3f &amp;bbRight, const Vec3f &amp;bbUp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>afa0740258a60c37956211e3b843e1dce</anchor>
      <arglist>(const Texture &amp;texture)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a6c5e6cf9b11527a69eab04258993703d</anchor>
      <arglist>(const TextureRef &amp;texture)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a92133b5442df7e3d7f4e97d3fc280471</anchor>
      <arglist>(const Texture &amp;texture, const Vec2f &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>aca7b439de8347cc3aa2a1a243aac0cb3</anchor>
      <arglist>(const TextureRef &amp;texture, const Vec2f &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a993397b47900e4858338583793981bfc</anchor>
      <arglist>(const Texture &amp;texture, const Rectf &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ae7673487da659270682e20d6768a6cf9</anchor>
      <arglist>(const TextureRef &amp;texture, const Rectf &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ab9ce2bab95244a2abcac8e6d4fd6d062</anchor>
      <arglist>(const Texture &amp;texture, const Area &amp;srcArea, const Rectf &amp;destRect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a5be3e521337dcc0ce0f3d1bbb369dd10</anchor>
      <arglist>(const TextureRef &amp;texture, const Area &amp;srcArea, const Rectf &amp;destRect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawString</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a8715d619df092110ac326e7a4ab08098</anchor>
      <arglist>(const std::string &amp;str, const Vec2f &amp;pos, const ColorA &amp;color=ColorA(1, 1, 1, 1), Font font=Font())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStringCentered</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a9724ec44b06320535bb92d4d81746d5a</anchor>
      <arglist>(const std::string &amp;str, const Vec2f &amp;pos, const ColorA &amp;color=ColorA(1, 1, 1, 1), Font font=Font())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStringRight</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a4b7c9bb652ec5c10aca201dc7659296c</anchor>
      <arglist>(const std::string &amp;str, const Vec2f &amp;pos, const ColorA &amp;color=ColorA(1, 1, 1, 1), Font font=Font())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeGlee</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>acefdbdc0a6cbc28299bf0797357bfcc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glVertex2f</name>
      <anchorfile>gl_8h.html</anchorfile>
      <anchor>a25ccadcade7f30a44fdce5138ed44bd9</anchor>
      <arglist>(const cinder::Vec2f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glVertex3f</name>
      <anchorfile>gl_8h.html</anchorfile>
      <anchor>a7e6d9e1c5425a89e626cd0e2b92eb701</anchor>
      <arglist>(const cinder::Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glVertex4f</name>
      <anchorfile>gl_8h.html</anchorfile>
      <anchor>a74b642946024de06a73bdf04dfb8e6a0</anchor>
      <arglist>(const cinder::Vec4f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glNormal3f</name>
      <anchorfile>gl_8h.html</anchorfile>
      <anchor>a8f74a3da03f35ea9b00caa435ba1f0f2</anchor>
      <arglist>(const cinder::Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glColor3f</name>
      <anchorfile>gl_8h.html</anchorfile>
      <anchor>ae22a18b2c6ad0ce1c074097339c9a54f</anchor>
      <arglist>(const cinder::Color &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glColor4f</name>
      <anchorfile>gl_8h.html</anchorfile>
      <anchor>a587a5faaba48711e54f57a5e65817f8b</anchor>
      <arglist>(const cinder::ColorA &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glTexCoord2f</name>
      <anchorfile>gl_8h.html</anchorfile>
      <anchor>a250d2da3917dc6db411b7d31c36d6e53</anchor>
      <arglist>(const cinder::Vec2f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glTexCoord3f</name>
      <anchorfile>gl_8h.html</anchorfile>
      <anchor>a211310613cdfca38d554357c7237173d</anchor>
      <arglist>(const cinder::Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glTexCoord4f</name>
      <anchorfile>gl_8h.html</anchorfile>
      <anchor>af9e1844af9a06195abdbd111728b2d2a</anchor>
      <arglist>(const cinder::Vec4f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glTranslatef</name>
      <anchorfile>gl_8h.html</anchorfile>
      <anchor>a6c10fe492637802e29bbf1103dae29d9</anchor>
      <arglist>(const cinder::Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glScalef</name>
      <anchorfile>gl_8h.html</anchorfile>
      <anchor>acd428d4748d678c13b0703711e7de85d</anchor>
      <arglist>(const cinder::Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glRotatef</name>
      <anchorfile>gl_8h.html</anchorfile>
      <anchor>a1a4719dc60e318e249775484f69a5991</anchor>
      <arglist>(float angle, const cinder::Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glRotatef</name>
      <anchorfile>gl_8h.html</anchorfile>
      <anchor>aeb28aced29005cc2919c1ceea3cc629c</anchor>
      <arglist>(const cinder::Quatf &amp;quat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glMultMatrixf</name>
      <anchorfile>gl_8h.html</anchorfile>
      <anchor>a27377cb247fbd2e3a5d82fefeb37f2b8</anchor>
      <arglist>(const cinder::Matrix44f &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>glLoadMatrixf</name>
      <anchorfile>gl_8h.html</anchorfile>
      <anchor>aae0acc1153ef95311fec9a559c8dff3e</anchor>
      <arglist>(const cinder::Matrix44f &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlslProg.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/gl/</path>
    <filename>_glsl_prog_8h</filename>
    <class kind="class">cinder::gl::GlslProg</class>
    <class kind="struct">cinder::gl::GlslProg::Obj</class>
    <class kind="class">cinder::gl::GlslProgCompileExc</class>
    <class kind="class">cinder::gl::GlslNullProgramExc</class>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; GlslProg &gt;</type>
      <name>GlslProgRef</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a9b53d5bd398b738e4ba7bff48cd07564</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Light.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/gl/</path>
    <filename>_light_8h</filename>
    <class kind="class">cinder::gl::Light</class>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
  </compound>
  <compound kind="file">
    <name>Material.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/gl/</path>
    <filename>_material_8h</filename>
    <class kind="class">cinder::gl::Material</class>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
  </compound>
  <compound kind="file">
    <name>StereoAutoFocuser.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/gl/</path>
    <filename>_stereo_auto_focuser_8h</filename>
    <class kind="class">cinder::gl::StereoAutoFocuser</class>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
  </compound>
  <compound kind="file">
    <name>Texture.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/gl/</path>
    <filename>_texture_8h</filename>
    <class kind="class">cinder::gl::Texture</class>
    <class kind="struct">cinder::gl::Texture::Format</class>
    <class kind="struct">cinder::gl::Texture::Obj</class>
    <class kind="class">cinder::gl::TextureCache</class>
    <class kind="struct">cinder::gl::TextureCache::Obj</class>
    <class kind="class">cinder::gl::SurfaceConstraintsGLTexture</class>
    <class kind="class">cinder::gl::TextureDataExc</class>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
  </compound>
  <compound kind="file">
    <name>TextureFont.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/gl/</path>
    <filename>_texture_font_8h</filename>
    <class kind="class">cinder::gl::TextureFont</class>
    <class kind="class">cinder::gl::TextureFont::Format</class>
    <class kind="struct">cinder::gl::TextureFont::DrawOptions</class>
    <class kind="struct">cinder::gl::TextureFont::GlyphInfo</class>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class TextureFont &gt;</type>
      <name>TextureFontRef</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a51573e6fc1b76bcb23fe3c0beeb287ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TileRender.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/gl/</path>
    <filename>_tile_render_8h</filename>
    <class kind="class">cinder::gl::TileRender</class>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
  </compound>
  <compound kind="file">
    <name>Vbo.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/gl/</path>
    <filename>_vbo_8h</filename>
    <class kind="class">cinder::gl::Vbo</class>
    <class kind="struct">cinder::gl::Vbo::Obj</class>
    <class kind="class">cinder::gl::VboMesh</class>
    <class kind="struct">cinder::gl::VboMesh::Layout</class>
    <class kind="struct">cinder::gl::VboMesh::Obj</class>
    <class kind="class">cinder::gl::VboMesh::VertexIter</class>
    <class kind="struct">cinder::gl::VboMesh::VertexIter::Obj</class>
    <class kind="class">cinder::gl::VboExc</class>
    <class kind="class">cinder::gl::VboInvalidTargetExc</class>
    <class kind="class">cinder::gl::VboFailedMapExc</class>
    <class kind="class">cinder::gl::VboFailedUnmapExc</class>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
  </compound>
  <compound kind="file">
    <name>ImageIo.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_image_io_8h</filename>
    <class kind="class">cinder::ImageIo</class>
    <class kind="class">cinder::ImageSource</class>
    <class kind="class">cinder::ImageSource::Options</class>
    <class kind="class">cinder::ImageTarget</class>
    <class kind="class">cinder::ImageTarget::Options</class>
    <class kind="class">cinder::ImageIoException</class>
    <class kind="class">cinder::ImageIoExceptionFailedLoad</class>
    <class kind="class">cinder::ImageIoExceptionFailedWrite</class>
    <class kind="class">cinder::ImageIoExceptionUnknownExtension</class>
    <class kind="class">cinder::ImageIoExceptionIllegalColorModel</class>
    <class kind="class">cinder::ImageIoExceptionIllegalDataType</class>
    <class kind="class">cinder::ImageIoExceptionIllegalChannelOrder</class>
    <class kind="struct">cinder::ImageIoRegistrar</class>
    <class kind="struct">cinder::ImageIoRegistrant</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageLoader &gt;</type>
      <name>ImageLoaderRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a06e3d391fa476d41d96037f777e51d1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageTarget &gt;</type>
      <name>ImageTargetRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aa5caf83179f34be27691363934b85afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageTargetFile &gt;</type>
      <name>ImageTargetFileRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad944840f458c0f177ed36de8715f9187</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ImageSourceRef</type>
      <name>loadImage</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad49aa427548e365f95336af782c2161a</anchor>
      <arglist>(const fs::path &amp;path, ImageSource::Options options=ImageSource::Options(), std::string extension=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>ImageSourceRef</type>
      <name>loadImage</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a720be629dd9f6a149ce02033b2dd7552</anchor>
      <arglist>(DataSourceRef dataSource, ImageSource::Options options=ImageSource::Options(), std::string extension=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeImage</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae77edb896e2f8e90bba70000725f3b6e</anchor>
      <arglist>(DataTargetRef dataTarget, const ImageSourceRef &amp;imageSource, ImageTarget::Options options=ImageTarget::Options(), std::string extension=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeImage</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6fbfe793b4f48c02e115bc9f9a4b92e8</anchor>
      <arglist>(const fs::path &amp;path, const ImageSourceRef &amp;imageSource, ImageTarget::Options options, std::string extension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeImage</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a0d6e2471ce9d2c0eb4eb50a39e73aba2</anchor>
      <arglist>(ImageTargetRef imageTarget, const ImageSourceRef &amp;imageSource)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ImageSourceFileQuartz.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_image_source_file_quartz_8h</filename>
    <class kind="class">cinder::ImageSourceFileQuartz</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>struct CGImage *</type>
      <name>CGImageRef</name>
      <anchorfile>_image_source_file_quartz_8h.html</anchorfile>
      <anchor>a75461eac74c23c49c936eb8811388b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageSourceFileQuartz &gt;</type>
      <name>ImageSourceFileQuartzRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a59712a1136e06dd7fa825844d8db8792</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ImageSourceFileWic.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_image_source_file_wic_8h</filename>
    <class kind="class">cinder::ImageSourceFileWic</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>struct _GUID</type>
      <name>GUID</name>
      <anchorfile>_image_source_file_wic_8h.html</anchorfile>
      <anchor>adeeeca59e0f70c6ead2556f5956fad15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageSourceFileWic &gt;</type>
      <name>ImageSourceFileWicRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a83e211e15a896d031cff9b05661dc4b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ImageSourcePng.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_image_source_png_8h</filename>
    <class kind="class">cinder::ImageSourcePng</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageSourcePng &gt;</type>
      <name>ImageSourcePngRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5071a00c245d15dce03957c94794a69f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ImageTargetFileQuartz.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_image_target_file_quartz_8h</filename>
    <class kind="class">cinder::ImageTargetFileQuartz</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>struct CGImage *</type>
      <name>CGImageRef</name>
      <anchorfile>_image_target_file_quartz_8h.html</anchorfile>
      <anchor>a75461eac74c23c49c936eb8811388b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct CGImageDestination *</type>
      <name>CGImageDestinationRef</name>
      <anchorfile>_image_target_file_quartz_8h.html</anchorfile>
      <anchor>a5741f686e9bd709117d8e9b1a43b2a7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct __CFDictionary *</type>
      <name>CFMutableDictionaryRef</name>
      <anchorfile>_image_target_file_quartz_8h.html</anchorfile>
      <anchor>a2050f3f093dadd9d36621c969b162119</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>CGBitmapInfo</name>
      <anchorfile>_image_target_file_quartz_8h.html</anchorfile>
      <anchor>aa962332117e3bed9567a2c164aa44501</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageTargetFileQuartz &gt;</type>
      <name>ImageTargetFileQuartzRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a640d9008ce90cd20485f3ab15f4376fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ImageTargetFileWic.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_image_target_file_wic_8h</filename>
    <class kind="class">cinder::ImageTargetFileWic</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>struct _GUID</type>
      <name>GUID</name>
      <anchorfile>_image_target_file_wic_8h.html</anchorfile>
      <anchor>adeeeca59e0f70c6ead2556f5956fad15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageTargetFileWic &gt;</type>
      <name>ImageTargetFileWicRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae03719056355ba81763b192822ab4b14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Blend.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/ip/</path>
    <filename>_blend_8h</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::ip</namespace>
    <member kind="function">
      <type>void</type>
      <name>blend</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>af0e25688db87eb142bc83716ed61d459</anchor>
      <arglist>(Surface8u *background, const Surface8u &amp;foreground, const Area &amp;srcArea, const Vec2i &amp;dstRelativeOffset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blend</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a6867bbe9e05065dfa82322c2af612578</anchor>
      <arglist>(Surface *background, const Surface &amp;foreground)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blend</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a151e524445f4ecc63f4b2d5f10d3b3a1</anchor>
      <arglist>(Surface32f *background, const Surface32f &amp;foreground, const Area &amp;srcArea, const Vec2i &amp;dstRelativeOffset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blend</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a4d080b09cfa51917a6f330fcc656b09d</anchor>
      <arglist>(Surface32f *background, const Surface32f &amp;foreground)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeDetect.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/ip/</path>
    <filename>_edge_detect_8h</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::ip</namespace>
    <member kind="function">
      <type>void</type>
      <name>edgeDetectSobel</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a36507c81c87598c5eae5cbb86bd9824b</anchor>
      <arglist>(const ChannelT&lt; T &gt; &amp;srcChannel, const Area &amp;srcArea, const Vec2i &amp;dstLT, ChannelT&lt; T &gt; *dstChannel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>edgeDetectSobel</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>aa1721dd257fedc943d4046bb0651d7aa</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;srcSurface, const Area &amp;srcArea, const Vec2i &amp;dstLT, SurfaceT&lt; T &gt; *dstSurface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>edgeDetectSobel</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a423d62f1230aa9c9ecd4009025398ded</anchor>
      <arglist>(const ChannelT&lt; T &gt; &amp;srcChannel, ChannelT&lt; T &gt; *dstChannel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>edgeDetectSobel</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a0f98a9c55148e4242eee7d67c36f9541</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;srcSurface, SurfaceT&lt; T &gt; *dstSuface)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fill.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/ip/</path>
    <filename>_fill_8h</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::ip</namespace>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a42640fcd5c146acee137a7a17a429b0b</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface, const ColorT&lt; Y &gt; &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>ae54e2982f99dab546b74722c4caabb4d</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface, const ColorT&lt; Y &gt; &amp;color, const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a5fd6e80a839c27829a7a57f0776d5ebc</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface, const ColorAT&lt; Y &gt; &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a05bb74fbdc9679de3bdad5e611878905</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface, const ColorAT&lt; Y &gt; &amp;color, const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a5214b75d677736cc4fe03a715a64e25d</anchor>
      <arglist>(ChannelT&lt; T &gt; *channel, T value, const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>ab58741abc47c307a9bb45a95b098a716</anchor>
      <arglist>(ChannelT&lt; T &gt; *channel, T value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Flip.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/ip/</path>
    <filename>_flip_8h</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::ip</namespace>
    <member kind="function">
      <type>void</type>
      <name>flipVertical</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a854e44fc952a20333240bf01f7945bae</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Grayscale.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/ip/</path>
    <filename>_grayscale_8h</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::ip</namespace>
    <member kind="function">
      <type>void</type>
      <name>grayscale</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>af8aa1575a86b86d3a3a6514e3a25780c</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;srcSurface, SurfaceT&lt; T &gt; *dstSurface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grayscale</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a29913cc34abf7c0f36900146be2e0f67</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;srcSurface, ChannelT&lt; T &gt; *dstChannel)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Hdr.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/ip/</path>
    <filename>_hdr_8h</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::ip</namespace>
    <member kind="function">
      <type>void</type>
      <name>hdrNormalize</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a8b001a0abaaa8ecacf7dbb87a28f870b</anchor>
      <arglist>(Surface32f *surface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hdrNormalize</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a5b11a3511a558d244845988df195ff53</anchor>
      <arglist>(Channel32f *channel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMinMax</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>aa3e5f5f8bbdacda8b01954b44c36cfc5</anchor>
      <arglist>(const Channel32f &amp;channel, float *resultMin, float *resultMax)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Premultiply.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/ip/</path>
    <filename>_premultiply_8h</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::ip</namespace>
    <member kind="function">
      <type>void</type>
      <name>premultiply</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>aa7fda293d635e185744ef25a4a443149</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpremultiply</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>adc64ba5544d29502945259bf445bd161</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Resize.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/ip/</path>
    <filename>_resize_8h</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::ip</namespace>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>afb1a60d4493cdb11bae0d3230c0bbb15</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;srcSurface, SurfaceT&lt; T &gt; *dstSurface, const FilterBase &amp;filter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a4b46128dca78b4db039b4f795c400a5b</anchor>
      <arglist>(const ChannelT&lt; T &gt; &amp;srcChannel, ChannelT&lt; T &gt; *dstChannel, const FilterBase &amp;filter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>ae026e34521dd718b23ddce7423b09805</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;srcSurface, const Area &amp;srcArea, SurfaceT&lt; T &gt; *dstSurface, const Area &amp;dstArea, const FilterBase &amp;filter)</arglist>
    </member>
    <member kind="function">
      <type>SurfaceT&lt; T &gt;</type>
      <name>resizeCopy</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>aa41d13752aa8c247d32559d39da42a93</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;srcSurface, const Area &amp;srcArea, const Vec2i &amp;dstSize, const FilterBase &amp;filter=FilterTriangle())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a6da7127f976e6d60bd5f77ba08ee4491</anchor>
      <arglist>(const ChannelT&lt; T &gt; &amp;srcChannel, const Area &amp;srcArea, ChannelT&lt; T &gt; *dstChannel, const Area &amp;dstArea, const FilterBase &amp;filter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Threshold.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/ip/</path>
    <filename>_threshold_8h</filename>
    <class kind="class">cinder::ip::AdaptiveThresholdT</class>
    <namespace>cinder</namespace>
    <namespace>cinder::ip</namespace>
    <member kind="typedef">
      <type>AdaptiveThresholdT&lt; uint8_t &gt;</type>
      <name>AdaptiveThreshold</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>af9d1d2fcc9fe3c8ff8f665f685ddd3be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AdaptiveThresholdT&lt; uint8_t &gt;</type>
      <name>AdaptiveThreshold8u</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>ae7594852b0a8b2bdba815fdf36cb6287</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AdaptiveThresholdT&lt; float &gt;</type>
      <name>AdaptiveThreshold32f</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a8640195bda9d5e73379af686d1fbb37f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>threshold</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>aad266a9ef17649fc58118f4232ea699d</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface, T value, const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>threshold</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>ac6283a4085cd1d3e81bca27dbaf4803f</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface, T value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>threshold</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a41f7406ecce2b029423cbbab9380765b</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;srcSurface, T value, SurfaceT&lt; T &gt; *dstSurface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>threshold</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>aa5bfaa452ae9955f76d0209a749dbe4b</anchor>
      <arglist>(const ChannelT&lt; T &gt; &amp;srcSurface, T value, ChannelT&lt; T &gt; *dstSurface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adaptiveThreshold</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>aef4612413e9e141c262ffa0b05043de2</anchor>
      <arglist>(const ChannelT&lt; T &gt; &amp;srcChannel, int32_t windowSize, float percentageDelta, ChannelT&lt; T &gt; *dstChannel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adaptiveThreshold</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a3785da48a1d8d4e5d922e27d53170d10</anchor>
      <arglist>(ChannelT&lt; T &gt; *channel, int32_t windowSize, float percentageDelta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adaptiveThresholdZero</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a4116c5393f0823d84c0d5669035bda91</anchor>
      <arglist>(ChannelT&lt; T &gt; *channel, int32_t windowSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adaptiveThresholdZero</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>ae6b9f9cf2b29b4732970513c5a265b43</anchor>
      <arglist>(const ChannelT&lt; T &gt; &amp;srcChannel, int32_t windowSize, ChannelT&lt; T &gt; *dstChannel)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Trim.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/ip/</path>
    <filename>_trim_8h</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::ip</namespace>
    <member kind="function">
      <type>Area</type>
      <name>findNonTransparentArea</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a713299f55cf2af9245003a9c35a70992</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;surface, const Area &amp;unclippedBounds)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Json.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_json_8h</filename>
    <class kind="class">cinder::JsonTree</class>
    <class kind="class">cinder::JsonTree::ParseOptions</class>
    <class kind="class">cinder::JsonTree::WriteOptions</class>
    <class kind="class">cinder::JsonTree::Exception</class>
    <class kind="class">cinder::JsonTree::ExcChildNotFound</class>
    <class kind="class">cinder::JsonTree::ExcNonConvertible</class>
    <class kind="class">cinder::JsonTree::ExcJsonParserError</class>
    <namespace>Json</namespace>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1c674e3865e00833826d30a21a1a6e33</anchor>
      <arglist>(ostream &amp;out, const JsonTree &amp;json)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KdTree.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_kd_tree_8h</filename>
    <class kind="struct">cinder::KdNode</class>
    <class kind="struct">cinder::NullLookupProc</class>
    <class kind="class">cinder::KdTree</class>
    <class kind="struct">cinder::NodeDataVectorTraits</class>
    <class kind="struct">cinder::NodeDataTraits</class>
    <class kind="struct">cinder::NodeDataTraits&lt; Vec2f &gt;</class>
    <class kind="struct">cinder::CompareNode</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Matrix.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_matrix_8h</filename>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>Matrix44&lt; T &gt;</type>
      <name>firstFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1c3e869a78a02a520fe9007d052efae2</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;firstPoint, const Vec3&lt; T &gt; &amp;secondPoint, const Vec3&lt; T &gt; &amp;thirdPoint)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt;</type>
      <name>nextFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a388ba9e39bb5f7e31763a23478e7d685</anchor>
      <arglist>(const Matrix44&lt; T &gt; &amp;prevMatrix, const Vec3&lt; T &gt; &amp;prevPoint, const Vec3&lt; T &gt; &amp;curPoint, Vec3&lt; T &gt; &amp;prevTangent, Vec3&lt; T &gt; &amp;curTangent)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt;</type>
      <name>lastFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>adb1940d9071401c7c47a164ef4953a86</anchor>
      <arglist>(const Matrix44&lt; T &gt; &amp;prevMatrix, const Vec3&lt; T &gt; &amp;prevPoint, const Vec3&lt; T &gt; &amp;lastPoint)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt;</type>
      <name>firstFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a72334f6c07944f96eb5962f0d4643d23</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;firstPoint, const Vec4&lt; T &gt; &amp;secondPoint, const Vec4&lt; T &gt; &amp;thirdPoint)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt;</type>
      <name>nextFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a31a91747888155130337c3e7e3a22c04</anchor>
      <arglist>(const Matrix44&lt; T &gt; &amp;prevMatrix, const Vec4&lt; T &gt; &amp;prevPoint, const Vec4&lt; T &gt; &amp;curPoint, Vec4&lt; T &gt; &amp;prevTangent, Vec4&lt; T &gt; &amp;curTangent)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt;</type>
      <name>lastFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac85aafc69393bd31db27c33e8df94f03</anchor>
      <arglist>(const Matrix44&lt; T &gt; &amp;prevMatrix, const Vec4&lt; T &gt; &amp;prevPoint, const Vec4&lt; T &gt; &amp;lastPoint)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Matrix22.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_matrix22_8h</filename>
    <class kind="class">cinder::Matrix22</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>Matrix22&lt; float &gt;</type>
      <name>Matrix22f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1b032095effaa246cbd9a1639d3baa2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix22&lt; double &gt;</type>
      <name>Matrix22d</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a2be3214e107cb4930f9aaed77b0b3e47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Matrix33.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_matrix33_8h</filename>
    <class kind="class">cinder::Matrix33</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>Matrix33&lt; float &gt;</type>
      <name>Matrix33f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae6e55b63499e1860adb47d54519e2f2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix33&lt; double &gt;</type>
      <name>Matrix33d</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a05d6818f0e3d720859a87a9af1523427</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Matrix44.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_matrix44_8h</filename>
    <class kind="class">cinder::Matrix44</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>Matrix44&lt; float &gt;</type>
      <name>Matrix44f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a42cb03686769617fe76b0cff00545a8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix44&lt; double &gt;</type>
      <name>Matrix44d</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>acbcf2c4eb8eb86753f638ce36db758b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MatrixAffine2.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_matrix_affine2_8h</filename>
    <class kind="class">cinder::MatrixAffine2</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>MatrixAffine2&lt; float &gt;</type>
      <name>MatrixAffine2f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac4d2f21605d9ac199dd96a8c99886761</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixAffine2&lt; double &gt;</type>
      <name>MatrixAffine2d</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6454b52ee3fe3872ef449c0b9a147ccd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MatrixAlgo.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_matrix_algo_8h</filename>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>Matrix44f</type>
      <name>SseMultiply</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>af8b2c96b868dc1212b194689d9224f73</anchor>
      <arglist>(const Matrix44f &amp;mat0, const Matrix44f &amp;mat1)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44f</type>
      <name>SseInvert</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad9fa895c994ff76573458cfdd5ec3567</anchor>
      <arglist>(const Matrix44f &amp;mat)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MayaCamUI.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_maya_cam_u_i_8h</filename>
    <class kind="class">cinder::MayaCamUI</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>CinderMsw.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/msw/</path>
    <filename>_cinder_msw_8h</filename>
    <class kind="class">cinder::msw::ComOStream</class>
    <namespace>cinder</namespace>
    <namespace>cinder::msw</namespace>
    <member kind="function">
      <type>Surface8u</type>
      <name>convertHBitmap</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>ae208567f3e50dd5e473fd0a533fa7bb0</anchor>
      <arglist>(HBITMAP hbitmap)</arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>toVec2f</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>a6110afc4db24bfce1b0f3adbf0feb3ae</anchor>
      <arglist>(const ::POINTFX &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ComDelete</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>aeafaf64ffe1e678bba0ee205f7d83f1c</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; T &gt;</type>
      <name>makeComShared</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>a545a324c46702cc589c881080cf3d98f</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeCom</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>ae16a1c902bb9d05617ee34c371d11b20</anchor>
      <arglist>(DWORD params=COINIT_APARTMENTTHREADED|COINIT_DISABLE_OLE1DDE)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CinderMswGdiPlus.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/msw/</path>
    <filename>_cinder_msw_gdi_plus_8h</filename>
    <class kind="class">cinder::SurfaceConstraintsGdiPlus</class>
    <namespace>cinder</namespace>
    <namespace>cinder::msw</namespace>
    <member kind="function">
      <type>Surface8u</type>
      <name>convertGdiplusBitmap</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>a21021d5b84d665017bc0b41bbeeee190</anchor>
      <arglist>(Gdiplus::Bitmap &amp;bitmap)</arglist>
    </member>
    <member kind="function">
      <type>Gdiplus::PixelFormat</type>
      <name>surfaceChannelOrderToGdiplusPixelFormat</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>a6d7293f3a14091ae423df4ae70b72480</anchor>
      <arglist>(const SurfaceChannelOrder &amp;sco, bool premultiplied)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gdiplusPixelFormatToSurfaceChannelOrder</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>a469d676472bd64f62f6911f000362936</anchor>
      <arglist>(Gdiplus::PixelFormat format, SurfaceChannelOrder *resultChannelOrder, bool *resultPremultiplied)</arglist>
    </member>
    <member kind="function">
      <type>Gdiplus::Bitmap *</type>
      <name>createGdiplusBitmap</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>a8cd61428e19b5f938ca119ada932825e</anchor>
      <arglist>(const Surface8u &amp;surface)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OutputDebugStringStream.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/msw/</path>
    <filename>_output_debug_string_stream_8h</filename>
    <class kind="class">cinder::msw::basic_debugbuf</class>
    <class kind="class">cinder::msw::basic_dostream</class>
    <namespace>cinder</namespace>
    <namespace>cinder::msw</namespace>
    <member kind="typedef">
      <type>basic_dostream&lt; char &gt;</type>
      <name>dostream</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>aa7705287ff21fbd19e2aa84553eadff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>basic_dostream&lt; wchar_t &gt;</type>
      <name>wdostream</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>acd14b7dd46fa4a017e64eaac3c2a632d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StackWalker.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/msw/</path>
    <filename>_stack_walker_8h</filename>
    <class kind="class">StackWalker</class>
    <class kind="struct">StackWalker::CallstackEntry</class>
    <member kind="typedef">
      <type>unsigned __int64</type>
      <name>DWORD64</name>
      <anchorfile>_stack_walker_8h.html</anchorfile>
      <anchor>a97fb241c597b99bcb965858f53cacac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned __int64 *</type>
      <name>PDWORD64</name>
      <anchorfile>_stack_walker_8h.html</anchorfile>
      <anchor>aee0d4bfea0b51eb8c099b516e21ad8f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned __int64</type>
      <name>SIZE_T</name>
      <anchorfile>_stack_walker_8h.html</anchorfile>
      <anchor>abf8e46e57d5b85295601cefa33de3b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned __int64 *</type>
      <name>PSIZE_T</name>
      <anchorfile>_stack_walker_8h.html</anchorfile>
      <anchor>a6ebc86010a9a7e9c506a8020ad4e6689</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ObjLoader.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_obj_loader_8h</filename>
    <class kind="class">cinder::ObjLoader</class>
    <class kind="struct">cinder::ObjLoader::Material</class>
    <class kind="struct">cinder::ObjLoader::Face</class>
    <class kind="struct">cinder::ObjLoader::Group</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Params.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/params/</path>
    <filename>_params_8h</filename>
    <class kind="class">cinder::params::InterfaceGl</class>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
    <namespace>cinder::params</namespace>
    <member kind="typedef">
      <type>struct CTwBar</type>
      <name>TwBar</name>
      <anchorfile>_params_8h.html</anchorfile>
      <anchor>a0787c409b768312e18787133e6e619da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class InterfaceGl &gt;</type>
      <name>InterfaceGlRef</name>
      <anchorfile>namespacecinder_1_1params.html</anchorfile>
      <anchor>a7ce98af0bd691ab4aa7bb949b35857f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Path2d.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_path2d_8h</filename>
    <class kind="class">cinder::Path2d</class>
    <class kind="class">cinder::Path2dExc</class>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad6f342436fdfabadc08aefba1c9e1952</anchor>
      <arglist>(std::ostream &amp;out, const Path2d &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Perlin.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_perlin_8h</filename>
    <class kind="class">cinder::Perlin</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Plane.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_plane_8h</filename>
    <class kind="class">cinder::Plane</class>
    <class kind="class">cinder::PlaneExc</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>Plane&lt; float &gt;</type>
      <name>Planef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a957776346f452ec64073f5797b6595c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Plane&lt; double &gt;</type>
      <name>Planed</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a37388f55702b96e21588fbe2ec0dfaa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a81ab3d6ae7ce9ab4633b62030a9b7185</anchor>
      <arglist>(std::ostream &amp;o, const Plane&lt; T &gt; &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PolyLine.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_poly_line_8h</filename>
    <class kind="class">cinder::PolyLine</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>PolyLine&lt; Vec2f &gt;</type>
      <name>PolyLine2f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac0b27fd31f3c4f75a887e0a9d656e970</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolyLine&lt; Vec2d &gt;</type>
      <name>PolyLine2d</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac958d4b7248a773e0f29eec8411af231</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MovieWriter.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/qtime/</path>
    <filename>_movie_writer_8h</filename>
    <class kind="class">cinder::qtime::MovieWriter</class>
    <class kind="class">cinder::qtime::MovieWriter::Format</class>
    <class kind="class">cinder::qtime::MovieWriterExc</class>
    <class kind="class">cinder::qtime::MovieWriterExcInvalidPath</class>
    <class kind="class">cinder::qtime::MovieWriterExcFrameEncode</class>
    <class kind="class">cinder::qtime::MovieWriterExcAlreadyFinished</class>
    <namespace>cinder</namespace>
    <namespace>cinder::qtime</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; MovieWriter &gt;</type>
      <name>MovieWriterRef</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>aa7b8abc1c1726ab6ee69a93d8b7a7a7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QuickTime.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/qtime/</path>
    <filename>_quick_time_8h</filename>
    <class kind="class">cinder::qtime::MovieBase</class>
    <class kind="struct">cinder::qtime::MovieBase::Obj</class>
    <namespace>cinder</namespace>
    <namespace>cinder::qtime</namespace>
    <member kind="typedef">
      <type>struct MovieType **</type>
      <name>Movie</name>
      <anchorfile>_quick_time_8h.html</anchorfile>
      <anchor>ae197fd87aea41d38f38692888b6aefc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct OpaqueQTVisualContext *</type>
      <name>QTVisualContextRef</name>
      <anchorfile>_quick_time_8h.html</anchorfile>
      <anchor>a5bebcf5bfcf6b7d680538e0566872356</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long</type>
      <name>TimeValue</name>
      <anchorfile>_quick_time_8h.html</anchorfile>
      <anchor>a588ceb497c8af5dfec58ce079147814d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct QTAudioFrequencyLevels</type>
      <name>QTAudioFrequencyLevels</name>
      <anchorfile>_quick_time_8h.html</anchorfile>
      <anchor>a418201049e3e4a6a4c19146dc23ef65f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long</type>
      <name>FourCharCode</name>
      <anchorfile>_quick_time_8h.html</anchorfile>
      <anchor>a6eeeab943689b5103a9f15d87135dc01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct __CVBuffer *</type>
      <name>CVBufferRef</name>
      <anchorfile>_quick_time_8h.html</anchorfile>
      <anchor>a99be24883aa37f2f08b535249a5ed943</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CVBufferRef</type>
      <name>CVImageBufferRef</name>
      <anchorfile>_quick_time_8h.html</anchorfile>
      <anchor>a9b4d8fc6fcf08fee93a8971503ddf1bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; MovieLoader &gt;</type>
      <name>MovieLoaderRef</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a235cd867fb9ef3d7d63f9dd7565750fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; MovieSurface &gt;</type>
      <name>MovieSurfaceRef</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a3c747c23ff8169495a9915a1c14e7c5b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QuickTimeUtils.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/qtime/</path>
    <filename>_quick_time_utils_8h</filename>
    <class kind="class">cinder::qtime::ImageTargetCvPixelBuffer</class>
    <class kind="class">cinder::qtime::ImageTargetGWorld</class>
    <namespace>cinder</namespace>
    <namespace>cinder::qtime</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageTargetCvPixelBuffer &gt;</type>
      <name>ImageTargetCvPixelBufferRef</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a877e7323ec66121fa14bb721986be17f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageTargetGWorld &gt;</type>
      <name>ImageTargetGWorldRef</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a87ae7a6b7609af21dfcbeaedf078dfd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Surface8u</type>
      <name>convertCVPixelBufferToSurface</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>ad20e733061754a7b862bf42c5cc94c84</anchor>
      <arglist>(CVPixelBufferRef pixelBufferRef)</arglist>
    </member>
    <member kind="function">
      <type>CVPixelBufferRef</type>
      <name>createCvPixelBuffer</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a56275d8d179a17bc93429d39b1bcf9c5</anchor>
      <arglist>(ImageSourceRef imageSource, bool convertToYpCbCr=false)</arglist>
    </member>
    <member kind="function">
      <type>GWorldPtr</type>
      <name>createGWorld</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a63199e5dc471ae46d36e967f6ea31105</anchor>
      <arglist>(ImageSourceRef imageSource)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Quaternion.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_quaternion_8h</filename>
    <class kind="struct">cinder::QUATCONV</class>
    <class kind="class">cinder::Quaternion</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>Quaternion&lt; float &gt;</type>
      <name>Quatf</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aebe7d270f96a07df222b9870e3220cbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Quaternion&lt; double &gt;</type>
      <name>Quatd</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a2511d8bb18da71aca56c9af0a7d71b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>afcd4d0bb0835846a303df15a3fbaf969</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;vec, const Quaternion&lt; T &gt; &amp;q)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Rand.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_rand_8h</filename>
    <class kind="class">cinder::Rand</class>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>void</type>
      <name>randSeed</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>acbd626335ccefa6b3a8c30eb072279a6</anchor>
      <arglist>(unsigned long seedValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>randBool</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a45b7d562dca29a2b50ca7313a09a3668</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>randInt</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aedf80ba7eace9f6369aa0ba639b11ec6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>randInt</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac130cc676b0813f4de3be9acbb5b1fb0</anchor>
      <arglist>(int32_t v)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>randInt</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6da6784e077165a635d737c328803908</anchor>
      <arglist>(int32_t a, int32_t b)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>randFloat</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab7637c0d6db3b9234d15be30c2e7ccb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>randFloat</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>acdce31142cd6ad87fb673e4e3d53f06b</anchor>
      <arglist>(float v)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>randFloat</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a525935bc7e3f1e1b43dca642c381165d</anchor>
      <arglist>(float a, float b)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>randPosNegFloat</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a03d75ec664f2a52ee020f7dc336a7376</anchor>
      <arglist>(float a, float b)</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>randVec3f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a52eb0358cc915e37b8e8c3a3c6e4a04e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>randVec2f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab081b92ad309e8853392a56434431709</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>randGaussian</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6602a13cb0df6220babec1aaa2341a9c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Ray.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_ray_8h</filename>
    <class kind="class">cinder::Ray</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Rect.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_rect_8h</filename>
    <class kind="class">cinder::MatrixAffine2</class>
    <class kind="class">cinder::RectT</class>
    <class kind="class">cinder::RectMapping</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>RectT&lt; float &gt;</type>
      <name>Rectf</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac60c086a9aa8f5320c96da74cbf20f8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RectT&lt; double &gt;</type>
      <name>Rectd</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a90596ab49684a517407bd53ab6cb80aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getClippedScaledRects</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a9182c71107e67e29d957225a02f98a82</anchor>
      <arglist>(const Area &amp;srcSurfaceBounds, const Rectf &amp;srcRect, const Area &amp;dstSurfaceBounds, const Area &amp;dstArea, Rectf *resultSrcRect, Area *resultDstArea)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Serial.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_serial_8h</filename>
    <class kind="class">cinder::Serial</class>
    <class kind="class">cinder::Serial::Device</class>
    <class kind="struct">cinder::Serial::Obj</class>
    <class kind="class">cinder::SerialExc</class>
    <class kind="class">cinder::SerialExcOpenFailed</class>
    <class kind="class">cinder::SerialExcDeviceEnumerationFailed</class>
    <class kind="class">cinder::SerialExcReadFailure</class>
    <class kind="class">cinder::SerialExcWriteFailure</class>
    <class kind="class">cinder::SerialTimeoutExc</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Shape2d.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_shape2d_8h</filename>
    <class kind="class">cinder::Shape2d</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Sphere.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_sphere_8h</filename>
    <class kind="class">cinder::Sphere</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Stream.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_stream_8h</filename>
    <class kind="class">cinder::StreamBase</class>
    <class kind="class">cinder::OStream</class>
    <class kind="class">cinder::IStream</class>
    <class kind="class">cinder::IoStream</class>
    <class kind="class">cinder::IStreamFile</class>
    <class kind="class">cinder::OStreamFile</class>
    <class kind="class">cinder::IoStreamFile</class>
    <class kind="class">cinder::IStreamMem</class>
    <class kind="class">cinder::OStreamMem</class>
    <class kind="class">cinder::IStreamStateRestore</class>
    <class kind="class">cinder::StreamExc</class>
    <class kind="class">cinder::StreamExcOutOfMemory</class>
    <class kind="class">cinder::cinder_stream_source</class>
    <class kind="class">cinder::cinder_stream_sink</class>
    <class kind="class">cinder::cinder_stream_bidirectional_device</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class OStream &gt;</type>
      <name>OStreamRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a150f14f908a9befa6eaab8fb6e345c74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; IStream &gt;</type>
      <name>IStreamRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad360b4711055d4cb532daa839674b8a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; IoStream &gt;</type>
      <name>IoStreamRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a26cce2f9e91eabde2c66c4597d6d394e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class IStreamFile &gt;</type>
      <name>IStreamFileRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad890b7e422100c98499b3a58d281b902</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class OStreamFile &gt;</type>
      <name>OStreamFileRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6e2f4f582197df0ac387e4d9e4156bb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class IoStreamFile &gt;</type>
      <name>IoStreamFileRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>acf3e2005fe30ea972e44c6dbed984647</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class IStreamMem &gt;</type>
      <name>IStreamMemRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a183eabd1aadab330a5ea44899381c62a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class OStreamMem &gt;</type>
      <name>OStreamMemRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae5c99be6a56d8ecb500ec623ee20898a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iostreams::stream&lt; cinder_stream_source &gt;</type>
      <name>cinder_istream</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4cf45c54aea1844f6f1d95f90be2b002</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iostreams::stream&lt; cinder_stream_sink &gt;</type>
      <name>cinder_ostream</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4ca34d440859a05e99a52dc0504bc25b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iostreams::stream&lt; cinder_stream_bidirectional_device &gt;</type>
      <name>cinder_iostream</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5e43e334d5c673a0c9a2c3c13794e44e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IStreamFileRef</type>
      <name>loadFileStream</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a0567ed6e407fc665725c7c7d2c78ff60</anchor>
      <arglist>(const fs::path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; OStreamFile &gt;</type>
      <name>writeFileStream</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab9164657b7becde39334d8d3f453faf0</anchor>
      <arglist>(const fs::path &amp;path, bool createParents=true)</arglist>
    </member>
    <member kind="function">
      <type>IoStreamFileRef</type>
      <name>readWriteFileStream</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab44424110d981c852598f8a3d89ba79a</anchor>
      <arglist>(const fs::path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadStreamMemory</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a820698ccd3520fbaba30c624de979994</anchor>
      <arglist>(IStreamRef is, std::shared_ptr&lt; uint8_t &gt; *resultData, size_t *resultDataSize)</arglist>
    </member>
    <member kind="function">
      <type>Buffer</type>
      <name>loadStreamBuffer</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6f247505ffa143d331909c906b66ff71</anchor>
      <arglist>(IStreamRef is)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Surface.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_surface_8h</filename>
    <class kind="class">cinder::SurfaceChannelOrder</class>
    <class kind="class">cinder::SurfaceConstraints</class>
    <class kind="class">cinder::SurfaceConstraintsDefault</class>
    <class kind="class">cinder::SurfaceT</class>
    <class kind="class">cinder::SurfaceT::Iter</class>
    <class kind="class">cinder::SurfaceT::ConstIter</class>
    <class kind="class">cinder::SurfaceExc</class>
    <class kind="class">cinder::SurfaceConstraintsExc</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>SurfaceT&lt; uint8_t &gt;</type>
      <name>Surface</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a7f62055e4cb811edb9868b32595a1d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfaceT&lt; uint8_t &gt;</type>
      <name>Surface8u</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad8b046fa928d58861b60465ceda392c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfaceT&lt; uint16_t &gt;</type>
      <name>Surface16u</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a8d12457845cf49dfabd567551dabf2d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfaceT&lt; float &gt;</type>
      <name>Surface32f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a69465422e6011583c33994f0280dcd29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Svg.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/svg/</path>
    <filename>_svg_8h</filename>
    <class kind="class">cinder::svg::Renderer</class>
    <class kind="class">cinder::svg::Value</class>
    <class kind="class">cinder::svg::Paint</class>
    <class kind="class">cinder::svg::Style</class>
    <class kind="class">cinder::svg::Node</class>
    <class kind="class">cinder::svg::Gradient</class>
    <class kind="class">cinder::svg::Gradient::Stop</class>
    <class kind="class">cinder::svg::LinearGradient</class>
    <class kind="class">cinder::svg::RadialGradient</class>
    <class kind="class">cinder::svg::Circle</class>
    <class kind="class">cinder::svg::Ellipse</class>
    <class kind="class">cinder::svg::Path</class>
    <class kind="class">cinder::svg::Line</class>
    <class kind="class">cinder::svg::Rect</class>
    <class kind="class">cinder::svg::Polygon</class>
    <class kind="class">cinder::svg::Polyline</class>
    <class kind="class">cinder::svg::Use</class>
    <class kind="class">cinder::svg::Image</class>
    <class kind="class">cinder::svg::TextSpan</class>
    <class kind="class">cinder::svg::TextSpan::Attributes</class>
    <class kind="class">cinder::svg::Text</class>
    <class kind="class">cinder::svg::Group</class>
    <class kind="class">cinder::svg::Doc</class>
    <class kind="class">cinder::svg::Exc</class>
    <class kind="class">cinder::svg::ValueExc</class>
    <class kind="class">cinder::svg::FloatParseExc</class>
    <class kind="class">cinder::svg::PathParseExc</class>
    <class kind="class">cinder::svg::TransformParseExc</class>
    <class kind="class">cinder::svg::ExcChildNotFound</class>
    <namespace>cinder</namespace>
    <namespace>cinder::svg</namespace>
    <member kind="typedef">
      <type>std::function&lt; bool(const Node &amp;, svg::Style *)&gt;</type>
      <name>RenderVisitor</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>afe12e333736854f15e38036db034cedf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TextSpan &gt;</type>
      <name>TextSpanRef</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>a382056ff45060d1b6b42b5605120c4b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Doc &gt;</type>
      <name>DocRef</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>af002e73e44dd222738515e38a7f9cbaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FillRule</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>aac326690dec1e2bf20e8dbf0072197f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILL_RULE_NONZERO</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>aac326690dec1e2bf20e8dbf0072197f3af51015cc4136be4798a9fe29f145efa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILL_RULE_EVENODD</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>aac326690dec1e2bf20e8dbf0072197f3a7272ebb1f74e7a1b66522337d513204d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LineCap</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>a3584e121924b34f82dade5b191620eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LINE_CAP_BUTT</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>a3584e121924b34f82dade5b191620eb5a29b17ce46048d8bc9ec29803a7cfcf39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LINE_CAP_ROUND</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>a3584e121924b34f82dade5b191620eb5a9df2b74913569c0973cf6170f3870b9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LINE_CAP_SQUARE</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>a3584e121924b34f82dade5b191620eb5a87ec85fe66c5039438ddfc955e4a309c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LineJoin</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>afb945f112425694fe967574754a9e867</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LINE_JOIN_MITER</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>afb945f112425694fe967574754a9e867ac9ef735142d011770eefabd0570d16c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LINE_JOIN_ROUND</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>afb945f112425694fe967574754a9e867a8e2bfab10d4db158212f2a9950918375</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LINE_JOIN_BEVEL</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>afb945f112425694fe967574754a9e867a583c367d9b8a8bd3ff5b4eb2a9cae0b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FontWeight</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_100</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16a0c8798c639b8562d4f905805707304d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_200</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16a653e4e89bbfeb09532a4b429b2218a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_300</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16af097a55cfddab1c6d15c9eb73600450b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_400</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16ab0eb201e13a8d846e8b2f32ce3891fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_NORMAL</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16a76436d9379245753326552508e0c8a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_500</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16a281b9cfb9ea1bcca28b71801d7b741de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_600</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16a024e261fd332d290304a44d76a26f185</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_700</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16a1532f3d79d81e3e1a5eb4966ff44806f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_BOLD</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16a59ed9d3465464c7ba42e1cd358ea767e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_800</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16afca04e6138e67c6c539ad6d7835b44f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_900</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16a3a08d23164abd8c5ad1d9a10e043a253</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SvgGl.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/svg/</path>
    <filename>_svg_gl_8h</filename>
    <class kind="class">cinder::SvgRendererGl</class>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a30954fda8a2cdbe83ff742fa5faa7df1</anchor>
      <arglist>(const svg::Doc &amp;svg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>System.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_system_8h</filename>
    <class kind="class">cinder::System</class>
    <class kind="class">cinder::System::NetworkAdapter</class>
    <class kind="class">cinder::SystemExc</class>
    <class kind="class">cinder::SystemExcFailedQuery</class>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad4e6a7bcbc413f573b7e5580ca744841</anchor>
      <arglist>(std::ostream &amp;outp, const System::NetworkAdapter &amp;adapter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Text.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_text_8h</filename>
    <class kind="class">cinder::TextLayout</class>
    <class kind="class">cinder::TextBox</class>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>Surface</type>
      <name>renderStringPow2</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a744b10b4104bd320a398cc7c1a5cb07c</anchor>
      <arglist>(const std::string &amp;str, const Font &amp;font, const ColorA &amp;color, Vec2i *actualSize, float *baselineOffset=0)</arglist>
    </member>
    <member kind="function">
      <type>Surface</type>
      <name>renderString</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a681e52c6285bd00030325094e4bf2cc3</anchor>
      <arglist>(const string &amp;str, const Font &amp;font, const ColorA &amp;color, float *baselineOffset)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Thread.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_thread_8h</filename>
    <class kind="class">cinder::ThreadSetup</class>
    <namespace>std::this_thread</namespace>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Timeline.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_timeline_8h</filename>
    <class kind="class">cinder::Timeline</class>
    <class kind="class">cinder::Cue</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class Cue &gt;</type>
      <name>CueRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a593a42176b7cdde1d4c3afd595117128</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class Timeline &gt;</type>
      <name>TimelineRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac0bdfcdff9bd292f9491b3a1c9091db9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TimelineItem.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_timeline_item_8h</filename>
    <class kind="class">cinder::TimelineItem</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class TimelineItem &gt;</type>
      <name>TimelineItemRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a903c982f3f41f069cd6d08386dd5d61f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_timer_8h</filename>
    <class kind="class">cinder::Timer</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Triangulate.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_triangulate_8h</filename>
    <class kind="class">cinder::Triangulator</class>
    <class kind="class">cinder::Triangulator::Exception</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>TriMesh.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_tri_mesh_8h</filename>
    <class kind="class">cinder::TriMesh</class>
    <class kind="class">cinder::TriMesh2d</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Tween.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_tween_8h</filename>
    <class kind="class">cinder::Tween</class>
    <class kind="class">cinder::Anim</class>
    <class kind="class">cinder::TweenBase</class>
    <class kind="class">cinder::TweenBase::Options</class>
    <class kind="class">cinder::TweenRef</class>
    <class kind="class">cinder::Tween</class>
    <class kind="class">cinder::Tween::Options</class>
    <class kind="class">cinder::FnTween</class>
    <class kind="class">cinder::FnTweenRef</class>
    <class kind="class">cinder::AnimBase</class>
    <class kind="class">cinder::Anim</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>std::function&lt; float(float)&gt;</type>
      <name>EaseFn</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae83c3d6bbf28cc637f2dd60fa02a7aca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tweenLerp</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>afea54ab087c36314a1ba675abc994431</anchor>
      <arglist>(const T &amp;start, const T &amp;end, float time)</arglist>
    </member>
    <member kind="function">
      <type>Quatf</type>
      <name>tweenLerp</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aad309a6c2580ad98848207d46b8a2765</anchor>
      <arglist>(const Quatf &amp;start, const Quatf &amp;end, float time)</arglist>
    </member>
    <member kind="function">
      <type>Quatd</type>
      <name>tweenLerp</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a19adc6381ecbf942605d961d89120ef8</anchor>
      <arglist>(const Quatd &amp;start, const Quatd &amp;end, float time)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Unicode.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_unicode_8h</filename>
    <namespace>cinder</namespace>
    <member kind="enumeration">
      <type></type>
      <name>UnicodeBreaks</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a674879384d4fbbf6e7f4778e6236c845</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_MUST_BREAK</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a674879384d4fbbf6e7f4778e6236c845af563da81c377071620d1f09c9f75c562</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_ALLOW_BREAK</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a674879384d4fbbf6e7f4778e6236c845aba36d08deb8b82b288998eb9a3dc7b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_NO_BREAK</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a674879384d4fbbf6e7f4778e6236c845a46d477b1c77f9491095eb3e5f455db9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_INSIDE_CHAR</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a674879384d4fbbf6e7f4778e6236c845a8e5fa9eac928ed917f2fe5eb634f4c2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>stringLengthUtf8</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a20862ab101293fad75e220fbfae58bd4</anchor>
      <arglist>(const char *str, size_t lengthInBytes=0)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>nextCharUtf8</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae1a9b4b049959b293dbd676fdc81c10a</anchor>
      <arglist>(const char *str, size_t *inOutByte, size_t lengthInBytes=0)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>advanceCharUtf8</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>af03ff0cf135716bd29ad465d69bcfe99</anchor>
      <arglist>(const char *str, size_t numChars, size_t lengthInBytes=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lineBreakUtf8</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad50b9a0c5fcf324483972742f56ab476</anchor>
      <arglist>(const char *line, const std::function&lt; bool(const char *, size_t)&gt; &amp;measureFn, std::function&lt; void(const char *, size_t)&gt; lineProcessFn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcLinebreaksUtf8</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>addf78fcb03235268093a20d8348d6386</anchor>
      <arglist>(const char *str, std::vector&lt; uint8_t &gt; *resultBreaks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcLinebreaksUtf8</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1cd3044f309f7e721ed79301ade38aab</anchor>
      <arglist>(const char *str, size_t strLength, std::vector&lt; uint8_t &gt; *resultBreaks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcLinebreaksUtf16</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a351e0ef5fb38bbd93eeaab818ef89d99</anchor>
      <arglist>(const uint16_t *str, std::vector&lt; uint8_t &gt; *resultBreaks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcLinebreaksUtf16</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a0677ab9a5e5ae156a252ba625efeb164</anchor>
      <arglist>(const uint16_t *str, size_t strLength, std::vector&lt; uint8_t &gt; *resultBreaks)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Url.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_url_8h</filename>
    <class kind="class">cinder::Url</class>
    <class kind="class">cinder::UrlOptions</class>
    <class kind="class">cinder::IStreamUrl</class>
    <class kind="class">cinder::UrlLoadExc</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class IStreamUrl &gt;</type>
      <name>IStreamUrlRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a85865156aba65495f42d5e85dcdae06c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5b8daf6759ead301f522da03b4c465bc</anchor>
      <arglist>(std::ostream &amp;out, const Url &amp;url)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aa646d6c168125be064a7bbedc773386a</anchor>
      <arglist>(std::istream &amp;is, Url &amp;url)</arglist>
    </member>
    <member kind="function">
      <type>IStreamUrlRef</type>
      <name>loadUrlStream</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a9fdbcb205154eb74e72a9226edce3f8c</anchor>
      <arglist>(const Url &amp;url, const UrlOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>IStreamUrlRef</type>
      <name>loadUrlStream</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac8e403ec35fcc2d466ad856c697c4301</anchor>
      <arglist>(const std::string &amp;url, const std::string &amp;user, const std::string &amp;password, const UrlOptions &amp;options)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UrlImplCocoa.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_url_impl_cocoa_8h</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>UrlImplCurl.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_url_impl_curl_8h</filename>
    <class kind="class">cinder::IStreamUrlImplCurl</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>void</type>
      <name>CURL</name>
      <anchorfile>_url_impl_curl_8h.html</anchorfile>
      <anchor>ace655e3633b6533591283994d6b5cdda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>CURLM</name>
      <anchorfile>_url_impl_curl_8h.html</anchorfile>
      <anchor>a5ad3a82c3de54ee92ce4ddb052d18036</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UrlImplWinInet.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_url_impl_win_inet_8h</filename>
    <class kind="class">cinder::IStreamUrlImplWinInet</class>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Utilities.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_utilities_8h</filename>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>fs::path</type>
      <name>expandPath</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae781343c5e29106e9bb2661800591349</anchor>
      <arglist>(const fs::path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>fs::path</type>
      <name>getHomeDirectory</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a2b598230b99b65cfa51a92eace60abc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fs::path</type>
      <name>getDocumentsDirectory</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aa4e3c9b5bd9041dc72842ed5834d67e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fs::path</type>
      <name>getTemporaryDirectory</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1c4b33178657dc62b4274f64dee4dc8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fs::path</type>
      <name>getTemporaryFilePath</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a3f932b4d725903eac6230672f4a59b28</anchor>
      <arglist>(const std::string &amp;prefix=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPathDirectory</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae6ed416d1d9f51eb8de3d43ad4565c20</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPathFileName</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a7394aab1a3cb8ed3d304a9a945c16ff2</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPathExtension</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a65402f44675f45804bec44b754dc3634</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createDirectories</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>af4b8ad67998031cf889182a8a5d1c5ad</anchor>
      <arglist>(const fs::path &amp;path, bool createParents=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>launchWebBrowser</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a8874403f7696a261886a5e64144dde06</anchor>
      <arglist>(const Url &amp;url)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteFile</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a94d5ef744d4556e04d67f7be7bdb087a</anchor>
      <arglist>(const fs::path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>split</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad6bbb2d260d3fc4cc6dcd295147b81d6</anchor>
      <arglist>(const std::string &amp;str, char separator, bool compress=true)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>split</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4f3796ac1738cfbbd32fae273cb37bca</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;separators, bool compress=true)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>loadString</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a8633ec4e77ac31ee162d5e81dfbdfdb6</anchor>
      <arglist>(DataSourceRef dataSource)</arglist>
    </member>
    <member kind="function">
      <type>wstring</type>
      <name>toUtf16</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a202edcdf0600aeef42bf2918bfca180a</anchor>
      <arglist>(const std::string &amp;utf8)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>toUtf8</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad18f0eef583db6c8d360db77d8f1b355</anchor>
      <arglist>(const std::wstring &amp;utf16)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sleep</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a014dc9c26196cb3a83c83f36c0ef797a</anchor>
      <arglist>(float milliseconds)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getPathSeparator</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aabe408479a7fa64a7ff8b705100c122e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac77d757b302731879c7ad8525eaa90de</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fromString</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a70db084d03f9df2913bca81d5e78cf8b</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Url</type>
      <name>fromString</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a3eda8e09ee3f9e64b035650481e70a4d</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; string &gt;</type>
      <name>stackTrace</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a03414bb985e32d8d5abdaec198c67ece</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>swapEndian</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a77e9e5c58d673373aa837eba3cd6ecea</anchor>
      <arglist>(int8_t val)</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>swapEndian</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad0a4422c2d087828534834dc884dee04</anchor>
      <arglist>(uint8_t val)</arglist>
    </member>
    <member kind="function">
      <type>int16_t</type>
      <name>swapEndian</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a03115204b26baeae65cc9ecac9b79611</anchor>
      <arglist>(int16_t val)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>swapEndian</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1908a73491a8bc38a1771a5307f63bab</anchor>
      <arglist>(uint16_t val)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>swapEndian</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a09e891e5903fa0d3ebc134434989e01a</anchor>
      <arglist>(int32_t val)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>swapEndian</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>af45659ccd7b6a856c66c3c33231832b4</anchor>
      <arglist>(uint32_t val)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>swapEndian</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a7b40eea7333e9cd70610df3fca76953d</anchor>
      <arglist>(float val)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>swapEndian</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a12b0529d707b16f70b5d43e8de2e1c23</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapEndianBlock</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a023a4abe2acda0d4b1df324898e53f16</anchor>
      <arglist>(uint16_t *blockPtr, size_t blockSizeInBytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapEndianBlock</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad385840f68925ed0a1fcabff3c1300c7</anchor>
      <arglist>(float *blockPtr, size_t blockSizeInBytes)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vector.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_vector_8h</filename>
    <class kind="class">cinder::Vec3</class>
    <class kind="class">cinder::Vec2</class>
    <class kind="class">cinder::Vec3</class>
    <class kind="class">cinder::Vec4</class>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>Vec2&lt; int &gt;</type>
      <name>Vec2i</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a856f2784df30e9b72860f0fa3ca059cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec2&lt; float &gt;</type>
      <name>Vec2f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad2764a1271ad16462755205deb72a71e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec2&lt; double &gt;</type>
      <name>Vec2d</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a949f3074b04c17e575561420d713366a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec3&lt; int &gt;</type>
      <name>Vec3i</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae25fb02de5ab8de676d5f01eda0dde6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec3&lt; float &gt;</type>
      <name>Vec3f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a3b206bc2a596ae4c5aa0ff695b32e6c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec3&lt; double &gt;</type>
      <name>Vec3d</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4376621a5e0e2f5f087d4c1bee0c1996</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec4&lt; int &gt;</type>
      <name>Vec4i</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae211d5e51713473d1e1859e10741ae88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec4&lt; float &gt;</type>
      <name>Vec4f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a2d7876ac5ddcf229fbbff1c8560b99d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec4&lt; double &gt;</type>
      <name>Vec4d</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1f43f683f30504f42a9a92e7770e5931</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>toPolar</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a32edc174fc54523e8a5d304c882bcd26</anchor>
      <arglist>(Vec2&lt; T &gt; car)</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>fromPolar</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aabeb1da7b37ae95bd1d00230aea9d973</anchor>
      <arglist>(Vec2&lt; T &gt; pol)</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5fd2a978530d4fe0f9530c193afbcc79</anchor>
      <arglist>(Y s, const Vec2&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a815a7c0ccfb95ac3c9c14fd1a2858405</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;v, Y s)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab16bdfda06c3b426d76016ce3d8a122f</anchor>
      <arglist>(Y s, const Vec3&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a2942b477b9113ecc0aaa3e09fb7185e0</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;v, Y s)</arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aa4e06a06ca4db31403bd13e68d12f2f7</anchor>
      <arglist>(Y s, const Vec4&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a164a9e827dc3d31b9c89df8245f0c1e7</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;v, Y s)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1a2791d20778e7119aa84213da3f89e5</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;a, const Vec2&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae5ccc39c9b220cc7b19ac24172223afb</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;a, const Vec3&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a19387216aacb9a150814346c57729f6c</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;a, const Vec4&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>cross</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aa2c02b83cf67e5cf3d8d411f9f1719e6</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;a, const Vec3&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>cross</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a50716fbf1f8e884ba689a292d6b336dc</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;a, const Vec4&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6778e2a88f47737cb85fbd5e35c83b89</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5ccc6f0e2f12dc6380e91bca0784753e</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad72fc534b611d48e33ca599abb5a804e</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Xml.h</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>_xml_8h</filename>
    <class kind="class">cinder::XmlTree</class>
    <class kind="class">cinder::XmlTree::ConstIter</class>
    <class kind="class">cinder::XmlTree::Iter</class>
    <class kind="class">cinder::XmlTree::Attr</class>
    <class kind="class">cinder::XmlTree::ParseOptions</class>
    <class kind="class">cinder::XmlTree::Exception</class>
    <class kind="class">cinder::XmlTree::ExcChildNotFound</class>
    <class kind="class">cinder::XmlTree::ExcAttrNotFound</class>
    <class kind="class">cinder::XmlTree::ExcUnknownNodeType</class>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aa0374a726bd49f390da046ca3126d913</anchor>
      <arglist>(ostream &amp;out, const XmlTree &amp;xml)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>App.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/app/</path>
    <filename>_app_8cpp</filename>
  </compound>
  <compound kind="file">
    <name>AppBasic.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/app/</path>
    <filename>_app_basic_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
  </compound>
  <compound kind="file">
    <name>AppCocoaTouch.mm</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/app/</path>
    <filename>_app_cocoa_touch_8mm</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a97f28a240e92fa4487df3ddd3256a258</anchor>
      <arglist>(std::ostream &amp;lhs, const InterfaceOrientation &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOrientationDegrees</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a7f6f1b4a7dbb7d44d141daa1bc5c6857</anchor>
      <arglist>(InterfaceOrientation orientation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>WindowImplCocoaTouch *</type>
      <name>initWithFormat:withAppImpl:sharedRenderer:</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>a0296a865b105a9dcd9ddea51ab819799</anchor>
      <arglist>(cinder::app::Window::Format format,[withAppImpl] AppImplCocoaTouch *appImpl,[sharedRenderer] cinder::app::RendererRef sharedRenderer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>loadView</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>ae2fd5ca1d8c7d72ba5501cf61478f2c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>viewDidLoad</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>aa5a50adbd2b567d3a8ae3445329b70d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>BOOL</type>
      <name>shouldAutorotateToInterfaceOrientation:</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>a983ec8bd458a98d01ae1ad8622386919</anchor>
      <arglist>(UIInterfaceOrientation toInterfaceOrientation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>NSUInteger</type>
      <name>supportedInterfaceOrientations</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>a64c106f6fcb37dd6e0d5f54fad5b1a52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>willAnimateRotationToInterfaceOrientation:duration:</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>a1758615707841a7db894e09cca92309f</anchor>
      <arglist>(UIInterfaceOrientation interfaceOrientation,[duration] NSTimeInterval duration)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>didRotateFromInterfaceOrientation:</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>a13b52b1ee4990547e2982b0f97854770</anchor>
      <arglist>(UIInterfaceOrientation fromInterfaceOrientation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>BOOL</type>
      <name>isFullScreen</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>aa7bee72076b60d342ddab70e46ccf645</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>setFullScreen:options:</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>a8c2e00f6cddd37efdeae21a238d9068c</anchor>
      <arglist>(BOOL fullScreen,[options] ci::app::FullScreenOptions *options)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>cinder::Vec2i</type>
      <name>getSize</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>aea83544ddde8974557f39f97b548918b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>setSize:</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>a5d07975c2e377c10517513dec2258556</anchor>
      <arglist>(cinder::Vec2i size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>cinder::Vec2i</type>
      <name>getPos</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>a5b1bd41df2da8b63b0fe1b915999d41a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>setPos:</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>adfb63fb0d23450668c68bacd27be62ed</anchor>
      <arglist>(cinder::Vec2i pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>float</type>
      <name>getContentScale</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>a235cc5adcd7ec358e5e74bf9d29ae374</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>close</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>a5ae591df94fc66ccb85cbb6565368bca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>NSString *</type>
      <name>getTitle</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>aea4e404812d6935c62da6556b56699e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>BOOL</type>
      <name>isBorderless</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>acee1026054ef6c95babc2dc62c65b356</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>setBorderless:</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>ac4f5dcf967e3fd09bb79c7b693fab032</anchor>
      <arglist>(BOOL borderless)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>BOOL</type>
      <name>isAlwaysOnTop</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>afc146e267959488a7c9caee29ba1cece</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>setAlwaysOnTop:</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>abe8503f2de8faf60b1da9f61777f0ec3</anchor>
      <arglist>(BOOL alwaysOnTop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>hide</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>ade42eb4da4eb77db85a8d1e4b92e7be4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>show</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>a4b148f40a95444d5669406b918ad2f52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>BOOL</type>
      <name>isHidden</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>a6da428af0bd3dcc585ac2099511786cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>cinder::DisplayRef</type>
      <name>getDisplay</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>aaf75bb13c4e644638ff923708b9c8e19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>cinder::app::RendererRef</type>
      <name>getRenderer</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>ab314a407cf7afe92b67ef42bca35b142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void *</type>
      <name>getNative</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>a0d22a6ab74cbaf874d60f739b270d363</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>UIViewController *</type>
      <name>getNativeViewController</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>aafcbcc128abfc3fac14ceaf00b2ee262</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>const std::vector&lt; cinder::app::TouchEvent::Touch &gt; &amp;</type>
      <name>getActiveTouches</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>a850b9e1cab9c84b297d1045884f40600</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>draw</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>a56c5cf8a568cff737ff95520cbe6b405</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>resize</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>a0fc3d585aa53859602ac79c9c421f2a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>mouseDown:</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>abc388423a2118e29b3e3f88252c04fc2</anchor>
      <arglist>(cinder::app::MouseEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>mouseDrag:</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>a6d412820f7e6a805632812dc53def02a</anchor>
      <arglist>(cinder::app::MouseEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>mouseUp:</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>a2ac02b88a27c2c2a626fa9b0776f6621</anchor>
      <arglist>(cinder::app::MouseEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>touchesBegan:</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>a32421580d572996e97b98150fdc0584b</anchor>
      <arglist>(cinder::app::TouchEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>touchesMoved:</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>aa700efeb07df04900f5e653b299c869d</anchor>
      <arglist>(cinder::app::TouchEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>touchesEnded:</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>a2e3ed9ff5b3ef3305696c5adf36e9202</anchor>
      <arglist>(cinder::app::TouchEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>cinder::app::WindowRef</type>
      <name>getWindowRef</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>ad0ff264f726de6b409d6c5499e76bb05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>keyDown:</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>a356c679584406ce7d0a16031adabe135</anchor>
      <arglist>(cinder::app::KeyEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>setKeyboardString:</name>
      <anchorfile>_app_cocoa_touch_8mm.html</anchorfile>
      <anchor>ad8cd62dc1efe165247681a79e04e9c4b</anchor>
      <arglist>(const std::string *keyboardString)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AppCocoaView.mm</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/app/</path>
    <filename>_app_cocoa_view_8mm</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
  </compound>
  <compound kind="file">
    <name>AppImplCocoaBasic.mm</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/app/</path>
    <filename>_app_impl_cocoa_basic_8mm</filename>
  </compound>
  <compound kind="file">
    <name>AppImplCocoaRendererGl.mm</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/app/</path>
    <filename>_app_impl_cocoa_renderer_gl_8mm</filename>
  </compound>
  <compound kind="file">
    <name>AppImplCocoaRendererQuartz.mm</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/app/</path>
    <filename>_app_impl_cocoa_renderer_quartz_8mm</filename>
  </compound>
  <compound kind="file">
    <name>AppImplCocoaScreenSaver.mm</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/app/</path>
    <filename>_app_impl_cocoa_screen_saver_8mm</filename>
    <member kind="function">
      <type>AppImplCocoaScreenSaver *</type>
      <name>getAppImpl</name>
      <anchorfile>_app_impl_cocoa_screen_saver_8mm.html</anchorfile>
      <anchor>a8d8a05992b88316eca20c16eeaee5e24</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AppImplCocoaTouchRendererGl.mm</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/app/</path>
    <filename>_app_impl_cocoa_touch_renderer_gl_8mm</filename>
  </compound>
  <compound kind="file">
    <name>AppImplCocoaTouchRendererQuartz.mm</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/app/</path>
    <filename>_app_impl_cocoa_touch_renderer_quartz_8mm</filename>
  </compound>
  <compound kind="file">
    <name>AppImplMsw.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/app/</path>
    <filename>_app_impl_msw_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
    <member kind="function">
      <type>LRESULT CALLBACK</type>
      <name>WndProc</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a7733cfd3230445d90fcfab2eecedec0e</anchor>
      <arglist>(HWND mWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</arglist>
    </member>
    <member kind="function">
      <type>LRESULT CALLBACK</type>
      <name>BlankingWndProc</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>afa87fcce557e3c5f25da30aabcce6687</anchor>
      <arglist>(HWND mWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>prepMouseEventModifiers</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a9ab147cf8e4e9c68ce51220589640e21</anchor>
      <arglist>(WPARAM wParam)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>prepNativeKeyCode</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a55c7705fae9716e7b1aa90fc304eae2d</anchor>
      <arglist>(WPARAM wParam)</arglist>
    </member>
    <member kind="function">
      <type>WCHAR</type>
      <name>mapVirtualKey</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>aa7dfe197bd1574f1f9fb269c576bdf72</anchor>
      <arglist>(WPARAM wParam)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>prepKeyEventModifiers</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>ab2f2c166b60e78d83bbb212b95ae476a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AppImplMswBasic.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/app/</path>
    <filename>_app_impl_msw_basic_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
  </compound>
  <compound kind="file">
    <name>AppImplMswRendererGdi.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/app/</path>
    <filename>_app_impl_msw_renderer_gdi_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
  </compound>
  <compound kind="file">
    <name>AppImplMswRendererGl.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/app/</path>
    <filename>_app_impl_msw_renderer_gl_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
    <member kind="function">
      <type>HWND</type>
      <name>createDummyWindow</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a3bcfb56b5e2ac88ebe6fba5e74ee7a0e</anchor>
      <arglist>(int *width, int *height, bool fullscreen)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>sMultisampleSupported</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a8b4be73eff97f9d62184412ef5c2a46c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sArbMultisampleFormat</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>adad8aba92f227df5cd28fc7b28666ced</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AppImplMswScreenSaver.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/app/</path>
    <filename>_app_impl_msw_screen_saver_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
  </compound>
  <compound kind="file">
    <name>AppScreenSaver.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/app/</path>
    <filename>_app_screen_saver_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
  </compound>
  <compound kind="file">
    <name>CinderView.mm</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/app/</path>
    <filename>_cinder_view_8mm</filename>
  </compound>
  <compound kind="file">
    <name>CinderViewCocoaTouch.mm</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/app/</path>
    <filename>_cinder_view_cocoa_touch_8mm</filename>
  </compound>
  <compound kind="file">
    <name>KeyEvent.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/app/</path>
    <filename>_key_event_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
    <member kind="variable">
      <type>map&lt; int, int &gt;</type>
      <name>sKeyTable</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1bcdf331ef120915e0d9823388eff457</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Renderer.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/app/</path>
    <filename>_renderer_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
  </compound>
  <compound kind="file">
    <name>Window.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/app/</path>
    <filename>_window_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::app</namespace>
  </compound>
  <compound kind="file">
    <name>Area.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_area_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>CocoaCaConverter.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/audio/</path>
    <filename>_cocoa_ca_converter_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
  </compound>
  <compound kind="file">
    <name>FftProcessor.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/audio/</path>
    <filename>_fft_processor_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
    <member kind="typedef">
      <type>cinder::audio::FftProcessorImplAccelerate</type>
      <name>FftProcessorPlatformImpl</name>
      <anchorfile>_fft_processor_8cpp.html</anchorfile>
      <anchor>a59945b2cef909695efb3195a32a13809</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FftProcessorImplAccelerate.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/audio/</path>
    <filename>_fft_processor_impl_accelerate_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
    <member kind="function">
      <type>void</type>
      <name>deleteFftBuffer</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a901399b8fe7dce83d36e006bc0255fb4</anchor>
      <arglist>(float *buffer)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Input.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/audio/</path>
    <filename>_input_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
    <member kind="typedef">
      <type>cinder::audio::InputImplAudioUnit</type>
      <name>InputPlatformImpl</name>
      <anchorfile>_input_8cpp.html</anchorfile>
      <anchor>af35c05d741142914889cdea5eb5716f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>InputImplAudioUnit.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/audio/</path>
    <filename>_input_impl_audio_unit_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
    <member kind="typedef">
      <type>ComponentDescription</type>
      <name>AudioComponentDescription</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a2ff32656f0ab161a01f6b0cad2c1a5c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Io.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/audio/</path>
    <filename>_io_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
  </compound>
  <compound kind="file">
    <name>Output.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/audio/</path>
    <filename>_output_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
    <member kind="typedef">
      <type>cinder::audio::OutputImplAudioUnit</type>
      <name>OutputPlatformImpl</name>
      <anchorfile>_output_8cpp.html</anchorfile>
      <anchor>aa314f2c998f04a8137a7a0c84660940a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OutputImplAudioUnit.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/audio/</path>
    <filename>_output_impl_audio_unit_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
  </compound>
  <compound kind="file">
    <name>OutputImplXAudio.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/audio/</path>
    <filename>_output_impl_x_audio_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
  </compound>
  <compound kind="file">
    <name>PcmBuffer.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/audio/</path>
    <filename>_pcm_buffer_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
    <member kind="function">
      <type></type>
      <name>BOOST_PP_SEQ_FOR_EACH</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>aa31d56e2aed71f2abcf1ecd058bcf16b</anchor>
      <arglist>(CREATE_BUFFERLIST_PROTOTYPES,~, AUDIO_DATA_TYPES) template&lt; typename T &gt; PcmBufferT&lt; T &gt;</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SourceFile.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/audio/</path>
    <filename>_source_file_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
  </compound>
  <compound kind="file">
    <name>SourceFileWav.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/audio/</path>
    <filename>_source_file_wav_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_UNKOWN</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268a09939e774d7dd1f722c71007812fb5ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_PCM</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268ad0fc24843c8c5a006ea2d394c1acc7dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_MS_ADPCM</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268a1c475a2bced40c0cf928e0604ab037fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_IEEE_FLOAT</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268a32e9ebbccc49d32e9cf6c5a4fddc17b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_ALAW</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268a03e65bbc1df56892438990e458f59aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_MULAW</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268a94e64a4e23c5f4c430bae900429af907</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_DIALOGIC_OKI_ADPCM</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268aab537bc271be7a6df70e7a118da8631f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_YAMAHA_ADPCM</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268ae0222b5b178a06163617d27a48f1dafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_GSM610</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268aff1ff1f2c338b440e68150c9f2d4bb14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_G721_ADPCM</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268a323f725bd36509d3aabccb01020e8e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_MPEG</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268aab8c87aea0af3bb16a5c306d63148beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_MP3</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268aa0f66111b169c37d42a4dde3666e1e49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readStreamWithEndianess</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a8eac97ba802d6d7ca340f6e2ae93a0a2</anchor>
      <arglist>(IStreamRef aIStream, T *param, bool isBigEndian)</arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>gRiffMarker</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>ac08516a6c8bc8649d98c7277b0d4d72d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>gRifxMarker</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a6e5fad076db9b80cb8a0db7f77cbd5f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>gWaveMarker</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>abbafccb37b2426b370abee600567eb3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>gDataMarker</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a5815a65a2c2fe8b6187d7a18a8638afd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>gFmtMarker</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a6e0146fba90a11f4ab58724515b80839</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SourceFileWindowsMedia.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/audio/</path>
    <filename>_source_file_windows_media_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::audio</namespace>
  </compound>
  <compound kind="file">
    <name>AxisAlignedBox.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_axis_aligned_box_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>BandedMatrix.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_banded_matrix_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Base64.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_base64_8cpp</filename>
    <namespace>cinder</namespace>
    <member kind="enumeration">
      <type></type>
      <name>base64_decodestep</name>
      <anchorfile>_base64_8cpp.html</anchorfile>
      <anchor>aeba20dd8a11380cd9be8d20a36364f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>base64_encodestep</name>
      <anchorfile>_base64_8cpp.html</anchorfile>
      <anchor>aa0ddacd74de976db0a12b0fc691c72f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BSpline.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_b_spline_8cpp</filename>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>void</type>
      <name>allocate2D</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>afecb29648586808db0ec44a952be3692</anchor>
      <arglist>(int iCols, int iRows, T **&amp;raatArray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate2D</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a48fa056dfdd9f7ddba1f38ae3f8db7c0</anchor>
      <arglist>(T **&amp;raatArray)</arglist>
    </member>
    <member kind="function">
      <type>T::TYPE</type>
      <name>getSpeedWithData</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a65150260bd0dfa39c6873de2806f9a97</anchor>
      <arglist>(float fTime, void *pvData)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>rombergIntegral</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>acb59a1eba8f350ef2d80f67230e51e49</anchor>
      <arglist>(int iOrder, Real fA, Real fB, Real(*oF)(Real, void *), void *pvUserData)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BSplineFit.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_b_spline_fit_8cpp</filename>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>BSplineFit&lt; float &gt;</type>
      <name>BSplineFitf</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae9056e93b3d2a28766d6af9c16157324</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BSplineFit&lt; double &gt;</type>
      <name>BSplineFitd</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a46a91a79822da4a7ad2ceefc54d01c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BSplineFitBasis&lt; float &gt;</type>
      <name>BSplineFitBasisf</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae81c9effc426dca595a1c811f03c3bf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BSplineFitBasis&lt; double &gt;</type>
      <name>BSplineFitBasisd</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac99a2fbd7b85a15375ec0c5c022d2d9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>template BSpline&lt; Vec2f &gt;</type>
      <name>fitBSpline</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6c5998564c5601a9275a1ea514183b48</anchor>
      <arglist>(const std::vector&lt; Vec2f &gt; &amp;samples, int degree, int outputSamples)</arglist>
    </member>
    <member kind="function">
      <type>template BSpline&lt; Vec3f &gt;</type>
      <name>fitBSpline</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a36bf3bad5048f637260c790d3b658480</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;samples, int degree, int outputSamples)</arglist>
    </member>
    <member kind="function">
      <type>template BSpline&lt; Vec4f &gt;</type>
      <name>fitBSpline</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a86f59f78ae8d997d6c3baaae77d6a76c</anchor>
      <arglist>(const std::vector&lt; Vec4f &gt; &amp;samples, int degree, int outputSamples)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Buffer.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_buffer_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Camera.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_camera_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Capture.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_capture_8cpp</filename>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>CaptureImplQtKit</type>
      <name>CapturePlatformImpl</name>
      <anchorfile>_capture_8cpp.html</anchorfile>
      <anchor>ade13ad4f24f082bf3335581fc2704758</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaptureImplAvFoundation.mm</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_capture_impl_av_foundation_8mm</filename>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>void</type>
      <name>frameDeallocator</name>
      <anchorfile>_capture_impl_av_foundation_8mm.html</anchorfile>
      <anchor>ad4911aa50cd08dc9a556960f5e045f30</anchor>
      <arglist>(void *refcon)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CaptureImplCocoaDummy.mm</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_capture_impl_cocoa_dummy_8mm</filename>
  </compound>
  <compound kind="file">
    <name>CaptureImplDirectShow.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_capture_impl_direct_show_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>CaptureImplQtKit.mm</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_capture_impl_qt_kit_8mm</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Channel.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_channel_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>CinderMath.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_cinder_math_8cpp</filename>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>template int</type>
      <name>solveCubic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>abf210dab11de34fcd082cb591005e0e3</anchor>
      <arglist>(float a, float b, float c, float d, float result[3])</arglist>
    </member>
    <member kind="function">
      <type>template int</type>
      <name>solveCubic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a616c2e3e4641ed8add33f0aabdfa6860</anchor>
      <arglist>(double a, double b, double c, double d, double result[3])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Clipboard.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_clipboard_8cpp</filename>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>bool</type>
      <name>clipboardContainsFormat</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad35aa5b63ab2acc75a47125d9efd2481</anchor>
      <arglist>(const std::set&lt; UINT &gt; &amp;formats)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CinderCocoa.mm</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/cocoa/</path>
    <filename>_cinder_cocoa_8mm</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::cocoa</namespace>
    <member kind="function">
      <type>ImageSourceCgImageRef</type>
      <name>createImageSource</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a63180afe76a6ccfef65efd35bfee7d5c</anchor>
      <arglist>(::CGImageRef imageRef, ImageSource::Options options)</arglist>
    </member>
    <member kind="function">
      <type>::CGImageRef</type>
      <name>createCgImage</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a382256058b2da10083a67e6e972e3123</anchor>
      <arglist>(ImageSourceRef imageSource, ImageTarget::Options options)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CinderCocoaTouch.mm</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/cocoa/</path>
    <filename>_cinder_cocoa_touch_8mm</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::cocoa</namespace>
  </compound>
  <compound kind="file">
    <name>Color.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_color_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>ConvexHull.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_convex_hull_8cpp</filename>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>boost::geometry::model::polygon&lt; boost::geometry::model::d2::point_xy&lt; double &gt; &gt;</type>
      <name>polygon</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>af235f738414aac1126713d5c71b7df3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DataSource.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_data_source_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>DataTarget.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_data_target_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Display.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_display_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Exception.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_exception_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Font.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_font_8cpp</filename>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>int CALLBACK</type>
      <name>EnumFontFamiliesExProc</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a3bd8b4c7feb29318ce18976394f4c0ff</anchor>
      <arglist>(ENUMLOGFONTEX *lpelfe, NEWTEXTMETRICEX *lpntme, int FontType, LPARAM lParam)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CFRelease</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a612078d249c8e246cad1d4eafc3f3f21</anchor>
      <arglist>(cfName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a88a12bdd651c04a70fefadb73ac42362</anchor>
      <arglist>(mCGFont==0) throw FontInvalidNameExc(aName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assert</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a62624269f932e4f701acd768d37953b5</anchor>
      <arglist>(sizeof(wchar_t)==2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>finishSetup</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>adde49e18a185e70d5d8a4b2592829331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Font::Obj::Obj(DataSourceRef dataSource, float size) std::shared_ptr&lt; CGDataProvider &gt;</type>
      <name>dataProvider</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>acb35c89f8bc1948edd79834a8cfa73ec</anchor>
      <arglist>(::CGDataProviderCreateWithData(NULL, buffer.getData(), buffer.getDataSize(), NULL),::CGDataProviderRelease)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5685ea33102481208d352e00531c3ad3</anchor>
      <arglist>(!dataProvider) throw FontInvalidNameExc()</arglist>
    </member>
    <member kind="function">
      <type>privateFontCollection</type>
      <name>AddMemoryFont</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae9b96d230896d487c24400dd24ef7c44</anchor>
      <arglist>(buffer.getData(), buffer.getDataSize())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a2a64e3b3803bce5cd2f98651bf213a66</anchor>
      <arglist>(count&lt;=0) throw FontInvalidNameExc()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; void &gt;</type>
      <name>fontFamily</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aa7358bf053d932eda06b021e804ee347</anchor>
      <arglist>(malloc(sizeof(Gdiplus::FontFamily)), free)</arglist>
    </member>
    <member kind="function">
      <type>privateFontCollection</type>
      <name>GetFamilies</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aab7d61962f491f28b9d0dd694ad36ca9</anchor>
      <arglist>(1,(Gdiplus::FontFamily *) fontFamily.get(),&amp;found)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a71dc10e520dd6bd7f9e30a9ba2ce06c0</anchor>
      <arglist>(found!=0)</arglist>
    </member>
    <member kind="function">
      <type>else throw</type>
      <name>FontInvalidNameExc</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab56ac94e00ebcc5b88b7cff2a7439154</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>add6d255be8d927eb66114814068b6371</anchor>
      <arglist>(numFonts&lt; 1) throw FontInvalidNameExc()</arglist>
    </member>
    <member kind="variable">
      <type>Font::Obj::Obj(const string &amp;aName, float aSize)</type>
      <name>mCGFont</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a93e61751836f84af8121af17568d566e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>mCTFont</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aa0a5123f1f6d8720036519334b87fa46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CFStringRef</type>
      <name>fullName</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a8ce490c2db84399c935cb509360b5299</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>result</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a39abeeee2fc580f6d0f9359967e6d6a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>wstring</type>
      <name>faceName</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ade7d33d4d4ae0601b07b2163a1da0a99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>mHfont</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a9a2fd6cce484c3ae9f5a7d37cda10c55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>mGdiplusFont</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a89d912e05615a5d4c9d92bbab1870f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>INT</type>
      <name>found</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a90d1b0ef7f78d1f26f3fc25213a2788d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>INT</type>
      <name>count</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a49349787b58c4b21097e27f0b9bc14e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>WCHAR</type>
      <name>familyName</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a0e5522e2fa6e03c54058b770e909131e</anchor>
      <arglist>[1024]</arglist>
    </member>
    <member kind="variable">
      <type>Gdiplus::PrivateFontCollection</type>
      <name>privateFontCollection</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4688aac388c003c9150d47c275829a0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ci::Buffer</type>
      <name>buffer</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aba4f36c69e234b56e03daa47da5c7a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DWORD</type>
      <name>numFonts</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aac73deb3fb41a10193111804d3c14b09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Frustum.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_frustum_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>DisplayList.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/gl/</path>
    <filename>_display_list_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
  </compound>
  <compound kind="file">
    <name>Fbo.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/gl/</path>
    <filename>_fbo_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
  </compound>
  <compound kind="file">
    <name>gl.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/gl/</path>
    <filename>gl_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a838fabf019bc0666b00d36dd5589c204</anchor>
      <arglist>(const PolyLine&lt; Vec2f &gt; &amp;polyLine)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>abe4eb3754575bc15cdc6e1d7d134421b</anchor>
      <arglist>(const PolyLine&lt; Vec3f &gt; &amp;polyLine)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a395ee245bed68f44690f895bb1973fe5</anchor>
      <arglist>(const Path2d &amp;path2d, float approximationScale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>afa2ada755608e381759e3e125a15902c</anchor>
      <arglist>(const Shape2d &amp;shape2d, float approximationScale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolid</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>afad5aabf8d23cbbade074495422ae286</anchor>
      <arglist>(const Path2d &amp;path2d, float approximationScale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolid</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a3aa639210fec19f33e71aed8e6fcfe95</anchor>
      <arglist>(const Shape2d &amp;shape2d, float approximationScale)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GLee.c</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/gl/</path>
    <filename>_g_lee_8c</filename>
    <member kind="typedef">
      <type>GLuint(*</type>
      <name>GLEE_LINK_FUNCTION</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae1afbacd36e107561a213b628f0039cd</anchor>
      <arglist>)(void)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>__GLeeGetProcAddress</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaed02d78ba5bb32130de7663966e695c</anchor>
      <arglist>(const char *extname)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBlendColor</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ace0d27c85a418952fc2ec81838db6ead</anchor>
      <arglist>(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBlendEquation</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a273b6cf132dd3a1470c2685e6760b0b2</anchor>
      <arglist>(GLenum mode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDrawRangeElements</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af16feb1129413b49efcb47d90fd540c9</anchor>
      <arglist>(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColorTable</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aee170fabff608c2506066a719016588c</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColorTableParameterfv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a92c07baa2bbacfdd376b0ccd1fe8a62f</anchor>
      <arglist>(GLenum target, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColorTableParameteriv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7de209e77fbb1cd0527a0e6de6e5b91a</anchor>
      <arglist>(GLenum target, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyColorTable</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a640fdeec90ee493beedb86d3e47d42fb</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetColorTable</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a79a23b0cfef7de32c4f064bf10c3d2f7</anchor>
      <arglist>(GLenum target, GLenum format, GLenum type, GLvoid *table)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetColorTableParameterfv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a043ba4ac4d41584fb4f15785342f338f</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetColorTableParameteriv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5c319ba9e7d5020557679736c943e274</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColorSubTable</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab9c0999d17697beb67f5f88615319c76</anchor>
      <arglist>(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyColorSubTable</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af581ddab9b46a29afc9c7979aefbd1b5</anchor>
      <arglist>(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glConvolutionFilter1D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9a2412297102a26b103f2ec10aa4b212</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glConvolutionFilter2D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7c9313b34579619ccd8a750889949d23</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glConvolutionParameterf</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af62c7f75d46485fca9c9bab2088a2cbe</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glConvolutionParameterfv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a51daee635cc02f59a62ebbba06766e26</anchor>
      <arglist>(GLenum target, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glConvolutionParameteri</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a46e166d15326568fcfc41c31653531c7</anchor>
      <arglist>(GLenum target, GLenum pname, GLint params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glConvolutionParameteriv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac0636c22c80dee0062443d890bb5ab0a</anchor>
      <arglist>(GLenum target, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyConvolutionFilter1D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac2e785e7829cbe88e1b61b360975b638</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyConvolutionFilter2D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8fb1d955d8082474c3f2c4f686105faf</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetConvolutionFilter</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa4004b8bd237f28a102a020ad6a19c9d</anchor>
      <arglist>(GLenum target, GLenum format, GLenum type, GLvoid *image)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetConvolutionParameterfv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a23d37062358a378b6d138554be047a0a</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetConvolutionParameteriv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a40457b3835a8d4f9c2f41418c12e9e1c</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetSeparableFilter</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5b1b712969111a1ca9c85776490f7fad</anchor>
      <arglist>(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSeparableFilter2D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac8db5481ce3f1d20ffad9c4b0263a207</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetHistogram</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4ffa1850e2fee43397a8a1555296cd41</anchor>
      <arglist>(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetHistogramParameterfv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af39fa182ee7965bc20ccff2ec75fcdfb</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetHistogramParameteriv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa8ae1a1e67929e291b2e401316fd7e91</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMinmax</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1d616b7f579fbb0551e7e4910fe91534</anchor>
      <arglist>(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMinmaxParameterfv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a68bcb4992039aa8de9182a8ebb89750c</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMinmaxParameteriv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa81dfc4f6ca0de13137317fe5c207b79</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glHistogram</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1b9fd3d33d0bc81f6d8f1fa4e091c016</anchor>
      <arglist>(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMinmax</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2752eb8c2dedf6fe357c17a4f2466bf7</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLboolean sink)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glResetHistogram</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a31a56542704b63076323d88d2b3a98c6</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glResetMinmax</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9fc8611d01ea084d4c61e84082499553</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexImage3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2c5420fe24bf636f474cf3374cef4db5</anchor>
      <arglist>(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexSubImage3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a609a081704c0499143c279285f017d34</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyTexSubImage3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a283b79c4669c7541eac30ec5f36b7657</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glActiveTexture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a45de44568ab360a0869f20c1d8ed6b4d</anchor>
      <arglist>(GLenum texture)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glClientActiveTexture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a20d30c4802424a2a151accde7d1575d1</anchor>
      <arglist>(GLenum texture)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord1d</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afe52dcad47179424203efdeaa13f7fc4</anchor>
      <arglist>(GLenum target, GLdouble s)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord1dv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9ce6f9c2b91f4a534a671b45a90feb63</anchor>
      <arglist>(GLenum target, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord1f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a845e2a413059134263aa56f0b4922a00</anchor>
      <arglist>(GLenum target, GLfloat s)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord1fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad67f632c3d7512b7b2c22e1ce4ffff44</anchor>
      <arglist>(GLenum target, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord1i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa1b34aeb9e108cc6d374d6b63772a941</anchor>
      <arglist>(GLenum target, GLint s)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord1iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8fa9fd086d05c3e370b81dba33155cff</anchor>
      <arglist>(GLenum target, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord1s</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afb4ef2232d0ba28f476fa38f5cc0281a</anchor>
      <arglist>(GLenum target, GLshort s)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord1sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af67b743237de16f272cb89a63a12e570</anchor>
      <arglist>(GLenum target, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord2d</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad0a9858240f161421563c62fc004d808</anchor>
      <arglist>(GLenum target, GLdouble s, GLdouble t)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord2dv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa2fc55d24a9d7a359a84f09c0f51c49f</anchor>
      <arglist>(GLenum target, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord2f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab7c381fb49ef953284411e2f0865b20d</anchor>
      <arglist>(GLenum target, GLfloat s, GLfloat t)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord2fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a66d5a6d19e61a36bbd340f355b3f75ea</anchor>
      <arglist>(GLenum target, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord2i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa64e9ebe788fa338c0bd3e649a9eb1c6</anchor>
      <arglist>(GLenum target, GLint s, GLint t)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord2iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8f2a7b6400dec9c6c2836059f920d884</anchor>
      <arglist>(GLenum target, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord2s</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad99386534d055c5bb8d9e53c1da46263</anchor>
      <arglist>(GLenum target, GLshort s, GLshort t)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord2sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0df1fe4f60da1a2480e7ec07126f44ee</anchor>
      <arglist>(GLenum target, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord3d</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acce53b6319e69693b56a40d0efea0502</anchor>
      <arglist>(GLenum target, GLdouble s, GLdouble t, GLdouble r)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord3dv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab08b8478829e995858b75743066ddccc</anchor>
      <arglist>(GLenum target, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord3f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a23b590ad249aab29f1744cc87e00c809</anchor>
      <arglist>(GLenum target, GLfloat s, GLfloat t, GLfloat r)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord3fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a397d4cb5d226c6522da2af81a63c0af6</anchor>
      <arglist>(GLenum target, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord3i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a55810f1599b057db24cd5098d4bd068f</anchor>
      <arglist>(GLenum target, GLint s, GLint t, GLint r)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord3iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acd1de649df3fc56f90168a7281f71af5</anchor>
      <arglist>(GLenum target, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord3s</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa9abaaec07371ce4fc83d83bd89e3a9d</anchor>
      <arglist>(GLenum target, GLshort s, GLshort t, GLshort r)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord3sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a297425b5e7873a477f166eed45d7cf9f</anchor>
      <arglist>(GLenum target, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord4d</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a78c142db83543603477a361fa223530c</anchor>
      <arglist>(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord4dv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9d7340bdf540148c627dc380b99f971b</anchor>
      <arglist>(GLenum target, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord4f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa81fdb1ff047b2f67dc755262b1578b6</anchor>
      <arglist>(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord4fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaa0ba3e397275bb3fa6cd505f2ed673e</anchor>
      <arglist>(GLenum target, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord4i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2aee0aba67c3ef01329464b606e188d5</anchor>
      <arglist>(GLenum target, GLint s, GLint t, GLint r, GLint q)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord4iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a988d42b16391063d6beb71e5434f40b8</anchor>
      <arglist>(GLenum target, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord4s</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a266c24d2a93e7653e77654d29ef42f13</anchor>
      <arglist>(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord4sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8897b1a50def8259497bd7eb8b0affd5</anchor>
      <arglist>(GLenum target, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glLoadTransposeMatrixf</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaec3c7d985a4ab317ba49c5e5b0ff928</anchor>
      <arglist>(const GLfloat *m)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glLoadTransposeMatrixd</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2826e5989a0e42c7acf762e5bf8c9bd3</anchor>
      <arglist>(const GLdouble *m)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultTransposeMatrixf</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab77c6682c5462f1e799ba39e6e0b08de</anchor>
      <arglist>(const GLfloat *m)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultTransposeMatrixd</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a61811225042791d5aadcd8945ebae494</anchor>
      <arglist>(const GLdouble *m)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSampleCoverage</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a463475e56c25c15dcec3e794bcb92961</anchor>
      <arglist>(GLclampf value, GLboolean invert)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedTexImage3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0e1602045a37d88e7c4bc4067c657b4b</anchor>
      <arglist>(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedTexImage2D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad5e2cef199043636fa3934a90c3ac46a</anchor>
      <arglist>(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedTexImage1D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a67da53a09609552942943b89d3f60dc7</anchor>
      <arglist>(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedTexSubImage3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4e609c82e04793d99f3a6e91974dff6b</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedTexSubImage2D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aea50e7f3ae2caa02fa5cff09e82ca665</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedTexSubImage1D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a49e0f3ba6964c6623839a77ca346ea7d</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetCompressedTexImage</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a77052c4a8612012893f0adb7ecafa3de</anchor>
      <arglist>(GLenum target, GLint level, GLvoid *img)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBlendFuncSeparate</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8fa803674fde28b89ffea6dfcdd18535</anchor>
      <arglist>(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFogCoordf</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a62ad5e0e1e41d752880d98083d0c4d04</anchor>
      <arglist>(GLfloat coord)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFogCoordfv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5ec994fcb2b3db4c29e1299c1894e6f8</anchor>
      <arglist>(const GLfloat *coord)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFogCoordd</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afb45279a9fb4b34690da581fb15748a5</anchor>
      <arglist>(GLdouble coord)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFogCoorddv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adf5193c808cfa7ed3619eaf0bd02640c</anchor>
      <arglist>(const GLdouble *coord)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFogCoordPointer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a182661b86f81941eba7766f55a67fcea</anchor>
      <arglist>(GLenum type, GLsizei stride, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiDrawArrays</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a63f0eaa163970b8194b1b2f30e19971c</anchor>
      <arglist>(GLenum mode, GLint *first, GLsizei *count, GLsizei primcount)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiDrawElements</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a630d8a4b1cebdbecac2740e3fe68c191</anchor>
      <arglist>(GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPointParameterf</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5900bc57835f9869ef5aa23337d5c867</anchor>
      <arglist>(GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPointParameterfv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a23009d003871ad175ac800ba19db13ce</anchor>
      <arglist>(GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPointParameteri</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0e3f0f9b6ecd6c85cd9d15b8c6cc933b</anchor>
      <arglist>(GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPointParameteriv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae4d71e80fa26ef2e9f31ffc92b195703</anchor>
      <arglist>(GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3b</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7b41338afb0f988715843138537fe2f1</anchor>
      <arglist>(GLbyte red, GLbyte green, GLbyte blue)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3bv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acc5df62a23c8ba240167eb9112e2a5f4</anchor>
      <arglist>(const GLbyte *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3d</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae978cc730048732422abb219cb992352</anchor>
      <arglist>(GLdouble red, GLdouble green, GLdouble blue)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3dv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3a103b95e3b7d2628529edc82fb5468f</anchor>
      <arglist>(const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9869978eb99b970e59abe184981b9176</anchor>
      <arglist>(GLfloat red, GLfloat green, GLfloat blue)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa7003b00f766b634209b6d9133004dda</anchor>
      <arglist>(const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa106a58c97212248f6aa0392b8c01d61</anchor>
      <arglist>(GLint red, GLint green, GLint blue)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad9d1055d75692c453686a7ef336e0588</anchor>
      <arglist>(const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3s</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad601dcb3f1449b18627f2fc7cd3c7086</anchor>
      <arglist>(GLshort red, GLshort green, GLshort blue)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6ec6c51cf808b9e1fa9542a3b8449bc6</anchor>
      <arglist>(const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3ub</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abfb70b07b324247d0084611df88c4de6</anchor>
      <arglist>(GLubyte red, GLubyte green, GLubyte blue)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3ubv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a107caa7da67b8b256f71d36ce644befd</anchor>
      <arglist>(const GLubyte *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3ui</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab51a7e774b71189ef60ddf73f08eab2c</anchor>
      <arglist>(GLuint red, GLuint green, GLuint blue)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3uiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a84321a5a97fdff5f463a2cf80300719f</anchor>
      <arglist>(const GLuint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3us</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1b669cc0af17bfc6691b8ff14c13a044</anchor>
      <arglist>(GLushort red, GLushort green, GLushort blue)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3usv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac47cf22a451cd562a108ee9115ef12f9</anchor>
      <arglist>(const GLushort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColorPointer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a71b5d14668288afe3e6a0888ed80ab56</anchor>
      <arglist>(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2d</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8540d2ae5b939d3a7457562484a02f32</anchor>
      <arglist>(GLdouble x, GLdouble y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2dv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afcefd0bdff8ab3bfb832ae19dc68ff71</anchor>
      <arglist>(const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a51ba13830b1ce1f92985faf655e9e8e2</anchor>
      <arglist>(GLfloat x, GLfloat y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9c0f31b7871f404efb8e3218a54667d5</anchor>
      <arglist>(const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a189dbcfdc9b4691bbc3880d930006291</anchor>
      <arglist>(GLint x, GLint y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3b9919ef39853a155ad8604b9f3f6818</anchor>
      <arglist>(const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2s</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a562e7f58c8438624e2e5ba69e5d08f09</anchor>
      <arglist>(GLshort x, GLshort y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7d72cc355a8f7f92037743252af2a939</anchor>
      <arglist>(const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3d</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac17b0464090ece720730226bf5691bfc</anchor>
      <arglist>(GLdouble x, GLdouble y, GLdouble z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3dv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa5998e1506a33fcef996b45d9d2f85ea</anchor>
      <arglist>(const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5b89639408e280bf74dac4fd137e84b0</anchor>
      <arglist>(GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5a57bf7d5b48b7518aeddbafefde283f</anchor>
      <arglist>(const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5eda0eb4afd4be59054c91208e5edb29</anchor>
      <arglist>(GLint x, GLint y, GLint z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a35b7083bb7363d32fc76305555f8d426</anchor>
      <arglist>(const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3s</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acf5917b24b1b07ed5b92deea12ef8470</anchor>
      <arglist>(GLshort x, GLshort y, GLshort z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aef1aabf762273dcf60d8aceabf835599</anchor>
      <arglist>(const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGenQueries</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a53a2e9ab74027675a019529e3f24e97f</anchor>
      <arglist>(GLsizei n, GLuint *ids)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteQueries</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa1e657d39ba019b0bf1e5bee53fec007</anchor>
      <arglist>(GLsizei n, const GLuint *ids)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsQuery</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af7a52670cc3d21689f23321b441c854f</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBeginQuery</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acc27bfbb26e8f18b0460a31b3e331b22</anchor>
      <arglist>(GLenum target, GLuint id)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glEndQuery</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a436b95e86b484017156a2c572a38caa8</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetQueryiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ada8a9d3723e5021a45ac6a6440bcaf91</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetQueryObjectiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8c4278645025a72adcc54a2e716ce786</anchor>
      <arglist>(GLuint id, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetQueryObjectuiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a64f1f106f1e19162a5f0db9570fa2ca0</anchor>
      <arglist>(GLuint id, GLenum pname, GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindBuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a92a1ca1881907a4d0b37f61254023d29</anchor>
      <arglist>(GLenum target, GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteBuffers</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a201b9d41e9938f0b117f154e4af53dde</anchor>
      <arglist>(GLsizei n, const GLuint *buffers)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGenBuffers</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a146a1a0055a1fa7ab0ce0611bb9042a9</anchor>
      <arglist>(GLsizei n, GLuint *buffers)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsBuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7a4e752e5ac1e2bc3841045e71d43e4b</anchor>
      <arglist>(GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBufferData</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af7c57cea220ca76e4fd26ecc9a223445</anchor>
      <arglist>(GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBufferSubData</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9961bc6fdbf7f53ad1393fcf99d572de</anchor>
      <arglist>(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetBufferSubData</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a19ebaf4a9319d4157e505e7c132095be</anchor>
      <arglist>(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid *__stdcall</type>
      <name>GLee_Lazy_glMapBuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8b800109e144f7302d334fde4cccb32e</anchor>
      <arglist>(GLenum target, GLenum access)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glUnmapBuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3aff1b656711128ca8fd0a7045a793da</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetBufferParameteriv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac4c49a93a4a4857e99502c33ea5f401c</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetBufferPointerv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a62c5a2078c2029ba0afd88bdbcda520c</anchor>
      <arglist>(GLenum target, GLenum pname, GLvoid **params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBlendEquationSeparate</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4906ba0e4f10a2340a3f74aa3b9a06b6</anchor>
      <arglist>(GLenum modeRGB, GLenum modeAlpha)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDrawBuffers</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a47ec32dfc0feeffae2efc78c204b234b</anchor>
      <arglist>(GLsizei n, const GLenum *bufs)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glStencilOpSeparate</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa13cf4c484297da5f469a59c06919ccf</anchor>
      <arglist>(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glStencilFuncSeparate</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0a829bb1db42b926e935eefb1aa08d4c</anchor>
      <arglist>(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glStencilMaskSeparate</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afa27b1485742bad7e11f353d386304cf</anchor>
      <arglist>(GLenum face, GLuint mask)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glAttachShader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa5ff3ee49fe4c71417e5a9e59f63f987</anchor>
      <arglist>(GLuint program, GLuint shader)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindAttribLocation</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a689e87cf1fd60718a19fae14dac8d3d1</anchor>
      <arglist>(GLuint program, GLuint index, const GLchar *name)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompileShader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>add5785135e4773b7d2e978008dbfd493</anchor>
      <arglist>(GLuint shader)</arglist>
    </member>
    <member kind="function">
      <type>GLuint __stdcall</type>
      <name>GLee_Lazy_glCreateProgram</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a04210192a6d63518f7199c1e186f981b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint __stdcall</type>
      <name>GLee_Lazy_glCreateShader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a540acfb49f506f60f103f6404120b177</anchor>
      <arglist>(GLenum type)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteProgram</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afe9af01061e0e63479083f82b38b4f0b</anchor>
      <arglist>(GLuint program)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteShader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2ef35235396f9f836fc0a4ac31fb600e</anchor>
      <arglist>(GLuint shader)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDetachShader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa717df47b08164d4dade2025ec1d6421</anchor>
      <arglist>(GLuint program, GLuint shader)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDisableVertexAttribArray</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9a4d22866d3ee193292111d8c1e484e8</anchor>
      <arglist>(GLuint index)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glEnableVertexAttribArray</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afdfd0331101e46f821d2465e87e8860b</anchor>
      <arglist>(GLuint index)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetActiveAttrib</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a42d667f64104b611d242408be6782bb3</anchor>
      <arglist>(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetActiveUniform</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a650b63b7408c65776a77cb13e87d22f1</anchor>
      <arglist>(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetAttachedShaders</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac4ae117e01134f0848de73c594076759</anchor>
      <arglist>(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj)</arglist>
    </member>
    <member kind="function">
      <type>GLint __stdcall</type>
      <name>GLee_Lazy_glGetAttribLocation</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0435e83faa6e73893c2f49447d9a8860</anchor>
      <arglist>(GLuint program, const GLchar *name)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetProgramiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa26bebf16383700efeff94fe7890c26f</anchor>
      <arglist>(GLuint program, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetProgramInfoLog</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acd06a839e07e4e4b9239833373f08518</anchor>
      <arglist>(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetShaderiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9d06aff1076fad3128941156dd96aa26</anchor>
      <arglist>(GLuint shader, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetShaderInfoLog</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad84f2ea7879b5ac14b2491f66f84584e</anchor>
      <arglist>(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetShaderSource</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a83f381ea508e7805ddf93650200017e1</anchor>
      <arglist>(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)</arglist>
    </member>
    <member kind="function">
      <type>GLint __stdcall</type>
      <name>GLee_Lazy_glGetUniformLocation</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaf214dd0131c3a5da5708eaff7b90a56</anchor>
      <arglist>(GLuint program, const GLchar *name)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetUniformfv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aece79c5e228377e416b8cfe12d42719d</anchor>
      <arglist>(GLuint program, GLint location, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetUniformiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae4d5c37aae305f67d05bd59d1607fa67</anchor>
      <arglist>(GLuint program, GLint location, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetVertexAttribdv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa99240da79584274b0951e56bee33cfb</anchor>
      <arglist>(GLuint index, GLenum pname, GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetVertexAttribfv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8d2ef364c37f3c4a10b7a71143fb0b1e</anchor>
      <arglist>(GLuint index, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetVertexAttribiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9c310106d90283ed6307c6381ed8e61a</anchor>
      <arglist>(GLuint index, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetVertexAttribPointerv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a554a07afadbf66ed29df9b2cb8b83acf</anchor>
      <arglist>(GLuint index, GLenum pname, GLvoid **pointer)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsProgram</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a439894561baff6d4af8458d3139aafa1</anchor>
      <arglist>(GLuint program)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsShader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a80e7fc15b39607d0c649916640b1eaf0</anchor>
      <arglist>(GLuint shader)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glLinkProgram</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae989c0947366b42642655a505445cc1b</anchor>
      <arglist>(GLuint program)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glShaderSource</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a62736f59fa13152dc1fb07c546076b50</anchor>
      <arglist>(GLuint shader, GLsizei count, const GLchar **string, const GLint *length)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUseProgram</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad8780ae6bdfbd04a712453c987577e59</anchor>
      <arglist>(GLuint program)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform1f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a30680cd610afe3d238155474c322c287</anchor>
      <arglist>(GLint location, GLfloat v0)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform2f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aab5a7f45f2ab5e3d532c2a6daca62422</anchor>
      <arglist>(GLint location, GLfloat v0, GLfloat v1)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform3f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0954fbb8cffa4a0abe94b5fd7cf124ee</anchor>
      <arglist>(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform4f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af4c0c5b2c95e40e90e898696705beae1</anchor>
      <arglist>(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform1i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae07b22fc5e2bfd97018956be753995b6</anchor>
      <arglist>(GLint location, GLint v0)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform2i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abeb64df890f18779045cfa78d3bf314d</anchor>
      <arglist>(GLint location, GLint v0, GLint v1)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform3i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6d7983a7282276bfc2b3a3ac535e0bdf</anchor>
      <arglist>(GLint location, GLint v0, GLint v1, GLint v2)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform4i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9bd9a859bc3d09def43371ced3470e9e</anchor>
      <arglist>(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform1fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa5b20d733c81bead5c3afabcfeb0376a</anchor>
      <arglist>(GLint location, GLsizei count, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform2fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2bd0c42771a75cb4191cab4a57fea2ff</anchor>
      <arglist>(GLint location, GLsizei count, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform3fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad552bb5856ff9f4f1311c35e3b05cd62</anchor>
      <arglist>(GLint location, GLsizei count, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform4fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acb4ad6d1f87d03b03b110fa1a6339705</anchor>
      <arglist>(GLint location, GLsizei count, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform1iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a31ed238eaebc1f460e913d473e491714</anchor>
      <arglist>(GLint location, GLsizei count, const GLint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform2iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab94986ca6c67f110823b99c183a9afe2</anchor>
      <arglist>(GLint location, GLsizei count, const GLint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform3iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a60138c330ca6d1215fa70529188f25fa</anchor>
      <arglist>(GLint location, GLsizei count, const GLint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform4iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2aaa49e6545a82df1bdb035bd45c5dbb</anchor>
      <arglist>(GLint location, GLsizei count, const GLint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniformMatrix2fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad1e2bd8d54920a525ef1216e91274c8a</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniformMatrix3fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5e4690792713616e9ccf8ad7cfcb646e</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniformMatrix4fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a14d7bd5af3ee9d737107976bd3e09198</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glValidateProgram</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaabe477437d81d89e3ec75eb0a4cd043</anchor>
      <arglist>(GLuint program)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib1d</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad497dfd1794071ff70d6020cf1921143</anchor>
      <arglist>(GLuint index, GLdouble x)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib1dv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a27a0db2cb421088ec500997f98860bf3</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib1f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a09c762b9f2d0a881e268a6491c5288fc</anchor>
      <arglist>(GLuint index, GLfloat x)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib1fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a566f6859c5f32fa20856a81229f20a2c</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib1s</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3af41821091b1848f4b2e796754bf78f</anchor>
      <arglist>(GLuint index, GLshort x)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib1sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad128a17845247b294986471737ebe860</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib2d</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad4a80b084addc93001c408fdc82b645a</anchor>
      <arglist>(GLuint index, GLdouble x, GLdouble y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib2dv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5008f95cc4f2962828b4d84ea745a0fb</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib2f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a55b6b7532b4dc9b6e8f590d92256b943</anchor>
      <arglist>(GLuint index, GLfloat x, GLfloat y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib2fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab3420d4629f5a77c467adacbcc62f967</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib2s</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa0f101dbbeabd5c48a341e8a6b342012</anchor>
      <arglist>(GLuint index, GLshort x, GLshort y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib2sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad40987629a0695ed2624796a4d6cee02</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib3d</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8e0f378a39ddea6cfbb3a852245e8d34</anchor>
      <arglist>(GLuint index, GLdouble x, GLdouble y, GLdouble z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib3dv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab55fd0e5fdcaac3639b1f978dfe16dd7</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib3f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a53b4fb1c9fab18224de00998125a3983</anchor>
      <arglist>(GLuint index, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib3fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3a3937f8d313e70bf913ad74c398be5b</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib3s</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aff1193c31889115e5978070886594a10</anchor>
      <arglist>(GLuint index, GLshort x, GLshort y, GLshort z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib3sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a952bfc464cb29499cc2e3d5711298033</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4Nbv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aefd1ebf99cc11efc57067324bb6972aa</anchor>
      <arglist>(GLuint index, const GLbyte *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4Niv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adc43f356f5a9076c81c3860527e55785</anchor>
      <arglist>(GLuint index, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4Nsv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a96c60685b07d120ef99382bee5ed6928</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4Nub</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0cdaf2d8491c1681fb37f8cfe55acb49</anchor>
      <arglist>(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4Nubv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adc63f7950d80660fe21d5a22045cd411</anchor>
      <arglist>(GLuint index, const GLubyte *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4Nuiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a806c0b582dd473e9b77bcb1b76a0d17d</anchor>
      <arglist>(GLuint index, const GLuint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4Nusv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5799f0266e33222f10f670b50b92aad3</anchor>
      <arglist>(GLuint index, const GLushort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4bv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a89d3e59b9644c409bdebb2ccc6c03636</anchor>
      <arglist>(GLuint index, const GLbyte *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4d</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a20b8263356722af2c449282941d95536</anchor>
      <arglist>(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4dv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a50ca87ca8de6eb5f28f14cec0ccfb4a0</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6c3b7764ceb491950e5baf4d3eb266d7</anchor>
      <arglist>(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5b977c2922683ff9e865632601e15bad</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad3c6e5afbdad3a65b54124c879cdde9b</anchor>
      <arglist>(GLuint index, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4s</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3fe410338c9c9d97cd5ba5e3478c72f2</anchor>
      <arglist>(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3a0904c4fa1fa72ad2a10e8dd7571211</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4ubv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a49d8810ba8cc2e70b616db67a9e2e4ee</anchor>
      <arglist>(GLuint index, const GLubyte *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4uiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1f477ad21f0fe89d50cc26b6eed77c62</anchor>
      <arglist>(GLuint index, const GLuint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4usv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad19178967f15dd0eb30b0b039fe1ba6f</anchor>
      <arglist>(GLuint index, const GLushort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribPointer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaae1fb82e4db4b50b128d3a7d1f6ea8c</anchor>
      <arglist>(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniformMatrix2x3fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a321d8ca10dca902854e945e77355ef39</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniformMatrix3x2fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af5fb10349484ae93201544272d0131b7</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniformMatrix2x4fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa4dc97c57aa6830d62cf17522b488978</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniformMatrix4x2fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac90196bb0ac62b4b77c1663b950ef952</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniformMatrix3x4fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a69053dc5e11ef0cc6b7f8d71a2e1bbc6</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniformMatrix4x3fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac1dc78f5e95569d4fa28b71c8a510016</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColorMaski</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a59fa3dd1eaf961220ce87aa3c1ffbc06</anchor>
      <arglist>(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetBooleani_v</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a246073df9f18083280c78ee783e91838</anchor>
      <arglist>(GLenum target, GLuint index, GLboolean *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetIntegeri_v</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a84f0145b028ad23115932f3fa82f2384</anchor>
      <arglist>(GLenum target, GLuint index, GLint *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glEnablei</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae8bf6d4317206d357cefd9d3bcb3411b</anchor>
      <arglist>(GLenum target, GLuint index)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDisablei</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9d876d2c3def03ca983650770ea3ef3f</anchor>
      <arglist>(GLenum target, GLuint index)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsEnabledi</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aede3ceade3fea5fcb3ad35c055529615</anchor>
      <arglist>(GLenum target, GLuint index)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBeginTransformFeedback</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7d78786330d1b22c861bf3aa27ffe0c7</anchor>
      <arglist>(GLenum primitiveMode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glEndTransformFeedback</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae4cff196fdac2505978b8e25845b87f2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindBufferRange</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aea66146c23a353a855eb95402904eb68</anchor>
      <arglist>(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindBufferBase</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a59c6e745dc17510ad9fa07715d1599e2</anchor>
      <arglist>(GLenum target, GLuint index, GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTransformFeedbackVaryings</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4f99a60d58165d13ba349637be78fcb6</anchor>
      <arglist>(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetTransformFeedbackVarying</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a611dd2ca37e4014d42bdc10687307cdf</anchor>
      <arglist>(GLuint program, GLuint index, GLint *location)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glClampColor</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2944724019048ac4138b8a134f302bbc</anchor>
      <arglist>(GLenum target, GLenum clamp)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBeginConditionalRender</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae365c0c6d81368881c5948cfcfa4a5f0</anchor>
      <arglist>(GLuint id, GLenum mode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glEndConditionalRender</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a21ef69635de427639ac9185a111e0d90</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI1i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a76efb6139a3fa65f330d48aff2e55fe7</anchor>
      <arglist>(GLuint index, GLint x)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI2i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a96522a91d8a2755ffe9e756bb232b617</anchor>
      <arglist>(GLuint index, GLint x, GLint y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI3i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a34cf7d0f6f9b3c863f8264bee48e9136</anchor>
      <arglist>(GLuint index, GLint x, GLint y, GLint z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI4i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab9d1acfed9db4b0296f20ff78b7108f7</anchor>
      <arglist>(GLuint index, GLint x, GLint y, GLint z, GLint w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI1ui</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a99f24943650d3a9f0eb5fa1c242419f6</anchor>
      <arglist>(GLuint index, GLuint x)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI2ui</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad6aab41dd55bb9e0193f0b62fca8e53a</anchor>
      <arglist>(GLuint index, GLuint x, GLuint y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI3ui</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6a9470530bbdfe57484cfb50c6db602d</anchor>
      <arglist>(GLuint index, GLuint x, GLuint y, GLuint z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI4ui</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afdc068f14dc9f8b0faa4d0befe4fcb62</anchor>
      <arglist>(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI1iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac669ee57826f8a5c9779434a25d2efad</anchor>
      <arglist>(GLuint index, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI2iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a353b01bd48d954381dc59c6c19c4200f</anchor>
      <arglist>(GLuint index, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI3iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afb941c95cf11a846dd01fe58daa86fc6</anchor>
      <arglist>(GLuint index, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI4iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a666ca178b42a42aa5b552277bf869872</anchor>
      <arglist>(GLuint index, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI1uiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae25362d1293093dd78bab2a29cb44bc9</anchor>
      <arglist>(GLuint index, const GLuint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI2uiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a348eebe8f2330924eb0b550cf57efd56</anchor>
      <arglist>(GLuint index, const GLuint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI3uiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad7063ef183a5f81b883e8de240c46491</anchor>
      <arglist>(GLuint index, const GLuint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI4uiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a782d5ed3e555e8dc0cfd5b8c03a4d509</anchor>
      <arglist>(GLuint index, const GLuint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI4bv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae9206a3c40e137e5b4bf4b9034c52f85</anchor>
      <arglist>(GLuint index, const GLbyte *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI4sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6321119eb6ccd4352169d8a7eb1c098e</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI4ubv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af7d59ab2b9d53e5ce484cb4faaca099e</anchor>
      <arglist>(GLuint index, const GLubyte *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI4usv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6107855dcda4cb410ae595194287a6ae</anchor>
      <arglist>(GLuint index, const GLushort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribIPointer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa481293888c94e64c3cc3a66c82754e4</anchor>
      <arglist>(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetVertexAttribIiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a99b1547eeeb2e2ec9b0cb3859df2f767</anchor>
      <arglist>(GLuint index, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetVertexAttribIuiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5e1364a55d46a1bf4aaca1a6457a1c92</anchor>
      <arglist>(GLuint index, GLenum pname, GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetUniformuiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a61d25d2ada4d0a75e428b3b7fcbc69fc</anchor>
      <arglist>(GLuint program, GLint location, GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindFragDataLocation</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a05bcc468eb680d40186ca1519e4ced6a</anchor>
      <arglist>(GLuint program, GLuint color, const GLchar *name)</arglist>
    </member>
    <member kind="function">
      <type>GLint __stdcall</type>
      <name>GLee_Lazy_glGetFragDataLocation</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6d1c9fffcb002de8cf21c0c9357beaec</anchor>
      <arglist>(GLuint program, const GLchar *name)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform1ui</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a90e4e66d55f212a17f1494305ba52943</anchor>
      <arglist>(GLint location, GLuint v0)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform2ui</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a753096c50ead3ba819d4f221d383e706</anchor>
      <arglist>(GLint location, GLuint v0, GLuint v1)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform3ui</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a760794194c9c7c3233f1374bc6688d06</anchor>
      <arglist>(GLint location, GLuint v0, GLuint v1, GLuint v2)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform4ui</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a60a84d6ab074ace59fe1de9eb0f4e19e</anchor>
      <arglist>(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform1uiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0b4871b2ad5fad250eacf97d2b2ee995</anchor>
      <arglist>(GLint location, GLsizei count, const GLuint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform2uiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a758b47f2588a8bf0034ea1165447e9f9</anchor>
      <arglist>(GLint location, GLsizei count, const GLuint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform3uiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adff9bdea6d17c78701899a612cfbf4cb</anchor>
      <arglist>(GLint location, GLsizei count, const GLuint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform4uiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa1fd137e0a9bb7711f5c5e00430ddb65</anchor>
      <arglist>(GLint location, GLsizei count, const GLuint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexParameterIiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aca5a16479197fb39b80f92ed0922f5f3</anchor>
      <arglist>(GLenum target, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexParameterIuiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a71ccb05fe9ac25f9ef556f11d4628215</anchor>
      <arglist>(GLenum target, GLenum pname, const GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetTexParameterIiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a25590fa07826f42df59033b66f5621b4</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetTexParameterIuiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a55b512a0f700058dc30418006fc65f5c</anchor>
      <arglist>(GLenum target, GLenum pname, GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glClearBufferiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a29c469a78b3a1cbe6ce3df3e4090efb9</anchor>
      <arglist>(GLenum buffer, GLint drawbuffer, const GLint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glClearBufferuiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0e4fac8dfd2af52973f09e3ff3169ef1</anchor>
      <arglist>(GLenum buffer, GLint drawbuffer, const GLuint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glClearBufferfv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a20c15b5970697a876ccd1f9e1bd7e259</anchor>
      <arglist>(GLenum buffer, GLint drawbuffer, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glClearBufferfi</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa1d9444a977a006ddc69c69411a4b0dc</anchor>
      <arglist>(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)</arglist>
    </member>
    <member kind="function">
      <type>const GLubyte *__stdcall</type>
      <name>GLee_Lazy_glGetStringi</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad03af980c178e059ec1982416d9dbf89</anchor>
      <arglist>(GLenum name, GLuint index)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glActiveTextureARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5bb6f7b1bd0f4353c108605d98a83800</anchor>
      <arglist>(GLenum texture)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glClientActiveTextureARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7e27b162b6ed9d79953acd1e049bdac7</anchor>
      <arglist>(GLenum texture)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord1dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaa7ff9fbca90ffdf5ea87006e9ce91e5</anchor>
      <arglist>(GLenum target, GLdouble s)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord1dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a716f58bc260c02f08bf7df46b4f3ad1b</anchor>
      <arglist>(GLenum target, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord1fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ade4c3dd33c7034bde90ba14f48c83617</anchor>
      <arglist>(GLenum target, GLfloat s)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord1fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab4adbc4f15a000a156a21862118221e7</anchor>
      <arglist>(GLenum target, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord1iARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a79ae6aa35d276805cfdbab19a55fdfa5</anchor>
      <arglist>(GLenum target, GLint s)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord1ivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac88dfef647eb471452d1ef2715570ed2</anchor>
      <arglist>(GLenum target, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord1sARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ade86dbe3f0475e910061da6cd905738a</anchor>
      <arglist>(GLenum target, GLshort s)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord1svARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9008b6762c1c3e910af0e281d1cdefb2</anchor>
      <arglist>(GLenum target, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord2dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aca94b11d3f597626b7bb723db1189184</anchor>
      <arglist>(GLenum target, GLdouble s, GLdouble t)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord2dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a054f411fc8bf7cfb16bd05d9cbaeafa4</anchor>
      <arglist>(GLenum target, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord2fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3e531d88e1b8bf24efbb19751b9bea1e</anchor>
      <arglist>(GLenum target, GLfloat s, GLfloat t)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord2fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9bd1cf4e7e60e8d4e65107127802a339</anchor>
      <arglist>(GLenum target, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord2iARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a53fa1276c099730b295dd655e9541178</anchor>
      <arglist>(GLenum target, GLint s, GLint t)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord2ivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a43693913102eda6d1354905d6ee7315c</anchor>
      <arglist>(GLenum target, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord2sARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8ddb61cbfd11940af253c1f14d0d0308</anchor>
      <arglist>(GLenum target, GLshort s, GLshort t)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord2svARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a171b9e3ab32a23cb0a1603e54b603661</anchor>
      <arglist>(GLenum target, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord3dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0d3e086599649d4800ca02824bef4dab</anchor>
      <arglist>(GLenum target, GLdouble s, GLdouble t, GLdouble r)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord3dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1d27fe8da451912ad7b9b94ad2dac73d</anchor>
      <arglist>(GLenum target, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord3fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9933a2b90bba0e5c9aa31fe495a5fd14</anchor>
      <arglist>(GLenum target, GLfloat s, GLfloat t, GLfloat r)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord3fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a194632da0cb1399d20a0f7e46f755e46</anchor>
      <arglist>(GLenum target, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord3iARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5bfc1627f44b845d4ad7f389d38858b9</anchor>
      <arglist>(GLenum target, GLint s, GLint t, GLint r)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord3ivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a42770e161e271314617ce0cac8b7dc41</anchor>
      <arglist>(GLenum target, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord3sARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a63d2b379cddfeffa37dcf93c16b76bb9</anchor>
      <arglist>(GLenum target, GLshort s, GLshort t, GLshort r)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord3svARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0d980fdb1c668e518c909a33fc553fbc</anchor>
      <arglist>(GLenum target, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord4dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a181333e19271c4ef09963a210ce5d4fe</anchor>
      <arglist>(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord4dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9d79d9d37de28d1cbb27927ddc405d09</anchor>
      <arglist>(GLenum target, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord4fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4f8d5673e3bcf1c914a95fca1b1d3a97</anchor>
      <arglist>(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord4fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a522f0642b521aff66c13a5056cfbe581</anchor>
      <arglist>(GLenum target, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord4iARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a98055f7b30b47a47644f70c4e1057dfc</anchor>
      <arglist>(GLenum target, GLint s, GLint t, GLint r, GLint q)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord4ivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a48b30d1e45bef3d16fc6d86f65ce8308</anchor>
      <arglist>(GLenum target, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord4sARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a79cd88cf231fc7d61ce82e6cfa8e4a21</anchor>
      <arglist>(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord4svARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6a7e2694e391b1049a644a4eeadbb7ae</anchor>
      <arglist>(GLenum target, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glLoadTransposeMatrixfARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afd436a17842f5865bc0aebf8c62fcce3</anchor>
      <arglist>(const GLfloat *m)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glLoadTransposeMatrixdARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7e2e74a95bb3ee0f08fd23d1d146df59</anchor>
      <arglist>(const GLdouble *m)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultTransposeMatrixfARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a73894e651d61a2e64066601eaac76997</anchor>
      <arglist>(const GLfloat *m)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultTransposeMatrixdARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a35393554255a6e738c0c7e8718d35ea1</anchor>
      <arglist>(const GLdouble *m)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSampleCoverageARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a65cb802c682bde1c2c9c09b273129fdc</anchor>
      <arglist>(GLclampf value, GLboolean invert)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedTexImage3DARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9de77ac330b5dd13223d11a009ae449a</anchor>
      <arglist>(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedTexImage2DARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a81e7b43ef3d493163d80112769220d7c</anchor>
      <arglist>(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedTexImage1DARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7d35bb0520cdf771df1eb5ca48cb2ed3</anchor>
      <arglist>(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedTexSubImage3DARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a656fff137a4354fe836036947b848e47</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedTexSubImage2DARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7d326382b5f5c0c77b5c7ea90e354f7a</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedTexSubImage1DARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa6e21c3d1e42e4455af72873abd2e956</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetCompressedTexImageARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7eab72c22bb8d2ebec7e780cfadfb7dc</anchor>
      <arglist>(GLenum target, GLint level, GLvoid *img)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPointParameterfARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a49d9a75f7847ad3964d0bf281be89b96</anchor>
      <arglist>(GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPointParameterfvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7453f84682bbba5c40f82f1d656b3f00</anchor>
      <arglist>(GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWeightbvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a97e55433d0d0a44659633e6c839b1770</anchor>
      <arglist>(GLint size, const GLbyte *weights)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWeightsvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a67fc360b117b3078ee7c0411dc511735</anchor>
      <arglist>(GLint size, const GLshort *weights)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWeightivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a83f6a6ed767dd064e45585fb86029367</anchor>
      <arglist>(GLint size, const GLint *weights)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWeightfvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af6c8fb6679dfec6ba40418b343e42fbc</anchor>
      <arglist>(GLint size, const GLfloat *weights)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWeightdvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa309a4e17af9836c1b4a3a27cdd4b211</anchor>
      <arglist>(GLint size, const GLdouble *weights)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWeightubvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac11089856f4d57b3ac9784dcb8c16a0a</anchor>
      <arglist>(GLint size, const GLubyte *weights)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWeightusvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0d7250b0cbdb2c2b2322e0c4cc45a9c0</anchor>
      <arglist>(GLint size, const GLushort *weights)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWeightuivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a154cc664e6d245d3122344e1cb478f0b</anchor>
      <arglist>(GLint size, const GLuint *weights)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWeightPointerARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac40fa62f64306b3ba3b69ed98b956ff6</anchor>
      <arglist>(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexBlendARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a09a1675b86136dbeb1476e993a82f2b5</anchor>
      <arglist>(GLint count)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCurrentPaletteMatrixARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3fbb9ff51a5cb0afae045bd0039bf512</anchor>
      <arglist>(GLint index)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixIndexubvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af5a9d30f97e969e28816f77153be0ced</anchor>
      <arglist>(GLint size, const GLubyte *indices)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixIndexusvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a756a2bcfc8c5791578f82bb5761f3d91</anchor>
      <arglist>(GLint size, const GLushort *indices)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixIndexuivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a41de80344a4692acd10ecd9e362d37f3</anchor>
      <arglist>(GLint size, const GLuint *indices)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixIndexPointerARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3c233b0d255cb3a744c7693c6a4e34a1</anchor>
      <arglist>(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad3bef2a6d512df77248b8092b1f0db97</anchor>
      <arglist>(GLdouble x, GLdouble y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5685472b8e5464cb77f84753a792bf58</anchor>
      <arglist>(const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0df54b33ddc0bdc17c376e00cf0d1b2d</anchor>
      <arglist>(GLfloat x, GLfloat y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abed531f4b87503ab762ce64247dbd7bf</anchor>
      <arglist>(const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2iARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7011225b83d868fb87fd1e3af9164d7e</anchor>
      <arglist>(GLint x, GLint y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2ivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adc3d6a68e97a7b8b0ab0cb405f930e65</anchor>
      <arglist>(const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2sARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa3e08cc2f3ebbaa38c61f2a5db9d32cf</anchor>
      <arglist>(GLshort x, GLshort y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2svARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac47f4104f958d6f7f022fc11d7ca9336</anchor>
      <arglist>(const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac2819e1c5c82a54b715b1deccf9b6077</anchor>
      <arglist>(GLdouble x, GLdouble y, GLdouble z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac81a71f843bf709bad3b598fe4a74a56</anchor>
      <arglist>(const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afb93a1e78bc9dbea85c5cff27bdef181</anchor>
      <arglist>(GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2a7894b119613644535426285a3b510d</anchor>
      <arglist>(const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3iARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5929f2b5b19854bb822be2f2ab73bbf2</anchor>
      <arglist>(GLint x, GLint y, GLint z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3ivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2cf8db84a5e6de68ca9f550af2b72f74</anchor>
      <arglist>(const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3sARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7314b6247be187e5fba408621fecb9b0</anchor>
      <arglist>(GLshort x, GLshort y, GLshort z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3svARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5c53b4ff3094dc8afa488a2d57038fc0</anchor>
      <arglist>(const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib1dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8d6be9ffba405fe4d6770740a0af8467</anchor>
      <arglist>(GLuint index, GLdouble x)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib1dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8b9e407273e4755931981251f7990354</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib1fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa5534729af76a61dbab61d711bed70d0</anchor>
      <arglist>(GLuint index, GLfloat x)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib1fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad050d33d2b8fa9e5a441e5143740fee9</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib1sARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4902a02bc0a4cc228a7255ff63bf5bcd</anchor>
      <arglist>(GLuint index, GLshort x)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib1svARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a90fe9bc66c55c2d72747ac85c33c6d85</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib2dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a082c141c17e870b7fa99a95e9084efa7</anchor>
      <arglist>(GLuint index, GLdouble x, GLdouble y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib2dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad4f44ecfb7f4f027bb67e2e6c6f4e083</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib2fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0fad0f29be107c36b3c7c345f17f48da</anchor>
      <arglist>(GLuint index, GLfloat x, GLfloat y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib2fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a07a709d881af133068cdbffc0ffd38bb</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib2sARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a110b1158a83d49d59eb779df4526f1d7</anchor>
      <arglist>(GLuint index, GLshort x, GLshort y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib2svARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aab0573cfdd1caf058a2a1f14549c9c75</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib3dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aad218ac3033c4e6023faf3f28a738bd3</anchor>
      <arglist>(GLuint index, GLdouble x, GLdouble y, GLdouble z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib3dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8e8aa818226e6fc733220a83cdff852e</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib3fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4821bda383d05b4db35b986b8b0aa432</anchor>
      <arglist>(GLuint index, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib3fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acf8074e82f2efd663276e40db80b517f</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib3sARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afbcb70b8112cde35ade8d7a7cb460503</anchor>
      <arglist>(GLuint index, GLshort x, GLshort y, GLshort z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib3svARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abd3bed118bf66111227b7edf858718e6</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4NbvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad65b63707fadbd285e0ec35c99401489</anchor>
      <arglist>(GLuint index, const GLbyte *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4NivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3ac81c05f01dac942fb2c22682d4b223</anchor>
      <arglist>(GLuint index, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4NsvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9752e22c180d15dbe7c33cdc2687cfde</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4NubARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2d528ebc36fd507fc9f58cb12d99f096</anchor>
      <arglist>(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4NubvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4802d7817eed94d93faed385473f1fe8</anchor>
      <arglist>(GLuint index, const GLubyte *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4NuivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a31e8666f83baff87a4e8ed05a1cfb40b</anchor>
      <arglist>(GLuint index, const GLuint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4NusvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a736549875d202794eddaa13cf2e9877e</anchor>
      <arglist>(GLuint index, const GLushort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4bvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2d356515288138e50f9f588ddc3d197c</anchor>
      <arglist>(GLuint index, const GLbyte *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae85943b7e42d8bbfe474ad0c2c737413</anchor>
      <arglist>(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af918394709079105ba3721675ca7c630</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a19741b3dcb3e37cf1f6d9f2b3c3d8846</anchor>
      <arglist>(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a79900980efbe32f5b90d4748374068d5</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4ivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a16be68acd29b9e8b4eadb00350cde915</anchor>
      <arglist>(GLuint index, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4sARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7b465b5e0eb8706e77aad0a1ddb7de78</anchor>
      <arglist>(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4svARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afd889ced85213bf01f76fb2abec3bc0c</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4ubvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a461eb259c945bebf5a52146460d396b3</anchor>
      <arglist>(GLuint index, const GLubyte *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4uivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a04587163f96898f046bca3213e747bb2</anchor>
      <arglist>(GLuint index, const GLuint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4usvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa4bc0ed3c632561f617be88125c750f3</anchor>
      <arglist>(GLuint index, const GLushort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribPointerARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa8d42017e24e75d04e721a392064369a</anchor>
      <arglist>(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glEnableVertexAttribArrayARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a04dc5183808778b826b24b3387403e78</anchor>
      <arglist>(GLuint index)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDisableVertexAttribArrayARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aea7a90f5189d08dcfaccb3adb36f8ceb</anchor>
      <arglist>(GLuint index)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramStringARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adcb79fce203453143ae679f8d01608b3</anchor>
      <arglist>(GLenum target, GLenum format, GLsizei len, const GLvoid *string)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindProgramARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a16ecae103e90d85e4dd4fb3e8d258d41</anchor>
      <arglist>(GLenum target, GLuint program)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteProgramsARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a22a19d19dea4fe344f2ec2c7e3e741a0</anchor>
      <arglist>(GLsizei n, const GLuint *programs)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGenProgramsARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aefd0bef03a7942b389b12cc0948c524c</anchor>
      <arglist>(GLsizei n, GLuint *programs)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramEnvParameter4dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa28206a63f490318efb82e41a6e93fb0</anchor>
      <arglist>(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramEnvParameter4dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab0580b8ad6b8fbbd7dcd8f2ef072bfa0</anchor>
      <arglist>(GLenum target, GLuint index, const GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramEnvParameter4fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afb93162ee105a7cda0718ec085c3122d</anchor>
      <arglist>(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramEnvParameter4fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a302551666555cf55663cb4d293407a1e</anchor>
      <arglist>(GLenum target, GLuint index, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramLocalParameter4dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a62934408f359c8243baa67228c4ca281</anchor>
      <arglist>(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramLocalParameter4dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2c2b9b0ba60803e1bbc4340d8ba7bd77</anchor>
      <arglist>(GLenum target, GLuint index, const GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramLocalParameter4fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad2748fd35e2f059397777d4a065e5f56</anchor>
      <arglist>(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramLocalParameter4fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aee336918b65fa149f61108c4cd228d3b</anchor>
      <arglist>(GLenum target, GLuint index, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetProgramEnvParameterdvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6fa0b814bc98c5c11ce7c9db7783531f</anchor>
      <arglist>(GLenum target, GLuint index, GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetProgramEnvParameterfvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>add697890d533a86d7d32776797e7596d</anchor>
      <arglist>(GLenum target, GLuint index, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetProgramLocalParameterdvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7cd2e330cf416f94ac5f6d87b865f407</anchor>
      <arglist>(GLenum target, GLuint index, GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetProgramLocalParameterfvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4b69d94ce1b0f93146fb00f2b3810ecc</anchor>
      <arglist>(GLenum target, GLuint index, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetProgramivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a57d4b7a251e0993e094a069d919e7ab8</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetProgramStringARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9cffa72f121b29397cc6c41f95f8c01c</anchor>
      <arglist>(GLenum target, GLenum pname, GLvoid *string)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetVertexAttribdvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a65d09e5b5673483e7bcada5704aafd0a</anchor>
      <arglist>(GLuint index, GLenum pname, GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetVertexAttribfvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae210b732b0450d1faab531998e8c9a11</anchor>
      <arglist>(GLuint index, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetVertexAttribivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5286b653480c19ee42a4fb1c2acca792</anchor>
      <arglist>(GLuint index, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetVertexAttribPointervARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab7bf4a54c20c3b2d6271f1c6ca008d48</anchor>
      <arglist>(GLuint index, GLenum pname, GLvoid **pointer)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsProgramARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5c1eb441e23ae03d8b256350fbfac7af</anchor>
      <arglist>(GLuint program)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindBufferARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4a9fe77c56580162bc6ba802f6231e37</anchor>
      <arglist>(GLenum target, GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteBuffersARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac16b9e725e9b215873443c467e4164dd</anchor>
      <arglist>(GLsizei n, const GLuint *buffers)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGenBuffersARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4bb0b48b8f7639abb8bae6b78ab35bd1</anchor>
      <arglist>(GLsizei n, GLuint *buffers)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsBufferARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a029e90b8080af5c859c0e400d00d5953</anchor>
      <arglist>(GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBufferDataARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1db73183c785dddc4dad21b5b12a8ec8</anchor>
      <arglist>(GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBufferSubDataARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5a314d39476ffdf739c6909054697fd7</anchor>
      <arglist>(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetBufferSubDataARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a67118d0da66f9f2a8e8b34f9db9317dd</anchor>
      <arglist>(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid *__stdcall</type>
      <name>GLee_Lazy_glMapBufferARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5d456c7151ffe1dc56b084d6a2cfa796</anchor>
      <arglist>(GLenum target, GLenum access)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glUnmapBufferARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a44cf85f241d0dc87825b408d4a60fc0b</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetBufferParameterivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6d863af1d38007795cbba858c0924b3b</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetBufferPointervARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a22df4a96319acd707c71e8357a007201</anchor>
      <arglist>(GLenum target, GLenum pname, GLvoid **params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGenQueriesARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9dd1377264e0bdeff32482d62d4e48fd</anchor>
      <arglist>(GLsizei n, GLuint *ids)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteQueriesARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aab137a9178ca32f31dbe10af31f3d450</anchor>
      <arglist>(GLsizei n, const GLuint *ids)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsQueryARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac1588e03bb9b4faacce6749af9dccb01</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBeginQueryARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7dcc61c3525755143376e10f6671eec8</anchor>
      <arglist>(GLenum target, GLuint id)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glEndQueryARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6678f2a536d035369549aa3576791072</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetQueryivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af09b6be54d1460bc61db1ee4b95e4747</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetQueryObjectivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a231d7603a93ec6ce5991ccf2095004a3</anchor>
      <arglist>(GLuint id, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetQueryObjectuivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a725de84690e0f66bf8ffae053927b410</anchor>
      <arglist>(GLuint id, GLenum pname, GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteObjectARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa714acb54c6605743a093f55613be83e</anchor>
      <arglist>(GLhandleARB obj)</arglist>
    </member>
    <member kind="function">
      <type>GLhandleARB __stdcall</type>
      <name>GLee_Lazy_glGetHandleARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a73350f11147f790d04468532981b6a3f</anchor>
      <arglist>(GLenum pname)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDetachObjectARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a49793e6a56949fe48ecb5a0a23e116c8</anchor>
      <arglist>(GLhandleARB containerObj, GLhandleARB attachedObj)</arglist>
    </member>
    <member kind="function">
      <type>GLhandleARB __stdcall</type>
      <name>GLee_Lazy_glCreateShaderObjectARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a23d21611ff72ad9b85fe9d5d113451dd</anchor>
      <arglist>(GLenum shaderType)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glShaderSourceARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adfeaeb3ee7f5e803846aef388f79bfea</anchor>
      <arglist>(GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompileShaderARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad32c0dc7c2ed8c909d09b76c02560afd</anchor>
      <arglist>(GLhandleARB shaderObj)</arglist>
    </member>
    <member kind="function">
      <type>GLhandleARB __stdcall</type>
      <name>GLee_Lazy_glCreateProgramObjectARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab3002cc287dffb5130a7c0acf7674b5b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glAttachObjectARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af75f9adda36c0718b307c668625232e3</anchor>
      <arglist>(GLhandleARB containerObj, GLhandleARB obj)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glLinkProgramARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a431f17ed4275dadb70049f52917e5cf4</anchor>
      <arglist>(GLhandleARB programObj)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUseProgramObjectARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9cf9431c306e249fb4d702ba4dd2ea17</anchor>
      <arglist>(GLhandleARB programObj)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glValidateProgramARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa07d3f8b43a3148146ca0ad6db840209</anchor>
      <arglist>(GLhandleARB programObj)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform1fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a899edb17a826aef9d8bbbb772a64ac91</anchor>
      <arglist>(GLint location, GLfloat v0)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform2fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a664c49d92b410e0a0bfec62664f8a4f4</anchor>
      <arglist>(GLint location, GLfloat v0, GLfloat v1)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform3fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5392c08169ab9def42db02f1acadf20b</anchor>
      <arglist>(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform4fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2dbd2e8004c47637a8102dd0aabe63cf</anchor>
      <arglist>(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform1iARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4dd3bde753a5cec3a89973241ed73425</anchor>
      <arglist>(GLint location, GLint v0)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform2iARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a137f294952f1b2364b43c32e4989a021</anchor>
      <arglist>(GLint location, GLint v0, GLint v1)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform3iARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af1358943bf49d6ead247b898be53c215</anchor>
      <arglist>(GLint location, GLint v0, GLint v1, GLint v2)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform4iARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a59273d3d17fa89a80d4ab7c2655d90ee</anchor>
      <arglist>(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform1fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a85753bc3dae51d67e8537bbd74d765e1</anchor>
      <arglist>(GLint location, GLsizei count, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform2fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adf9bba2aa7ff617a34cb2d3d6f77981e</anchor>
      <arglist>(GLint location, GLsizei count, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform3fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9c47172d55a22260eafc5cde326106f0</anchor>
      <arglist>(GLint location, GLsizei count, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform4fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab3bb5f1d40ad6776ce206667ca14e8ce</anchor>
      <arglist>(GLint location, GLsizei count, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform1ivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a76c468067aceabee903c257d6eabbc90</anchor>
      <arglist>(GLint location, GLsizei count, const GLint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform2ivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abb025916c910a90f03d1ff347453c235</anchor>
      <arglist>(GLint location, GLsizei count, const GLint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform3ivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abea03823de2f2fc3866fe5131894b99b</anchor>
      <arglist>(GLint location, GLsizei count, const GLint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform4ivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a22f6d828cb5b1079fcbf78e18e140a12</anchor>
      <arglist>(GLint location, GLsizei count, const GLint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniformMatrix2fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aefe7a9d7814d080e6782e94cc753ad2b</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniformMatrix3fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0cc7d2caf26e3a34f30645750bd0244d</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniformMatrix4fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9bec7c459b591d6884b82b78c5e4039b</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetObjectParameterfvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a80a23a5254c0ad6f79799aa063e974e2</anchor>
      <arglist>(GLhandleARB obj, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetObjectParameterivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afa926b916c167244099f38262cf8f73f</anchor>
      <arglist>(GLhandleARB obj, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetInfoLogARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab3bd44fe360c012b08d7dad31546f8a2</anchor>
      <arglist>(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetAttachedObjectsARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a97037d01cf22454d2cb6ac86abef8f01</anchor>
      <arglist>(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)</arglist>
    </member>
    <member kind="function">
      <type>GLint __stdcall</type>
      <name>GLee_Lazy_glGetUniformLocationARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acc883daa4b5b699a6daac1ca6c971e2e</anchor>
      <arglist>(GLhandleARB programObj, const GLcharARB *name)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetActiveUniformARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6b0d14ec46dbb6f81778052bdd88cf15</anchor>
      <arglist>(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetUniformfvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a12babbaf37982fd41c2e09ee6ef2a8f5</anchor>
      <arglist>(GLhandleARB programObj, GLint location, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetUniformivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab7d546dd4c6e85b464b2682ca5227659</anchor>
      <arglist>(GLhandleARB programObj, GLint location, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetShaderSourceARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acf8f3fa47f99d73aac3a562b98bb20a3</anchor>
      <arglist>(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindAttribLocationARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a77c4e55eb05422588756769f0f6fcfd0</anchor>
      <arglist>(GLhandleARB programObj, GLuint index, const GLcharARB *name)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetActiveAttribARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a80c93aab4fd78031f35e437d116e1f19</anchor>
      <arglist>(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)</arglist>
    </member>
    <member kind="function">
      <type>GLint __stdcall</type>
      <name>GLee_Lazy_glGetAttribLocationARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a152c6ad2220bea6ca89792a32ec34e26</anchor>
      <arglist>(GLhandleARB programObj, const GLcharARB *name)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDrawBuffersARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1cf05235004df3f2e9dcee6c34ded25f</anchor>
      <arglist>(GLsizei n, const GLenum *bufs)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glClampColorARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afd6b5d1c67d3395374ffaeb390a3f650</anchor>
      <arglist>(GLenum target, GLenum clamp)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDrawArraysInstancedARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab8472f4fc247f940f59bcf5ebb3e181c</anchor>
      <arglist>(GLenum mode, GLint first, GLsizei count, GLsizei primcount)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDrawElementsInstancedARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a822049c8e8d13199eaf6e2275824038c</anchor>
      <arglist>(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsRenderbuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1ab9b810f65703251305ea893de84e1f</anchor>
      <arglist>(GLuint renderbuffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindRenderbuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a22eb6f2c9a403cc96942df687c718f18</anchor>
      <arglist>(GLenum target, GLuint renderbuffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteRenderbuffers</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8fbe9086d91a6cc956bfa1ef7023f135</anchor>
      <arglist>(GLsizei n, const GLuint *renderbuffers)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGenRenderbuffers</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a305d64eb5d7dce4a5042010b4988adeb</anchor>
      <arglist>(GLsizei n, GLuint *renderbuffers)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glRenderbufferStorage</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa960c8383d6c5a714ff63192c22ec1f5</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetRenderbufferParameteriv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acbf183a1d6c3248569f206b98b56122c</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsFramebuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afd44cd51975d95a3f124b8e27a1d99b2</anchor>
      <arglist>(GLuint framebuffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindFramebuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4afe35f134ad8d5640542011e08409ba</anchor>
      <arglist>(GLenum target, GLuint framebuffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteFramebuffers</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6e34f641c711bd47b79e7ceca487e593</anchor>
      <arglist>(GLsizei n, const GLuint *framebuffers)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGenFramebuffers</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3cb6bb638491cc97d37e65c9a6d5edd5</anchor>
      <arglist>(GLsizei n, GLuint *framebuffers)</arglist>
    </member>
    <member kind="function">
      <type>GLenum __stdcall</type>
      <name>GLee_Lazy_glCheckFramebufferStatus</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a85502dd558688b9c7553c8146fbd7cd5</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFramebufferTexture1D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1758536c03ab4a25b3a0ab58cf9edbb0</anchor>
      <arglist>(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFramebufferTexture2D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4297e414aa9754b43012e83528733b27</anchor>
      <arglist>(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFramebufferTexture3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae74b32e5a7d1cccb91703eff69a2e951</anchor>
      <arglist>(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFramebufferRenderbuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7e3f683679ac00354ab68a761d03b405</anchor>
      <arglist>(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetFramebufferAttachmentParameteriv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a81e3445a3cf6fca82dd95345ba3aba26</anchor>
      <arglist>(GLenum target, GLenum attachment, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGenerateMipmap</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4c5fd16383c46196ee269d99811dea6e</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBlitFramebuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5345abea8051865f83c3384749c2b6ee</anchor>
      <arglist>(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glRenderbufferStorageMultisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af4f263c47eacb2bd13abc7f97142d697</anchor>
      <arglist>(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFramebufferTextureLayer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a916d309ffcc06a7857faf405152cd00a</anchor>
      <arglist>(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramParameteriARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4cac0861d5605ab8ca09dc2f414cad5b</anchor>
      <arglist>(GLuint program, GLenum pname, GLint value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFramebufferTextureARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a82ccc25a3706c5736a2cbda919ec13ca</anchor>
      <arglist>(GLenum target, GLenum attachment, GLuint texture, GLint level)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFramebufferTextureLayerARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4189182a95dcda522218cc35db20d42e</anchor>
      <arglist>(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFramebufferTextureFaceARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3fe65a6f2c68018119d0692fbba07e93</anchor>
      <arglist>(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribDivisor</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a96419f0d8d861f82875c2e52715aac9b</anchor>
      <arglist>(GLuint index, GLuint divisor)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMapBufferRange</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0f44dd3006b6c7db138f06d2a69e9ded</anchor>
      <arglist>(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFlushMappedBufferRange</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9774c3c114a68e70d5d03b841b134184</anchor>
      <arglist>(GLenum target, GLintptr offset, GLsizeiptr length)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexBufferARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3d8a37f16c67af2703076bef551a2c43</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindVertexArray</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5eacb4f020e27109e461c6984355903c</anchor>
      <arglist>(GLuint array)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteVertexArrays</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a07144ea7b56ba96c494a35076e261590</anchor>
      <arglist>(GLsizei n, const GLuint *arrays)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGenVertexArrays</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a037604742827466c8b95691ed91b20de</anchor>
      <arglist>(GLsizei n, GLuint *arrays)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsVertexArray</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8411ea2cf2a470690dd461390251750f</anchor>
      <arglist>(GLuint array)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBlendColorEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9ea517612c69a8febf8db1c42ad6511b</anchor>
      <arglist>(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPolygonOffsetEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6438e9dc24070c19e4a5a830af509165</anchor>
      <arglist>(GLfloat factor, GLfloat bias)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a753efc4bc7bfe07cda144f185707ed16</anchor>
      <arglist>(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexSubImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0a6e22aba2a01359aec4543680c0b0c4</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetTexFilterFuncSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4ffc224fc8045dea4d86a460966ebec0</anchor>
      <arglist>(GLenum target, GLenum filter, GLfloat *weights)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexFilterFuncSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a165f9cc774adb176be22b5eb0cf0a60d</anchor>
      <arglist>(GLenum target, GLenum filter, GLsizei n, const GLfloat *weights)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexSubImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab519bb00c9438e46c51888d9cccde479</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexSubImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a43b10b24b1eded66d94fb3590a17b410</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyTexImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac864d42f1721c0c4138ecac285e8328e</anchor>
      <arglist>(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyTexImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adea3f6f9adae95fe040a2bede2dcfcf6</anchor>
      <arglist>(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyTexSubImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa0304763a608e8e85478a991fc8bb94b</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyTexSubImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acae6a85fb0aa2eaf520ba245d6dfd57d</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyTexSubImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac0119a94a090d32eef06c5d40bea7955</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetHistogramEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a126c9743200db858b7fb5d04febbc98e</anchor>
      <arglist>(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetHistogramParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4a4114549b379f9a6972c0cf694d940e</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetHistogramParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1113aa343e30bb87a2725d89cccda7f9</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMinmaxEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a37ae074ef072f01d5e8c478920bfad79</anchor>
      <arglist>(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMinmaxParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0c883e009d245075d86a9f25094816e4</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMinmaxParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af9187e4970d2eacd833917a7005bb4cf</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glHistogramEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af177a08aeea249d02981f115564b035c</anchor>
      <arglist>(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMinmaxEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af9a32bc6ca040bf51cd7b48a4daf3c9e</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLboolean sink)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glResetHistogramEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9296ffdb87fc3821872c59c5218ab43e</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glResetMinmaxEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad7ac000245fe876ff87a6e168b384a46</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glConvolutionFilter1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a160639bdac8bcd0e5cc8d6016560a8f7</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glConvolutionFilter2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7a5526a520c8473cef63b6ff0ad46012</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glConvolutionParameterfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac53e2ba91a1650bb4421bf87af261d13</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glConvolutionParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5b74d8bc9f0a93ac0eedc8fdab89d53d</anchor>
      <arglist>(GLenum target, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glConvolutionParameteriEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a07eda6263791683280c3ba850f0e9a86</anchor>
      <arglist>(GLenum target, GLenum pname, GLint params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glConvolutionParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0fb40c8aad23b741156e0c51d7feb40f</anchor>
      <arglist>(GLenum target, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyConvolutionFilter1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8a88125431fb482942110eb317011e4c</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyConvolutionFilter2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a658cca6c97d54ca8556ae49ff1c3b694</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetConvolutionFilterEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0036e7712a1189637afdcbc07ee91f26</anchor>
      <arglist>(GLenum target, GLenum format, GLenum type, GLvoid *image)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetConvolutionParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acdb70cffab04aee97e19ba9e8fd694d0</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetConvolutionParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a39b6771f0c9c5e1d7926bd3fbd2c66a9</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetSeparableFilterEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1dfce9c2e447562b23bfc2b90e619ab4</anchor>
      <arglist>(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSeparableFilter2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aadfe2809472f6f812d886aa3be26a6c7</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColorTableSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a10b5686d1768c814532370fb3bcb5070</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColorTableParameterfvSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7139b2ddeb0123e8e71ac0803150e9b2</anchor>
      <arglist>(GLenum target, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColorTableParameterivSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa9ab0fd98e36682d49ec8615fcefb778</anchor>
      <arglist>(GLenum target, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyColorTableSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a14e757c1c14c5586e9a66dfcc9599b3f</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetColorTableSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab1856ee48dff427a6ef313a298bd9a54</anchor>
      <arglist>(GLenum target, GLenum format, GLenum type, GLvoid *table)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetColorTableParameterfvSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afe0106a32536c059c0f21414dae2021c</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetColorTableParameterivSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeac20e6cc441c666e7659c42aea7674b</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPixelTexGenParameteriSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa283b94943dc4025debd7fdb70e41efb</anchor>
      <arglist>(GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPixelTexGenParameterivSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a176ab6c0446248d3c89d3c14026747f4</anchor>
      <arglist>(GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPixelTexGenParameterfSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a431b7825814caadadf0748fbe717d88d</anchor>
      <arglist>(GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPixelTexGenParameterfvSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a64cc784728755f2ee10dc387bdbca113</anchor>
      <arglist>(GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetPixelTexGenParameterivSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a15f672be8e94fc537ae6c65746f50c40</anchor>
      <arglist>(GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetPixelTexGenParameterfvSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab527912a1d3adb96304652e03098fc4a</anchor>
      <arglist>(GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPixelTexGenSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad825f41bf1fcb1de2714fc6b0d6f644c</anchor>
      <arglist>(GLenum mode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexImage4DSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a01365f37eebcbf8d272463903df618c8</anchor>
      <arglist>(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexSubImage4DSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a304203c8126740c1bd7266109dcf1ddc</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glAreTexturesResidentEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6c2f9d1ee4e751a43df45c6daff98c09</anchor>
      <arglist>(GLsizei n, const GLuint *textures, GLboolean *residences)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindTextureEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a284e0b57242f2524ffb4e21088badd15</anchor>
      <arglist>(GLenum target, GLuint texture)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteTexturesEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9b79f49be8bf97727f4468471fa9a275</anchor>
      <arglist>(GLsizei n, const GLuint *textures)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGenTexturesEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af5df6ecd01b0d9eb35f270dc7a7a9f05</anchor>
      <arglist>(GLsizei n, GLuint *textures)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsTextureEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa385fb28711f4f8707a096c74294906f</anchor>
      <arglist>(GLuint texture)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPrioritizeTexturesEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1cfdab9d9443562b2885e812ea0532d4</anchor>
      <arglist>(GLsizei n, const GLuint *textures, const GLclampf *priorities)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDetailTexFuncSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae1cf2bdd884944b76a1cc757ca1f7ec5</anchor>
      <arglist>(GLenum target, GLsizei n, const GLfloat *points)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetDetailTexFuncSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a67b2b85b56406d6d38662b4c083fe544</anchor>
      <arglist>(GLenum target, GLfloat *points)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSharpenTexFuncSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af792bdc982aed1b170d7a7fec7866911</anchor>
      <arglist>(GLenum target, GLsizei n, const GLfloat *points)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetSharpenTexFuncSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad8384c59e605d5ea2ec6d2b55030d38c</anchor>
      <arglist>(GLenum target, GLfloat *points)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSampleMaskSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae8b1de8565718a40ce4eec2ba8e3913d</anchor>
      <arglist>(GLclampf value, GLboolean invert)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSamplePatternSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7db3a4efb8ff3c21ef337f93b25e72c6</anchor>
      <arglist>(GLenum pattern)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glArrayElementEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af2f5e84c726a4efd8422c8d6850a81ca</anchor>
      <arglist>(GLint i)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColorPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9495e203dff12eabac5061323733e147</anchor>
      <arglist>(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDrawArraysEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a56422f4467f759c13d22d71003c9b978</anchor>
      <arglist>(GLenum mode, GLint first, GLsizei count)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glEdgeFlagPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2a37f685a7543ed50b219daa6c1fb79e</anchor>
      <arglist>(GLsizei stride, GLsizei count, const GLboolean *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetPointervEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a97f8f406d357431b8d00f73ab465f7df</anchor>
      <arglist>(GLenum pname, GLvoid **params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glIndexPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1249a0cb06f400e442e82a45df98d3f1</anchor>
      <arglist>(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNormalPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a05918a1371e1bc5a335144067217cb83</anchor>
      <arglist>(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoordPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a33248b8511225a206073b10ac257c0f1</anchor>
      <arglist>(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7ad3064aa26d4d6c1a7e46023f621c9c</anchor>
      <arglist>(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBlendEquationEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7f15882f702e50546d50f4a6baabd3c1</anchor>
      <arglist>(GLenum mode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSpriteParameterfSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a97e8e8ee356a9cabdea3bc7717f9d6a2</anchor>
      <arglist>(GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSpriteParameterfvSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9797372c953ac3b977db8a5dd6e3f676</anchor>
      <arglist>(GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSpriteParameteriSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a47d2cda830d069a8acab68cc05f68a8d</anchor>
      <arglist>(GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSpriteParameterivSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab0ba6fcad56024311b73553e49167d1a</anchor>
      <arglist>(GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPointParameterfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a090b70ba2d7b6ab97bda3b62a70b1bb0</anchor>
      <arglist>(GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPointParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a74cd0f30f7f6153a5a5c2d12e32329d8</anchor>
      <arglist>(GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPointParameterfSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a331eedb28a8e232e5470b000b248db6a</anchor>
      <arglist>(GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPointParameterfvSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6f1cdde3bd2c06e42812a59c64e3a590</anchor>
      <arglist>(GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>GLint __stdcall</type>
      <name>GLee_Lazy_glGetInstrumentsSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acfa7163cde1d87edcfa153438a02af54</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glInstrumentsBufferSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa329d16b2cd8964e60afbf242bdb5c45</anchor>
      <arglist>(GLsizei size, GLint *buffer)</arglist>
    </member>
    <member kind="function">
      <type>GLint __stdcall</type>
      <name>GLee_Lazy_glPollInstrumentsSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8e5e6ef6ec53bc590f10b9927c950ac5</anchor>
      <arglist>(GLint *marker_p)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReadInstrumentsSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a43c27d2b3519d4587d66d847330da848</anchor>
      <arglist>(GLint marker)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glStartInstrumentsSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3a1ef58305dcccb376190d3a119560fa</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glStopInstrumentsSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aedc2c63a9b3ca63c3bba0df1bed2d738</anchor>
      <arglist>(GLint marker)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFrameZoomSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af12bac061f920aabd378ddd20939cf57</anchor>
      <arglist>(GLint factor)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTagSampleBufferSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afa5234718ff530004fa0ea3a81055e92</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeformationMap3dSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad48d1f02b5d4ecb62530bc43a3e5844f</anchor>
      <arglist>(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeformationMap3fSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a502c83b0e94b55eb76da3c66025c98fa</anchor>
      <arglist>(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeformSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab9f72a619c81c55209331408c146d8a3</anchor>
      <arglist>(GLbitfield mask)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glLoadIdentityDeformationMapSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae279c3de186ddf9823d25de0564cb1a9</anchor>
      <arglist>(GLbitfield mask)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReferencePlaneSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ace2b97ed668b064ead7be0b1ffa9e5a4</anchor>
      <arglist>(const GLdouble *equation)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFlushRasterSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afa526e002f3549718f8515dcf4cc1d68</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFogFuncSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aba2220278c60dfd40d84371773a33d4e</anchor>
      <arglist>(GLsizei n, const GLfloat *points)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetFogFuncSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a128f3ba87e4ab4f465612012bb6717d6</anchor>
      <arglist>(GLfloat *points)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glImageTransformParameteriHP</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7304ff30e72768aa095703eb00fc11aa</anchor>
      <arglist>(GLenum target, GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glImageTransformParameterfHP</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a562b0b16a6a860c466a9a7019784e786</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glImageTransformParameterivHP</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af9cec743817f86eee5fd24623da88230</anchor>
      <arglist>(GLenum target, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glImageTransformParameterfvHP</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a22d916f6c063cb7f539307098589ccfe</anchor>
      <arglist>(GLenum target, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetImageTransformParameterivHP</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2071ac9eba0a6023fdf987b437b439e3</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetImageTransformParameterfvHP</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7b9b78bd15ffb3409696dadfa4242e77</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColorSubTableEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1e659b0a39cd0abf05be8b5e667c0a85</anchor>
      <arglist>(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyColorSubTableEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a85fe00f141674704b84f4365069657c5</anchor>
      <arglist>(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glHintPGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa15d71d2c05bb65033939fe45931c335</anchor>
      <arglist>(GLenum target, GLint mode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColorTableEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af0d3bf9da7b8fc8bd1b7c2ad22bcd2d7</anchor>
      <arglist>(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetColorTableEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5d273875cf4ed37d8e9ead522f5fae4a</anchor>
      <arglist>(GLenum target, GLenum format, GLenum type, GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetColorTableParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a436ae32f9015b803161cc16306add400</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetColorTableParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad5cdcc3b81699be2b2d38ea8ab6c00f6</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetListParameterfvSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a39ef65856f6a15915c557d2326400c07</anchor>
      <arglist>(GLuint list, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetListParameterivSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a57e9bc32142a91dd9a8f5567ebc9f601</anchor>
      <arglist>(GLuint list, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glListParameterfSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aae7718c6c8ef0d4d76829b69dac9d8c5</anchor>
      <arglist>(GLuint list, GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glListParameterfvSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac6f05d2a92989ce24fb2ed508d49006b</anchor>
      <arglist>(GLuint list, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glListParameteriSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a03d06f20ee1ff1a367e9efb0e1d0aeaa</anchor>
      <arglist>(GLuint list, GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glListParameterivSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a35c773bdd8b8d0e93cef78886033374d</anchor>
      <arglist>(GLuint list, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glIndexMaterialEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9975fc4309d8b4d6ac26aff6079132a0</anchor>
      <arglist>(GLenum face, GLenum mode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glIndexFuncEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad57402ec21393c690cd2f40516ea6eba</anchor>
      <arglist>(GLenum func, GLclampf ref)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glLockArraysEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a186d18e512b75295a67b282650a49260</anchor>
      <arglist>(GLint first, GLsizei count)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUnlockArraysEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a00c69906283341c2dd19f4c3911b9338</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCullParameterdvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>add4ad21bef0b9d6f940be59d15c6f761</anchor>
      <arglist>(GLenum pname, GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCullParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac13f7ad135bd735809f289b4b13521a0</anchor>
      <arglist>(GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFragmentColorMaterialSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa8e95bf5ace6a7733a6314b6e3174af9</anchor>
      <arglist>(GLenum face, GLenum mode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFragmentLightfSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a899aaf5ace94818d34988595eac381be</anchor>
      <arglist>(GLenum light, GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFragmentLightfvSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0ef80c0cf74da33f4317ce6ec9f4fab8</anchor>
      <arglist>(GLenum light, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFragmentLightiSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7056b025c75348fb5bd7de48024d010a</anchor>
      <arglist>(GLenum light, GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFragmentLightivSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa6d6eb83f83329533e85bc490d9fe814</anchor>
      <arglist>(GLenum light, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFragmentLightModelfSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a68763d602e57ecc86fd344c53f29dc49</anchor>
      <arglist>(GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFragmentLightModelfvSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa8930ff65438397e90eb33f23641f00d</anchor>
      <arglist>(GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFragmentLightModeliSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5cf5eb3c8ecc9e31e1da8b98e7f65a19</anchor>
      <arglist>(GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFragmentLightModelivSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abbe5b8bbf2d4fec1af3b0f16a1a0cfdd</anchor>
      <arglist>(GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFragmentMaterialfSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a500b81c4bc08fc9e9848e730514df6f0</anchor>
      <arglist>(GLenum face, GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFragmentMaterialfvSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8a9b8c2508a35d937ea46e30024210c9</anchor>
      <arglist>(GLenum face, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFragmentMaterialiSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a32db061fdaccc6cf2cdf7b37da1c2d8b</anchor>
      <arglist>(GLenum face, GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFragmentMaterialivSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abe02de3f5f8e2bf374f8f965db8f437b</anchor>
      <arglist>(GLenum face, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetFragmentLightfvSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a916edfca1657f86801800f475ad8d58c</anchor>
      <arglist>(GLenum light, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetFragmentLightivSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af14ef2b9d0a35927f03e4c47b24f7178</anchor>
      <arglist>(GLenum light, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetFragmentMaterialfvSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abbcc307880de6e009fce0329f9b624c9</anchor>
      <arglist>(GLenum face, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetFragmentMaterialivSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a52b2038a4d3688b53197895e039d7b0d</anchor>
      <arglist>(GLenum face, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glLightEnviSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a03fa3717687fa6aea1fe28f1115d6957</anchor>
      <arglist>(GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDrawRangeElementsEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa40122a6ee7b6c784ff0ab7f8d19cac2</anchor>
      <arglist>(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glApplyTextureEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a39ad6bccd8ca2023b6040f7e25998a86</anchor>
      <arglist>(GLenum mode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTextureLightEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acb8001a806fbfefede32f18f48786b00</anchor>
      <arglist>(GLenum pname)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTextureMaterialEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac931873c5665050535f2101079e36430</anchor>
      <arglist>(GLenum face, GLenum mode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glAsyncMarkerSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adb8e3170287b060366c10a26de5c4ebd</anchor>
      <arglist>(GLuint marker)</arglist>
    </member>
    <member kind="function">
      <type>GLint __stdcall</type>
      <name>GLee_Lazy_glFinishAsyncSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8668eb75496962da7476e4b286859097</anchor>
      <arglist>(GLuint *markerp)</arglist>
    </member>
    <member kind="function">
      <type>GLint __stdcall</type>
      <name>GLee_Lazy_glPollAsyncSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abca3a3054a4a37255e5bb7c372e73f55</anchor>
      <arglist>(GLuint *markerp)</arglist>
    </member>
    <member kind="function">
      <type>GLuint __stdcall</type>
      <name>GLee_Lazy_glGenAsyncMarkersSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6166c1003bf3c3bce657ba419a25a13c</anchor>
      <arglist>(GLsizei range)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteAsyncMarkersSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5479e5bd74b1091429838fd08dda4b3b</anchor>
      <arglist>(GLuint marker, GLsizei range)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsAsyncMarkerSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a556568b34517490e539a6b09ea8e1501</anchor>
      <arglist>(GLuint marker)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexPointervINTEL</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac6732eced73d8bb6bca63f1816ed8cda</anchor>
      <arglist>(GLint size, GLenum type, const GLvoid **pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNormalPointervINTEL</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0770afa07c3a3c5c32fa278c4fcf89aa</anchor>
      <arglist>(GLenum type, const GLvoid **pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColorPointervINTEL</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a62326752a5af806fe358ce6d051d08e5</anchor>
      <arglist>(GLint size, GLenum type, const GLvoid **pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoordPointervINTEL</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9d9c1aaf367d37841773203c277092b2</anchor>
      <arglist>(GLint size, GLenum type, const GLvoid **pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPixelTransformParameteriEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0095b2d8abd73169b3d944927947de1a</anchor>
      <arglist>(GLenum target, GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPixelTransformParameterfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1d33949442d32542b13475d80cec1923</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPixelTransformParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaf8c917b695355dfead6b48bf6602ea6</anchor>
      <arglist>(GLenum target, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPixelTransformParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a53a5a733c26b7953a6122922929899b0</anchor>
      <arglist>(GLenum target, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3bEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae81ed8aba33db1718e33af1d24360c94</anchor>
      <arglist>(GLbyte red, GLbyte green, GLbyte blue)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3bvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab9161f51f1b98f1b4c5b6b394f9622d1</anchor>
      <arglist>(const GLbyte *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3dEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6975ec682c1bf41e99b85142bc3c97a2</anchor>
      <arglist>(GLdouble red, GLdouble green, GLdouble blue)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3dvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4c4d60abb101ab6dfdea79a21615d40d</anchor>
      <arglist>(const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3fEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a096abbbc55fda8b7d7937e903b97b61a</anchor>
      <arglist>(GLfloat red, GLfloat green, GLfloat blue)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a159a590c9176186c05f2565e5c684e3c</anchor>
      <arglist>(const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3iEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a411da140df6efb7d8f8d2ce63c2a670d</anchor>
      <arglist>(GLint red, GLint green, GLint blue)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3f89fdb9058e372af2dcd8595d05d608</anchor>
      <arglist>(const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3sEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af07452a1cf54a84b3ecab01b600efa94</anchor>
      <arglist>(GLshort red, GLshort green, GLshort blue)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3svEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2633174907bdc6a14604138c9bedf488</anchor>
      <arglist>(const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3ubEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1c1b7ee5f130c03587c343154f0c4364</anchor>
      <arglist>(GLubyte red, GLubyte green, GLubyte blue)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3ubvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a104dd9203a21f52235c417c6f6fc9ab5</anchor>
      <arglist>(const GLubyte *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a92f9eaba3116d1ee2c009b2f6853f00c</anchor>
      <arglist>(GLuint red, GLuint green, GLuint blue)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4787daec12e49edc80cff968f1d5c0c9</anchor>
      <arglist>(const GLuint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3usEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a932feb58d85c22ed561d73d2e2af5d10</anchor>
      <arglist>(GLushort red, GLushort green, GLushort blue)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3usvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa7314b41ecbc5d4b80e4f55c8aa614ff</anchor>
      <arglist>(const GLushort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColorPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2145a79abf08bd7c31da171d85354e07</anchor>
      <arglist>(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTextureNormalEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa649d5735e1c0043e605868e65ed5e8a</anchor>
      <arglist>(GLenum mode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiDrawArraysEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a57237532d677170bb3a1337ecfebed64</anchor>
      <arglist>(GLenum mode, GLint *first, GLsizei *count, GLsizei primcount)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiDrawElementsEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8136f1b55d260adac8d18fd0abb255ab</anchor>
      <arglist>(GLenum mode, const GLsizei *count, GLenum type, const GLvoid **indices, GLsizei primcount)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFogCoordfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a68a174632d518c259d9e6e39b3055c94</anchor>
      <arglist>(GLfloat coord)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFogCoordfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a39c154336eb261743a732e9149308b9f</anchor>
      <arglist>(const GLfloat *coord)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFogCoorddEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab8b46722f5a474c8273cf2d63b4bdf89</anchor>
      <arglist>(GLdouble coord)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFogCoorddvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a99561121a79ba2171873aab395bf3988</anchor>
      <arglist>(const GLdouble *coord)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFogCoordPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a233c43d67d48484924e962c608c3e9ff</anchor>
      <arglist>(GLenum type, GLsizei stride, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTangent3bEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2b93a9ef6068ec679283bbb99113bce7</anchor>
      <arglist>(GLbyte tx, GLbyte ty, GLbyte tz)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTangent3bvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a57fab0256c202dba2366d080b9dbfe70</anchor>
      <arglist>(const GLbyte *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTangent3dEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2e62f624f15c0fea6871b68b9e1843ad</anchor>
      <arglist>(GLdouble tx, GLdouble ty, GLdouble tz)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTangent3dvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2a595d9d51ec510a3d9d9af5c6ccbff6</anchor>
      <arglist>(const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTangent3fEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8078bb905c55f556da7cb2b371da191e</anchor>
      <arglist>(GLfloat tx, GLfloat ty, GLfloat tz)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTangent3fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac3fd46ad1efeef162c1f41d1f082abc9</anchor>
      <arglist>(const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTangent3iEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a31d1db2611103b8267ef5aaab49344fd</anchor>
      <arglist>(GLint tx, GLint ty, GLint tz)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTangent3ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a01c5ec0bdd5056d23cc74f1a2e127b89</anchor>
      <arglist>(const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTangent3sEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a231139ec0fd4e65c6a832a087eccd4cb</anchor>
      <arglist>(GLshort tx, GLshort ty, GLshort tz)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTangent3svEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af50a5cead3d2dd9618b7ff9043a6693f</anchor>
      <arglist>(const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBinormal3bEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a58b364cc73c62163e968b3fdd028adbe</anchor>
      <arglist>(GLbyte bx, GLbyte by, GLbyte bz)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBinormal3bvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af7379b60c633fffef07e7e26fe00cd73</anchor>
      <arglist>(const GLbyte *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBinormal3dEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8b9385359e86c920b4adb9998e38c786</anchor>
      <arglist>(GLdouble bx, GLdouble by, GLdouble bz)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBinormal3dvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a900df4999f7ce12f2646f0c9f18d6737</anchor>
      <arglist>(const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBinormal3fEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad0d3f257fb6d6c454e273c89771469c9</anchor>
      <arglist>(GLfloat bx, GLfloat by, GLfloat bz)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBinormal3fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae11b040e21620a32030b3551f9c7b391</anchor>
      <arglist>(const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBinormal3iEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a894985a1397568592faca479581a7469</anchor>
      <arglist>(GLint bx, GLint by, GLint bz)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBinormal3ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abc9d7b7e797ecb1571f9489a737d469c</anchor>
      <arglist>(const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBinormal3sEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a31a79328dce0c420b9ac767918a7a37f</anchor>
      <arglist>(GLshort bx, GLshort by, GLshort bz)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBinormal3svEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa6e6884483c60f6ad3e719d84ab2d5e5</anchor>
      <arglist>(const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTangentPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa32293cac85f7d097b8ee38948713830</anchor>
      <arglist>(GLenum type, GLsizei stride, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBinormalPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6e0b18599a9e4fafd30f74fe5548d1d9</anchor>
      <arglist>(GLenum type, GLsizei stride, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFinishTextureSUNX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a06a99e86f1d331114ed4e342b5370b56</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGlobalAlphaFactorbSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7ce0acd270884dcf5521d6a9f76272e7</anchor>
      <arglist>(GLbyte factor)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGlobalAlphaFactorsSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abaccd2a01877521951202ffc54ce2811</anchor>
      <arglist>(GLshort factor)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGlobalAlphaFactoriSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac5381620f2de50c7507fe42186b9e0f9</anchor>
      <arglist>(GLint factor)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGlobalAlphaFactorfSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8d897f7e954d4b803006324e39ae61ad</anchor>
      <arglist>(GLfloat factor)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGlobalAlphaFactordSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a26fc9cdf8826e103f9f5bba1c24ea6c2</anchor>
      <arglist>(GLdouble factor)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGlobalAlphaFactorubSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a36dd3e70793b06748de5f36f424dbae5</anchor>
      <arglist>(GLubyte factor)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGlobalAlphaFactorusSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa9aab326db30531b44d9a44c985cda85</anchor>
      <arglist>(GLushort factor)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGlobalAlphaFactoruiSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a13fd77c6f10f71732cd10e11b10e005f</anchor>
      <arglist>(GLuint factor)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodeuiSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0fe55ba639299c6a31b46fddb8fe7a72</anchor>
      <arglist>(GLuint code)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodeusSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adbe331ac6a7740f0d7ca20bf3f8498b8</anchor>
      <arglist>(GLushort code)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodeubSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae47201096373e56ff282a505e749cb9e</anchor>
      <arglist>(GLubyte code)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodeuivSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0fc5f113924d16e38afe2043f10bc2c8</anchor>
      <arglist>(const GLuint *code)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodeusvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a59f1502e1faba97dc4a59f9be635dcb4</anchor>
      <arglist>(const GLushort *code)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodeubvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a40c185975f1ebdc306e8e14df3f0e1a5</anchor>
      <arglist>(const GLubyte *code)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodePointerSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a73a950ca05bdbcb3520de39dc20d3447</anchor>
      <arglist>(GLenum type, GLsizei stride, const GLvoid **pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColor4ubVertex2fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1d21a3a773fe4077500885a019720181</anchor>
      <arglist>(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColor4ubVertex2fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1ba1262e81d28fdb4485467b109083ad</anchor>
      <arglist>(const GLubyte *c, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColor4ubVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa29a3666dd34004f79c46cd4c8bdb12c</anchor>
      <arglist>(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColor4ubVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac6c70062f6ee0aa631173869ca03e8a5</anchor>
      <arglist>(const GLubyte *c, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColor3fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a599228bd8ff50dbf3c8f6e02c2cc92db</anchor>
      <arglist>(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColor3fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a02704226026db3a7c3081c122fe84635</anchor>
      <arglist>(const GLfloat *c, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNormal3fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adef6b7bf9ed91e771f5346b82b0c3223</anchor>
      <arglist>(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNormal3fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a21ff4a41a6f80a66625bb568556ba64e</anchor>
      <arglist>(const GLfloat *n, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColor4fNormal3fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeb24c8fd1f2d03ecb69421b0c262ecbc</anchor>
      <arglist>(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColor4fNormal3fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afa0b33d4b6ad4b80fdbdd1fe30e05862</anchor>
      <arglist>(const GLfloat *c, const GLfloat *n, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoord2fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adf84b164e83f7339529b2fdff32eb0d4</anchor>
      <arglist>(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoord2fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a38eb480eba306019b78454e4f31b14b1</anchor>
      <arglist>(const GLfloat *tc, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoord4fVertex4fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a092c536d1720e27cacf1fcb9d7a33f6f</anchor>
      <arglist>(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoord4fVertex4fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a32468efe8a0767309237bea4c389ed34</anchor>
      <arglist>(const GLfloat *tc, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoord2fColor4ubVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac65f5246fdfc61072792e45a958fdbfd</anchor>
      <arglist>(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoord2fColor4ubVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a936d8cac3d92a00005dcd84694b5c85f</anchor>
      <arglist>(const GLfloat *tc, const GLubyte *c, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoord2fColor3fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abff7e030b6d0650c09f1d96fcc45f416</anchor>
      <arglist>(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoord2fColor3fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae5ad02707f65bd40960dcd2978e84e2b</anchor>
      <arglist>(const GLfloat *tc, const GLfloat *c, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoord2fNormal3fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a24924cc184ccd3fb9add91a540b075ea</anchor>
      <arglist>(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoord2fNormal3fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4ad3298960524b40d83c36f467759a46</anchor>
      <arglist>(const GLfloat *tc, const GLfloat *n, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoord2fColor4fNormal3fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a98f923d18b7d0c91eadd5ae7b5a32488</anchor>
      <arglist>(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoord2fColor4fNormal3fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab21155be42247124eb3d0c670b530e11</anchor>
      <arglist>(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoord4fColor4fNormal3fVertex4fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a15634e25526b18b5aa7f7749ae7b2b1c</anchor>
      <arglist>(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoord4fColor4fNormal3fVertex4fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5814094a025195138551b444368c84ab</anchor>
      <arglist>(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodeuiVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a100ab941b0076c2a33a814420e33ed9d</anchor>
      <arglist>(GLuint rc, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodeuiVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aedc383aba3fb04a6315bbbd3cc89b571</anchor>
      <arglist>(const GLuint *rc, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodeuiColor4ubVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2b98c49575861a9e87c4f4758ce06b29</anchor>
      <arglist>(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodeuiColor4ubVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af630387cdea350af7e686470cc5f35ce</anchor>
      <arglist>(const GLuint *rc, const GLubyte *c, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodeuiColor3fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1ece2cc4e8578b8fc5efd8c7315ca2c6</anchor>
      <arglist>(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodeuiColor3fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae428840b1f73210f395be66583149703</anchor>
      <arglist>(const GLuint *rc, const GLfloat *c, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodeuiNormal3fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6e9dc1c0e157dd2bd1a6c47248e154e4</anchor>
      <arglist>(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodeuiNormal3fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acded65fb2c5ccd55a803bbc232318e48</anchor>
      <arglist>(const GLuint *rc, const GLfloat *n, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodeuiColor4fNormal3fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae5c94bf1350ad964e0dd3874ac2332c3</anchor>
      <arglist>(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodeuiColor4fNormal3fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9b256bfd941772ffde2f762ab8ff79cb</anchor>
      <arglist>(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodeuiTexCoord2fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acbd362b39720bc7ec06ad6c0fa929cf5</anchor>
      <arglist>(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodeuiTexCoord2fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abbc44ffdae299aed57e537bb727f4dd9</anchor>
      <arglist>(const GLuint *rc, const GLfloat *tc, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a71aeadc9064ceb49241f0aeaf65c17f5</anchor>
      <arglist>(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abfefc59e455b2431f23d3ef409454ab5</anchor>
      <arglist>(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae8730258469199698083cdacf6b26c15</anchor>
      <arglist>(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a48ee9461502d63fcbf30b30bcc20e2df</anchor>
      <arglist>(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBlendFuncSeparateEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4fb7189529d41adbf9f9039d44a096d2</anchor>
      <arglist>(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexWeightfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6287e84a17e8975d734244127f987b91</anchor>
      <arglist>(GLfloat weight)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexWeightfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a655004e14844e4375fab5c4fc6820174</anchor>
      <arglist>(const GLfloat *weight)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexWeightPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab625659c1c767a515ca73b2706a78424</anchor>
      <arglist>(GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFlushVertexArrayRangeNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a20b5eacacbfbfa05da8937cbf9523ff1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexArrayRangeNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abbbc9b2316ced7314040db44341b3beb</anchor>
      <arglist>(GLsizei length, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCombinerParameterfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae481dac4ebfc56133b699195a2876132</anchor>
      <arglist>(GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCombinerParameterfNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a52c49081be898eb41d070492e80fc6a4</anchor>
      <arglist>(GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCombinerParameterivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab51219156020b10158fb801bce49d973</anchor>
      <arglist>(GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCombinerParameteriNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a65989d7ac21c5da06e5190871d78cdf2</anchor>
      <arglist>(GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCombinerInputNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0cb6571229aed8eda5f8152dbc4c9bb1</anchor>
      <arglist>(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCombinerOutputNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a85fd0f534a473059b2b5d1f43bf24fb0</anchor>
      <arglist>(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFinalCombinerInputNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeeb7d935a2616c920be119abd1f98d25</anchor>
      <arglist>(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetCombinerInputParameterfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a764199c09a7e00d1311b2ebc81e1d19a</anchor>
      <arglist>(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetCombinerInputParameterivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a75b85ac7886a1a8e226d7be9ca0d3a04</anchor>
      <arglist>(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetCombinerOutputParameterfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae9732d68d4717ef9763c9c10b3e9d355</anchor>
      <arglist>(GLenum stage, GLenum portion, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetCombinerOutputParameterivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a18adffacda3a8053fb00545a0e0b0773</anchor>
      <arglist>(GLenum stage, GLenum portion, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetFinalCombinerInputParameterfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acf676b678cff5df346e7890f5fc218f4</anchor>
      <arglist>(GLenum variable, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetFinalCombinerInputParameterivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aba8c27d2c18a83d1257a39f84229b211</anchor>
      <arglist>(GLenum variable, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glResizeBuffersMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abe64f607fa23b83fc786176ac9f01f97</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2dMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8511d8fffff9b97b464a8203df47d81e</anchor>
      <arglist>(GLdouble x, GLdouble y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2dvMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8c8696dfb5ca065caaeb28e0e6a2407c</anchor>
      <arglist>(const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2fMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac7ecf5cc37aacadf5f509c7c32c09254</anchor>
      <arglist>(GLfloat x, GLfloat y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2fvMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6bb55c6c9fa47842de8dfe3612e5e5f0</anchor>
      <arglist>(const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2iMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>addeff386bab1c58fb73fb3e476b0a21c</anchor>
      <arglist>(GLint x, GLint y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2ivMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a19f52d1f247460f7b47af10fcf96f417</anchor>
      <arglist>(const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2sMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abad9a8bfbdbfd04b86c0a7137c67636d</anchor>
      <arglist>(GLshort x, GLshort y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos2svMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6480b0417ec209f76ab27635b18cf685</anchor>
      <arglist>(const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3dMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae53da85ac5a7be3a15b4ead7f7585c97</anchor>
      <arglist>(GLdouble x, GLdouble y, GLdouble z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3dvMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aae77ba9dfd39fb6ebcc3a071a50debc0</anchor>
      <arglist>(const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3fMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a638fa18adeb9fd3ac4468cd356d2690a</anchor>
      <arglist>(GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3fvMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae55ad4050e58caa36c817a53d4050b23</anchor>
      <arglist>(const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3iMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4b937dda1bbfff56e99337e458b60651</anchor>
      <arglist>(GLint x, GLint y, GLint z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3ivMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a25caef25e44576e40993d088b782bbc0</anchor>
      <arglist>(const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3sMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aabcb6adaf0a75031921f1eac4c402fc9</anchor>
      <arglist>(GLshort x, GLshort y, GLshort z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos3svMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adad2d911db762420e5fea2c419589b40</anchor>
      <arglist>(const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos4dMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a57593ae7e19c0d3c8e5237d73fd5f092</anchor>
      <arglist>(GLdouble x, GLdouble y, GLdouble z, GLdouble w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos4dvMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab435d7d5a2d57c054e4cca404020458a</anchor>
      <arglist>(const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos4fMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7f7b2968fbdecc5338d38c1b65080ec2</anchor>
      <arglist>(GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos4fvMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae121f3fc27b9d61df3d4ee2073336b2e</anchor>
      <arglist>(const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos4iMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a38f0d8295c35840a69bf8bc557cf13c0</anchor>
      <arglist>(GLint x, GLint y, GLint z, GLint w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos4ivMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa99036f28759d0e24af1e42ed6695d84</anchor>
      <arglist>(const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos4sMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0d52be001a888d0ee09181e02c4d210d</anchor>
      <arglist>(GLshort x, GLshort y, GLshort z, GLshort w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWindowPos4svMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a54d33d9b3b3f7fd0d6630c933f63e612</anchor>
      <arglist>(const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiModeDrawArraysIBM</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac215c48624d7fb2a0d0e3fae72164ec5</anchor>
      <arglist>(const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiModeDrawElementsIBM</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a85eb6325793c557d49c15e8eac368beb</anchor>
      <arglist>(const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid *const *indices, GLsizei primcount, GLint modestride)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColorPointerListIBM</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4762300615f392feca0bf5f2f73da73d</anchor>
      <arglist>(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColorPointerListIBM</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a732b34a0f85eb4bf9ce9c991a580e4d6</anchor>
      <arglist>(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glEdgeFlagPointerListIBM</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1cfc2ca74166a98638c963ba48ac300b</anchor>
      <arglist>(GLint stride, const GLboolean **pointer, GLint ptrstride)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFogCoordPointerListIBM</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac34020c49928ca929549961660700789</anchor>
      <arglist>(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glIndexPointerListIBM</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6da29dab664e2d73b49fe8d45347014d</anchor>
      <arglist>(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNormalPointerListIBM</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a516ec66539979a5eb9a7480cd1a2bf16</anchor>
      <arglist>(GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoordPointerListIBM</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad1937a3c56d890a6b6023bb3a4c72040</anchor>
      <arglist>(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexPointerListIBM</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4d7525353714e39244e123a7dbacf972</anchor>
      <arglist>(GLint size, GLenum type, GLint stride, const GLvoid **pointer, GLint ptrstride)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTbufferMask3DFX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad0121249b26ccc4a0c555c2c45a1cf00</anchor>
      <arglist>(GLuint mask)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSampleMaskEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a505f17b2aaf36fad3fa18a4e6086c7bb</anchor>
      <arglist>(GLclampf value, GLboolean invert)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSamplePatternEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a22ddf9308f8c0db4571baed6e8983589</anchor>
      <arglist>(GLenum pattern)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTextureColorMaskSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae1f320088379f9482950dd2a27a7b5b3</anchor>
      <arglist>(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteFencesNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae7d506dbc68e862b8cf29f94c4a19f57</anchor>
      <arglist>(GLsizei n, const GLuint *fences)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGenFencesNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad8e4bf1c7964878804b4390fd0a3a787</anchor>
      <arglist>(GLsizei n, GLuint *fences)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsFenceNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a180627382106ccb2ebcc5920a198cf75</anchor>
      <arglist>(GLuint fence)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glTestFenceNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac0de0a295b0f0e0b6cfc0df66f601201</anchor>
      <arglist>(GLuint fence)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetFenceivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac28b676c840d61bb55097c773e56a0aa</anchor>
      <arglist>(GLuint fence, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFinishFenceNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae2dc4b7ab1b63ebcd8ff1610df09ab7f</anchor>
      <arglist>(GLuint fence)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSetFenceNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad4a7e7d7c04f830bba38aacd23e4e5c9</anchor>
      <arglist>(GLuint fence, GLenum condition)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMapControlPointsNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7eb1e34f08fd64c51c0595c8b19fb0f3</anchor>
      <arglist>(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMapParameterivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af3dfca98f9e664ffd5dc9a7e587213d3</anchor>
      <arglist>(GLenum target, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMapParameterfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab7f08bb1a4f19836a3cdb6888c53d0a8</anchor>
      <arglist>(GLenum target, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMapControlPointsNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abccfaa26ed95ea8e64d0cfa6e354ee15</anchor>
      <arglist>(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMapParameterivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a041bd3638127b50ddce58bb2050fd178</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMapParameterfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae20b3fd290a462e14dc67f48dec3a8b2</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMapAttribParameterivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a225dd8e5a8eb9532031227bd24a6110f</anchor>
      <arglist>(GLenum target, GLuint index, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMapAttribParameterfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1f6392aca6a2693cd10cd93dbe8c7af0</anchor>
      <arglist>(GLenum target, GLuint index, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glEvalMapsNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abdadc2ee994dcc8d9a596f4063788806</anchor>
      <arglist>(GLenum target, GLenum mode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCombinerStageParameterfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acc21f47e4ac654586f9714d6cee91e53</anchor>
      <arglist>(GLenum stage, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetCombinerStageParameterfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8070906c3caee5db053c0ec668d10d17</anchor>
      <arglist>(GLenum stage, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glAreProgramsResidentNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1df4e692d0633b5252b10445af759082</anchor>
      <arglist>(GLsizei n, const GLuint *programs, GLboolean *residences)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindProgramNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a83c6cfbed6416a28b80f0af5cbed0ca5</anchor>
      <arglist>(GLenum target, GLuint id)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteProgramsNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab83b5a1e9b6ba52999e8e2fec4c6f651</anchor>
      <arglist>(GLsizei n, const GLuint *programs)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glExecuteProgramNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a254941b4850fc7369876d12effd0c8b1</anchor>
      <arglist>(GLenum target, GLuint id, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGenProgramsNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2973f2f5261a50cf8423cecc9f43f67a</anchor>
      <arglist>(GLsizei n, GLuint *programs)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetProgramParameterdvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a80df61dae3d64ced391bbc3bde154d1c</anchor>
      <arglist>(GLenum target, GLuint index, GLenum pname, GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetProgramParameterfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acc8e20621109ec8a449161e66cc1486e</anchor>
      <arglist>(GLenum target, GLuint index, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetProgramivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a60996d1eafff323ea8223df933130feb</anchor>
      <arglist>(GLuint id, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetProgramStringNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac9ee134ddcb38b7925bb4d76ab3f5ee4</anchor>
      <arglist>(GLuint id, GLenum pname, GLubyte *program)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetTrackMatrixivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a02523b8aec693296ebd6228224ecf2a2</anchor>
      <arglist>(GLenum target, GLuint address, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetVertexAttribdvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a73d2a9cb92921eacefeb5e5113726f1e</anchor>
      <arglist>(GLuint index, GLenum pname, GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetVertexAttribfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1ece16a25e3f2c4b6ee3f1915d6c8bce</anchor>
      <arglist>(GLuint index, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetVertexAttribivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aab4b4e5744fdae08577cd6947cc32412</anchor>
      <arglist>(GLuint index, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetVertexAttribPointervNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1922aeb086c47e38595e47fa1ffd3c3e</anchor>
      <arglist>(GLuint index, GLenum pname, GLvoid **pointer)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsProgramNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac96c2aac25f874c6fe0181c5b5a9dedf</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glLoadProgramNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0fb4e1c0f3c815f471b7b8b1144c8b31</anchor>
      <arglist>(GLenum target, GLuint id, GLsizei len, const GLubyte *program)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramParameter4dNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a63d67b10d32780a3b3f9bcae4cf83fa0</anchor>
      <arglist>(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramParameter4dvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6c060500d54b86ebb9a356b709668b54</anchor>
      <arglist>(GLenum target, GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramParameter4fNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab06a16db21ce5f069d1794ea4af37b2d</anchor>
      <arglist>(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramParameter4fvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a06117da93a15ec75fce1efbdd45c5f59</anchor>
      <arglist>(GLenum target, GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramParameters4dvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a67cdecb6265404718f8059f3f38b0212</anchor>
      <arglist>(GLenum target, GLuint index, GLuint count, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramParameters4fvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a95d101911de24657ba4b0ec1f985bf55</anchor>
      <arglist>(GLenum target, GLuint index, GLuint count, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glRequestResidentProgramsNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abee6aab71ec3f5e384c8b1ab95e7d1ca</anchor>
      <arglist>(GLsizei n, const GLuint *programs)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTrackMatrixNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afe2a94bdfe3c29c89d3ce7ec3c0dce91</anchor>
      <arglist>(GLenum target, GLuint address, GLenum matrix, GLenum transform)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribPointerNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6e63abf55c454c569182a3bcc071f6e6</anchor>
      <arglist>(GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib1dNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a60005814e658262b68032ca1fa98e17a</anchor>
      <arglist>(GLuint index, GLdouble x)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib1dvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae45d45c60e4213318f33d795a420adbf</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib1fNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeffd719e209cdfbd1744b37f6018eb88</anchor>
      <arglist>(GLuint index, GLfloat x)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib1fvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad759c095d624e5b761075ebe5c27af87</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib1sNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3614f7a62ac3e885edeaa37690f7f0f7</anchor>
      <arglist>(GLuint index, GLshort x)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib1svNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a43985d6175b40bacc66a89286208dbf0</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib2dNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8b59905ead8fba7b47e71e26314eb9b7</anchor>
      <arglist>(GLuint index, GLdouble x, GLdouble y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib2dvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a346da3b90d9e37e1fdc4d32b8d57f57b</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib2fNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a24393b07bd6e25ac01cca826ff5a2b57</anchor>
      <arglist>(GLuint index, GLfloat x, GLfloat y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib2fvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4e32d1a7d74625ae42ad5c4e0b56b891</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib2sNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a96afba25cf03a7763472d1116b8de1e6</anchor>
      <arglist>(GLuint index, GLshort x, GLshort y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib2svNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2f238f01d10fccdaf396a5d3f57b0fd0</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib3dNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1249d09473f2e37c64cbe5af6e36874e</anchor>
      <arglist>(GLuint index, GLdouble x, GLdouble y, GLdouble z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib3dvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac999bf1f85f9c692554a3f1f31fd4e64</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib3fNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3b610720e94cbb2793e87c369afcfdee</anchor>
      <arglist>(GLuint index, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib3fvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3ded6427b71e8d94eaac507dbea5ffe6</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib3sNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af960eadd8455e0ae63e16e48108eea27</anchor>
      <arglist>(GLuint index, GLshort x, GLshort y, GLshort z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib3svNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa9509d25494b38b29da1a4dd674a111d</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4dNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a43e74377153ec1830bf11ece9fb98350</anchor>
      <arglist>(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4dvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abc5ec3593263a62ec5c8f438529b0f13</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4fNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a065ce51bdbf7782dcf1bb4920f57a454</anchor>
      <arglist>(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4fvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3862b2631c51655ce8655caf20e41a8a</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4sNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9378b24051c9c9731e8fc8983b47a7fb</anchor>
      <arglist>(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4svNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1958480841bfe7bc7da4a45432d829cb</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4ubNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4f2e5557c6ee31212b267d3edcd8ba6a</anchor>
      <arglist>(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4ubvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af0a827d5d4b5cc7dce458d1720ed804c</anchor>
      <arglist>(GLuint index, const GLubyte *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribs1dvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a91c12ce4dc7c9502d76fbff27aa53469</anchor>
      <arglist>(GLuint index, GLsizei count, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribs1fvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0e832d7f495cb08370094d71c4079ca6</anchor>
      <arglist>(GLuint index, GLsizei count, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribs1svNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7ff56559044d1b9fb602c9038bc5d264</anchor>
      <arglist>(GLuint index, GLsizei count, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribs2dvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>affc05acc3d0818572f1105ad827498af</anchor>
      <arglist>(GLuint index, GLsizei count, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribs2fvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeb5cdf9408acec55e529db07cc23e0e3</anchor>
      <arglist>(GLuint index, GLsizei count, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribs2svNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a811211500bf1a4751facbe3d10047282</anchor>
      <arglist>(GLuint index, GLsizei count, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribs3dvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afba3c6aef6b9a3acae420a90109c3aed</anchor>
      <arglist>(GLuint index, GLsizei count, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribs3fvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8fd125699accc82628b9d339b1387aac</anchor>
      <arglist>(GLuint index, GLsizei count, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribs3svNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a929a206dcd8f67810fed466152f34550</anchor>
      <arglist>(GLuint index, GLsizei count, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribs4dvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a653c65481158f115dd94202383dd24c9</anchor>
      <arglist>(GLuint index, GLsizei count, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribs4fvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a306b615c51126962fbb764b9c547dbf3</anchor>
      <arglist>(GLuint index, GLsizei count, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribs4svNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a119c68fec4c0c4fd4000b192e4efbc99</anchor>
      <arglist>(GLuint index, GLsizei count, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribs4ubvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adc1d2560dbcda2f53babdafdd07ce8e1</anchor>
      <arglist>(GLuint index, GLsizei count, const GLubyte *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexBumpParameterivATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a674c6377a826cc0d0cdd2b20faf2987b</anchor>
      <arglist>(GLenum pname, const GLint *param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexBumpParameterfvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a17cff6e6fa7c3c7196c9fcb1dc760135</anchor>
      <arglist>(GLenum pname, const GLfloat *param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetTexBumpParameterivATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3034855547cee74bdff6422af67e23c6</anchor>
      <arglist>(GLenum pname, GLint *param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetTexBumpParameterfvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a927509fdd7b9c454cfb3b22360d7df76</anchor>
      <arglist>(GLenum pname, GLfloat *param)</arglist>
    </member>
    <member kind="function">
      <type>GLuint __stdcall</type>
      <name>GLee_Lazy_glGenFragmentShadersATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaa0f79a19e307e0bf8786d8654b5454c</anchor>
      <arglist>(GLuint range)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindFragmentShaderATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8a3612cc0bc4f5301cbba14a4a5110ec</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteFragmentShaderATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af32336c0ab3a2b3ff2aa7b0eb0207fcc</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBeginFragmentShaderATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad69aa6b831eb9f5d7d83c3ef98c0d1df</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glEndFragmentShaderATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a306035cc93efda7f0ceaa6ef0f635904</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPassTexCoordATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7f85684f6ccdc2be360a3cd5762b1980</anchor>
      <arglist>(GLuint dst, GLuint coord, GLenum swizzle)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSampleMapATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abbf38cef206b95d8f17f8c254b32c63a</anchor>
      <arglist>(GLuint dst, GLuint interp, GLenum swizzle)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColorFragmentOp1ATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af77cab28d7597eb96e9463db4531c6c4</anchor>
      <arglist>(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColorFragmentOp2ATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a071b1aab2c923828aba67b989dff4132</anchor>
      <arglist>(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColorFragmentOp3ATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae0949b024b855b1ab75226033e75488b</anchor>
      <arglist>(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glAlphaFragmentOp1ATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a64c40a025accf67778a5bf09b114f6d9</anchor>
      <arglist>(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glAlphaFragmentOp2ATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7b9bd1a94176bd85cad95833a68927b4</anchor>
      <arglist>(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glAlphaFragmentOp3ATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2b3dbdcd2edb054fe9e7a566e1857a04</anchor>
      <arglist>(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSetFragmentShaderConstantATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5cfdacf0092d9078f201438d48c8a14a</anchor>
      <arglist>(GLuint dst, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPNTrianglesiATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac879e69d0c3c47570ddd06ef4ee4246f</anchor>
      <arglist>(GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPNTrianglesfATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae5d16a9f0e6208b9eceaa699b53995dc</anchor>
      <arglist>(GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <type>GLuint __stdcall</type>
      <name>GLee_Lazy_glNewObjectBufferATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1b7e87f1be0240160bdfd9575f116bec</anchor>
      <arglist>(GLsizei size, const GLvoid *pointer, GLenum usage)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsObjectBufferATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a87f3239a48c7a3b11e7d4af5cff46f78</anchor>
      <arglist>(GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUpdateObjectBufferATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adef5282b4947adc3286c67496752070b</anchor>
      <arglist>(GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetObjectBufferfvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5d6d9c884ccd7ccbd57abc9745a2d9c2</anchor>
      <arglist>(GLuint buffer, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetObjectBufferivATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af0448977c835287a60137701f5a9ba63</anchor>
      <arglist>(GLuint buffer, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFreeObjectBufferATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a322a8a5aea0ada603a2f27b05af5cb25</anchor>
      <arglist>(GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glArrayObjectATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aacd03b60ce177ca8be3fd532b34d91ad</anchor>
      <arglist>(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetArrayObjectfvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a20d3b0c221c08a2cc84723fb090455bb</anchor>
      <arglist>(GLenum array, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetArrayObjectivATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8ee96c96fc18e8e208fe0e6f93619796</anchor>
      <arglist>(GLenum array, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVariantArrayObjectATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a44c0b4febcd261cfef8ac82bf75f2789</anchor>
      <arglist>(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetVariantArrayObjectfvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a05c73dae07386f0e3fff83c70121a653</anchor>
      <arglist>(GLuint id, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetVariantArrayObjectivATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa4f0de710f185799a01c84cb3e937b01</anchor>
      <arglist>(GLuint id, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBeginVertexShaderEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae639c53bef7643993e0123b49638d9db</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glEndVertexShaderEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0cd1ceba944baf2f23fb8a109a7aed23</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindVertexShaderEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad113b2e5765c1bcabedcf08a19ac33d4</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <type>GLuint __stdcall</type>
      <name>GLee_Lazy_glGenVertexShadersEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a48941a3a9916d284b2394145e92ea5b9</anchor>
      <arglist>(GLuint range)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteVertexShaderEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a955b6b1c5c94ffb86b9aafc81b60a0a8</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glShaderOp1EXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7351f5545a1061448a161a0d7aa0d9f6</anchor>
      <arglist>(GLenum op, GLuint res, GLuint arg1)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glShaderOp2EXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aecaf3da4501a1a5d8b2f81d507282103</anchor>
      <arglist>(GLenum op, GLuint res, GLuint arg1, GLuint arg2)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glShaderOp3EXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af6274b30572df997fc0c3fb2bc8ece07</anchor>
      <arglist>(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSwizzleEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae70e55ed3d7207a02b880d4eae06c20f</anchor>
      <arglist>(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glWriteMaskEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9cd49e5b5b79d32148d175761e48c433</anchor>
      <arglist>(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glInsertComponentEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a01c18013555111a3ae45e9a329986b46</anchor>
      <arglist>(GLuint res, GLuint src, GLuint num)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glExtractComponentEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac9397aa499eabafb46fa80b37a87cbe9</anchor>
      <arglist>(GLuint res, GLuint src, GLuint num)</arglist>
    </member>
    <member kind="function">
      <type>GLuint __stdcall</type>
      <name>GLee_Lazy_glGenSymbolsEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a55acf36ad75f4161fce3f65cae86ba46</anchor>
      <arglist>(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSetInvariantEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9a302040bae9e03eb42185c98c0e62fc</anchor>
      <arglist>(GLuint id, GLenum type, const GLvoid *addr)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSetLocalConstantEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7fb0e2419aca32e30e2be4590e00926a</anchor>
      <arglist>(GLuint id, GLenum type, const GLvoid *addr)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVariantbvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac9ab49110518e3107c706ee5eae980b0</anchor>
      <arglist>(GLuint id, const GLbyte *addr)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVariantsvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5eb3b77369f99e231b8f7898c1ab41f0</anchor>
      <arglist>(GLuint id, const GLshort *addr)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVariantivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2cfbf512532f0790c661e3483f034ff9</anchor>
      <arglist>(GLuint id, const GLint *addr)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVariantfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4fa23a165fa15e89676223edb8902636</anchor>
      <arglist>(GLuint id, const GLfloat *addr)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVariantdvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa9ec72dd755d8db325a16a77e848753d</anchor>
      <arglist>(GLuint id, const GLdouble *addr)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVariantubvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad81cb690549f16feabfaffcf292f1e16</anchor>
      <arglist>(GLuint id, const GLubyte *addr)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVariantusvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>addbd62a93b54e4c1ed97e3cee8705129</anchor>
      <arglist>(GLuint id, const GLushort *addr)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVariantuivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4adca8c69022e86effd769b35be3cf87</anchor>
      <arglist>(GLuint id, const GLuint *addr)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVariantPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2bce1d015582da6c083c6dcfb2e29625</anchor>
      <arglist>(GLuint id, GLenum type, GLuint stride, const GLvoid *addr)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glEnableVariantClientStateEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7bd2e41233e71f9d54adbd9872f64024</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDisableVariantClientStateEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a297d1207b9f9d722594f7e2036e91427</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <type>GLuint __stdcall</type>
      <name>GLee_Lazy_glBindLightParameterEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7b5e8d1e89b0ad2e685c461f296e5f0c</anchor>
      <arglist>(GLenum light, GLenum value)</arglist>
    </member>
    <member kind="function">
      <type>GLuint __stdcall</type>
      <name>GLee_Lazy_glBindMaterialParameterEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af1b5788a5cb5194c102eeb3ee3c2b061</anchor>
      <arglist>(GLenum face, GLenum value)</arglist>
    </member>
    <member kind="function">
      <type>GLuint __stdcall</type>
      <name>GLee_Lazy_glBindTexGenParameterEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9989c51a5fb6d968e9dad1d82f4df1b9</anchor>
      <arglist>(GLenum unit, GLenum coord, GLenum value)</arglist>
    </member>
    <member kind="function">
      <type>GLuint __stdcall</type>
      <name>GLee_Lazy_glBindTextureUnitParameterEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9e878c0c31bd2d99610332f4bb5d3bf1</anchor>
      <arglist>(GLenum unit, GLenum value)</arglist>
    </member>
    <member kind="function">
      <type>GLuint __stdcall</type>
      <name>GLee_Lazy_glBindParameterEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a74edd5a83ad6f7433c486aab648dd1a8</anchor>
      <arglist>(GLenum value)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsVariantEnabledEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a61480318711a1204d04fee0daf366e81</anchor>
      <arglist>(GLuint id, GLenum cap)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetVariantBooleanvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af6cfc06ced113e1d715cb187fbf91e1c</anchor>
      <arglist>(GLuint id, GLenum value, GLboolean *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetVariantIntegervEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7519a41ce0dcb6735b2fd148b3a8efdf</anchor>
      <arglist>(GLuint id, GLenum value, GLint *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetVariantFloatvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3f117585704a60423a1fed58a3b0dc49</anchor>
      <arglist>(GLuint id, GLenum value, GLfloat *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetVariantPointervEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5568bc16f9e4654587f83329965a335b</anchor>
      <arglist>(GLuint id, GLenum value, GLvoid **data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetInvariantBooleanvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a33e4e4b8aec9099d38a236ec1de9360e</anchor>
      <arglist>(GLuint id, GLenum value, GLboolean *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetInvariantIntegervEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6fb29a8dadbb645bb2e37da8203e2be7</anchor>
      <arglist>(GLuint id, GLenum value, GLint *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetInvariantFloatvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aba97171045147ca56dbf37a2e87dbb60</anchor>
      <arglist>(GLuint id, GLenum value, GLfloat *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetLocalConstantBooleanvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab8aa728b8bbfef53a9ff48de93b4aadc</anchor>
      <arglist>(GLuint id, GLenum value, GLboolean *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetLocalConstantIntegervEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1c76b8a8f373f3f9300aca711440db10</anchor>
      <arglist>(GLuint id, GLenum value, GLint *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetLocalConstantFloatvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8dc58d6ed32a03d3be5e2082a734c335</anchor>
      <arglist>(GLuint id, GLenum value, GLfloat *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream1sATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af262e60ab9a932cf6e5e94e0da740c06</anchor>
      <arglist>(GLenum stream, GLshort x)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream1svATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab2093b44fc6099315207b075c0216643</anchor>
      <arglist>(GLenum stream, const GLshort *coords)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream1iATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adfc676fc8acd8a2da546e914c2f7fdaa</anchor>
      <arglist>(GLenum stream, GLint x)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream1ivATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7076a37641b6c3f83e5d4c317c4aec33</anchor>
      <arglist>(GLenum stream, const GLint *coords)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream1fATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2626181b5a912cd7dc2aeda1dcebdd6c</anchor>
      <arglist>(GLenum stream, GLfloat x)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream1fvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a59255f36e293c32839373935373e0e7b</anchor>
      <arglist>(GLenum stream, const GLfloat *coords)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream1dATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae1cd918d95b0d4e0106713f6a989dd22</anchor>
      <arglist>(GLenum stream, GLdouble x)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream1dvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abe08811f10cc24888a925eb5a6f52cb4</anchor>
      <arglist>(GLenum stream, const GLdouble *coords)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream2sATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac1d3538e8d36a14df0ef00112f2b951f</anchor>
      <arglist>(GLenum stream, GLshort x, GLshort y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream2svATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae7c91e8867cb5e613b9df64da7fc8b0e</anchor>
      <arglist>(GLenum stream, const GLshort *coords)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream2iATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2c573242560b9bdf257ccdf3afdbbab2</anchor>
      <arglist>(GLenum stream, GLint x, GLint y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream2ivATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0c8f00415b91eb9c099bf9e1fd2dfced</anchor>
      <arglist>(GLenum stream, const GLint *coords)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream2fATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afd818b309ebb9b9a76137d72d8118c31</anchor>
      <arglist>(GLenum stream, GLfloat x, GLfloat y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream2fvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac5b413ab2f525cc01b631ae60a3fd2c8</anchor>
      <arglist>(GLenum stream, const GLfloat *coords)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream2dATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac858f81cf1ca4f0617316133edebd971</anchor>
      <arglist>(GLenum stream, GLdouble x, GLdouble y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream2dvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac09891884364f727fc04d7e5ccc175ad</anchor>
      <arglist>(GLenum stream, const GLdouble *coords)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream3sATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2ac0774bc4e47b1e9297217c5d460483</anchor>
      <arglist>(GLenum stream, GLshort x, GLshort y, GLshort z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream3svATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2694a85d661a763401d2316e4f0eedd6</anchor>
      <arglist>(GLenum stream, const GLshort *coords)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream3iATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac0da6b4a113c9353aead61138f954524</anchor>
      <arglist>(GLenum stream, GLint x, GLint y, GLint z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream3ivATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0c08f7ed6c1e50d3ca2f10529bde0127</anchor>
      <arglist>(GLenum stream, const GLint *coords)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream3fATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a35adaae293e35d0f83e20e277543a1b9</anchor>
      <arglist>(GLenum stream, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream3fvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a21eb3e61d5b351916fab9eff4610bff6</anchor>
      <arglist>(GLenum stream, const GLfloat *coords)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream3dATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab76279e09e881599faaae876270a2a55</anchor>
      <arglist>(GLenum stream, GLdouble x, GLdouble y, GLdouble z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream3dvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0dfad46bfb94f8930db69048d0f4c745</anchor>
      <arglist>(GLenum stream, const GLdouble *coords)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream4sATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a00b1c157839fe0fc839b389051a4c9b9</anchor>
      <arglist>(GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream4svATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aef5e5960e39e4966f5949277f759ad91</anchor>
      <arglist>(GLenum stream, const GLshort *coords)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream4iATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8be5d650eb86eb15c745d8b5620f715c</anchor>
      <arglist>(GLenum stream, GLint x, GLint y, GLint z, GLint w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream4ivATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a281c2fc483191b32b33afc9d5ac6e22d</anchor>
      <arglist>(GLenum stream, const GLint *coords)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream4fATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7fee456b3a8943bbd0a236264809e397</anchor>
      <arglist>(GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream4fvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9fca94f1d574b54a4d6846b77b1918f6</anchor>
      <arglist>(GLenum stream, const GLfloat *coords)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream4dATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a43acfdb536967e874d981d979b5737c2</anchor>
      <arglist>(GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexStream4dvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa224307c0c7504c6c1adba1ca23c3cfe</anchor>
      <arglist>(GLenum stream, const GLdouble *coords)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNormalStream3bATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa0e2100451e6a36572d340795f47d793</anchor>
      <arglist>(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNormalStream3bvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aebc95563bfd1f2c9bc432c0ea0f795db</anchor>
      <arglist>(GLenum stream, const GLbyte *coords)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNormalStream3sATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abe830f1fad994420a27fac03ac3e98c7</anchor>
      <arglist>(GLenum stream, GLshort nx, GLshort ny, GLshort nz)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNormalStream3svATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afed8649730d480c10b446ca05c0272c2</anchor>
      <arglist>(GLenum stream, const GLshort *coords)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNormalStream3iATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a48973f80ff00b0932d5779f1a729fbc4</anchor>
      <arglist>(GLenum stream, GLint nx, GLint ny, GLint nz)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNormalStream3ivATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac6b846789d9e03be6f45633800418d3d</anchor>
      <arglist>(GLenum stream, const GLint *coords)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNormalStream3fATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a82be710e2fb5f71a62df9bf6bf3cc9f6</anchor>
      <arglist>(GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNormalStream3fvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aff9dd719c42cd57a72de1a7622547516</anchor>
      <arglist>(GLenum stream, const GLfloat *coords)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNormalStream3dATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a46c7f6f9e446299b84a51363e4d41b09</anchor>
      <arglist>(GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNormalStream3dvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae9fc18c3480abd5efbb28909eeed9eff</anchor>
      <arglist>(GLenum stream, const GLdouble *coords)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glClientActiveVertexStreamATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3d090289348fe4483357d4931e67fd05</anchor>
      <arglist>(GLenum stream)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexBlendEnviATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7e417268bfc90212436bc424abb03cf2</anchor>
      <arglist>(GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexBlendEnvfATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a36dc5985bfaca2e5ccbd59353920644b</anchor>
      <arglist>(GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glElementPointerATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1ac3f04597d10559e2eb5f3ee8840b73</anchor>
      <arglist>(GLenum type, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDrawElementArrayATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3883a5af28ba0da0ab558fce34837ba4</anchor>
      <arglist>(GLenum mode, GLsizei count)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDrawRangeElementArrayATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a97b98c967b036cc0b5ad424f7db07d7b</anchor>
      <arglist>(GLenum mode, GLuint start, GLuint end, GLsizei count)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDrawMeshArraysSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af48b265a6c0eb9449c96e6a5295760f8</anchor>
      <arglist>(GLenum mode, GLint first, GLsizei count, GLsizei width)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGenOcclusionQueriesNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aedf141af6caa241fd88e145dae3b8e1b</anchor>
      <arglist>(GLsizei n, GLuint *ids)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteOcclusionQueriesNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0f462dedb7059755bd893845b2a0f948</anchor>
      <arglist>(GLsizei n, const GLuint *ids)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsOcclusionQueryNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a251c3a011873ad715b628a4d5416f5d1</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBeginOcclusionQueryNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9f7bdfc858b2ba5b42343f5ebe5b9c3a</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glEndOcclusionQueryNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a81b383c3832daaceef4f9e19031eb245</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetOcclusionQueryivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6ba3ded05333551251c7f90c646b1ff7</anchor>
      <arglist>(GLuint id, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetOcclusionQueryuivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac27a1476aa5cf82916fc8ecff04e977b</anchor>
      <arglist>(GLuint id, GLenum pname, GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPointParameteriNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a355b1222f5b0908066d44f2bbacc9a45</anchor>
      <arglist>(GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPointParameterivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac43afadad75c269f91c1d0d6b6e71430</anchor>
      <arglist>(GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glActiveStencilFaceEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab69dd73d0f374fcf56fe4a90287c77c6</anchor>
      <arglist>(GLenum face)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glElementPointerAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab0247335e6c2bb2412a26e356b072c67</anchor>
      <arglist>(GLenum type, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDrawElementArrayAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afa8ea17802c113efb0ec70964cc210bf</anchor>
      <arglist>(GLenum mode, GLint first, GLsizei count)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDrawRangeElementArrayAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aca70f75bb5a7824c33decd55d694617d</anchor>
      <arglist>(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiDrawElementArrayAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a010b6ffbce5810c096a4774e6860d9f1</anchor>
      <arglist>(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiDrawRangeElementArrayAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9cc24b87b55f87f650c8ff50a977a424</anchor>
      <arglist>(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGenFencesAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af9b7a511c86e11da5cf9558ada787eac</anchor>
      <arglist>(GLsizei n, GLuint *fences)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteFencesAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a211509b7450d6a1c21a695709412c8df</anchor>
      <arglist>(GLsizei n, const GLuint *fences)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSetFenceAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1f408ced6f0a67b341b830612d55a428</anchor>
      <arglist>(GLuint fence)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsFenceAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6b97ef13660d65c448fabb1d372f798c</anchor>
      <arglist>(GLuint fence)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glTestFenceAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a563be591d6a8f47b48751ca97f945353</anchor>
      <arglist>(GLuint fence)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFinishFenceAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a693c53fb2871ad1b7c71ee7ea0d5e17f</anchor>
      <arglist>(GLuint fence)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glTestObjectAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5283ada35bdb9244f7007bdb7ed80c80</anchor>
      <arglist>(GLenum object, GLuint name)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFinishObjectAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aae2067e4547a5e64ec730ecd249a2826</anchor>
      <arglist>(GLenum object, GLint name)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindVertexArrayAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a017f109fd29ba6996b114910d4dc594d</anchor>
      <arglist>(GLuint array)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteVertexArraysAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a23369b32a6ddae198dda6825049700d3</anchor>
      <arglist>(GLsizei n, const GLuint *arrays)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGenVertexArraysAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8fc002016965f0bd35f66030800a29f6</anchor>
      <arglist>(GLsizei n, GLuint *arrays)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsVertexArrayAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a48c1b89e6717221353aebb1bf3a61da2</anchor>
      <arglist>(GLuint array)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexArrayRangeAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a784f2ca11e401f0c77c851b5c85fb0cf</anchor>
      <arglist>(GLsizei length, GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFlushVertexArrayRangeAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a75dda32863df08ef4adc6edbb6402604</anchor>
      <arglist>(GLsizei length, GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexArrayParameteriAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a25b503a3cd2b8c62a3ff9fd0006bb8ce</anchor>
      <arglist>(GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDrawBuffersATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad31532217b42d276e5abe8e44fb3ab92</anchor>
      <arglist>(GLsizei n, const GLenum *bufs)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramNamedParameter4fNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4de48fb67a6aed6ccbf299d10bb5eba5</anchor>
      <arglist>(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramNamedParameter4dNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0b8829a12c234933b29ffa53fd3676cb</anchor>
      <arglist>(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramNamedParameter4fvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9b700de18508f934af1ec769b334387d</anchor>
      <arglist>(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramNamedParameter4dvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abee9f9a9e22e51babeb84365cb5d47e5</anchor>
      <arglist>(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetProgramNamedParameterfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac666cddd87d3f726cf8bcc31e1814947</anchor>
      <arglist>(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetProgramNamedParameterdvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0c94a59295adfd0b19874e186a2029b1</anchor>
      <arglist>(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertex2hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2c08855949e2b95a8e4de9ca236f40a5</anchor>
      <arglist>(GLhalfNV x, GLhalfNV y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertex2hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2393032aee5172d02d3389091c0eb0c3</anchor>
      <arglist>(const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertex3hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a62512883e8f7cfc1fba48e4c65d95169</anchor>
      <arglist>(GLhalfNV x, GLhalfNV y, GLhalfNV z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertex3hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aec4f783da0bb02d93d6023c0656ff5b5</anchor>
      <arglist>(const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertex4hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5e71bb4d6b2e3590bd329afd79d0924a</anchor>
      <arglist>(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertex4hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a686be5d039cc466a1e17794785519356</anchor>
      <arglist>(const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNormal3hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9f7ea2ae842a6cfafdaaeeaea74d0630</anchor>
      <arglist>(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNormal3hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad88271f6e0ee0352b81761dc6cda1def</anchor>
      <arglist>(const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColor3hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab3acae6c23182535b07427065e18c5c0</anchor>
      <arglist>(GLhalfNV red, GLhalfNV green, GLhalfNV blue)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColor3hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2e2e2e833969e0e326c972ef746c1d5d</anchor>
      <arglist>(const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColor4hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa5c6ed37663799e32415148932672ac7</anchor>
      <arglist>(GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColor4hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5c9515ef8d37132e70030e21806a8c12</anchor>
      <arglist>(const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoord1hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae724b90652caedab6412f2984359b41e</anchor>
      <arglist>(GLhalfNV s)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoord1hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aee8bead155116f69889bfe100edd5355</anchor>
      <arglist>(const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoord2hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a656ebf113ed5c1b352fe04576eb66265</anchor>
      <arglist>(GLhalfNV s, GLhalfNV t)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoord2hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abeec599722f8b43d0bb04d031c15fb25</anchor>
      <arglist>(const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoord3hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2569da17fd386c30cc9b0d25b2064bf6</anchor>
      <arglist>(GLhalfNV s, GLhalfNV t, GLhalfNV r)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoord3hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa820dc58d0040ee6b7f6a11e8dd0bf7d</anchor>
      <arglist>(const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoord4hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac10653440ac3e657ff3ec9dcdb750656</anchor>
      <arglist>(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexCoord4hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a016f942959b9fd467f7af11da098f059</anchor>
      <arglist>(const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord1hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a61a8f64c2b0a807267d5678d4149d382</anchor>
      <arglist>(GLenum target, GLhalfNV s)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord1hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4c5d0a2c278b75285ec3980000e622f3</anchor>
      <arglist>(GLenum target, const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord2hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aee8ec59ebd4d182ef3dc5ad0def9f34d</anchor>
      <arglist>(GLenum target, GLhalfNV s, GLhalfNV t)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord2hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa10d0438756e04d2eb6eeab9dfcfd3b5</anchor>
      <arglist>(GLenum target, const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord3hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aef10ff99d67533a1c4c0437f0e8b6b98</anchor>
      <arglist>(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord3hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a11c3e4ea661856fd77a330c724d88383</anchor>
      <arglist>(GLenum target, const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord4hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a325f75d2cfcb04484d43a914e47a2397</anchor>
      <arglist>(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoord4hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adaff59a468a1a340cd15c3ec5c5608da</anchor>
      <arglist>(GLenum target, const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFogCoordhNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a11ba1fc5e12f5b893e412f73f6c46dd3</anchor>
      <arglist>(GLhalfNV fog)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFogCoordhvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac043e01691bedc04dee4c6bc1f314962</anchor>
      <arglist>(const GLhalfNV *fog)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aff9047a7b05622a329fc5923c3e65ae6</anchor>
      <arglist>(GLhalfNV red, GLhalfNV green, GLhalfNV blue)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSecondaryColor3hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a868e119d3e9535224d5dead0c4da7f03</anchor>
      <arglist>(const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexWeighthNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aad9c29c6c8f9f74b60a466eb6779e6a0</anchor>
      <arglist>(GLhalfNV weight)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexWeighthvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a141df282fd6a4f8cc81de68970311f9a</anchor>
      <arglist>(const GLhalfNV *weight)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib1hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8a67de6b07e07fd285af6ce384ccbb0c</anchor>
      <arglist>(GLuint index, GLhalfNV x)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib1hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afa74a3553080445a08c199693384f974</anchor>
      <arglist>(GLuint index, const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib2hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae2711a76cd88c90d7fe4582c237f5e62</anchor>
      <arglist>(GLuint index, GLhalfNV x, GLhalfNV y)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib2hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab3152a720e2c272a0dac27e2905466d3</anchor>
      <arglist>(GLuint index, const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib3hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af82ef28f117d70a68ca4fb64622f8d47</anchor>
      <arglist>(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib3hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a343acb57cd92eca0b96c7d3a49c03086</anchor>
      <arglist>(GLuint index, const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af1bbb101a3f6a8f05ea202068231847c</anchor>
      <arglist>(GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttrib4hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2f32d20a83b1fa9dbfc0bc19dd4ae3e3</anchor>
      <arglist>(GLuint index, const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribs1hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a846b50b5d506930a9da9bce887791293</anchor>
      <arglist>(GLuint index, GLsizei n, const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribs2hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a63e6157ca43294864e285fc0d6931303</anchor>
      <arglist>(GLuint index, GLsizei n, const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribs3hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a250e1b2eeb0d37fd2a4707a390e6d8d3</anchor>
      <arglist>(GLuint index, GLsizei n, const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribs4hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa369fbd2f057679aa97f8112d131a2fa</anchor>
      <arglist>(GLuint index, GLsizei n, const GLhalfNV *v)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPixelDataRangeNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1ba029d643e0c261375a5d5061a39a86</anchor>
      <arglist>(GLenum target, GLsizei length, GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFlushPixelDataRangeNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a31652ec73a094300dd9a6d32e79b089a</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPrimitiveRestartNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0b4da8b3a0328c9a26e76f526814656d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPrimitiveRestartIndexNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa510489c9e49e972bdc388d3f6baecc5</anchor>
      <arglist>(GLuint index)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid *__stdcall</type>
      <name>GLee_Lazy_glMapObjectBufferATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a211db098cbdd3f1377cda4881b424985</anchor>
      <arglist>(GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUnmapObjectBufferATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab57916c532911d874384fc9d34e05b48</anchor>
      <arglist>(GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glStencilOpSeparateATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2b4aeefa8a2861fafb59bfbd7bcad3c9</anchor>
      <arglist>(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glStencilFuncSeparateATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad9af2b1f830a9738bfdc9fb8c04a80df</anchor>
      <arglist>(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glVertexAttribArrayObjectATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad5d1d58f52253bead58f06ca77109106</anchor>
      <arglist>(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetVertexAttribArrayObjectfvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7f1ff2930c9d35c4b994641c87f915ae</anchor>
      <arglist>(GLuint index, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetVertexAttribArrayObjectivATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a341a4520be83e83db7821c119e33373d</anchor>
      <arglist>(GLuint index, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDepthBoundsEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad279c6e021dcee1d678ea423d58c6741</anchor>
      <arglist>(GLclampd zmin, GLclampd zmax)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBlendEquationSeparateEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a91414e4d7cc1a66d05e4d64f3ccddc8d</anchor>
      <arglist>(GLenum modeRGB, GLenum modeAlpha)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsRenderbufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac55f427bc77e0379a149017414e7e6ab</anchor>
      <arglist>(GLuint renderbuffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindRenderbufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a46fa28e871f81319122819c393c69f39</anchor>
      <arglist>(GLenum target, GLuint renderbuffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteRenderbuffersEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae5d6bd3aaf446a9d4497fa86c204fa46</anchor>
      <arglist>(GLsizei n, const GLuint *renderbuffers)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGenRenderbuffersEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2db8ea0264434a6ad0989b0077e0a5be</anchor>
      <arglist>(GLsizei n, GLuint *renderbuffers)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glRenderbufferStorageEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1fe61c9b65956a24496d012046eec0d9</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetRenderbufferParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8fba3ad46241644b69f17206b744913a</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsFramebufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad9fd9b8deb785200b35f64d7501e0ba7</anchor>
      <arglist>(GLuint framebuffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindFramebufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aba24b6266ab28442eaa5554aeb52014f</anchor>
      <arglist>(GLenum target, GLuint framebuffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteFramebuffersEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a63d5417cee38a558eeb2215a134b3d3b</anchor>
      <arglist>(GLsizei n, const GLuint *framebuffers)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGenFramebuffersEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af1d81199355e9d50988dace1fc722c41</anchor>
      <arglist>(GLsizei n, GLuint *framebuffers)</arglist>
    </member>
    <member kind="function">
      <type>GLenum __stdcall</type>
      <name>GLee_Lazy_glCheckFramebufferStatusEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3128e0bc3777734ee818b1422f4140c4</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFramebufferTexture1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9d0771935515ce0e975829d92e69b25b</anchor>
      <arglist>(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFramebufferTexture2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a52e4a3f7a5bb33d5d2e63d13d07d668e</anchor>
      <arglist>(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFramebufferTexture3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a57b54c1888a6d75af6e00646cbd5ee41</anchor>
      <arglist>(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFramebufferRenderbufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abbafb12a04cf3843f53defa9e757c9c3</anchor>
      <arglist>(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetFramebufferAttachmentParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afab6cad82963e6cdc478a192ca7b1e85</anchor>
      <arglist>(GLenum target, GLenum attachment, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGenerateMipmapEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad4ab8e20ce936df19464c82e40fd98bd</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glStringMarkerGREMEDY</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad0a34646ff842dfe73269e2222d98d1d</anchor>
      <arglist>(GLsizei len, const GLvoid *string)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glStencilClearTagEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a12a5ded75f5d0100317741dddd5c5292</anchor>
      <arglist>(GLsizei stencilTagBits, GLuint stencilClearTag)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBlitFramebufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3589cc1e8578dc8f23f56347894ca675</anchor>
      <arglist>(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glRenderbufferStorageMultisampleEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3aa1b8d546945586d708e94f873b060b</anchor>
      <arglist>(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetQueryObjecti64vEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a393f90b3ef930649158e8e962af01631</anchor>
      <arglist>(GLuint id, GLenum pname, GLint64EXT *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetQueryObjectui64vEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a42df5dc8c17e8bd043b0cf59c7b9d48d</anchor>
      <arglist>(GLuint id, GLenum pname, GLuint64EXT *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramEnvParameters4fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aba6695e84db4eeab510301e0ef84fb23</anchor>
      <arglist>(GLenum target, GLuint index, GLsizei count, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramLocalParameters4fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a67d7b8068e3b887dcdffcd6b255fec1d</anchor>
      <arglist>(GLenum target, GLuint index, GLsizei count, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBufferParameteriAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a36c92f497a81385ff14f2d82926f513e</anchor>
      <arglist>(GLenum target, GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFlushMappedBufferRangeAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1e9cc55c6c9e5db56180fa7ee3bd4e12</anchor>
      <arglist>(GLenum target, GLintptr offset, GLsizeiptr size)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetUniformuivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a08eaa308bff0585ef34d55a4b962ed59</anchor>
      <arglist>(GLuint program, GLint location, GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindFragDataLocationEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab59c1f60d110513749fe85ab9ca5874d</anchor>
      <arglist>(GLuint program, GLuint color, const GLchar *name)</arglist>
    </member>
    <member kind="function">
      <type>GLint __stdcall</type>
      <name>GLee_Lazy_glGetFragDataLocationEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abf2bf3d4cd1bf9e5195c9a344a6e4192</anchor>
      <arglist>(GLuint program, const GLchar *name)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform1uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6bdb0a54faca69018eeff670edb06663</anchor>
      <arglist>(GLint location, GLuint v0)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform2uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a66f3c75dbe83cba58943f4618d443636</anchor>
      <arglist>(GLint location, GLuint v0, GLuint v1)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform3uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2e258ee1d77da0040a84a5e45cca64fb</anchor>
      <arglist>(GLint location, GLuint v0, GLuint v1, GLuint v2)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform4uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5d9dd7cf1676ace0825e4e8808474da8</anchor>
      <arglist>(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform1uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afbbd99a015774d4f042bf540719db394</anchor>
      <arglist>(GLint location, GLsizei count, const GLuint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform2uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5f8b41ee435a9efeb605f14aba8584ea</anchor>
      <arglist>(GLint location, GLsizei count, const GLuint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform3uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a33cecf459cb76985bedbe31adbb43e81</anchor>
      <arglist>(GLint location, GLsizei count, const GLuint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniform4uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a66f4be20f986f2b7f4507eaac96a5432</anchor>
      <arglist>(GLint location, GLsizei count, const GLuint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDrawArraysInstancedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a536d34082008cf5a5dc6f78c097d49d4</anchor>
      <arglist>(GLenum mode, GLint start, GLsizei count, GLsizei primcount)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDrawElementsInstancedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9890aff80215152860a00b05986e4f4b</anchor>
      <arglist>(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexBufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a54ef7d944ae53458e0ac608b0f5f9594</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDepthRangedNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1618af4f1b86864d91ce243ca6d7eff9</anchor>
      <arglist>(GLdouble zNear, GLdouble zFar)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glClearDepthdNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5dc1c858ca472d1c2da95ec65501a2ff</anchor>
      <arglist>(GLdouble depth)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDepthBoundsdNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>add6b74e21e5b9e3eabca6ac5ebf98c93</anchor>
      <arglist>(GLdouble zmin, GLdouble zmax)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glRenderbufferStorageMultisampleCoverageNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae7d2e183d9c6f586125361c3ef35f659</anchor>
      <arglist>(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramBufferParametersfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3258279729a2dea27b02f7f4c3feeabd</anchor>
      <arglist>(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramBufferParametersIivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a67970dadea47413d864d09b14d0504b6</anchor>
      <arglist>(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramBufferParametersIuivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac355395a578a65f4c59ca30ebe3b4262</anchor>
      <arglist>(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glColorMaskIndexedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2ecb34f8dc050bc2717f84f8bd02f291</anchor>
      <arglist>(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetBooleanIndexedvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a453e47bd1fbc7851947d032743cd9ac4</anchor>
      <arglist>(GLenum target, GLuint index, GLboolean *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetIntegerIndexedvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa0cc156b72822dc7aac8cfc68a1da392</anchor>
      <arglist>(GLenum target, GLuint index, GLint *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glEnableIndexedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa8ffd6226187e40f19ef25504571a560</anchor>
      <arglist>(GLenum target, GLuint index)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDisableIndexedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a96247c388a28c6bc40a7b4292f3e4d43</anchor>
      <arglist>(GLenum target, GLuint index)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsEnabledIndexedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8c7c4055bdd313e0d4b436052811cb89</anchor>
      <arglist>(GLenum target, GLuint index)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBeginTransformFeedbackNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac5c04347c71bfce411176d9d26ad7e7b</anchor>
      <arglist>(GLenum primitiveMode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glEndTransformFeedbackNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af3b8b64fb976a2fbf6b224c099bb4604</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTransformFeedbackAttribsNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8ff84fd19756373adeaea5a4e11d7abb</anchor>
      <arglist>(GLuint count, const GLint *attribs, GLenum bufferMode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindBufferRangeNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a153dd4dec41810bb3c72d1ad120caffd</anchor>
      <arglist>(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindBufferOffsetNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6fad7c31677f67229d081ac51aaa954a</anchor>
      <arglist>(GLenum target, GLuint index, GLuint buffer, GLintptr offset)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindBufferBaseNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3073a86854b666b5cad01db2fd4a836e</anchor>
      <arglist>(GLenum target, GLuint index, GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTransformFeedbackVaryingsNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0564c694bde65bfc0f6bb07fb899416f</anchor>
      <arglist>(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glActiveVaryingNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afc1a6d55042ccffc1c556257f83b9886</anchor>
      <arglist>(GLuint program, const GLchar *name)</arglist>
    </member>
    <member kind="function">
      <type>GLint __stdcall</type>
      <name>GLee_Lazy_glGetVaryingLocationNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad58c7ce1737fc52ee9f08f759fdc93b4</anchor>
      <arglist>(GLuint program, const GLchar *name)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetActiveVaryingNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a12677a5963dfba60a82c2e3dc593c3b8</anchor>
      <arglist>(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetTransformFeedbackVaryingNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a227d1e89e3c4a81af5862be0df96f7de</anchor>
      <arglist>(GLuint program, GLuint index, GLint *location)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glUniformBufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a123c43bfbecf1633dbf44b3213f08e21</anchor>
      <arglist>(GLuint program, GLint location, GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <type>GLint __stdcall</type>
      <name>GLee_Lazy_glGetUniformBufferSizeEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abe8a645a48a077e4c00a612feb456ac4</anchor>
      <arglist>(GLuint program, GLint location)</arglist>
    </member>
    <member kind="function">
      <type>GLintptr __stdcall</type>
      <name>GLee_Lazy_glGetUniformOffsetEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a94c353b1fdcccc4074014a25b31f8a57</anchor>
      <arglist>(GLuint program, GLint location)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexParameterIivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a48c9657bfbf1b13cfd686f287faa1a40</anchor>
      <arglist>(GLenum target, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexParameterIuivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac5c3babee5b8a50b7d4f305ed6cd560a</anchor>
      <arglist>(GLenum target, GLenum pname, const GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetTexParameterIivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae005ed3a9fb0e8b65d347a8400392e8e</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetTexParameterIuivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a403c1a218c98e08d9bff7d11aa57fb7d</anchor>
      <arglist>(GLenum target, GLenum pname, GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glClearColorIiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a569de21d5fb8462468e02fb256d172f2</anchor>
      <arglist>(GLint red, GLint green, GLint blue, GLint alpha)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glClearColorIuiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7a1cad1ec51ff4b82a1e0ad525d488fc</anchor>
      <arglist>(GLuint red, GLuint green, GLuint blue, GLuint alpha)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFrameTerminatorGREMEDY</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afec22e96cb44ff0e3149d1b7c920748b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBeginConditionalRenderNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a819814c227951f5dd8b38c10a0f4b901</anchor>
      <arglist>(GLuint id, GLenum mode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glEndConditionalRenderNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4619fede98c66754d435ddd318effb1e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBeginTransformFeedbackEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0d9be2a3fed222aeb457aa803682fc49</anchor>
      <arglist>(GLenum primitiveMode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glEndTransformFeedbackEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac1ccf7b96f819cc0744849386aaa9627</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindBufferRangeEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab95fd9d46ecb6e9b020c02f6329781b4</anchor>
      <arglist>(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindBufferOffsetEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad00db3a0ec3e10a02862c74ad7a70aa0</anchor>
      <arglist>(GLenum target, GLuint index, GLuint buffer, GLintptr offset)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindBufferBaseEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac2c04872524a0c1947b476f5544e3589</anchor>
      <arglist>(GLenum target, GLuint index, GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTransformFeedbackVaryingsEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a65eac3ea30b06c8cd282bc4875dcc80a</anchor>
      <arglist>(GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetTransformFeedbackVaryingEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae7e7557564226eb8811b0383766194ec</anchor>
      <arglist>(GLuint program, GLuint index, GLint *location)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glClientAttribDefaultEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa59a83573cd1145fd331d073085bc72d</anchor>
      <arglist>(GLbitfield mask)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPushClientAttribDefaultEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a131316fb90f43c7fa05fa88b17fd0556</anchor>
      <arglist>(GLbitfield mask)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixLoadfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abdc1acb4341bdde107101022c584e85c</anchor>
      <arglist>(GLenum mode, const GLfloat *m)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixLoaddEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6c3dfda0952e5dbf290185c172006ce8</anchor>
      <arglist>(GLenum mode, const GLdouble *m)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixMultfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9ba36493bffa78fea4297ff0867ea599</anchor>
      <arglist>(GLenum mode, const GLfloat *m)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixMultdEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa549cc00e7dde5aded32255e885c179b</anchor>
      <arglist>(GLenum mode, const GLdouble *m)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixLoadIdentityEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a78289c75c70e70b00f40a3cffd38bce8</anchor>
      <arglist>(GLenum mode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixRotatefEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0ddc1f76af1637a7d23b2a94ecbe7a9f</anchor>
      <arglist>(GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixRotatedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a91fbb5e8e46116636c6b18e792c05b16</anchor>
      <arglist>(GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixScalefEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0f5606b425f2f0dd654a8b42228f2416</anchor>
      <arglist>(GLenum mode, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixScaledEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abaad0045c306e0d5258fdea91e06b0b4</anchor>
      <arglist>(GLenum mode, GLdouble x, GLdouble y, GLdouble z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixTranslatefEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a73f06d079e1cc8869518a56c2c139046</anchor>
      <arglist>(GLenum mode, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixTranslatedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaad62d16bdee27e64e5bd315dc3d44f8</anchor>
      <arglist>(GLenum mode, GLdouble x, GLdouble y, GLdouble z)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixFrustumEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad761ca82e495a29077f10508e8761687</anchor>
      <arglist>(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixOrthoEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aba8300bf36ab9507e8e98b2c5e0879ec</anchor>
      <arglist>(GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixPopEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3d053167a0fb8b1bbde989ab4c2ee721</anchor>
      <arglist>(GLenum mode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixPushEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af37d0474a970e5f74f87741d4ed02209</anchor>
      <arglist>(GLenum mode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixLoadTransposefEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa2efa408aae8de3d9f388eb33bb84664</anchor>
      <arglist>(GLenum mode, const GLfloat *m)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixLoadTransposedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac8a733fe5c6b6772f2e9f19bafe58d01</anchor>
      <arglist>(GLenum mode, const GLdouble *m)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixMultTransposefEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5e1bc4fba81fbc6137a8a0cad966f300</anchor>
      <arglist>(GLenum mode, const GLfloat *m)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMatrixMultTransposedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acc553d380f18a12cb8c09f75b6cde1ec</anchor>
      <arglist>(GLenum mode, const GLdouble *m)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTextureParameterfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3d8216b1df89e0986393ed09144b993b</anchor>
      <arglist>(GLuint texture, GLenum target, GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTextureParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5bb06193039047d7bb210d4d052f1ade</anchor>
      <arglist>(GLuint texture, GLenum target, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTextureParameteriEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac6a7298fe10133870701b627d351867b</anchor>
      <arglist>(GLuint texture, GLenum target, GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTextureParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab6e8030c86e70741c69b2563a89318b7</anchor>
      <arglist>(GLuint texture, GLenum target, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTextureImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2867a8248db31b282f2c67bc1ba8c25a</anchor>
      <arglist>(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTextureImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3e12f33d9cead9a86adca9324754d699</anchor>
      <arglist>(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTextureSubImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad9cee0ae126dbe09ad53bb461781796c</anchor>
      <arglist>(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTextureSubImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa4c58ece0118175bdd858c1d3e436852</anchor>
      <arglist>(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyTextureImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a680b6961dbf7e1388e8013e578acb05f</anchor>
      <arglist>(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyTextureImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab1d37c8128de27b839c147d4c26c6111</anchor>
      <arglist>(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyTextureSubImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afa6346ab6c4c1112e08ba7e4ed40d82d</anchor>
      <arglist>(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyTextureSubImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac1439070551efeee13982aaed5c4add2</anchor>
      <arglist>(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetTextureImageEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a364d659c34d38f23f0d4771459b6dbf4</anchor>
      <arglist>(GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetTextureParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a290cd4b497982b75afbdf1f42f5edb53</anchor>
      <arglist>(GLuint texture, GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetTextureParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad28447e556536b34bb557229139eeeee</anchor>
      <arglist>(GLuint texture, GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetTextureLevelParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a84560c334a1d01db31f044ec145ab8be</anchor>
      <arglist>(GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetTextureLevelParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aef37add0153b185f392a7777c55400cf</anchor>
      <arglist>(GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTextureImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab87d3605de3f7c274ab1bc0b5e544a44</anchor>
      <arglist>(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTextureSubImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae56cb7d028014da438ae0dc39803f2b5</anchor>
      <arglist>(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyTextureSubImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0a97811d997ea655871c3b301772197f</anchor>
      <arglist>(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexParameterfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a762bcb2d2825a9d59ac2d511d0d0c2f9</anchor>
      <arglist>(GLenum texunit, GLenum target, GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a34b140ae2c0d11ac170655ab69549283</anchor>
      <arglist>(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexParameteriEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab8a5a1a7328b302cab9886e29a2c74a2</anchor>
      <arglist>(GLenum texunit, GLenum target, GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a97b860ddc970296b2490eadff9bfa2d1</anchor>
      <arglist>(GLenum texunit, GLenum target, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9111e1463c0b12302f3aefe14c24d843</anchor>
      <arglist>(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac657aec8a486f04c7af56a1062825ff1</anchor>
      <arglist>(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexSubImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a93679078ee57bc92421f1a5efcf6e009</anchor>
      <arglist>(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexSubImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae5b6e54f2cad931460f65656d624ce5a</anchor>
      <arglist>(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyMultiTexImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a026892075168ffa43d9ac949f3754647</anchor>
      <arglist>(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyMultiTexImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a18b2aca4249044eb23b7120ff9181e39</anchor>
      <arglist>(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyMultiTexSubImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aff2718f019e695e6aefb5d964b985d88</anchor>
      <arglist>(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyMultiTexSubImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5e24ad72411b76b04b2929c3726a8392</anchor>
      <arglist>(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMultiTexImageEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a62c457cc15367e8670e75651dce233b3</anchor>
      <arglist>(GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMultiTexParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a63a83dabb381ef091ece5253da8f767a</anchor>
      <arglist>(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMultiTexParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0aa5618b388042d9dd1c6a285d18ece2</anchor>
      <arglist>(GLenum texunit, GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMultiTexLevelParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae8c161964429f36e25c149106b5bd57b</anchor>
      <arglist>(GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMultiTexLevelParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5f469064fd72d33209162e9b7d712c6d</anchor>
      <arglist>(GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3b09d5255d094ae48f002be402f72097</anchor>
      <arglist>(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexSubImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a31271996aefb88936e07aebedbb8eafd</anchor>
      <arglist>(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCopyMultiTexSubImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a217d365297d5f465cb6fd970b8a16f1a</anchor>
      <arglist>(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindMultiTextureEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae8b4c9b1a9f38526271562e393201005</anchor>
      <arglist>(GLenum texunit, GLenum target, GLuint texture)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glEnableClientStateIndexedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4ea82680403664b6edb3df1d092cc9f5</anchor>
      <arglist>(GLenum array, GLuint index)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDisableClientStateIndexedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afe4be580a286b4c6e0944ecb5403709b</anchor>
      <arglist>(GLenum array, GLuint index)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexCoordPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aac291fb7fed8312f8552e10fce8e2d56</anchor>
      <arglist>(GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexEnvfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a19a98004f6fd7e6087ddb7f56b142fa6</anchor>
      <arglist>(GLenum texunit, GLenum target, GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexEnvfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5a9a4071eab6a9d4fd6c2030d7e89d31</anchor>
      <arglist>(GLenum texunit, GLenum target, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexEnviEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5eb13c577b859917a493ea8319417cc5</anchor>
      <arglist>(GLenum texunit, GLenum target, GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexEnvivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6ffe2e4a0414129e66db68779a69e050</anchor>
      <arglist>(GLenum texunit, GLenum target, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexGendEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a77f8e05d67877d22cd6025023bd75016</anchor>
      <arglist>(GLenum texunit, GLenum coord, GLenum pname, GLdouble param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexGendvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9292cf24e6673b6449d87f83230bcf23</anchor>
      <arglist>(GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexGenfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a33f94d2bcb5eef231cef7bbf052a8b5f</anchor>
      <arglist>(GLenum texunit, GLenum coord, GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexGenfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2bd1104976233efefd2d4d704173e4c2</anchor>
      <arglist>(GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexGeniEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac4273df25cea05c68cab3202cbf93140</anchor>
      <arglist>(GLenum texunit, GLenum coord, GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexGenivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a91604f855f010da73ead64faf20714eb</anchor>
      <arglist>(GLenum texunit, GLenum coord, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMultiTexEnvfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aedde937c003fb10a14b462d57bba23e5</anchor>
      <arglist>(GLenum texunit, GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMultiTexEnvivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a929d3fdf000cfa1c766e5a101d823a16</anchor>
      <arglist>(GLenum texunit, GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMultiTexGendvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4519ebd3f0fcc7e1107ad4357f67d8bf</anchor>
      <arglist>(GLenum texunit, GLenum coord, GLenum pname, GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMultiTexGenfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad607bd94dbdee5dbe5e6997d13d386c9</anchor>
      <arglist>(GLenum texunit, GLenum coord, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMultiTexGenivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a624caa5d5432a9af9a9ba6a87c6c7285</anchor>
      <arglist>(GLenum texunit, GLenum coord, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetFloatIndexedvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af054f95a26281cf48129d7c90d8c9439</anchor>
      <arglist>(GLenum target, GLuint index, GLfloat *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetDoubleIndexedvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac911eb2ba000a57adeac0612b80b2ba0</anchor>
      <arglist>(GLenum target, GLuint index, GLdouble *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetPointerIndexedvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acdcf4957a9f2b78b53cfd7822237bfa8</anchor>
      <arglist>(GLenum target, GLuint index, GLvoid **data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedTextureImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a02db39c1748b00003161a3c1043599e2</anchor>
      <arglist>(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedTextureImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1263bd4bdc74d47905a42f684a7f9e73</anchor>
      <arglist>(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedTextureImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac216173d59a455648cc76f762a3417e9</anchor>
      <arglist>(GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedTextureSubImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0f18bd097142e6fffec294b2c33eb604</anchor>
      <arglist>(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedTextureSubImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af39b23e38fbf82fca309b5e14d5aaa88</anchor>
      <arglist>(GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedTextureSubImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afdbc5d52ae535c7fdd3e9f5683e65710</anchor>
      <arglist>(GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetCompressedTextureImageEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad71c169b32d49127082d90c5f304f9f0</anchor>
      <arglist>(GLuint texture, GLenum target, GLint lod, GLvoid *img)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedMultiTexImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a38e3a40c64ba77355e51eb88c29429c4</anchor>
      <arglist>(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedMultiTexImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8982a9a209103540594667e0b7ca298e</anchor>
      <arglist>(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedMultiTexImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7844bb1ba0b25044f1506d248d4972a9</anchor>
      <arglist>(GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedMultiTexSubImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9c801fb7a768d09d4d1dcae02a351691</anchor>
      <arglist>(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedMultiTexSubImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae5c5a2fc3fecfec125ef823f8bb1719a</anchor>
      <arglist>(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glCompressedMultiTexSubImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6af0c5e0e607c2729aa35188d488c716</anchor>
      <arglist>(GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetCompressedMultiTexImageEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a15da094f41b8b2d079dd2119e8323edd</anchor>
      <arglist>(GLenum texunit, GLenum target, GLint lod, GLvoid *img)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedProgramStringEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4128862330ddfd2834b42be0bba3d0b5</anchor>
      <arglist>(GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedProgramLocalParameter4dEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae7a9950506a0b59bf6922f9c482270f5</anchor>
      <arglist>(GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedProgramLocalParameter4dvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af90375a72721d9c44f2e3467bbfb5ba6</anchor>
      <arglist>(GLuint program, GLenum target, GLuint index, const GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedProgramLocalParameter4fEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aea4953161e4776a93a7d7c637a21dac9</anchor>
      <arglist>(GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedProgramLocalParameter4fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9dde439717111d62178f6a5f95b7aa59</anchor>
      <arglist>(GLuint program, GLenum target, GLuint index, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetNamedProgramLocalParameterdvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a635db9dd25691028db04d8eaa8ce93d7</anchor>
      <arglist>(GLuint program, GLenum target, GLuint index, GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetNamedProgramLocalParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1dc74bc3bc5009b9bb01685e5ee7f534</anchor>
      <arglist>(GLuint program, GLenum target, GLuint index, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetNamedProgramivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a689190feca1d19f65f62efb133da2f6d</anchor>
      <arglist>(GLuint program, GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetNamedProgramStringEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a494a92c2ca7ed8be0b00e105c324fb86</anchor>
      <arglist>(GLuint program, GLenum target, GLenum pname, GLvoid *string)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedProgramLocalParameters4fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac03d38ba2b28fd8598ef5a019d4c769c</anchor>
      <arglist>(GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedProgramLocalParameterI4iEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3c23b4ec4da0a2efb9e0a23f0765c278</anchor>
      <arglist>(GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedProgramLocalParameterI4ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adf3209be1f710eab243dfa96d891f20c</anchor>
      <arglist>(GLuint program, GLenum target, GLuint index, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedProgramLocalParametersI4ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3673499f3db7301efb325f3eab7e5b41</anchor>
      <arglist>(GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedProgramLocalParameterI4uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afcf8de2a6f5fa70bd3780c8091c13a3c</anchor>
      <arglist>(GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedProgramLocalParameterI4uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1a9cd6a6f0db4dcc4dbb218fb6a33e16</anchor>
      <arglist>(GLuint program, GLenum target, GLuint index, const GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedProgramLocalParametersI4uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab5cc2490d89be06095695acd522a4111</anchor>
      <arglist>(GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetNamedProgramLocalParameterIivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad9482f37d16f1228cf111a7763a5cd57</anchor>
      <arglist>(GLuint program, GLenum target, GLuint index, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetNamedProgramLocalParameterIuivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aefee85951678c2cb916ceb6840c0ab0e</anchor>
      <arglist>(GLuint program, GLenum target, GLuint index, GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTextureParameterIivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6b18b70a7e9ef28d8fd814cd6d569252</anchor>
      <arglist>(GLuint texture, GLenum target, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTextureParameterIuivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa4ed3869b06017f25f2ac47a72c65d91</anchor>
      <arglist>(GLuint texture, GLenum target, GLenum pname, const GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetTextureParameterIivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af59c916866ca786ff05b534d8b5e9b27</anchor>
      <arglist>(GLuint texture, GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetTextureParameterIuivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af843cda952a38cd7146d5cd330ca2fc2</anchor>
      <arglist>(GLuint texture, GLenum target, GLenum pname, GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexParameterIivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adaa7e77d86e105bed6c08ef49b5552e0</anchor>
      <arglist>(GLenum texunit, GLenum target, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexParameterIuivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab71a76756d36a8cbacc82e5b6ab9cc9d</anchor>
      <arglist>(GLenum texunit, GLenum target, GLenum pname, const GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMultiTexParameterIivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad3e5359629427b47ca7ca3557857113c</anchor>
      <arglist>(GLenum texunit, GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMultiTexParameterIuivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a300c76e067b593452f6f1a4d93eb3555</anchor>
      <arglist>(GLenum texunit, GLenum target, GLenum pname, GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform1fEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abd366408e5b85a74f014afeafa3336be</anchor>
      <arglist>(GLuint program, GLint location, GLfloat v0)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform2fEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acac548d4a1083ee91201290d0d409f79</anchor>
      <arglist>(GLuint program, GLint location, GLfloat v0, GLfloat v1)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform3fEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a486c4599468bd9210276a182a3faace5</anchor>
      <arglist>(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform4fEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a59bbce65afcd4fde8652ed350b872bf4</anchor>
      <arglist>(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform1iEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad11ff00da5ac87dfff3f71a1f3e6f383</anchor>
      <arglist>(GLuint program, GLint location, GLint v0)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform2iEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a89a445b76ebea83e450f08dc341f4aae</anchor>
      <arglist>(GLuint program, GLint location, GLint v0, GLint v1)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform3iEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa2713c3fe9eb0366f215ac99ed0d603a</anchor>
      <arglist>(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform4iEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a329409a5bc9f0279e7c3a30b5a4a9efc</anchor>
      <arglist>(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform1fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a24075af6c06422e0b9d1882837ecaf8c</anchor>
      <arglist>(GLuint program, GLint location, GLsizei count, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform2fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab744a643fc4c4d1c9363a902b5741b81</anchor>
      <arglist>(GLuint program, GLint location, GLsizei count, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform3fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8d0aecdcf3ff50b4c4f8c5906ce59cec</anchor>
      <arglist>(GLuint program, GLint location, GLsizei count, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform4fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a44aa1a8e39d89b470d3afb5bffaf6800</anchor>
      <arglist>(GLuint program, GLint location, GLsizei count, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform1ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac546de5c55818084f08744abc560bd85</anchor>
      <arglist>(GLuint program, GLint location, GLsizei count, const GLint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform2ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aea782dbb0c80f229ff06a74636d63551</anchor>
      <arglist>(GLuint program, GLint location, GLsizei count, const GLint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform3ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0c53d08f23d04aed4ce4ab492b88aeed</anchor>
      <arglist>(GLuint program, GLint location, GLsizei count, const GLint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform4ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5f0742f9bb1f8fba4ed2a4a131357267</anchor>
      <arglist>(GLuint program, GLint location, GLsizei count, const GLint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniformMatrix2fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a41b578515067e8cb5464ee3aa768bfc7</anchor>
      <arglist>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniformMatrix3fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adac4edb1c59cbbb5d18cdfea968ced1d</anchor>
      <arglist>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniformMatrix4fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9f602b6468393b7a8065fb8eca839f68</anchor>
      <arglist>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniformMatrix2x3fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa74a70b001eb20a9913375d61a4c627f</anchor>
      <arglist>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniformMatrix3x2fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaa071f019dd6732a444d3f7c686838ce</anchor>
      <arglist>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniformMatrix2x4fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7c23e3c6926ed2abf0e36e5409ac8283</anchor>
      <arglist>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniformMatrix4x2fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae0a18f0e24ce5906672dcbc2a8f9d48b</anchor>
      <arglist>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniformMatrix3x4fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aebe78e6a8c435b98b55138d2a57d06b7</anchor>
      <arglist>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniformMatrix4x3fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad900b7d2e79206c475bac1969f77706c</anchor>
      <arglist>(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform1uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8457366ef2f825043f6b097f74521f7c</anchor>
      <arglist>(GLuint program, GLint location, GLuint v0)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform2uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a22d1dec472d6c2f8ca9f780faaa7ec4d</anchor>
      <arglist>(GLuint program, GLint location, GLuint v0, GLuint v1)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform3uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9f87eb1530ad05f7cfe2e73219129df3</anchor>
      <arglist>(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform4uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad66b4cf173f7ca408d11a488899482af</anchor>
      <arglist>(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform1uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a863dbfe73451a249245dfc73b4c8c948</anchor>
      <arglist>(GLuint program, GLint location, GLsizei count, const GLuint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform2uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7fe9dfeacc86610823984c0c149c3f85</anchor>
      <arglist>(GLuint program, GLint location, GLsizei count, const GLuint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform3uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7f16744162755d56fb1d8b0a755c79f8</anchor>
      <arglist>(GLuint program, GLint location, GLsizei count, const GLuint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glProgramUniform4uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6270231016687f11eb9ef8824dd7524a</anchor>
      <arglist>(GLuint program, GLint location, GLsizei count, const GLuint *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedBufferDataEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad0c9d48df4142c1d23d771fbe4e66c50</anchor>
      <arglist>(GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedBufferSubDataEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a830d6afeb2973d8e1bca07ab8ba55f86</anchor>
      <arglist>(GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid *__stdcall</type>
      <name>GLee_Lazy_glMapNamedBufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2775d366e7f1b1047eb35b3db6d6c598</anchor>
      <arglist>(GLuint buffer, GLenum access)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glUnmapNamedBufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8e9bbc747f7ae30e285601b7f7268107</anchor>
      <arglist>(GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetNamedBufferParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab7d61e16079bb90c14b8e807f4b05261</anchor>
      <arglist>(GLuint buffer, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetNamedBufferPointervEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeed7a51175cac31ad7a7030d654a7a61</anchor>
      <arglist>(GLuint buffer, GLenum pname, GLvoid **params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetNamedBufferSubDataEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9c499c65acac20fc6776b2fb57c6f4cf</anchor>
      <arglist>(GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTextureBufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4ed3290b3c784c7e5255344bcbded423</anchor>
      <arglist>(GLuint texture, GLenum target, GLenum internalformat, GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexBufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a68b278076c4870ea4470a2e15881affa</anchor>
      <arglist>(GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedRenderbufferStorageEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abecc3b1be5ac0b1c4bdabe227ef96716</anchor>
      <arglist>(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetNamedRenderbufferParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a793b77de35d9c9c79dc51d74151cc831</anchor>
      <arglist>(GLuint renderbuffer, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>GLenum __stdcall</type>
      <name>GLee_Lazy_glCheckNamedFramebufferStatusEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a66531ea5b0a7ff74d1b12cca051c4677</anchor>
      <arglist>(GLuint framebuffer, GLenum target)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedFramebufferTexture1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5b7abf997fa684f2e8970fb62ef00193</anchor>
      <arglist>(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedFramebufferTexture2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acde28e8a50f5db41703b66f235915565</anchor>
      <arglist>(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedFramebufferTexture3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab0fe052c43fba1ca6360387a1dd2faff</anchor>
      <arglist>(GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedFramebufferRenderbufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4495b1ec5e6e35d2ad9123b4e02a3897</anchor>
      <arglist>(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetNamedFramebufferAttachmentParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a94c84c337ab154e1ff3a8c5d82d4de99</anchor>
      <arglist>(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGenerateTextureMipmapEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac9527b35cc551afd97728e881148ca0e</anchor>
      <arglist>(GLuint texture, GLenum target)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGenerateMultiTexMipmapEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad87dc1ecdb14301da4c288ca73fdb1bc</anchor>
      <arglist>(GLenum texunit, GLenum target)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFramebufferDrawBufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abc48e219ecac2517f17eb47e9746f935</anchor>
      <arglist>(GLuint framebuffer, GLenum mode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFramebufferDrawBuffersEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab3c1c6a8048c519f3683652ef480181f</anchor>
      <arglist>(GLuint framebuffer, GLsizei n, const GLenum *bufs)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glFramebufferReadBufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a80513326c9b793e321cca80e037c41b6</anchor>
      <arglist>(GLuint framebuffer, GLenum mode)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetFramebufferParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0e08049b117ab36f8c29a4368ddc1b74</anchor>
      <arglist>(GLuint framebuffer, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedRenderbufferStorageMultisampleEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6e9c7553f99964363a7f5bd29ffb163b</anchor>
      <arglist>(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedRenderbufferStorageMultisampleCoverageEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9aa68962866a875aee50c72d3928f22b</anchor>
      <arglist>(GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedFramebufferTextureEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a70878a901b9816d73a9d94beb30a59ac</anchor>
      <arglist>(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedFramebufferTextureLayerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a73fd4574298377052cb067e30262de81</anchor>
      <arglist>(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glNamedFramebufferTextureFaceEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa1100c31bc52d3fc9d16c2a14486454d</anchor>
      <arglist>(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTextureRenderbufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4da1fdc17847e9aed624732e3e5254c2</anchor>
      <arglist>(GLuint texture, GLenum target, GLuint renderbuffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glMultiTexRenderbufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6522a2c85140612d45178a70cda3ddbe</anchor>
      <arglist>(GLenum texunit, GLenum target, GLuint renderbuffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGetMultisamplefvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1603a6d03b5a0483a1718f694fa96552</anchor>
      <arglist>(GLenum pname, GLuint index, GLfloat *val)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glSampleMaskIndexedNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0a89c99b1ac64b76dba860cc37c54e45</anchor>
      <arglist>(GLuint index, GLbitfield mask)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glTexRenderbufferNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4c90f8c69b0ccf63c4d0d2267736a800</anchor>
      <arglist>(GLenum target, GLuint renderbuffer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBindTransformFeedbackNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0f34165dbd3ee45d15b717162af0aa76</anchor>
      <arglist>(GLenum target, GLuint id)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDeleteTransformFeedbacksNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a66ac9df7b519ecfc8cc0c1abad3c0da7</anchor>
      <arglist>(GLsizei n, const GLuint *ids)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glGenTransformFeedbacksNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9f8e08f220703938c8f5e08087664587</anchor>
      <arglist>(GLsizei n, GLuint *ids)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_glIsTransformFeedbackNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a11f329bed31142db2ab911a4ed97c51c</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glPauseTransformFeedbackNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a98c0c08e38939609380f10213e2427f6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glResumeTransformFeedbackNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4bcfd1437db1ce08a055c93860948183</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glDrawTransformFeedbackNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae41f5ddfb6d9aeae2981f67cdd90fddf</anchor>
      <arglist>(GLenum mode, GLuint id)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glBlendFuncSeparateINGR</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1eefdff9bf4f667134e6c85de621fbfa</anchor>
      <arglist>(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glIglooInterfaceSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad38bf886ad67d0e3bbb620079baa733f</anchor>
      <arglist>(GLenum pname, const GLvoid *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glFragmentLightModeliEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaf50bfe62fca193984939ef64890035a</anchor>
      <arglist>(GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glFragmentLightModelfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae1988379b2064034eb66c0e181db98bc</anchor>
      <arglist>(GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glFragmentLightModelivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a010743452de80b6a510fdc2138f6f819</anchor>
      <arglist>(GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glFragmentLightModelfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1858db1ae865cf23c380387d07010165</anchor>
      <arglist>(GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glFragmentLightiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af25c7a90f17a8a39f1efd25274fed5b1</anchor>
      <arglist>(GLenum light, GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glFragmentLightfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afa99f600ae24bde9b7982d8233e73126</anchor>
      <arglist>(GLenum light, GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glFragmentLightivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a99d680c8bcc4bb2d5152ad7618f4cb8e</anchor>
      <arglist>(GLenum light, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glFragmentLightfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afd513471da13c58871bd09a9b4f8b7b1</anchor>
      <arglist>(GLenum light, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glGetFragmentLightivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad445978b2ab669c78a4cb13268a6c6f8</anchor>
      <arglist>(GLenum light, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glGetFragmentLightfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4446a8d307b650fbf849b57756c267b1</anchor>
      <arglist>(GLenum light, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glFragmentMaterialfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad0ed289efabd0fb8a4ab6a03d3efcddd</anchor>
      <arglist>(GLenum face, GLenum pname, const GLfloat param)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glFragmentMaterialiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3a422e580a65ef3fa9e27463958a190c</anchor>
      <arglist>(GLenum face, GLenum pname, const GLint param)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glFragmentMaterialfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7b004f715d33b162491e2f95ddc9aa8f</anchor>
      <arglist>(GLenum face, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glFragmentMaterialivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af532d9cfb8ca733ae9b33d33eff96130</anchor>
      <arglist>(GLenum face, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glFragmentColorMaterialEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a49b3c053de46bbf52f1f12988bc89c45</anchor>
      <arglist>(GLenum face, GLenum mode)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glGetFragmentMaterialfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3d67a83a537289de36efa99ee577fd27</anchor>
      <arglist>(GLenum face, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glGetFragmentMaterialivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a121f45768d8369a7d9134bc3f002edd2</anchor>
      <arglist>(GLenum face, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glLightEnviEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1c8432e14c89f8093f4ce7c261f56ec9</anchor>
      <arglist>(GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glProgramParameteriEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adb319a1d03ee40647f94fb7d5f4edda5</anchor>
      <arglist>(GLuint program, GLenum pname, GLint value)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glFramebufferTextureEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a842547847f9528d3c1cbfeded21bcd3b</anchor>
      <arglist>(GLenum target, GLenum attachment, GLuint texture, GLint level)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glFramebufferTextureLayerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6d5b87d5f207bbbbcfc9053146f8896c</anchor>
      <arglist>(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glFramebufferTextureFaceEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7466f69be46ed5a98bf73a16cedc03df</anchor>
      <arglist>(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glBeginSceneEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3b277df7f897bef2ce124e5e2e7f1d82</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glEndSceneEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1af780c1e84ad1d84f9b8f8bdc1140a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glProgramLocalParameterI4iNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a10740844f315ff11de46472b6ab4e99a</anchor>
      <arglist>(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glProgramLocalParameterI4ivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af3ba771d8078798b4ce51d21b3eafb72</anchor>
      <arglist>(GLenum target, GLuint index, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glProgramLocalParametersI4ivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a82fc7cd272250db052c933cb1bb7e090</anchor>
      <arglist>(GLenum target, GLuint index, GLsizei count, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glProgramLocalParameterI4uiNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acd48fb6236b03f419e9c8ed7dc435eb3</anchor>
      <arglist>(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glProgramLocalParameterI4uivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acb27489cdebc2eb167103f0adbfc09de</anchor>
      <arglist>(GLenum target, GLuint index, const GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glProgramLocalParametersI4uivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1beafedfe3297671b20e3e797a4e51d6</anchor>
      <arglist>(GLenum target, GLuint index, GLsizei count, const GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glProgramEnvParameterI4iNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3c9ee5add889ee27839a707268ef76c5</anchor>
      <arglist>(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glProgramEnvParameterI4ivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa127a92783900a67357dc7cbf2cb72f9</anchor>
      <arglist>(GLenum target, GLuint index, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glProgramEnvParametersI4ivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9ac82fb3a17bd1dd30095d5ff37b169c</anchor>
      <arglist>(GLenum target, GLuint index, GLsizei count, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glProgramEnvParameterI4uiNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acc37cd7622eabb2bdfe19cf1209ed2ca</anchor>
      <arglist>(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glProgramEnvParameterI4uivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae8e43f366a43c3948b360c101de3a07e</anchor>
      <arglist>(GLenum target, GLuint index, const GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glProgramEnvParametersI4uivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a76ecaa9b4bac3bb3470732a40e4557ab</anchor>
      <arglist>(GLenum target, GLuint index, GLsizei count, const GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glGetProgramLocalParameterIivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0409748b2a0dfa194b4ba013a79e9fdd</anchor>
      <arglist>(GLenum target, GLuint index, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glGetProgramLocalParameterIuivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a93ce39738b9da22292ca2bc61ea0c1c5</anchor>
      <arglist>(GLenum target, GLuint index, GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glGetProgramEnvParameterIivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a212a734013baea90cad3a5a1c60c6379</anchor>
      <arglist>(GLenum target, GLuint index, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glGetProgramEnvParameterIuivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab1032365db5c72615c07755f34968b12</anchor>
      <arglist>(GLenum target, GLuint index, GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI2iEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad33ca9a1ce8a1c4dcc88bbfaf4ef9dfe</anchor>
      <arglist>(GLuint index, GLint x, GLint y)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI3iEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3c34be3fe8a4809405e2ae130c2eb334</anchor>
      <arglist>(GLuint index, GLint x, GLint y, GLint z)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI4iEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a01015cf5aae895781694b355421de3f5</anchor>
      <arglist>(GLuint index, GLint x, GLint y, GLint z, GLint w)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI1uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0bba20d6bef324c0ca6894b7ddca29c7</anchor>
      <arglist>(GLuint index, GLuint x)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI2uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a620fe8e3c5f93d0fd76fa75b85e27c2d</anchor>
      <arglist>(GLuint index, GLuint x, GLuint y)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI3uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acde4806ee35de2982d38a0143541bb4e</anchor>
      <arglist>(GLuint index, GLuint x, GLuint y, GLuint z)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI4uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8b08c996863c5fbdf721888334fffd41</anchor>
      <arglist>(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI1ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5b5c949f03d09856d41634b370687912</anchor>
      <arglist>(GLuint index, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI2ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae674280d349258576e4e419427dff015</anchor>
      <arglist>(GLuint index, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI3ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8e38f7900e58474beb0044765d5c60b2</anchor>
      <arglist>(GLuint index, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI4ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a93462a116e11a722c3a4c90f2c63355d</anchor>
      <arglist>(GLuint index, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI1uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae7218e4c1663a8051bbb6939321aeb01</anchor>
      <arglist>(GLuint index, const GLuint *v)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI2uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac24a9228adfd69d67be5bdf0bb34a8ab</anchor>
      <arglist>(GLuint index, const GLuint *v)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI3uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2bb8e220c50cec831509034a6badcae2</anchor>
      <arglist>(GLuint index, const GLuint *v)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI4uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae6044e75cb85c9701f2066f6cbcf9fb4</anchor>
      <arglist>(GLuint index, const GLuint *v)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI4bvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4b0b70f77bd552c1b00d00fcff613b16</anchor>
      <arglist>(GLuint index, const GLbyte *v)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI4svEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a152ef362a2e562471cdee930848b6f9a</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI4ubvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a14c33848f405d14b4269d9a250aa67d9</anchor>
      <arglist>(GLuint index, const GLubyte *v)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glVertexAttribI4usvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af9e10a652ad29dfd340ad2d9a23ccbb5</anchor>
      <arglist>(GLuint index, const GLushort *v)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glVertexAttribIPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aed8f16d6ce4c9d5959314f4edb43c23c</anchor>
      <arglist>(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glGetVertexAttribIivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afa1d5d09b802d526fb842d72af150aa9</anchor>
      <arglist>(GLuint index, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glGetVertexAttribIuivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a05c753f76224bf895e647f7f347150b1</anchor>
      <arglist>(GLuint index, GLenum pname, GLuint *params)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glDepthRangefOES</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a84ea3e291d1575a24427e738d35c70cf</anchor>
      <arglist>(GLclampf n, GLclampf f)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glFrustumfOES</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a81d88127bde305ce9f51f89035b32aca</anchor>
      <arglist>(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glOrthofOES</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac3c4ec7ea3c37de4cb6a6f1f7a0efce0</anchor>
      <arglist>(GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glClipPlanefOES</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab89f43b4b8ef014fb73dc3b4ed2374bb</anchor>
      <arglist>(GLenum plane, const GLfloat *equation)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glGetClipPlanefOES</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa390599e7ecb5369271c21570ee79610</anchor>
      <arglist>(GLenum plane, GLfloat *equation)</arglist>
    </member>
    <member kind="function">
      <type>GLvoid __stdcall</type>
      <name>GLee_Lazy_glClearDepthfOES</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a92c09a0f53336af4fdde2bfff327c92d</anchor>
      <arglist>(GLclampd depth)</arglist>
    </member>
    <member kind="function">
      <type>HANDLE __stdcall</type>
      <name>GLee_Lazy_wglCreateBufferRegionARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afe4926eb41b7c158d85aa7c5834a84b4</anchor>
      <arglist>(HDC hDC, int iLayerPlane, UINT uType)</arglist>
    </member>
    <member kind="function">
      <type>VOID __stdcall</type>
      <name>GLee_Lazy_wglDeleteBufferRegionARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1e0778b2828a1fdd1d7121af65a1f03f</anchor>
      <arglist>(HANDLE hRegion)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglSaveBufferRegionARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a39e27059153a7cc42506f9b96edc166d</anchor>
      <arglist>(HANDLE hRegion, int x, int y, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglRestoreBufferRegionARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5bdaa8bac9318d889ea69f351e4562ef</anchor>
      <arglist>(HANDLE hRegion, int x, int y, int width, int height, int xSrc, int ySrc)</arglist>
    </member>
    <member kind="function">
      <type>const char *__stdcall</type>
      <name>GLee_Lazy_wglGetExtensionsStringARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a364f52698f3c00b4a0dfbedd1d6cd527</anchor>
      <arglist>(HDC hdc)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglGetPixelFormatAttribivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5a4c7501a3becc6de8e79f8d06f994d7</anchor>
      <arglist>(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, int *piValues)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglGetPixelFormatAttribfvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9f0047ab294b3bd096a97e15c0fd62bb</anchor>
      <arglist>(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, const int *piAttributes, FLOAT *pfValues)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglChoosePixelFormatARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a85d53c2897b27a8c383cf0c5aa971600</anchor>
      <arglist>(HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglMakeContextCurrentARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a88272cbe532f5bf2f1b59aecc139776a</anchor>
      <arglist>(HDC hDrawDC, HDC hReadDC, HGLRC hglrc)</arglist>
    </member>
    <member kind="function">
      <type>HDC __stdcall</type>
      <name>GLee_Lazy_wglGetCurrentReadDCARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a90440b7477628eec5f009bc6dd0a6ba6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>HPBUFFERARB __stdcall</type>
      <name>GLee_Lazy_wglCreatePbufferARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a64e89b36adcccf59426469f952acdea4</anchor>
      <arglist>(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList)</arglist>
    </member>
    <member kind="function">
      <type>HDC __stdcall</type>
      <name>GLee_Lazy_wglGetPbufferDCARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3ced2fc9f76f00c37a7a31b9ef1a1541</anchor>
      <arglist>(HPBUFFERARB hPbuffer)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_wglReleasePbufferDCARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a300e70f976ceca0f618e73e45c69d8c3</anchor>
      <arglist>(HPBUFFERARB hPbuffer, HDC hDC)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglDestroyPbufferARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a606348e9b76499c19d78e1fd8a94562a</anchor>
      <arglist>(HPBUFFERARB hPbuffer)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglQueryPbufferARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af9d0c7009eb1b38a47c06167d475b28c</anchor>
      <arglist>(HPBUFFERARB hPbuffer, int iAttribute, int *piValue)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglBindTexImageARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a83f0a189301539d195656e8a75895711</anchor>
      <arglist>(HPBUFFERARB hPbuffer, int iBuffer)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglReleaseTexImageARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9e833b62566fc554b5a54a0ab07aff2c</anchor>
      <arglist>(HPBUFFERARB hPbuffer, int iBuffer)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglSetPbufferAttribARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a42bd26b6b57379b8bdf4ce6cbc89a03e</anchor>
      <arglist>(HPBUFFERARB hPbuffer, const int *piAttribList)</arglist>
    </member>
    <member kind="function">
      <type>HGLRC __stdcall</type>
      <name>GLee_Lazy_wglCreateContextAttribsARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a778a828e7a0738d4c6147690c7f436fc</anchor>
      <arglist>(HDC hDC, HGLRC hShareContext, const int *attribList)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglMakeContextCurrentEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa7df6e94f5dc12decb37a763ea52aa32</anchor>
      <arglist>(HDC hDrawDC, HDC hReadDC, HGLRC hglrc)</arglist>
    </member>
    <member kind="function">
      <type>HDC __stdcall</type>
      <name>GLee_Lazy_wglGetCurrentReadDCEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6382fbb1d6b0bb0a136233993842c13e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglGetPixelFormatAttribivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a33c6cb482e2f7f38bd076305809d1341</anchor>
      <arglist>(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, int *piValues)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglGetPixelFormatAttribfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a570ba08784f01168f03e080e4ae6d626</anchor>
      <arglist>(HDC hdc, int iPixelFormat, int iLayerPlane, UINT nAttributes, int *piAttributes, FLOAT *pfValues)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglChoosePixelFormatEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a46c6fd9dad64cabf8887d5fac40dc751</anchor>
      <arglist>(HDC hdc, const int *piAttribIList, const FLOAT *pfAttribFList, UINT nMaxFormats, int *piFormats, UINT *nNumFormats)</arglist>
    </member>
    <member kind="function">
      <type>HPBUFFEREXT __stdcall</type>
      <name>GLee_Lazy_wglCreatePbufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a27d79ae56618470162bee128d8c67ff9</anchor>
      <arglist>(HDC hDC, int iPixelFormat, int iWidth, int iHeight, const int *piAttribList)</arglist>
    </member>
    <member kind="function">
      <type>HDC __stdcall</type>
      <name>GLee_Lazy_wglGetPbufferDCEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7b0d252a51d1b4408037ee1f7fe458b7</anchor>
      <arglist>(HPBUFFEREXT hPbuffer)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_wglReleasePbufferDCEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5f82e2fd7f269793d72374069abb7956</anchor>
      <arglist>(HPBUFFEREXT hPbuffer, HDC hDC)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglDestroyPbufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6e78e5116b701b8f4c68b15873b0d06f</anchor>
      <arglist>(HPBUFFEREXT hPbuffer)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglQueryPbufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae39534c3d735d87916a8a1fc0beb35a4</anchor>
      <arglist>(HPBUFFEREXT hPbuffer, int iAttribute, int *piValue)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglGetDigitalVideoParametersI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0152cea3c1efbb99121448d4ec723d9c</anchor>
      <arglist>(HDC hDC, int iAttribute, int *piValue)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglSetDigitalVideoParametersI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afc5ca3135b6dcfa4373f81b66624ca81</anchor>
      <arglist>(HDC hDC, int iAttribute, const int *piValue)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglGetGammaTableParametersI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9eb1a9a1437d06f8f1ab06f8b64e856e</anchor>
      <arglist>(HDC hDC, int iAttribute, int *piValue)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglSetGammaTableParametersI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3e0d01a1efbe2343d0bf198ede34b707</anchor>
      <arglist>(HDC hDC, int iAttribute, const int *piValue)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglGetGammaTableI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae90628dd679872dce5097480614154f9</anchor>
      <arglist>(HDC hDC, int iEntries, USHORT *puRed, USHORT *puGreen, USHORT *puBlue)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglSetGammaTableI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a17a564dbceb24510234e88d5f23bf668</anchor>
      <arglist>(HDC hDC, int iEntries, const USHORT *puRed, const USHORT *puGreen, const USHORT *puBlue)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglEnableGenlockI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a46f64f230ba9f661d853ea974e68362c</anchor>
      <arglist>(HDC hDC)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglDisableGenlockI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac4543346095d9219164ac5fc36bfd174</anchor>
      <arglist>(HDC hDC)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglIsEnabledGenlockI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4a47683294626733f1bc1567bfb4dc1d</anchor>
      <arglist>(HDC hDC, BOOL *pFlag)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglGenlockSourceI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a063d8a3be6ff5ea348c469c90a7933a0</anchor>
      <arglist>(HDC hDC, UINT uSource)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglGetGenlockSourceI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa0a5a88fa56cc9cb6e276cd55cbaf8cc</anchor>
      <arglist>(HDC hDC, UINT *uSource)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglGenlockSourceEdgeI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1397b513b677c1b22e027d4c756a7fbd</anchor>
      <arglist>(HDC hDC, UINT uEdge)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglGetGenlockSourceEdgeI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aab8817753e90c91f167c685e4977cba4</anchor>
      <arglist>(HDC hDC, UINT *uEdge)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglGenlockSampleRateI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a69a66d6e0f647795acb5fb46c0097721</anchor>
      <arglist>(HDC hDC, UINT uRate)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglGetGenlockSampleRateI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8680494fd9929afb848e6a104b2d173f</anchor>
      <arglist>(HDC hDC, UINT *uRate)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglGenlockSourceDelayI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8b3a6a32f16853139bfb934b98d68558</anchor>
      <arglist>(HDC hDC, UINT uDelay)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglGetGenlockSourceDelayI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3fa895a5e4997bde44def063c67784c3</anchor>
      <arglist>(HDC hDC, UINT *uDelay)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglQueryGenlockMaxSourceDelayI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac5ab14888b3eee622bc4dcccb184eba0</anchor>
      <arglist>(HDC hDC, UINT *uMaxLineDelay, UINT *uMaxPixelDelay)</arglist>
    </member>
    <member kind="function">
      <type>LPVOID __stdcall</type>
      <name>GLee_Lazy_wglCreateImageBufferI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a73682de0615da9a72b5c754da46a7364</anchor>
      <arglist>(HDC hDC, DWORD dwSize, UINT uFlags)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglDestroyImageBufferI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afcbf5e5828cb7cf862c28bd6ca7c26ec</anchor>
      <arglist>(HDC hDC, LPVOID pAddress)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglAssociateImageBufferEventsI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a40a7794ededca94a63f76dcd8205ad76</anchor>
      <arglist>(HDC hDC, const HANDLE *pEvent, const LPVOID *pAddress, const DWORD *pSize, UINT count)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglReleaseImageBufferEventsI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6a21947394998378406cd72d5c505a12</anchor>
      <arglist>(HDC hDC, const LPVOID *pAddress, UINT count)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglEnableFrameLockI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8ffd502f0ba94abee6dc62971e524c68</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglDisableFrameLockI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a94e0676982e38934476a903d80ce6613</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglIsEnabledFrameLockI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a87e659aee7cae1dd1b53a3b458a1fb09</anchor>
      <arglist>(BOOL *pFlag)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglQueryFrameLockMasterI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8550e870c20fc6234b3d8c38564f8f7e</anchor>
      <arglist>(BOOL *pFlag)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_wglEnumerateVideoDevicesNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a719d3d185e65d4d3f48730bd9a316927</anchor>
      <arglist>(HDC hDC, HVIDEOOUTPUTDEVICENV *phDeviceList)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglBindVideoDeviceNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa9404f7000158993dbd165dd990f31d0</anchor>
      <arglist>(HDC hDC, unsigned int uVideoSlot, HVIDEOOUTPUTDEVICENV hVideoDevice, const int *piAttribList)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglQueryCurrentContextNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac4c969afc771de8f3982386be19e6823</anchor>
      <arglist>(int iAttribute, int *piValue)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglJoinSwapGroupNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a081011fc04e6b9971530e62be1174ff6</anchor>
      <arglist>(HDC hDC, GLuint group)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglBindSwapBarrierNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8a46460fd6531fd6ccb2d16add3bf174</anchor>
      <arglist>(GLuint group, GLuint barrier)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglQuerySwapGroupNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3127f512185ae9728f3fc2c37b9eb487</anchor>
      <arglist>(HDC hDC, GLuint *group, GLuint *barrier)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglQueryMaxSwapGroupsNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a709d2a734cbe7b19786279f2682ce0b3</anchor>
      <arglist>(HDC hDC, GLuint *maxGroups, GLuint *maxBarriers)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglQueryFrameCountNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a59bdf956a36493adb267ffc4c53b7efc</anchor>
      <arglist>(HDC hDC, GLuint *count)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglResetFrameCountNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a70ebe35fd2aa418b92d250e6cd54bb27</anchor>
      <arglist>(HDC hDC)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglEnumGpusNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a54bf09772c7aeacbc5bf98164050dacb</anchor>
      <arglist>(UINT iGpuIndex, HGPUNV *phGpu)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglEnumGpuDevicesNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6a24b3a6bb8cecf4922c41e4cb903275</anchor>
      <arglist>(HGPUNV hGpu, UINT iDeviceIndex, PGPU_DEVICE lpGpuDevice)</arglist>
    </member>
    <member kind="function">
      <type>HDC __stdcall</type>
      <name>GLee_Lazy_wglCreateAffinityDCNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2fa5681b3a643de4fbc8e158d42878f9</anchor>
      <arglist>(const HGPUNV *phGpuList)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglEnumGpusFromAffinityDCNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7061db6c853245eab36334ce81172ef2</anchor>
      <arglist>(HDC hAffinityDC, UINT iGpuIndex, HGPUNV *hGpu)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglDeleteDCNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae1d20d56de1001878e4ce8d6a9d2be70</anchor>
      <arglist>(HDC hdc)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_wglCreateDisplayColorTableEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a985c2afaab581932b3f52de774551234</anchor>
      <arglist>(GLushort id)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_wglLoadDisplayColorTableEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a407e9aa2dd5e8524ffd7bc8da3cca941</anchor>
      <arglist>(const GLushort *table, GLuint length)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean __stdcall</type>
      <name>GLee_Lazy_wglBindDisplayColorTableEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a15c7f508730fe6fdcf2cb90a67dd380b</anchor>
      <arglist>(GLushort id)</arglist>
    </member>
    <member kind="function">
      <type>VOID __stdcall</type>
      <name>GLee_Lazy_wglDestroyDisplayColorTableEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5847b806926a09702fd19e705f53c837</anchor>
      <arglist>(GLushort id)</arglist>
    </member>
    <member kind="function">
      <type>const char *__stdcall</type>
      <name>GLee_Lazy_wglGetExtensionsStringEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0e1572c4c6130fb9773061ff10b58269</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglSwapIntervalEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1796bad3352cd561129d1321c149ece6</anchor>
      <arglist>(int interval)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_wglGetSwapIntervalEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a793002d4230475f0ed2a52e828d20b8d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void *__stdcall</type>
      <name>GLee_Lazy_wglAllocateMemoryNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4b888d439b3d5dd2c87cd8adcaf1443a</anchor>
      <arglist>(GLsizei size, GLfloat readfreq, GLfloat writefreq, GLfloat priority)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_wglFreeMemoryNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac90637d8d98001a698d6721d7dfed5c5</anchor>
      <arglist>(void *pointer)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglGetSyncValuesOML</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aba25e1b2588935359f19042d2b8ee838</anchor>
      <arglist>(HDC hdc, INT64 *ust, INT64 *msc, INT64 *sbc)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglGetMscRateOML</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1f3c5e63abeab21150ecc5517aaa1a2a</anchor>
      <arglist>(HDC hdc, INT32 *numerator, INT32 *denominator)</arglist>
    </member>
    <member kind="function">
      <type>INT64 __stdcall</type>
      <name>GLee_Lazy_wglSwapBuffersMscOML</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8e648f5a1496158af9ebc6fba2c38ed8</anchor>
      <arglist>(HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder)</arglist>
    </member>
    <member kind="function">
      <type>INT64 __stdcall</type>
      <name>GLee_Lazy_wglSwapLayerBuffersMscOML</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abd1c24674ae1249f3d9074411d3578d8</anchor>
      <arglist>(HDC hdc, int fuPlanes, INT64 target_msc, INT64 divisor, INT64 remainder)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglWaitForMscOML</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa5599bdb4cd7bbf022f6fe44087d6494</anchor>
      <arglist>(HDC hdc, INT64 target_msc, INT64 divisor, INT64 remainder, INT64 *ust, INT64 *msc, INT64 *sbc)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglWaitForSbcOML</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa62a60a93f1c5d559b93217a98fe3cf5</anchor>
      <arglist>(HDC hdc, INT64 target_sbc, INT64 *ust, INT64 *msc, INT64 *sbc)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglGetFrameUsageI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af4458978e45ac7ef5fadfecdbd81b167</anchor>
      <arglist>(float *pUsage)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglBeginFrameTrackingI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a72bc245e3ad42284ef6485d7baf6f461</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglEndFrameTrackingI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adcfff3a9e97455bb41dc837b90ebab2a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglQueryFrameTrackingI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8fe6acbf0cae56df96f3dc294a3ac5f0</anchor>
      <arglist>(DWORD *pFrameCount, DWORD *pMissedFrames, float *pLastMissedUsage)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglGetVideoDeviceNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adca85b7becaf4ee8399dc02b864a88af</anchor>
      <arglist>(HDC hDC, int numDevices, HPVIDEODEV *hVideoDevice)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglReleaseVideoDeviceNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7e8d08b656209d73d07827ce17f871d5</anchor>
      <arglist>(HPVIDEODEV hVideoDevice)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglBindVideoImageNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a28b51a7c33ebf76b08d1ecc33fb816d7</anchor>
      <arglist>(HPVIDEODEV hVideoDevice, HPBUFFERARB hPbuffer, int iVideoBuffer)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglReleaseVideoImageNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad911025c6da808d35e84a277eeef19d1</anchor>
      <arglist>(HPBUFFERARB hPbuffer, int iVideoBuffer)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglSendPbufferToVideoNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad41feab2109a0e1d4abb447dd847457f</anchor>
      <arglist>(HPBUFFERARB hPbuffer, int iBufferType, unsigned long *pulCounterPbuffer, BOOL bBlock)</arglist>
    </member>
    <member kind="function">
      <type>BOOL __stdcall</type>
      <name>GLee_Lazy_wglGetVideoInfoNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aef62cf25612d2ea3a143fa1198dbfdc0</anchor>
      <arglist>(HPVIDEODEV hpVideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo)</arglist>
    </member>
    <member kind="function">
      <type>GLXFBConfig *__stdcall</type>
      <name>GLee_Lazy_glXGetFBConfigs</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a83bccd0f7132e9ef6e4918e362b5033e</anchor>
      <arglist>(Display *dpy, int screen, int *nelements)</arglist>
    </member>
    <member kind="function">
      <type>GLXFBConfig *__stdcall</type>
      <name>GLee_Lazy_glXChooseFBConfig</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5efb5f991d2cbe11af0d1f9252ea97b9</anchor>
      <arglist>(Display *dpy, int screen, const int *attrib_list, int *nelements)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXGetFBConfigAttrib</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa88c4c0298d3aa0fe4bc35e50cec6ea4</anchor>
      <arglist>(Display *dpy, GLXFBConfig config, int attribute, int *value)</arglist>
    </member>
    <member kind="function">
      <type>XVisualInfo *__stdcall</type>
      <name>GLee_Lazy_glXGetVisualFromFBConfig</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7ce38f48052ad73359524ac49d341e9b</anchor>
      <arglist>(Display *dpy, GLXFBConfig config)</arglist>
    </member>
    <member kind="function">
      <type>GLXWindow __stdcall</type>
      <name>GLee_Lazy_glXCreateWindow</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0667fbe1278682af5237748e292ed20b</anchor>
      <arglist>(Display *dpy, GLXFBConfig config, Window win, const int *attrib_list)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glXDestroyWindow</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3d03d1cd70539e3eab97bf47fb439d71</anchor>
      <arglist>(Display *dpy, GLXWindow win)</arglist>
    </member>
    <member kind="function">
      <type>GLXPixmap __stdcall</type>
      <name>GLee_Lazy_glXCreatePixmap</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a269af4de66e66d959939c6e250597e89</anchor>
      <arglist>(Display *dpy, GLXFBConfig config, Pixmap pixmap, const int *attrib_list)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glXDestroyPixmap</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a616b95c7e4169f10d3b3e14ae1368f5b</anchor>
      <arglist>(Display *dpy, GLXPixmap pixmap)</arglist>
    </member>
    <member kind="function">
      <type>GLXPbuffer __stdcall</type>
      <name>GLee_Lazy_glXCreatePbuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaa1da06f6016e811b8461b0358527933</anchor>
      <arglist>(Display *dpy, GLXFBConfig config, const int *attrib_list)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glXDestroyPbuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9a5b8048133a6e7d5c8b3cb23773a871</anchor>
      <arglist>(Display *dpy, GLXPbuffer pbuf)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glXQueryDrawable</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3437cfe2284dbc66ad31e9d97314ae4b</anchor>
      <arglist>(Display *dpy, GLXDrawable draw, int attribute, unsigned int *value)</arglist>
    </member>
    <member kind="function">
      <type>GLXContext __stdcall</type>
      <name>GLee_Lazy_glXCreateNewContext</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4aadfaa414e70907e442ea753bd95ee8</anchor>
      <arglist>(Display *dpy, GLXFBConfig config, int render_type, GLXContext share_list, Bool direct)</arglist>
    </member>
    <member kind="function">
      <type>Bool __stdcall</type>
      <name>GLee_Lazy_glXMakeContextCurrent</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a14d44a794432638cbda4ce74d9d1fbea</anchor>
      <arglist>(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx)</arglist>
    </member>
    <member kind="function">
      <type>GLXDrawable __stdcall</type>
      <name>GLee_Lazy_glXGetCurrentReadDrawable</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abbf886e99e1ae466b7e671d4c5e845c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Display *__stdcall</type>
      <name>GLee_Lazy_glXGetCurrentDisplay</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abd1d6f7da2bfaf02f610716bf7ca9b53</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXQueryContext</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac8dadf76797693b4339940e258188709</anchor>
      <arglist>(Display *dpy, GLXContext ctx, int attribute, int *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glXSelectEvent</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a572f68688ee228a22e2dda1df4006944</anchor>
      <arglist>(Display *dpy, GLXDrawable draw, unsigned long event_mask)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glXGetSelectedEvent</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a56d383efc5aed335f9f891a4a2664552</anchor>
      <arglist>(Display *dpy, GLXDrawable draw, unsigned long *event_mask)</arglist>
    </member>
    <member kind="function">
      <type>__GLXextFuncPtr __stdcall</type>
      <name>GLee_Lazy_glXGetProcAddress</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>addc731802c1a82f8f159df9c2bc83dd6</anchor>
      <arglist>(const GLubyte *procName)</arglist>
    </member>
    <member kind="function">
      <type>GLXContext __stdcall</type>
      <name>GLee_Lazy_glXCreateContextAttribsARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4b6b7ed11dd77b08e3f3c62f8681591a</anchor>
      <arglist>(Display *dpy, GLXFBConfig config, GLXContext share_context, Bool direct, const int *attrib_list)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXSwapIntervalSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a33d79412fda2489d222b14c8399e9b1e</anchor>
      <arglist>(int interval)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXGetVideoSyncSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a792cf1a39274717b9a70f41426165eec</anchor>
      <arglist>(unsigned int *count)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXWaitVideoSyncSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa6018b1e0c176eecab538cf8b4be1308</anchor>
      <arglist>(int divisor, int remainder, unsigned int *count)</arglist>
    </member>
    <member kind="function">
      <type>Bool __stdcall</type>
      <name>GLee_Lazy_glXMakeCurrentReadSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aef4fa8155854d785157e91b8d22215fc</anchor>
      <arglist>(Display *dpy, GLXDrawable draw, GLXDrawable read, GLXContext ctx)</arglist>
    </member>
    <member kind="function">
      <type>GLXDrawable __stdcall</type>
      <name>GLee_Lazy_glXGetCurrentReadDrawableSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad1d6e559deb0f9c4a10cd11cfe54cb3b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Display *__stdcall</type>
      <name>GLee_Lazy_glXGetCurrentDisplayEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5ed6b2220cafd1989581d6440ee413d4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXQueryContextInfoEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0272865c0aa4274d02d35130f601979b</anchor>
      <arglist>(Display *dpy, GLXContext context, int attribute, int *value)</arglist>
    </member>
    <member kind="function">
      <type>GLXContextID __stdcall</type>
      <name>GLee_Lazy_glXGetContextIDEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1d83d2650329b2f599250852747fa524</anchor>
      <arglist>(const GLXContext context)</arglist>
    </member>
    <member kind="function">
      <type>GLXContext __stdcall</type>
      <name>GLee_Lazy_glXImportContextEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa1fd894483c317250168c25b6a51e352</anchor>
      <arglist>(Display *dpy, GLXContextID contextID)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glXFreeContextEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af1bf00a3cfa9377c2d5322cc406f3848</anchor>
      <arglist>(Display *dpy, GLXContext context)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXGetFBConfigAttribSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a51cfda5d61bd5ff92390b34f06f8c6a2</anchor>
      <arglist>(Display *dpy, GLXFBConfigSGIX config, int attribute, int *value)</arglist>
    </member>
    <member kind="function">
      <type>GLXFBConfigSGIX *__stdcall</type>
      <name>GLee_Lazy_glXChooseFBConfigSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7bd4874863e1f9f0dcf00eb01b5e55f5</anchor>
      <arglist>(Display *dpy, int screen, int *attrib_list, int *nelements)</arglist>
    </member>
    <member kind="function">
      <type>GLXPixmap __stdcall</type>
      <name>GLee_Lazy_glXCreateGLXPixmapWithConfigSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a339094420e3dd50768924a499edc0a55</anchor>
      <arglist>(Display *dpy, GLXFBConfigSGIX config, Pixmap pixmap)</arglist>
    </member>
    <member kind="function">
      <type>GLXContext __stdcall</type>
      <name>GLee_Lazy_glXCreateContextWithConfigSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad7e938a63471a492c095b5965946cc94</anchor>
      <arglist>(Display *dpy, GLXFBConfigSGIX config, int render_type, GLXContext share_list, Bool direct)</arglist>
    </member>
    <member kind="function">
      <type>XVisualInfo *__stdcall</type>
      <name>GLee_Lazy_glXGetVisualFromFBConfigSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5bc6d7a49cac87ce78910bae7082e1c4</anchor>
      <arglist>(Display *dpy, GLXFBConfigSGIX config)</arglist>
    </member>
    <member kind="function">
      <type>GLXFBConfigSGIX __stdcall</type>
      <name>GLee_Lazy_glXGetFBConfigFromVisualSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a70680d136d73771fd68d313174dcb996</anchor>
      <arglist>(Display *dpy, XVisualInfo *vis)</arglist>
    </member>
    <member kind="function">
      <type>GLXPbufferSGIX __stdcall</type>
      <name>GLee_Lazy_glXCreateGLXPbufferSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6e104b8fc519bac75139b9bbfd443bf2</anchor>
      <arglist>(Display *dpy, GLXFBConfigSGIX config, unsigned int width, unsigned int height, int *attrib_list)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glXDestroyGLXPbufferSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae2fb8b38b761367194f1fb15944fd6d1</anchor>
      <arglist>(Display *dpy, GLXPbufferSGIX pbuf)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXQueryGLXPbufferSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af9a0e5defccd443fd220aeeb84c48434</anchor>
      <arglist>(Display *dpy, GLXPbufferSGIX pbuf, int attribute, unsigned int *value)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glXSelectEventSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a949075bd36cd62644c2cee378b96433c</anchor>
      <arglist>(Display *dpy, GLXDrawable drawable, unsigned long mask)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glXGetSelectedEventSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae6e34358ad8025cc4bce5c703ab074af</anchor>
      <arglist>(Display *dpy, GLXDrawable drawable, unsigned long *mask)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glXCushionSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a409258a42ec4d9a1bd77e38600945611</anchor>
      <arglist>(Display *dpy, Window window, float cushion)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXBindChannelToWindowSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a74338ac9bcad63a2d41ba554ee2bc958</anchor>
      <arglist>(Display *display, int screen, int channel, Window window)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXChannelRectSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af2845f8985c8c84b853343f8d7ad5cce</anchor>
      <arglist>(Display *display, int screen, int channel, int x, int y, int w, int h)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXQueryChannelRectSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a820352553d0bdd1beafa8e1be5386a15</anchor>
      <arglist>(Display *display, int screen, int channel, int *dx, int *dy, int *dw, int *dh)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXQueryChannelDeltasSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae825b476c1ed7cab45a1f39196b68143</anchor>
      <arglist>(Display *display, int screen, int channel, int *x, int *y, int *w, int *h)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXChannelRectSyncSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a85200ef53f15c319685a0040fb751fc8</anchor>
      <arglist>(Display *display, int screen, int channel, GLenum synctype)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glXJoinSwapGroupSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8e4ed0a28dd2d70628730184bcd47e01</anchor>
      <arglist>(Display *dpy, GLXDrawable drawable, GLXDrawable member)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glXBindSwapBarrierSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3ef87f34f9614959800b8b6473210c45</anchor>
      <arglist>(Display *dpy, GLXDrawable drawable, int barrier)</arglist>
    </member>
    <member kind="function">
      <type>Bool __stdcall</type>
      <name>GLee_Lazy_glXQueryMaxSwapBarriersSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab1bbbbe45208be66e41d8c20b7e25a1e</anchor>
      <arglist>(Display *dpy, int screen, int *max)</arglist>
    </member>
    <member kind="function">
      <type>Status __stdcall</type>
      <name>GLee_Lazy_glXGetTransparentIndexSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abb06beb864c980f6358430aa74188914</anchor>
      <arglist>(Display *dpy, Window overlay, Window underlay, long *pTransparentIndex)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glXCopySubBufferMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a12ec851853fe5241eb11b8d2cc17c572</anchor>
      <arglist>(Display *dpy, GLXDrawable drawable, int x, int y, int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>GLXPixmap __stdcall</type>
      <name>GLee_Lazy_glXCreateGLXPixmapMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af43f271e0e37ddda0caa374a3a6a9a6c</anchor>
      <arglist>(Display *dpy, XVisualInfo *visual, Pixmap pixmap, Colormap cmap)</arglist>
    </member>
    <member kind="function">
      <type>Bool __stdcall</type>
      <name>GLee_Lazy_glXReleaseBuffersMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaa84dfaf72188d0f07d16056d46d25f9</anchor>
      <arglist>(Display *dpy, GLXDrawable drawable)</arglist>
    </member>
    <member kind="function">
      <type>Bool __stdcall</type>
      <name>GLee_Lazy_glXSet3DfxModeMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1001373e03a43c3e3039c5e904035180</anchor>
      <arglist>(int mode)</arglist>
    </member>
    <member kind="function">
      <type>Bool __stdcall</type>
      <name>GLee_Lazy_glXGetSyncValuesOML</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af1dbaa24493aaa0975ab7a35c6e407fb</anchor>
      <arglist>(Display *dpy, GLXDrawable drawable, int64_t *ust, int64_t *msc, int64_t *sbc)</arglist>
    </member>
    <member kind="function">
      <type>Bool __stdcall</type>
      <name>GLee_Lazy_glXGetMscRateOML</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8a6edaad0c5fba8ea20b416aad1d0445</anchor>
      <arglist>(Display *dpy, GLXDrawable drawable, int32_t *numerator, int32_t *denominator)</arglist>
    </member>
    <member kind="function">
      <type>int64_t __stdcall</type>
      <name>GLee_Lazy_glXSwapBuffersMscOML</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0a74e537c72c4c21914c1e21da0db087</anchor>
      <arglist>(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder)</arglist>
    </member>
    <member kind="function">
      <type>Bool __stdcall</type>
      <name>GLee_Lazy_glXWaitForMscOML</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aae4a65acd1fd6e7da05e52719b60b110</anchor>
      <arglist>(Display *dpy, GLXDrawable drawable, int64_t target_msc, int64_t divisor, int64_t remainder, int64_t *ust, int64_t *msc, int64_t *sbc)</arglist>
    </member>
    <member kind="function">
      <type>Bool __stdcall</type>
      <name>GLee_Lazy_glXWaitForSbcOML</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af7e1fd370b1c6577a0100e4f4d52ced2</anchor>
      <arglist>(Display *dpy, GLXDrawable drawable, int64_t target_sbc, int64_t *ust, int64_t *msc, int64_t *sbc)</arglist>
    </member>
    <member kind="function">
      <type>GLXHyperpipeNetworkSGIX *__stdcall</type>
      <name>GLee_Lazy_glXQueryHyperpipeNetworkSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afeecaaae07c3a9e1affe0d72ea07f407</anchor>
      <arglist>(Display *dpy, int *npipes)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXHyperpipeConfigSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a57ced2c450c66e3fc85837b912ec936e</anchor>
      <arglist>(Display *dpy, int networkId, int npipes, GLXHyperpipeConfigSGIX *cfg, int *hpId)</arglist>
    </member>
    <member kind="function">
      <type>GLXHyperpipeConfigSGIX *__stdcall</type>
      <name>GLee_Lazy_glXQueryHyperpipeConfigSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7bdbf4249ef745419b30ea239024a36f</anchor>
      <arglist>(Display *dpy, int hpId, int *npipes)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXDestroyHyperpipeConfigSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a66dffd9f510d96e67f7d582608a061f7</anchor>
      <arglist>(Display *dpy, int hpId)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXBindHyperpipeSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaa092e2ab4cee8b928b8002901e2e280</anchor>
      <arglist>(Display *dpy, int hpId)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXQueryHyperpipeBestAttribSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0860fd9a21ef7d0326f8ea52c73c30e0</anchor>
      <arglist>(Display *dpy, int timeSlice, int attrib, int size, void *attribList, void *returnAttribList)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXHyperpipeAttribSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeb59ba1bb3d34286787feda845364fcb</anchor>
      <arglist>(Display *dpy, int timeSlice, int attrib, int size, void *attribList)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXQueryHyperpipeAttribSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af7a16f5333162a219fc638c8fda23db3</anchor>
      <arglist>(Display *dpy, int timeSlice, int attrib, int size, void *returnAttribList)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int __stdcall</type>
      <name>GLee_Lazy_glXGetAGPOffsetMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af71dfe677b85682accc05b4ff4ffcb6d</anchor>
      <arglist>(const void *pointer)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glXBindTexImageEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab374aba4b466281e0565d854c75e70d0</anchor>
      <arglist>(Display *dpy, GLXDrawable drawable, int buffer, const int *attrib_list)</arglist>
    </member>
    <member kind="function">
      <type>void __stdcall</type>
      <name>GLee_Lazy_glXReleaseTexImageEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adcc55fa52894954830ee72538f29f3d9</anchor>
      <arglist>(Display *dpy, GLXDrawable drawable, int buffer)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXGetVideoDeviceNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8c89aa5a51f639d32f74fafa3d7c7de0</anchor>
      <arglist>(Display *dpy, int screen, int numVideoDevices, GLXVideoDeviceNV *pVideoDevice)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXReleaseVideoDeviceNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1c7b5b6c480ac9d3f925474352e0d605</anchor>
      <arglist>(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXBindVideoImageNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2971410ce8d48e5f0fba3fbcdd0fc05f</anchor>
      <arglist>(Display *dpy, GLXVideoDeviceNV VideoDevice, GLXPbuffer pbuf, int iVideoBuffer)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXReleaseVideoImageNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1615b1740696456243b2d088017d8e00</anchor>
      <arglist>(Display *dpy, GLXPbuffer pbuf)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXSendPbufferToVideoNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9321105697aa512a9eb7ef05a4286746</anchor>
      <arglist>(Display *dpy, GLXPbuffer pbuf, int iBufferType, unsigned long *pulCounterPbuffer, GLboolean bBlock)</arglist>
    </member>
    <member kind="function">
      <type>int __stdcall</type>
      <name>GLee_Lazy_glXGetVideoInfoNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8b6623c0cecc03965da1f2954ce2ac83</anchor>
      <arglist>(Display *dpy, int screen, GLXVideoDeviceNV VideoDevice, unsigned long *pulCounterOutputPbuffer, unsigned long *pulCounterOutputVideo)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_VERSION_1_2</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa557e4125956568a451eaffe64b1f875</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_imaging</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a69a827f211ba45f7bc4d37628bd26fd5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_VERSION_1_3</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a316e248b6d1bd1b0147378ed27ba78af</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_VERSION_1_4</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa1ac0283586f32f8643cfcc5b9b4f0b5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_VERSION_1_5</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad346c4aa2cdbc54068f576529cea749c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_VERSION_2_0</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2b61482e4bf9436bc5e4a2282bf689cb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_VERSION_2_1</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad8aaf7c3c26c6d51591a1c50f8a403eb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_VERSION_3_0</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6cd8a17092b4db89a67fece5d115fd9f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_multitexture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2d413a48eb0d971f6100451e95f31959</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_transpose_matrix</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af74d06323cf5913d39cae6c9ba3983c8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a93a843ada5c8e2385fd71cccd7987de3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_texture_env_add</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a44ba2cf657cf9399a06600e21034c792</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_texture_cube_map</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af08bb3d17260acea507e6d6f3a6cc415</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_texture_compression</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a334038cba0927eba61eb243f8a3c9daf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_texture_border_clamp</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaec4114f79fddbfb1855d4b38cb3751a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_point_parameters</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab2137f58c34517fc4e0aefe3eff94d47</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_vertex_blend</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa4a0309f4e99d7d9cede7b241e6fc415</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_matrix_palette</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab6912254dd35473cc0ca7bce8503b8ab</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_texture_env_combine</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab70affcd799fe1975ad8333eab418ed7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_texture_env_crossbar</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abb4e64cbcac4e3a470baa46c7098b071</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_texture_env_dot3</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa3429357409e1947e23e882eb930609c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_texture_mirrored_repeat</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af99616235b90d358aa06be85c033e7a2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_depth_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a02ca96ae8cd6ed2944eff1703c1d3e15</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_shadow</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae83d30ca4ed201b57ff6fa52d08e07c5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_shadow_ambient</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a74be6298a077f02b955b732683fa6ded</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_window_pos</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a227fbe82a3d83904b915739fc8e8322d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_vertex_program</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a068a36112bc4f8ae35398c7efdb1706d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_fragment_program</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5dbc5ca67414bfbd8fc3b9225500e0db</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_vertex_buffer_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a05aca1fe80a0ae682d70998cf9a2a9c0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_occlusion_query</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac09e162ab89397e0539466e0b79a2ebc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_shader_objects</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8a519c9b814a5cf3bb8bbe09d949469a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_vertex_shader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8802d4be96ea8c72278fe5f6bcdc66af</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_fragment_shader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a859ebc3ce1d8d76a1a2de1cbfa694f5a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_shading_language_100</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0ca81fcc2c5ab49e83add897cf603abb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_texture_non_power_of_two</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac31157fe29a41084c00f5597c0d684f4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_point_sprite</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a20d69cf553e9422b078fccf95950e681</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_fragment_program_shadow</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5d471b8f8bcca3311e75ba094e6faa92</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_draw_buffers</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad9e9676062132e3632e12d7c1ee82310</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_texture_rectangle</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5c06ab608f5cee155360234825b6b037</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_color_buffer_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa3b6dca6d18a4652b57cc61aa0d78739</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_half_float_pixel</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a480d417b003d4dfae6afbb87dba04803</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_texture_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3f3ed2007d5368f049dc61f5f27894b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_pixel_buffer_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a221c65cb7004ac630e640d3230b446dd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_depth_buffer_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af24feccd1c9eafdc13f7e6b7c058d48f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_draw_instanced</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afb94d1106edd6fe84a0404534f59175e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_framebuffer_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a330f63b1f8daf215636f42af71ca4440</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_framebuffer_sRGB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a32443c8e77dedb02f014c5748c21e369</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_geometry_shader4</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7ae6b739656e9c4e461e936dde62612b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_half_float_vertex</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa72fb5563945b1a173c8c4c9ae103290</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_instanced_arrays</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a34e01697417e67e354b8b52064033668</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_map_buffer_range</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8e1ec26e5a90c5bb98aefb13b6010279</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_texture_buffer_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a62d7e2c68da6e1479b47803eb5ea8d9f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_texture_compression_rgtc</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0a9110ad66f811a2983143c8309bd3c1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_texture_rg</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9faf950d5d2cb74e92565f0de512a32e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ARB_vertex_array_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaa2e6e569e5125fdd778ce067d7d2216</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_abgr</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab0df895ec9b2b53e68b2a23c80751d1a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_blend_color</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a525bfbbd7d54fdaa3197775a66675a13</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_polygon_offset</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3cece5e576e1c62f26ce8440bbb272e1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2c01c735ab61239a619e3dae0c1393d8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_texture3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aec5d6dfc2de74f633856bef2e117e06b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIS_texture_filter4</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a249e3ef4adb78be5ea0c702bace3e50a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_subtexture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afd4c6bc6917756f126c026343d7ea6cc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_copy_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6754ada4fc7e9acaaefabbd79222298b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_histogram</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a996db36531c603a41e3f959bba5aa516</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_convolution</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abad21ba6f4078086eae98f4073de3826</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGI_color_matrix</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adc81667b9d440dc04ea98e0903c6cc04</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGI_color_table</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adc2cfe059e2522e91d1b8579bfec76b6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIS_pixel_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a20124f5831c37595f43386ff07ed5573</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_pixel_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a24f7cb533a543d6dacb3303a2032e431</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIS_texture4D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9f610085183d4ad398a764c8c6086be5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGI_texture_color_table</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3c3b69f89484fc04dacfc4c4207a3f19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_cmyka</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0d67dddd45b7c2a597bb667dea63b684</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_texture_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a30dacbf3ba50b33d9280df94ba45cb07</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIS_detail_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5408157d3f6d942dfc4f8ac6e0fd26b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIS_sharpen_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a515d8a265e73ab3789a2a2e4bbef6585</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_packed_pixels</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4a56b52d8fb63112337ed3142d98788a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIS_texture_lod</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a04bc27f8d1e3c97e9a76d94cc8269638</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIS_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1638a898990fd72b76aa5c5fb3f8924e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_rescale_normal</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6a2f3ca47d8ab11594e2a5ddd9a9e232</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_vertex_array</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad9e523bbf87ee65e26738b1dfaafe9ce</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_misc_attribute</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac4b9656ac061498ae50b2643c5b37bba</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIS_generate_mipmap</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6d86e3b5b8ee50bbcc74803baddda127</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_clipmap</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2095847e26ef68fbd6ca37fda72e5122</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_shadow</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae3ba9945b683356764418cfc2958214b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIS_texture_edge_clamp</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa07077567ff17d300015f01325633da6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIS_texture_border_clamp</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5d1280fbd4c48fa6fc4eb22194b85120</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_blend_minmax</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aab1e9eed848456dc009232e81a4e5996</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_blend_subtract</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae3f17a528e76d0dd7ec31996eca3361a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_blend_logic_op</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae24da18175f580cba70502fc0e39f41b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_interlace</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7adcba14b1a598c379e3a6181890b8f1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_pixel_tiles</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3f58a269b2feeb4ebc8858b0795b1457</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIS_texture_select</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abad7eb78df88b9a6bcc0d573658640f0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_sprite</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a76b650a82961df79d2dc431f1645c384</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_texture_multi_buffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a49b499e4e6a4fff964149a68a1675927</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_point_parameters</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adb813bd59e79eb84773faf8d777c0e68</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIS_point_parameters</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae8ea4089053081bd75a0734d6aade899</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_instruments</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a783d968b5582a7aab910e5ec4498da09</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_texture_scale_bias</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6832d029739e2b3bc8796c7885892c1f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_framezoom</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6b3d4fc57a9868a9d0b2037ba737e91d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_tag_sample_buffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a002554e3c642b7a1eafc5480519eeec4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_FfdMaskSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad69b19d36429520ff8d0aca7e6c45718</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_polynomial_ffd</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a67d6e66b391ff533fe4e13b3493ce4de</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_reference_plane</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abaee6d644a7c7b7c26865e5fba7808cb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_flush_raster</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa52649ebfc7792041dbb11c17f7f9b8c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_depth_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3c1340ce84ee684cbba802f0b07b8b83</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIS_fog_function</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5b84a1db0fb2d3bb6f6a10f99ca8d97b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_fog_offset</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab4e4742d129ebca2885f017669b3e66a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_HP_image_transform</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9d4eda091d36d71e804cc059690c6f72</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_HP_convolution_border_modes</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9a184eef9ede9b06ea14be550421df4c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_INGR_palette_buffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a65d06099930063f697a0cf44264efa4b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_texture_add_env</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9fecefbe66e5b1e02c4ca8f77cf03c5b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_color_subtable</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a69fd8c5300c7f6dc9e0ab1201eecac68</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_PGI_vertex_hints</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adca8ac0d13aa3b8bd85de2f30a5aee70</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_PGI_misc_hints</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab6849c7c6b88beb9b839af42b44c5e31</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_paletted_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a038642bbe1cd9d57546e8125a0f32ec8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_clip_volume_hint</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adae502c35b6e8c034b37dd5b99588504</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_list_priority</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a574a4bd12b3f9d0fb493818b293df166</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_ir_instrument1</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3b093f2771fd32a4a7409ac0232633b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_calligraphic_fragment</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a26b0df2a11c4952b304f0629faddc6da</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_texture_lod_bias</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afe58252a9e05f8e7848deeb41a5a9d06</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_shadow_ambient</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a344e19a622e8ead86e8882c2e6ac8b0d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_index_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac71ab8f9be5a4e7a4644d60f57e3788a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_index_material</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a12f46100f1721d23bfc79e9a3bc128bc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_index_func</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a36e81f0b8325796c4b94da8d8169006d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_index_array_formats</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a58b9127c69e0c275d085f6a4f9e621c5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_compiled_vertex_array</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a903995b07b94062eebeb284d1423a35a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_cull_vertex</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a691e5e081866418b60b8a3a538492fb0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_ycrcb</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af7c6b9d10e0c966cbc5bcf32c0f61680</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_fragment_lighting</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaa24e86a7ea41dc8fac7caefc57c5f3e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_IBM_rasterpos_clip</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa3252678fb03cf750bdc3ae5197fdb48</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_HP_texture_lighting</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af64a368656100bc0277fa26982648b34</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_draw_range_elements</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9076753dad08a3d01deb2930e9b986dc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_WIN_phong_shading</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8872561e1b0177c75229fa96e66e8de9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_WIN_specular_fog</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a46a1c168f9953b2d8bd8b1864bf21126</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_light_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9359bebacba51311e0f7cb0a24cbd474</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_blend_alpha_minmax</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3521d5c05089ee85a2f8696a4ed63dbd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_impact_pixel_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa91f094528a80a62eee24b6f2325ecff</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_bgra</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a25fdf119318fb8d26dd25ce424b1ae2c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_async</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a72a2d85003072a8c262c9359055ce56d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_async_pixel</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aac5950b2d5eb970ceb281fd1a515704b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_async_histogram</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ada6981269a63b07024df67a04ee2dddf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_INTEL_texture_scissor</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2da3ad38027ff8b55e78ddcdf8f4dfb7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_INTEL_parallel_arrays</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaad1e827e651be46cd6f86c10d6f88e6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_HP_occlusion_test</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a71004fd500be0b4a0db8a756aed78bec</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_pixel_transform</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a135037675aec6937a8beec4cf0fb12ea</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_pixel_transform_color_table</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adb53bc4e351fcc9679c51679909890a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_shared_texture_palette</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a171f0649fe47d77151200957954767ce</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_separate_specular_color</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a430bb72b950f96db777b662135be367f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_secondary_color</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac4a0f145a74b874cd20e9b6ce58b9ba6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_texture_perturb_normal</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae22d276cc021d3a483c856ed01d2f351</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_multi_draw_arrays</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7b0e81d37ea833c33be02c406f865644</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_fog_coord</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a405f13cd2dbd0c907a0e65f58712f579</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_REND_screen_coordinates</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9724a4609599c97e26acbe8600bd55d3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_coordinate_frame</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af8711a6193b85fc21f822b7b560edfc7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_texture_env_combine</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa6b4c311e005b95e2d783c1287c6f1f2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_APPLE_specular_vector</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae775c886cf204d0e2ad0273dce1a28cf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_APPLE_transform_hint</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae86f6462e7ce23eeca7f9f09baa79894</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_fog_scale</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6492e5e1090355ce06afd695c1dcd03e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SUNX_constant_data</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a61e7a2e845afa7710f6f90d733e7b97d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SUN_global_alpha</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a95658e222ff5edc4ea009c64b5069c22</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SUN_triangle_list</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9231be7a1b7cddb25526a91215059e6a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SUN_vertex</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab29c72450251d385e0292fb1f9986066</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_blend_func_separate</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2d3df2e33759725c7e6f587188b303c5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_INGR_color_clamp</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6da59722d020c22b9110e450bafe9475</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_INGR_interlace_read</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2668719908fcf9511cca6c93b7809860</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_stencil_wrap</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2a5e0f229c8a380e240b907d83f82d4b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_422_pixels</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5edf8d48dfce2b2ea2c58b2c64e45ca5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_texgen_reflection</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a834528d1277074eb824c1e7af5f25245</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_texture_cube_map</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3c5ff709ef2d222085fb59fade27fb36</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SUN_convolution_border_modes</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4ebf1b1374f22e3673d1e9ce9979f063</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_texture_env_add</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab6e7890a512c66c43177bfcc5141093a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_texture_lod_bias</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa3163a626b7cf8e77e98aeb09217bc7a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_texture_filter_anisotropic</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abd2ddabfe0c6d58095fc917ddf34cce2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_vertex_weighting</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a063b867c5ef8945553f6975b99050e69</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_light_max_exponent</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a922722d749fb8870faa1803d7869cf60</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_vertex_array_range</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a68a28ec2e759cae636ce92ceae46a7ec</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_register_combiners</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8ef8962d47abd0bf751919bdcb6b0b62</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_fog_distance</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a00d22f8dd21ce00e11867f007bba68ec</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_texgen_emboss</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a924f542036be7a3481c638eb9cf903ed</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_blend_square</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad805daeeb6d3ba0559a389dfd1b6e894</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_texture_env_combine4</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4ad687cf6a939fb7a1a8176ee7b7f303</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_MESA_resize_buffers</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6c739d1bd00fea191e1fbad058cd1c63</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_MESA_window_pos</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9cbd3bddcde17fd9708395990e8386fe</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_texture_compression_s3tc</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afbd8f952bd9af4cce39dfad8194baa94</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_IBM_cull_vertex</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afbeda371a395b78397e6e9b4ab479fc5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_IBM_multimode_draw_arrays</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aae6d219a61f5814290a45a99cbf54089</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_IBM_vertex_array_lists</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a30197f273270cecd0ff81a04f3ad627f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_subsample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7c33b7f167ac33399055773f3a323563</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_ycrcb_subsample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afbd263d02be1664a247520e8f6ef0df4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_ycrcba</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a52a43c50e9ccf4d15661e2f1ae73b003</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGI_depth_pass_instrument</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a59d3a9667813b24f04432d462aeb2642</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_3DFX_texture_compression_FXT1</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8818e5ece35472721460bcaa7db9cfdd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_3DFX_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac1e63e9fdeac431d7d8a423726468a53</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_3DFX_tbuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9c1219ee06bbf5396eb81344f3d8effd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a296bb18796a71e6d37657fb3357ac5f5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_vertex_preclip</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab96db324f132436bc031cca367597872</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_convolution_accuracy</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a28ce06c81fa844be017a217ca703db88</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_resample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a617235a8d5ae868c64cc899207ab1306</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIS_point_line_texgen</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa1ebd12fe1c4e477f368fa8000def524</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIS_texture_color_mask</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa6ed055c4403017a11dc3bae529511b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_texture_env_dot3</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac903391a63d4b876623f4c19bd8169c7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ATI_texture_mirror_once</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3644718b5d08187c36eaddd1a86bf6ec</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_fence</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af8cc52ee796e832fb229a5545a8bd432</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_IBM_texture_mirrored_repeat</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaef10945142035f0f4311c358d43c717</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_evaluators</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4cb40443d0a0d305a5e816736d088037</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_packed_depth_stencil</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa73327dd124bfaaeda7708f05b06e7a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_register_combiners2</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>add64dd36ec0269f3224ea92f1364867a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_texture_compression_vtc</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8d720d65be3df3237c4dc96a5525dc58</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_texture_rectangle</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a04f1a6c864cf14f7ef570252bbe02d8d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_texture_shader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7b50060759fea7b921846a2fdc9b4b9c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_texture_shader2</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a973f45537f9352fcc10de9df3f0fca93</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_vertex_array_range2</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4e3b04f7dd2594bf98240dcfb7762ec5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_vertex_program</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0cdbb1105ab9bb19e0f64cffa5f75189</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_texture_coordinate_clamp</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab9ce0775376eca8a489c1e64ac50d9be</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_scalebias_hint</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8362e572f2fb37290453f68b96ca8b20</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_OML_interlace</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a19bd51265c124eab0596ab87c465e5e6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_OML_subsample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6b8cf0a9394749814466b4bc389d16b1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_OML_resample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae74d9eb1b3a21c6843a00d0501477aec</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_copy_depth_to_color</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abe15ccbdebe88b64531f1da6781efe39</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ATI_envmap_bumpmap</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab650f51237fe0eda7a160f3270525c74</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ATI_fragment_shader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a93af5b29ae34f176d09283ba9e562315</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ATI_pn_triangles</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a65a5479e7112a3510b84a180f6d41df7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ATI_vertex_array_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8a67261b19cc455e32a0df00f98fb5d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_vertex_shader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ade7431407437cb29387581d117a7d97e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ATI_vertex_streams</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aad4c2b6b71676d88df6328b0f00f4dbc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ATI_element_array</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acf63a4831b39acf7ccb5a583af6d1182</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SUN_mesh_array</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a338f3de4c209994e4b984df8a22a0c75</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SUN_slice_accum</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af9108918fe73a1faa5f4a6aed028392f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_multisample_filter_hint</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac26bf0e39ae0fb8ebd87a9c98127f28c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_depth_clamp</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a478389c26615d7ece8b0750b615bdd0e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_occlusion_query</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a226ceda9636b7045fe4ab8dc3ce54ea2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_point_sprite</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab621357cde88a758437f113afabe6d24</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_texture_shader3</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a464b68f08e774c41a03e007bd3c64a0d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_vertex_program1_1</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6b2082fdc36e220892e9462c03aee070</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_shadow_funcs</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a12d0f63225094a9b63179e65fa344051</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_stencil_two_side</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a46b095be63511e247acf00136332cad7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ATI_text_fragment_shader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6c050760fb1787c14ba6f75478f1319a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_APPLE_client_storage</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a77c2c851433f5126022690a8b19090b8</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_APPLE_element_array</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adb5b54d8c1c2f3fbcbf3cf8f34e51949</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_APPLE_fence</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a503b5206171d85c636b6cd49c02ff818</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_APPLE_vertex_array_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0217ae9620e5311937dc5c2cbb8ac8d1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_APPLE_vertex_array_range</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a90c350c6f8ce5625ae736516970a36ea</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_APPLE_ycbcr_422</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0d8a0c11db404ec6a99461ce0e8e578c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_S3_s3tc</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1de2f91960a0df1f9db7b668717b2cfa</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ATI_draw_buffers</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adf49cce30d61eb3a096fc7b9eaa0fe06</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ATI_pixel_format_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae8385bc07612e49b2b9f3a974624e62f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ATI_texture_env_combine3</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af38752bf66413411bf0f7540ae0d8045</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ATI_texture_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a649ce83259ae25f7daa4cd2e2db454dc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_float_buffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>add6d4f875f61dc60509737966d2b1f00</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_fragment_program</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac5462187caa7809e63b2c5dd5ff475b4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_half_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab3ad84fa920f3cf8236fbcadf8dacde4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_pixel_data_range</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a99233504170c5a61d7e415769b0f3497</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_primitive_restart</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adae46736b80c2c1b0b70c9d6d0313124</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_texture_expand_normal</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a013132552f1ae3ceba2b35a20270744a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_vertex_program2</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acf726efab9067a0fd546aa26118eda25</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ATI_map_object_buffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aebf65804ff4e8dd9afedb8a82a4cb8c9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ATI_separate_stencil</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a128cb83290c0e54ede1fa1cb048486bb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_ATI_vertex_attrib_array_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab7c385689937d1a06777b70bbec1b3b3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_OES_read_format</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac70bc25760c8d37f7113f1eedefadfd9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_depth_bounds_test</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae5f1dc3a6670ef4ad84e253ceefc6484</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_texture_mirror_clamp</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2d6ac456ea9da5972ef5c28f19f466de</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_blend_equation_separate</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5f68f90a2a8c3ae3ce83e21f59f66aca</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_MESA_pack_invert</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1b31255a1b739bf085f5884aa1cf488d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_MESA_ycbcr_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7b57d590687de2ef0df397d093dba65f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_pixel_buffer_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a30c703609c42794746dd3fbdb46e2bb9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_fragment_program_option</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae40e2cc5c04de62df1403dac994883e5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_fragment_program2</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af8a9386f57dd92e8a8857e2b73c7c805</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_vertex_program2_option</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af8219c62b540dd5962aa1ea06266037f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_vertex_program3</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abb42a3504b41e1a7e6517c4a091ee57d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_framebuffer_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adc75436cebf06e250c383dddf00e8a9c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_GREMEDY_string_marker</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a83f19584afd9e5fe9377aeacf8359bce</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_packed_depth_stencil</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aca794ccfbabf870d372d52c390f4acff</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_stencil_clear_tag</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5867c8317afb7ffdfe9bf78f83b2d077</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_texture_sRGB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7a7488a96e8d0f3f8092b7c274a2b74c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_framebuffer_blit</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aacc3d594644fedbb2740fdbf5b1ab0bb</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_framebuffer_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad1863df0d75ea550e1e8c3ae007181a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_MESAX_texture_stack</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7792d8c689febb9d7a4fd84a95609ac5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_timer_query</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a859c63135bdaddaccd6ddcca82a367f0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_gpu_program_parameters</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6d48a730aba7aef14737266609fe1087</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_APPLE_flush_buffer_range</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1f10708588df9e18c84d55edc4775f45</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_gpu_shader4</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad0456b9f9ea9fd21b8c874ce6e228dda</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_draw_instanced</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a550445e9be0e16d88f91dcd4eb2b71e7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_packed_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a395f32fac8d8c950e1801679eb640023</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_texture_array</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a69f10014501fe4767c3a3d0082e5ff09</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_texture_buffer_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a71f10c0ce24113c59d9e844ed244fd0b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_texture_compression_latc</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3d33c1673023f10e8287fb76cf8c7b51</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_texture_compression_rgtc</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2db67a874bbd1cec9436efb026327364</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_texture_shared_exponent</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a44c3ad759fa1daa502610f1c64a7d0d9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_depth_buffer_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae0a6faa69d74b2be6cb5eb316c7527bf</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_framebuffer_multisample_coverage</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5e593c70ba51646eeca196080d29d63a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_framebuffer_sRGB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a11dd19a4b074f3deec1588f776bcdf7f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_geometry_shader4</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa0645458c52298addf452bbd3760f153</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_parameter_buffer_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8fa1d9936eedcd7c53d5315e1674ff0e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_draw_buffers2</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab2b9043cc80d6d970dc7a18257492094</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_transform_feedback</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adb80cf277e59c60f0dda65e3ed705871</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_bindable_uniform</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaa9bf7cc7e2ed6498d54836fe9483cd2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_texture_integer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a145a8c8825aa507b79b6130a01527996</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_GREMEDY_frame_terminator</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abb6d341539ca6d434bf10287886b2cd5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_conditional_render</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa5c7967e649d6b0996c3e791498ce6ef</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_present_video</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a68227e733bf798c6fd40bb69c1205b80</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_transform_feedback</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afc3ab864e35bbe5a89517c15e2f3a7d2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_direct_state_access</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a11bd2b3d5ed6d5a6002524a3591dc576</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_vertex_array_bgra</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a294134b47ee2ade5406de1cb522cdf86</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_texture_swizzle</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4d2268fee42c43ef9b51776258f582a9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_explicit_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af13787e77342d1d7033a106396f6b9bc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_transform_feedback2</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8e562d2512b952bb1830279aac2f158f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_texture_select</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6805a8c92ab9f805ded09fc3fbc8f4bd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_INGR_blend_func_separate</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9fdf6b422886a59699522d393791aad1</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_depth_pass_instrument</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a29798d69ef704112626005f89e820d27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_igloo_interface</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab65cd969f70f1c948e8067f54480ee48</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_fragment_lighting</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a11a18a73b936dd2ba07966133f086759</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_geometry_shader4</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acf7f8f71ea927f27735d51b0beb67881</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_scene_marker</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a734f6be1d9cde4292a12c10c9daf59e2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_texture_compression_dxt1</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a56c8fcc4e24d3bc91e129186f9469f4a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_EXT_texture_env</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5f981a53d00695429f2b4feb14462d12</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_IBM_static_data</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a86d6844261a154920acbc7ca5e07b75b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_NV_gpu_program4</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1bf5d77defc0eb764551c6e4a7968635</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_OES_byte_coordinates</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af1761ca2f4f12c70d0c2729b62c8d1ad</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_OES_compressed_paletted_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2cace4dfe444fc96946508381453c551</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_OES_single_precision</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a02472170702f81988be64293ffa05a91</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_pixel_texture_bits</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a10b92984b31df9717b525ac845fd8b5c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GL_SGIX_texture_range</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a39cf3dfa3e97bd7614b7e5a71bd5ea89</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initGLLoadFunctions</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa329f10e725a9d9a4f08cdb68781366f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_ARB_buffer_region</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a24cb9ad238e50b7d333fb2a338b1ef90</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_ARB_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3e3a061790cdb5b5537956ff0c9c9532</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_ARB_extensions_string</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae8ed5bb73bccd51dd2fa59786188ba27</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_ARB_pixel_format</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7ade052886c7083fd014c6aa1000d09a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_ARB_make_current_read</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af4c2caa5e9ac97c7e996dba7d919e534</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_ARB_pbuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a59b976704c31cfcce347957a72b0786c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_ARB_render_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a104d2a3fe3653912b306ea0e2b331d74</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_ARB_pixel_format_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6b0d6660dcc2fa9133e26060f8bd6ef9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_ARB_create_context</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9e84e9143941571f598496d72db30b82</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_EXT_make_current_read</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa39a00f3f10a1463641f29d01e973968</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_EXT_pixel_format</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a725d01be273f1ad7a8cc3801077fc9cc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_EXT_pbuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aac5bab2c9014bce60f0c8e1ec13ea0c3</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_EXT_depth_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab41a07413b90c91e892c5fdadc260940</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_3DFX_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adca73e7191bf292965133a2d93aec824</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_EXT_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8d48dd08b33bea253f761945871981e4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_I3D_digital_video_control</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa0071b17bccc1f879b03ff81e0125a83</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_I3D_gamma</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9e5b2797e42a4b64a51936bc9d9f54b2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_I3D_genlock</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5b2e8a78a3f5cec6777114d49aa78e84</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_I3D_image_buffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a294e3f404756466bfb9bd27a59529368</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_I3D_swap_frame_lock</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a08b6947adc874b5e7fbf309d0965fca7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_NV_render_depth_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8908a6c922af8f23f6132480812bf5ea</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_NV_render_texture_rectangle</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aebde1982024fd2814444cf3b664fdb40</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_ATI_pixel_format_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af14acc2d07f8c3962279999df7ab3075</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_NV_float_buffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa7bf3e2c692b12c7e86d949c4c87dbdc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_3DL_stereo_control</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa978202caaa10ffa956a0d481ba618c9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_EXT_pixel_format_packed_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1d60e060b94f06c412338ca75840b840</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_EXT_framebuffer_sRGB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aab56458b6dc029b53ead36850f440f4f</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_NV_present_video</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3418ba4965ea03ba873c390241131570</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_NV_swap_group</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af5d47459c94b0d27e63ab752e3c79dc7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_NV_gpu_affinity</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae7f699011af1f66af254110ddebae1ac</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_EXT_display_color_table</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a07a8337d923440e9b1b7b7a31e6384e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_EXT_extensions_string</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7d32114925528ca6c8f795a317a87224</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_EXT_swap_control</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7fb3c6a06f1ab546b695ea93e360df55</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_NV_vertex_array_range</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6ae6da811ca520f01d96d31a5fe49156</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_OML_sync_control</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a214e679dbdcb4fb0b70f020ec2940b1e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_I3D_swap_frame_usage</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afb575d102d9e7e44dff6234a4b2ae0bd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_WGL_NV_video_output</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6a1460629e54dc7de3955f3c083303be</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initWGLLoadFunctions</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abf1ed47a5b84b3d6e4660d77ed64d442</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_VERSION_1_3</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a848c81153383b70ffbeaacb4d6dde15d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_VERSION_1_4</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab8806bb7d3a06397d2f2d712ee00695e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_ARB_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad1d686820f12159519e60c28a202e630</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_ARB_fbconfig_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a73af5ae0e1387391d20a74735d0cc0ae</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_ARB_create_context</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a337d39ed74921e25bb9e02c08a3fe32a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_SGIS_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3fcc2137ed62bbf8749ad571b7e74f47</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_EXT_visual_info</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3769f7deff984b29ac39c21b8c9c6107</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_SGI_swap_control</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a81d62bd443de7d08411dfdc6dc499277</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_SGI_video_sync</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4ad77651f5ed44adb31c420a04223b87</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_SGI_make_current_read</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6c1267f31b82d8db225d4c732a89b28d</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_EXT_visual_rating</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1178c745f9e9db57f9b4cab75eb7c201</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_EXT_import_context</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8b584fe9ff3f596626b4d43257b5cf4c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_SGIX_fbconfig</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3ed0a4896e170a7af0d51ed0498d20c5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_SGIX_pbuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3ee7559030b629ac047287d3e2c8c598</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_SGI_cushion</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aefb81d00ca8175a31a95490d55021f91</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_SGIX_video_resize</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a15035fd95de675345f9e24eb8de312ab</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_SGIX_swap_group</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a803ff836c3923d3c60a08bce71f63db2</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_SGIX_swap_barrier</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af50eb9e90dffdbf9dcbb2a04214ed9fd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_SGIS_blended_overlay</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abbcb668c0e26b0f13380a2a54d4fc864</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_SGIS_shared_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adf6770b589d1ce52465a8fdc04647f19</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_SUN_get_transparent_index</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7373bdb05e1cb57f847a7c93b057e894</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_3DFX_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2df403cee29657b8d582a1ae05fc4c48</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_MESA_copy_sub_buffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afe3ab2e91dbe1a14a09fac0bdc95a8aa</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_MESA_pixmap_colormap</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acd72077958cd23533e3e1ea90db6c5fa</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_MESA_release_buffers</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7ff7a06e8de0af82659571173421382a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_MESA_set_3dfx_mode</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aed4a165e20ebe41ed5817107848f090c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_SGIX_visual_select_group</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a58336da625c99593469446d0eca6f67b</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_OML_swap_method</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3445fb620885fe731bf164cc0e190011</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_OML_sync_control</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0e3ceb9f559d5fc36fb9d9397c74fc0c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_NV_float_buffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a29972a1dc23f570064327f6c2e85c9b0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_SGIX_hyperpipe</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac85587e3af5376b40bd91aa01aa8a0a4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_MESA_agp_offset</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aca5a4730294d852f6ae229a24f9267ca</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_EXT_fbconfig_packed_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a213e1a2bd844b21131959446a112c2e0</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_EXT_framebuffer_sRGB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abc9ec2201eca9cd6f204bdebc4d08b4e</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_EXT_texture_from_pixmap</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae197063d482eb9426d6184df41c3bb93</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_NV_present_video</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adca93339fd9092a2c44379704404fbb4</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_NV_video_out</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a52cdebd50be7652cbcac943a4c110edd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_NV_swap_group</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2a1327508e5fe684079c8b8a65f61882</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_EXT_scene_marker</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a728ec72a988def8977537d50898e0484</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>__GLeeLink_GLX_NV_video_output</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa3f45f78df953124d2d770049d2a65a5</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initGLXLoadFunctions</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af2192b7aad5ad1730bd43aa48fb94ed9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>__GLeeExtList_init</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5867ad8564298109c5618c6adb2644bb</anchor>
      <arglist>(ExtensionList *extList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>__GLeeExtList_clean</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0969665415793e7b0c785ce8083cba39</anchor>
      <arglist>(ExtensionList *extList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>__GLeeExtList_add</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac257a46dd97b26e30c71c38a7685c6c1</anchor>
      <arglist>(ExtensionList *extList, const char *extName)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>__GLeeGetExtStrPlat</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acf727a2852342dd06b34effcca807985</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>__GLeeWriteError</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af067eb536d251a8968faebfb777a9731</anchor>
      <arglist>(const char *errorStr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>__GLeeGetVersionNumber</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad7d43e8760e13e84d31a00ba1347e5df</anchor>
      <arglist>(char *versionStr)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean</type>
      <name>__GLeeGetExtensions</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a91f8a7d5c53a7e2d2edac1775f080ebe</anchor>
      <arglist>(ExtensionList *extList)</arglist>
    </member>
    <member kind="function">
      <type>GLboolean</type>
      <name>__GLeeCheckExtension</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1daf376154a1a1987238f919c6fe2cb0</anchor>
      <arglist>(const char *name, ExtensionList *extensionNames)</arglist>
    </member>
    <member kind="function">
      <type>GLEE_EXTERN GLint</type>
      <name>__GLeeGetExtensionNumber</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3095c4c168e1fb3d3dfe626b45e41848</anchor>
      <arglist>(const char *extensionName, int type)</arglist>
    </member>
    <member kind="function">
      <type>GLEE_EXTERN const char *</type>
      <name>GLeeGetExtStrWGL</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac74e77847f690ffbd25dea59d03cc7bc</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLEE_EXTERN const char *</type>
      <name>GLeeGetExtStrGLX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa7232438dc21efd90b7657c6c5ac14cd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLEE_EXTERN const char *</type>
      <name>GLeeGetExtStrGL</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad660baac67545feba3234c1f91cc15c7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLEE_EXTERN const char *</type>
      <name>GLeeGetErrorString</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3337d2541ae00dd80de3c7092d518529</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>GLEE_EXTERN GLint</type>
      <name>GLeeForceLink</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1df5978f61cb91694fd8958ea97a8b04</anchor>
      <arglist>(const char *extensionName)</arglist>
    </member>
    <member kind="function">
      <type>GLEE_EXTERN GLboolean</type>
      <name>GLeeEnabled</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac68cfe0dfec7380e10e17dc75c11355b</anchor>
      <arglist>(GLboolean *extensionQueryingVariable)</arglist>
    </member>
    <member kind="function">
      <type>GLEE_EXTERN GLboolean</type>
      <name>GLeeInit</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adaed5c84ae92c68837ef5a6ebad0b2e9</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>__GLeeInited</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad1d3eee9d8c50adc08b91631f7bcf8cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_VERSION_1_2</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa5d3cd7313cb72e49f322bc9ff6741a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_imaging</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0af278f874d170f769d82d3de7fafa11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_VERSION_1_3</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4036f299f53048465675b4d00d09d3a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_VERSION_1_4</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5ce99ebb23bdd8de5bb687b583a38b44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_VERSION_1_5</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af05e52f6d5f3e7c2fa780e25e4049948</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_VERSION_2_0</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aecf60abcbca8848590eb9eac26ef5fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_VERSION_2_1</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6512fc6553a027bb5b9434325a5613e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_VERSION_3_0</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9763c0df0368265cfb793f3065d14a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_multitexture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0943c1ae8a10b16921fd2e70f0a6e1a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_transpose_matrix</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9edefbe6a95d0e9d342b2c1cca64a021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a64c358527d09e123ed29d28ca7f6e59f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_texture_env_add</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3d8c796b9d7804f0e2c2d3a7bbcb2ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_texture_cube_map</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aea821a6af6a0d82e5b4f4a0368bcd6ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_texture_compression</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a07e9ea41c464ec13ff5124eac8a28b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_texture_border_clamp</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac061cb987db408e8f33290d534e7b13b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_point_parameters</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1035c5aa78c820171002722bd4bb3c33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_vertex_blend</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8781c8a04d3007f91de39cb6917b637a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_matrix_palette</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7eb193e386d3ad7cf5cc4c07492bf3f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_texture_env_combine</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7d62ff6ab2b3ac3d605595058cfce5ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_texture_env_crossbar</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad7ef5c6cc40abe4dc23fb7c00130d8ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_texture_env_dot3</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad69da64eed9c140caa36fc54af807329</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_texture_mirrored_repeat</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9351c03deb61568dd95c036f6670be32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_depth_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1e4b92f6af94e169ecbd98f2971e7d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_shadow</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad8577044f9bd0c8326dcb88921b2e06a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_shadow_ambient</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a455b3119e0824a90ed3bcb4ff1daf0b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_window_pos</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a61f2be8396a2768978cf88fd312fa55e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_vertex_program</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8eda46ade63741251912aae5495dac2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_fragment_program</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acc3bdb2b655f008c248c0f804dfff50f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_vertex_buffer_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a01bf07ae9bcaa79fd9b0d42f10769119</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_occlusion_query</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa68e8167f8ce0ff5c79174df2dbd5b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_shader_objects</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6a01a6b0f3c99ffa9c052f86a82b5545</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_vertex_shader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a259ba35b183dcbca7554fda642c51c24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_fragment_shader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af35575df077d3d5c1857cd540e5fe50a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_shading_language_100</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a14e68e759dfdffe541f334b1689d8dfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_texture_non_power_of_two</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7f3d1cee91e40bb23b1e0e4402abae96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_point_sprite</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a728a7432c6cdb8bb5e8c6dd23ea3401d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_fragment_program_shadow</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5656062bcbe66897b5aa7e4251995554</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_draw_buffers</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afd94b280451226673cf9083298baa2f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_texture_rectangle</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2907c3531402ca3e5b84249852ea6d26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_color_buffer_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2779976d957b99587a9bb10e80a928e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_half_float_pixel</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2c1a1570cc9d26603e67ddd6a540d35b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_texture_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9180a586ce36c5264ab9280f1a96b191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_pixel_buffer_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab5bc821bbb6bf2bfeb1a0036a86c8724</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_depth_buffer_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9171d0982c9f2ee8d2d8e3dd98f8ef53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_draw_instanced</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a78dcfdec3daf8df6db8d80b3a136168a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_framebuffer_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2e49a2ec4c3d690e1d4c517cb7aaab04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_framebuffer_sRGB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a77b6a51e6ab22d356d2316ec70540c88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_geometry_shader4</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab7ec4d7dd1cdce91132a1132759b179f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_half_float_vertex</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af9ed261d2356cd98291bb9595d1de9f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_instanced_arrays</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4d47b06d21ace668d9f6be5a1075ff2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_map_buffer_range</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af94207def60b0c4dd61e386b6242732e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_texture_buffer_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a54eb2d51e652c646756f70eb1d9108c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_texture_compression_rgtc</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a56d1bba9312fc1a8160e38dfcd99b89d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_texture_rg</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a032f6b274841ef5b22e7f565b08e437d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ARB_vertex_array_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a06adf61c0fff1e24618e58997c87351f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_abgr</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>addfcf9d0efdf75fbc368b64bf1aa1a2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_blend_color</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9404706390fd96d3f1ceaec5432696b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_polygon_offset</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a314f6b20c14eb0eac1d076b9faef5f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3382925797d209b9f1188f3f532c4049</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_texture3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a886c1d54845818587b3e96d6f2c55608</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIS_texture_filter4</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae2377c37ad3c6535e5116002953f3ae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_subtexture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acb0a13cea39189304cbbdbdf6fa802f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_copy_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2baaf62b7fc6a07df50853433703eda7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_histogram</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a86a56575c1973d3cf3d9ebb89cb8221d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_convolution</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa9ab8dd149230c17291dc6a3425feb63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGI_color_matrix</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0fe9f8a1afc722da1cf6617a3dd7ef66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGI_color_table</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a65493cce5efd4ba1aceee177d60b7680</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIS_pixel_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a23929e88811dfe99c510ed43d1f99950</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_pixel_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a198cb1e2628a80eb1a74531edeb76ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIS_texture4D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac590e780840c2286a37ec56a8e683a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGI_texture_color_table</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae1dbb6b4c277bbf43fe11465ce2a8183</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_cmyka</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a21f8a5b8822f48e2222e60cb5f4d938a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_texture_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a88d00b3ae405282c584a46343b0740ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIS_detail_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a49e6001da180ddeed88cfd932d1eb674</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIS_sharpen_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afa174229444198fd88d4f8086023f8f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_packed_pixels</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3bcc105055e079ba3af4cf1da723bac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIS_texture_lod</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a90e0b500b2264349e5af6934d25e808e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIS_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a07c8e2cd6214082bea4ad925480f0898</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_rescale_normal</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2415c77cb93f822ce5833a51df883cb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_vertex_array</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1d6290f25a0c03a5413abdfe49aa8b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_misc_attribute</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af32c4e7e424097c4160ad644e45dd0d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIS_generate_mipmap</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a77aa92351eb8fae8ac12da343dfdd455</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_clipmap</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7d32080e9fada98b9911f9b3a40f8069</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_shadow</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8709e845c0f06f6c66f9bc2578d6f246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIS_texture_edge_clamp</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afa84be543548f4fc321c8266e9caf417</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIS_texture_border_clamp</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a04e4f04752ce02acd80b5893add3da79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_blend_minmax</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a961c49c0a13b3baf86fbcae93356f738</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_blend_subtract</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaab9d1e179b2e122b66168a648cdccff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_blend_logic_op</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0a00c858aa2d95731ff8779f8796a079</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_interlace</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a60d5f32832fbb5790afb2aa588d92b2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_pixel_tiles</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a44e23edcc47eaad47f82a897483613ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIS_texture_select</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af80fcf85d243b1595f8da063b1b097fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_sprite</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adf2b7a0193dafeab45d46317af0eb813</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_texture_multi_buffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7b6300888ee3ab27e6e8964102f09c27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_point_parameters</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae8df2826635fdc8d823e8630b3f1e808</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIS_point_parameters</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a67117dee3b6fb484ef13ba0d9ebfdd0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_instruments</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6dd388e24047e2c414570267ae0260f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_texture_scale_bias</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a727e9759d47541bbb34b30305bf4233e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_framezoom</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7ef028e7b6ba78cbd78e5de5712fbd6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_tag_sample_buffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a127e4cc0ef4d9395da782babc4ad5b90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_FfdMaskSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a382260778b13db8059475fbad58b42df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_polynomial_ffd</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a42b503645f7b4b891cc573936783a85c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_reference_plane</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abcf774f794c533ccb43ec0e563529d47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_flush_raster</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aed0e8ff349d58fbe66aede82d35e59c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_depth_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8781be2ad949f1983775b8422644526a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIS_fog_function</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9442b3d7e16d81a90708ad93611cadb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_fog_offset</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a259ffd9b54e349dec0e42d50800f4f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_HP_image_transform</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7179122e4e74f8b3867e28e3c0a66683</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_HP_convolution_border_modes</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aebf41e7505288aea684c81096d48deea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_INGR_palette_buffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aff2bc48065ad7b6131045742d9594574</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_texture_add_env</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9fb0017d613ddea27fddcfb279ff0c09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_color_subtable</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9be7dcf34c7ad4019ef716de2191f73f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_PGI_vertex_hints</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6b8ddc722f18f376949b05210284ec7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_PGI_misc_hints</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a162d963d105f94cc7d3984ca3ffe85e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_paletted_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2f6c28957daf3941b75056d10ff9370b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_clip_volume_hint</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a610bf819866c947e57b7c2ef8f546a1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_list_priority</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9c8770fad24490c45824533e8e403df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_ir_instrument1</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a598774a444387f82f7da644898619e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_calligraphic_fragment</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acd3158bf57ea59a086ff92d939fe5412</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_texture_lod_bias</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa642a1697583d78640a6d475cc5117ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_shadow_ambient</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1411f47605024c283ccb702e7bda24fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_index_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab2f723cf36b4f380a02bfaf91ac3200a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_index_material</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a334bd4365cdc23e4522688c28bda2e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_index_func</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5121909b774076bf2c31a9c02621aeca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_index_array_formats</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af3b21c85322847954e81389b326a9cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_compiled_vertex_array</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a80d11c8cae65dec3a14979634159e3f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_cull_vertex</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a37fa6ca11138e8033be395d79372cf19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_ycrcb</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afb9c2c4770e62c5f56b458e7924f81aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_fragment_lighting</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a86dd0260771efbe68169a212a9f6efc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_IBM_rasterpos_clip</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a21f3127cea6874d5959f6b893ed0d98b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_HP_texture_lighting</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a16be2b5715d5489ab8b8ad6aee6531db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_draw_range_elements</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abfaa2dc60b8dec321f8f65e026050c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WIN_phong_shading</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4a10ff3709fe1cadcb5cd38ea1ca5e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WIN_specular_fog</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a058f80f150bcc356e4691a480a1dcbd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_light_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3716110d28ac514667eed763875c73ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_blend_alpha_minmax</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a65158afa76a60f3f5fa1dd3a128f3d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_impact_pixel_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a95ccd11399d683e16ad9f33926dce651</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_bgra</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9cb6d6ce5a52b836096463caae2db428</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_async</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8fa87e92b28c1cfd5c631cbe7acd4740</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_async_pixel</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6d594f768e707536cd058d506f357524</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_async_histogram</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a03b3e44b02673645690c181249f12c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_INTEL_texture_scissor</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af6cbd513e1947a80b64a0b21449e5dca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_INTEL_parallel_arrays</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3d160ed3a9d5d22009934c7c6bf66aeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_HP_occlusion_test</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1d85d162fe84e4de1440900052448c43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_pixel_transform</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afabd7d360f51c89dbf340893b001af5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_pixel_transform_color_table</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3876c766ece801e561484f7ac075f417</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_shared_texture_palette</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5b79f72f0b99a26a17601d2f9743bf67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_separate_specular_color</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6dcde87812b92bfa0c7fe69a489fdfdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_secondary_color</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aea0b1c40807ad173cab178997095e3eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_texture_perturb_normal</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a538794a9a9012f001991ae61d6d6bbb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_multi_draw_arrays</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1701d8eaa31dff395cfd55686c659323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_fog_coord</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4536d302b1982aa8a83de8eeb1e14d70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_REND_screen_coordinates</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5512dfd4ffcafe894a1bebeb9205b31d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_coordinate_frame</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5c39fabd8ad1ba13632726411db74fbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_texture_env_combine</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6e751ec538c8139a5d987430c8f1be7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_APPLE_specular_vector</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae3ee9c97bd79557e414781d9f206a70d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_APPLE_transform_hint</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad1c3628ccb19036ac75ffd1d80dca337</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_fog_scale</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3e2fa959e9a9e98bef7b9a4123c38f5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SUNX_constant_data</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>affb17ed280fbac01f02706861bc32a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SUN_global_alpha</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a69ac37946146cce7a8b316e9127142f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SUN_triangle_list</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8111de2419e183f03f285ec228c24b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SUN_vertex</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae07a72ae0840faab293e767850f0450e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_blend_func_separate</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae4e322ce5d006917b62115649e5d8a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_INGR_color_clamp</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a917d432de1b9ac11b5b891602ebba803</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_INGR_interlace_read</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaca35dc2a26c197940cd0c1966c8b56a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_stencil_wrap</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>add232254bac6b0c9dbc6e1fb93bff700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_422_pixels</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a002fcf87c94a39d8f3bb73aeebeeb717</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_texgen_reflection</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae61b4e9d7809357db84fe9e36201f311</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_texture_cube_map</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9092feef9913be7975a2440d254adf84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SUN_convolution_border_modes</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a21a20708fa6f492a554ca23e7121ca04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_texture_env_add</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afe65616eadd90165968ada8be7a3e6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_texture_lod_bias</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aef06e24403855e8385d59bb8f8bfd20c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_texture_filter_anisotropic</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8c855e594cb59f16addb1aeaec420682</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_vertex_weighting</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a97277fcbbcb889b803e21ec8fc12ca11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_light_max_exponent</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a15d24d8d2addeb7b9e1e2d867152f384</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_vertex_array_range</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acb29e04ed2348c1ae84ad1b6403e05b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_register_combiners</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac415e72b10061c06869a8c5aa6af7e27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_fog_distance</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae99381d19b6ee4aaaa381c001ddba7e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_texgen_emboss</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab036e9a002f9e895cbcfce83a0df6533</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_blend_square</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae6e0e543077679d0fc754f7cd61e40ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_texture_env_combine4</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abd6a639b823474d31f1a753d07100494</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_MESA_resize_buffers</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6db437071601f9a9cb70854dc8f6e006</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_MESA_window_pos</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a453f3fddf404cc08e126f15a7d68d44a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_texture_compression_s3tc</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9e5e6d3fac69d9d78f73983f49021399</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_IBM_cull_vertex</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa3dc8f578791507a6155bdbadc888a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_IBM_multimode_draw_arrays</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afa40a2774ce5e7e3bb93eb63765a45ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_IBM_vertex_array_lists</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a72e6ce9babc956f5e61e5a355ca5ecd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_subsample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae42e48a8623180620d4dc8d44cf89af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_ycrcb_subsample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abe4557222b2406afb2695d142b517540</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_ycrcba</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa4f7b91526f394498dd0e333fec2cb8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGI_depth_pass_instrument</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a29cda7f0b31e86835cf459a297f92bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_3DFX_texture_compression_FXT1</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5e987cdb9cfc0f3185272d1181f59257</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_3DFX_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a728021041f2c03e5597a674e18b4fcb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_3DFX_tbuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8e938562d3fd7d13ca18d8ac78ba2bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abc3b58fcb10e605b67ebdd60a0e0d945</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_vertex_preclip</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abbfb9b3bc73b5eff6b4cd3d44ad884ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_convolution_accuracy</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1b984d03c85cb836f1b3164fd0b4fba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_resample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a32bcd53ffc5245e5057cec2f9b3a295d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIS_point_line_texgen</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7e8af9e17bd59ea62275524f5f76933d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIS_texture_color_mask</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaa0e1b6d8920ab8977865502e2cc0526</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_texture_env_dot3</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a98a1f4dbaf9c3bbfb552cb308bf6c131</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ATI_texture_mirror_once</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afd08acfbd3d01b0b728cda614e5e8df5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_fence</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5d0de9ba5f8b29ad6fd4918656ccd18a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_IBM_texture_mirrored_repeat</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad3e5e8f84d32621acb461ad3bd68515a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_evaluators</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a839c5aba0183ba81e101f4bdf740671c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_packed_depth_stencil</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab80594e48398c7d88a416b371d143363</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_register_combiners2</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adc07fd38764510b4b38d7c86152997c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_texture_compression_vtc</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3408a90fd7f6184c9b98f5923c4be197</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_texture_rectangle</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abc69ffb3b6e2790e44528054f8cbf1bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_texture_shader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aee6f6511aa708c95c82d6217cca70918</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_texture_shader2</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5376432a7bfa63e973a64240f4647331</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_vertex_array_range2</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8feac5a005b438c81008925dc67ad754</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_vertex_program</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aead257b3fc2bf0f33ce78dc9feffb942</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_texture_coordinate_clamp</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9771121addb9256e7c264440c439ce46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_scalebias_hint</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4eb50843175310fd685b88fe53a4ad12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_OML_interlace</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa0fe8ef9fcb02277a1b8ed7291957787</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_OML_subsample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aee5f43ca207f64cee42806164dcbaa24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_OML_resample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5a3ac136aaeb89d89170fe776ea4da38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_copy_depth_to_color</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0fa6afba746c4181980534d60553174b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ATI_envmap_bumpmap</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa873c07a6c8b4cdbe74e0cda1975a90a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ATI_fragment_shader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a16cbc965bf4d5386b94ff5737e8ac79f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ATI_pn_triangles</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5ac7cbde6aa61511a596f4bbbb84aa65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ATI_vertex_array_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a710d7cc56ae18916affb32d0a8483ba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_vertex_shader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>addabdb54f5734811858a1833de4092c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ATI_vertex_streams</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acb3e279c1cddece17b50516336e1e594</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ATI_element_array</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7852a69429c0a42c9d8a093ec89ed7d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SUN_mesh_array</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8bd4fee6a63b2a93e0571d202f8b1796</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SUN_slice_accum</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2e2dc7b23b9d36ec167470f368cbd939</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_multisample_filter_hint</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7b272780cf6d2bc173b8947f7728f228</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_depth_clamp</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afac3d25667eea5f47d01eef2f80fbd88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_occlusion_query</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac38be61733cb4c9c659011d5a2168a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_point_sprite</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac6f20bca27f6f724a17d8ddc3c5b31d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_texture_shader3</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae2ad1b865bc2e93706738a8b5eb5639c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_vertex_program1_1</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aecc1edd36589f8da3b450d665979ed34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_shadow_funcs</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aabc4a81770bd6d7c2e95f29e75eeaf11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_stencil_two_side</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa26f32f76456d40ce7cdabb1c9146ffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ATI_text_fragment_shader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af014e71a1c5ca2a07d80961cc7b30e0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_APPLE_client_storage</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adc4da902a17ccca189e1ef29ab65c576</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_APPLE_element_array</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae880de4808a7a5fbf43821ef055a456d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_APPLE_fence</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a794d9c554d50014072f3237c96ba6289</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_APPLE_vertex_array_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae7f9fd290a0434e94ba924081c3cbc57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_APPLE_vertex_array_range</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a04d8a9de872ece88095f69933add8461</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_APPLE_ycbcr_422</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeb8964e9fdeba2503bae759ddbf63f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_S3_s3tc</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afa1ad106d2e02069f0d0c594e04fa198</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ATI_draw_buffers</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0657e2c92a27c6a91d274fd2289a3e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ATI_pixel_format_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a247a2db86f1a0e06bc25e95199a6d976</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ATI_texture_env_combine3</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aea426e03c7b92e13560835a67c352479</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ATI_texture_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab57df664411670757a9bd4a580c5ba6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_float_buffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0cacf6b515f0a07661091ec19200dafa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_fragment_program</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afc7b049ff7485b45d60088834d634f54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_half_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abcc60705abad196937ba68994e3cd1e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_pixel_data_range</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2208aa66df557525b36995d940ae03af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_primitive_restart</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaf3262a6e9c632832814e5e44ce65c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_texture_expand_normal</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1973e99704e77d27d1ac1c805668b707</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_vertex_program2</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1ed122c08f8268fdeea752d43fab3853</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ATI_map_object_buffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa516b3a391ce072a13f507c0deb513d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ATI_separate_stencil</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a78e01c528ff2f300ac12ed4cc9478b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_ATI_vertex_attrib_array_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac2aa89bd64d7f97ab91287e582ad4702</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_OES_read_format</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a580fe005be9e746071110041c282d0de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_depth_bounds_test</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a203f33fce592f57b1406a373da9ba7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_texture_mirror_clamp</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9a13b05bf180db56f44327312f79285f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_blend_equation_separate</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aed01de7844a6cccc1cdcc5dbdbb1637f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_MESA_pack_invert</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1cfd562a1e7142740f78b74df1069f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_MESA_ycbcr_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a99cf2680f194e85333c2d2cb1d5e66fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_pixel_buffer_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7ced6e8ee11f365c72fc210ba8b6e6ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_fragment_program_option</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a21b3610913fadfc26cf40f2f6d7ac15a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_fragment_program2</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a09fd52a7dbbf5aba7ed21ae68c07b3bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_vertex_program2_option</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a86a5eeb468cd00f90b7e80f2e7dc20fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_vertex_program3</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a11a750070a03dfd0813efe6250c2e12e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_framebuffer_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6001d32bb2599bbeaa9f8087f2c14799</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GREMEDY_string_marker</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3e4ad2d077f6fd8e53fe6a532e36bd4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_packed_depth_stencil</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8183bb92ba2510f5ef6e8be764d10ea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_stencil_clear_tag</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a796d103a6bf395667391d3c7518d46d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_texture_sRGB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aace6a59aae77f79a34e1b40377c727de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_framebuffer_blit</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a75fd1587ba7232ac80c90e719af79e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_framebuffer_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a55f1074224d94ce8d44fab34b4e34700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_MESAX_texture_stack</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a346395766ee30efa17a4b2bf4c03a37a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_timer_query</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af94f3df785b7e2ca2501c2b57d71bd34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_gpu_program_parameters</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a375b38def2ae3fd81a4796012cb8a678</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_APPLE_flush_buffer_range</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2fb8416a88cab095425f06dd32a0a3f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_gpu_shader4</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a07171c2825a01337c8b55934d3da5028</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_draw_instanced</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0a6159de629ba2c579deb4bf3fc77eb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_packed_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaf3cb46d5d92de7e1e4dd1230f774219</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_texture_array</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af7ca797fa92f27606cea9dac63b4a44f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_texture_buffer_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a56ff5714234b725d0c751a0e86c1cefb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_texture_compression_latc</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4fda67988c5a604e01f7d36124c9a541</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_texture_compression_rgtc</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae0183e1cac2022c2b66307ccd512bcf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_texture_shared_exponent</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7dd910d8d1a24053f9da1fcc65c2a8a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_depth_buffer_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3065337c63582ecd0006d5df857b0d4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_framebuffer_multisample_coverage</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af32b1ce30bc5c870f9e9e6cab73e9d20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_framebuffer_sRGB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa894d7d67c8d1bdbbffbcaf675f48792</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_geometry_shader4</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaf87015b974d2895f77e1c7f5e5f412b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_parameter_buffer_object</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a46817936a66dfb0af073673459e8f4fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_draw_buffers2</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeebc93b246dd4c0bdf2b677382880bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_transform_feedback</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4bd719b26fbf1e1224f2f73c40343b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_bindable_uniform</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeaf7cef77dc01aead41357f0abb3c46a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_texture_integer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae05168aff33314b4b5761d7dc7878eef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GREMEDY_frame_terminator</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5fc0d5780b1c1cf3520a61316a6c575e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_conditional_render</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aacae44e0838faf8fd4d167858cd8d571</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_present_video</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af7930dc11ed3fc233ef724716f529569</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_transform_feedback</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afc5f70bfb422eba02850b08547d2679f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_direct_state_access</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a088a2c13bc48e182fdd3511d140f3f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_vertex_array_bgra</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac206e1f88351ad927f76c036eda1b26c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_texture_swizzle</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2569540b204f99fe69c191051813687d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_explicit_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaed842204c98ffc246f8e61d00842d37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_transform_feedback2</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a15c6a382d0587f4716feeaaa714add8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_texture_select</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9579f37d232073d6bef1e4f20a5bcb60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_INGR_blend_func_separate</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adc1e878e1616190d52d56572f1c5b5ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_depth_pass_instrument</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2098b89a772ee86adfa2d7b014e4eff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_igloo_interface</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a41ee42168b33c1b030863370c680be17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_fragment_lighting</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2c92e341aa74a5ef934b62ae00d0f0fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_geometry_shader4</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af86516270ef4e5aabbc9aab02f6a6d4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_scene_marker</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a18a16a59f29d0f46d915be646caed983</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_texture_compression_dxt1</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7aea741b9a1c94ddddd4a32543927ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_EXT_texture_env</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0de00a789796a7e4a4ee78977b4aea41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_IBM_static_data</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3aaf920aa655ce0c5c949eb958b65630</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_NV_gpu_program4</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac300598368632d30dc526b38625b5dff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_OES_byte_coordinates</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae047a49bfb8a7b403da729edcab0df17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_OES_compressed_paletted_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8b6181f5ed3837452ad5a4c1f658c6cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_OES_single_precision</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1fff53c18ffa2a9adc996ff0b6b87555</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_pixel_texture_bits</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7730d418f7ade835879a761d6a24ff8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_SGIX_texture_range</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab9d8c6ef787f62799fdc4f5e404bbc74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>__GLeeGLExtensionNames</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa8f9568d33393a587b5dfedb85a7d4b5</anchor>
      <arglist>[322][39]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>__GLeeGLNumExtensions</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af7e82f87613ca14fdd10c75d5263c1d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBLENDCOLORPROC</type>
      <name>GLeeFuncPtr_glBlendColor</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4f05d9578f5363019b26877f8d03207c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBLENDEQUATIONPROC</type>
      <name>GLeeFuncPtr_glBlendEquation</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a30edc5c6f49ce69502c7e6f0aca267fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDRAWRANGEELEMENTSPROC</type>
      <name>GLeeFuncPtr_glDrawRangeElements</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a00deed49932d88e39c144724e2f944d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLORTABLEPROC</type>
      <name>GLeeFuncPtr_glColorTable</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6c869f8bda29ed44894e243fdb0c57cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLORTABLEPARAMETERFVPROC</type>
      <name>GLeeFuncPtr_glColorTableParameterfv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a48a4be43adc850ec4ae349324aff43cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLORTABLEPARAMETERIVPROC</type>
      <name>GLeeFuncPtr_glColorTableParameteriv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a465d797c61e4d5f4b792aee7bc2f3c85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYCOLORTABLEPROC</type>
      <name>GLeeFuncPtr_glCopyColorTable</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a431279dfe513602a4022157ec0f986ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCOLORTABLEPROC</type>
      <name>GLeeFuncPtr_glGetColorTable</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5e0bc898b5f12d29e121c4922ef796e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCOLORTABLEPARAMETERFVPROC</type>
      <name>GLeeFuncPtr_glGetColorTableParameterfv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a260a720eca4c46ceb920c2913476b063</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCOLORTABLEPARAMETERIVPROC</type>
      <name>GLeeFuncPtr_glGetColorTableParameteriv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6d117d302732478dec0733117d40ea0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLORSUBTABLEPROC</type>
      <name>GLeeFuncPtr_glColorSubTable</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aea3ad05287efbbeaf48b6e6f79716a4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYCOLORSUBTABLEPROC</type>
      <name>GLeeFuncPtr_glCopyColorSubTable</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae1008b717a8dbcb8ead2287f9604a9c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCONVOLUTIONFILTER1DPROC</type>
      <name>GLeeFuncPtr_glConvolutionFilter1D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5cd8abbd17b24a1074049a9e3eabcdd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCONVOLUTIONFILTER2DPROC</type>
      <name>GLeeFuncPtr_glConvolutionFilter2D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2acfe9e130cad8c8f6e3aa0df7971a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCONVOLUTIONPARAMETERFPROC</type>
      <name>GLeeFuncPtr_glConvolutionParameterf</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5c47dda263db16a35d974caddaecb79e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCONVOLUTIONPARAMETERFVPROC</type>
      <name>GLeeFuncPtr_glConvolutionParameterfv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9313177e61c8b9224ab48259b9df0e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCONVOLUTIONPARAMETERIPROC</type>
      <name>GLeeFuncPtr_glConvolutionParameteri</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0eb94c0b68176ef798d572aeacdc5f0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCONVOLUTIONPARAMETERIVPROC</type>
      <name>GLeeFuncPtr_glConvolutionParameteriv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abcfb98abf795027f9e2dd90dcb45c79e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYCONVOLUTIONFILTER1DPROC</type>
      <name>GLeeFuncPtr_glCopyConvolutionFilter1D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a500fd187bac336be76ce0a9c5e5c3f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYCONVOLUTIONFILTER2DPROC</type>
      <name>GLeeFuncPtr_glCopyConvolutionFilter2D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae7404e8b0a0591407f611c15fad6857c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCONVOLUTIONFILTERPROC</type>
      <name>GLeeFuncPtr_glGetConvolutionFilter</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0e3d57b5d62d7045ba19cfac3ce59b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCONVOLUTIONPARAMETERFVPROC</type>
      <name>GLeeFuncPtr_glGetConvolutionParameterfv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a54bb592da6046e8c893d283a2560c75b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCONVOLUTIONPARAMETERIVPROC</type>
      <name>GLeeFuncPtr_glGetConvolutionParameteriv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab74e6d4dcec0c566c66a7710011722b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETSEPARABLEFILTERPROC</type>
      <name>GLeeFuncPtr_glGetSeparableFilter</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1ee34a0aa8f559d6070ca9c8adbb9500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSEPARABLEFILTER2DPROC</type>
      <name>GLeeFuncPtr_glSeparableFilter2D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aac52a148eec9c9b5214792b2c9782c64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETHISTOGRAMPROC</type>
      <name>GLeeFuncPtr_glGetHistogram</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3e0693111d3a66dea4d6abd53cc97fa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETHISTOGRAMPARAMETERFVPROC</type>
      <name>GLeeFuncPtr_glGetHistogramParameterfv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5cd754e68aecc1ecc6da1c9601ca2704</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETHISTOGRAMPARAMETERIVPROC</type>
      <name>GLeeFuncPtr_glGetHistogramParameteriv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a773a4a26d600b4a7e42dcaeb02420b10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMINMAXPROC</type>
      <name>GLeeFuncPtr_glGetMinmax</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a73547bc7d9faa77d1659e0ee0e5a2e13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMINMAXPARAMETERFVPROC</type>
      <name>GLeeFuncPtr_glGetMinmaxParameterfv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abf39990e208da35d28a43dc124550abc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMINMAXPARAMETERIVPROC</type>
      <name>GLeeFuncPtr_glGetMinmaxParameteriv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a76e9609b791936e250f41e3bdfb4a55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLHISTOGRAMPROC</type>
      <name>GLeeFuncPtr_glHistogram</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a186be368522d6e0a87cad4fe38189a6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMINMAXPROC</type>
      <name>GLeeFuncPtr_glMinmax</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2b48461ad6721762037604b6bd317321</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLRESETHISTOGRAMPROC</type>
      <name>GLeeFuncPtr_glResetHistogram</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4efa75b5ed250e33b1b1ab4a2ba22190</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLRESETMINMAXPROC</type>
      <name>GLeeFuncPtr_glResetMinmax</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac6053b13ecf5d8f8a614c0ca569ed1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXIMAGE3DPROC</type>
      <name>GLeeFuncPtr_glTexImage3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2c44b260308d15ae296584c223558bff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXSUBIMAGE3DPROC</type>
      <name>GLeeFuncPtr_glTexSubImage3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3304145da080d3fc7c816a2c65163580</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYTEXSUBIMAGE3DPROC</type>
      <name>GLeeFuncPtr_glCopyTexSubImage3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7fb66035e5d1a85b60b8a8871369f16a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLACTIVETEXTUREPROC</type>
      <name>GLeeFuncPtr_glActiveTexture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a07c0adb68ee292ae5943a7e4eb8e26a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCLIENTACTIVETEXTUREPROC</type>
      <name>GLeeFuncPtr_glClientActiveTexture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1ea73232c583fde17df103564518c558</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD1DPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord1d</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af7aad76674cd34a619cfd17af05a1ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD1DVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord1dv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a774306a580a3fc708241e9f86d8b142e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD1FPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord1f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5fbc37e0874d0911d043b371abd9f99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD1FVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord1fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af9b2aad28b9b6b95ee83f35fcc878c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD1IPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord1i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8441ade0e77ee6b75d8413f8b081ee8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD1IVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord1iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a84857cb26348e9f0077fc3f9de1951ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD1SPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord1s</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a77199fd670d384dd237ca59ee6eb40c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD1SVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord1sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a89d632dfb43ef5290049984df5f164e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD2DPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord2d</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3ef9ca78d622c57adc8fd0d31bf853e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD2DVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord2dv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a701c1ed85221aa510ea8e3bd23858de3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD2FPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord2f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab5c1856218fd9cc9aac30fbe39092be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD2FVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord2fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a371df1f77b9bb79f8d649f8fca326edb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD2IPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord2i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7b168ad37652bd7c81d0b094f20c45f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD2IVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord2iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afe5beb2c65a516dd418cb4de84973854</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD2SPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord2s</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9494fd7be9059320985205b8596f8bb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD2SVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord2sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9fd57d4dd934e552d9d408588b9de604</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD3DPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord3d</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a64faf22484fba605d3bfb31324925225</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD3DVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord3dv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaa327ebe0ae25b0446791177ccf91f5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD3FPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord3f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acc46a08ade5753413212c85f048f5dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD3FVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord3fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a607dfde31109d597805b0153dd3b8895</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD3IPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord3i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a45c96daf4bf633f284f86e40682fe104</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD3IVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord3iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2c213d5e56525105a2514cf2bf6d4e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD3SPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord3s</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a187dbdd3d42ba4c955d5f062f7f754f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD3SVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord3sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9a4dee6e7431958d66709ca7ab25ccdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD4DPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord4d</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a34847ab3cc6e8e28f98f58ba5fa91177</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD4DVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord4dv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6855e207edc907daaf735e830d09c220</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD4FPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord4f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a93d8aebfe13353bd084a28ec7ffd9456</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD4FVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord4fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adf09bc9103f76133c8272b8e12115428</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD4IPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord4i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acc3f843b8cb9e7dda75dbbe8267f7fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD4IVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord4iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaa187e3a505a6451cd455850d5ba9510</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD4SPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord4s</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0baccd81f95a9046b6c444e6fefb0954</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD4SVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord4sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6482e0daf4c7a7eedb896afc355f9022</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLLOADTRANSPOSEMATRIXFPROC</type>
      <name>GLeeFuncPtr_glLoadTransposeMatrixf</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1d1726b2dc7cf27fa1f865cc355dd529</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLLOADTRANSPOSEMATRIXDPROC</type>
      <name>GLeeFuncPtr_glLoadTransposeMatrixd</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a05b46461d162fece4c9c3f1ddadccd53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTTRANSPOSEMATRIXFPROC</type>
      <name>GLeeFuncPtr_glMultTransposeMatrixf</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1fcfb0fefbac4db9b69b2aa5c5fd9ed6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTTRANSPOSEMATRIXDPROC</type>
      <name>GLeeFuncPtr_glMultTransposeMatrixd</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab1e27d227f2fbffce30280ad2ecf62a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSAMPLECOVERAGEPROC</type>
      <name>GLeeFuncPtr_glSampleCoverage</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1103bbf9d2867249f3417b0d443aba3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDTEXIMAGE3DPROC</type>
      <name>GLeeFuncPtr_glCompressedTexImage3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adfc1fd7fa814e6b546de9866fdea55ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDTEXIMAGE2DPROC</type>
      <name>GLeeFuncPtr_glCompressedTexImage2D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa93b3dcc4bba89a8ecec0ccd392fb0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDTEXIMAGE1DPROC</type>
      <name>GLeeFuncPtr_glCompressedTexImage1D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae3209d6db9aa2801853a81ef3c149719</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC</type>
      <name>GLeeFuncPtr_glCompressedTexSubImage3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a828c5f9a6ed5e9ff07a1fc47fdf2b23e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC</type>
      <name>GLeeFuncPtr_glCompressedTexSubImage2D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aca9335c50cd1d4b0bf468579a5bd347e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC</type>
      <name>GLeeFuncPtr_glCompressedTexSubImage1D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae0847cb21fae6ef3deb1661477a13ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCOMPRESSEDTEXIMAGEPROC</type>
      <name>GLeeFuncPtr_glGetCompressedTexImage</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aed54a226fe5fce0255db9dde562992ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBLENDFUNCSEPARATEPROC</type>
      <name>GLeeFuncPtr_glBlendFuncSeparate</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a90f550c81855e2b301e514822ca27622</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFOGCOORDFPROC</type>
      <name>GLeeFuncPtr_glFogCoordf</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1d6bc442e5fa40e6c4618b3e00a4153c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFOGCOORDFVPROC</type>
      <name>GLeeFuncPtr_glFogCoordfv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac512bb4ebeeccae8935c66e6de17ccbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFOGCOORDDPROC</type>
      <name>GLeeFuncPtr_glFogCoordd</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2d14675df7c06575d578d8651a2a424f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFOGCOORDDVPROC</type>
      <name>GLeeFuncPtr_glFogCoorddv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aef193ca5f86635a957d42f38b6e91be1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFOGCOORDPOINTERPROC</type>
      <name>GLeeFuncPtr_glFogCoordPointer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a93dea91b7947b1eb472b38b4102f70db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTIDRAWARRAYSPROC</type>
      <name>GLeeFuncPtr_glMultiDrawArrays</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeb6a08e19897de5fcfe911428bfed985</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTIDRAWELEMENTSPROC</type>
      <name>GLeeFuncPtr_glMultiDrawElements</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2d24c4f7fc7b25a5e0c46411144623ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPOINTPARAMETERFPROC</type>
      <name>GLeeFuncPtr_glPointParameterf</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0dd5ea02d795cb22afa330a8e1b46c3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPOINTPARAMETERFVPROC</type>
      <name>GLeeFuncPtr_glPointParameterfv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae3cbf8ed2b6f44f7eb150ba5ba597a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPOINTPARAMETERIPROC</type>
      <name>GLeeFuncPtr_glPointParameteri</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8146dd206cc0646967a9e37d2456b6e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPOINTPARAMETERIVPROC</type>
      <name>GLeeFuncPtr_glPointParameteriv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8753e17fab8e86d86902631c4611b3be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3BPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3b</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7b4503148bb4395e6e3fcaabb09f9ba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3BVPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3bv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab68da48c10c97714600c6a39656e90cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3DPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3d</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a13fb9305b36478233e00999697327be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3DVPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3dv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adba60b70e414f88a2be0a2f8b3df98e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3FPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abb78207e28de7865711ad700aaeda802</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3FVPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9fc9ae82a591a7d8fb0a54c11a948a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3IPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad13e04e3c475427567f54dfce475c23e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3IVPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a44ce4ae5f280df8c66ecc272ee342680</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3SPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3s</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adc9f85771527a6fcb41030003d1f708d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3SVPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1bb3aa7dc75721778e5eb56dafe348f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3UBPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3ub</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad10bcb78d7adff1360b74bdd7994a070</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3UBVPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3ubv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa5a39ee68f0fcfcf473d673ec4dee9fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3UIPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3ui</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae742f120fee1b98dfe14aadff136d8a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3UIVPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3uiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad9faf1048b00d4bfb694e090c5189caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3USPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3us</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9cb99a5c554049d436d61f5d7828ff8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3USVPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3usv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a51d61c4e51827d510f708a651a36c43c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLORPOINTERPROC</type>
      <name>GLeeFuncPtr_glSecondaryColorPointer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abd8d2ef96fa76058d9d9f2ee3eb50d23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2DPROC</type>
      <name>GLeeFuncPtr_glWindowPos2d</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8f1e72d94cf0a3a57fd23272ebc103c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2DVPROC</type>
      <name>GLeeFuncPtr_glWindowPos2dv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a45ec0af428a82c446f9066469fb59ada</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2FPROC</type>
      <name>GLeeFuncPtr_glWindowPos2f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4f3ae27cfb567176545024666cecdb83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2FVPROC</type>
      <name>GLeeFuncPtr_glWindowPos2fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a96528823758899c8a65b9c7d33669169</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2IPROC</type>
      <name>GLeeFuncPtr_glWindowPos2i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acebe0b25279600acc384b3ef99b97c98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2IVPROC</type>
      <name>GLeeFuncPtr_glWindowPos2iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaf7adc0a00e8322b91991c65810d9e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2SPROC</type>
      <name>GLeeFuncPtr_glWindowPos2s</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa804d4c0e384f4e917294d7531adbaf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2SVPROC</type>
      <name>GLeeFuncPtr_glWindowPos2sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a40e2b3e40cdf1ed59f0746b898cbc700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3DPROC</type>
      <name>GLeeFuncPtr_glWindowPos3d</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a784c183592e167e15b403eccb71321bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3DVPROC</type>
      <name>GLeeFuncPtr_glWindowPos3dv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a878d19f64e7428dab9ebd664aeafbc35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3FPROC</type>
      <name>GLeeFuncPtr_glWindowPos3f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3d89e7ba2706e36974a118040d188b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3FVPROC</type>
      <name>GLeeFuncPtr_glWindowPos3fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab7a11a9fb085c371c774e10dec3dc8b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3IPROC</type>
      <name>GLeeFuncPtr_glWindowPos3i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab49ee635fdfaab1d62cf2c0de5f66952</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3IVPROC</type>
      <name>GLeeFuncPtr_glWindowPos3iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afa9ac6c336e2b4a37d116bc23ff3e310</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3SPROC</type>
      <name>GLeeFuncPtr_glWindowPos3s</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad84cd9cc063a0ab2e1c637e78c49970b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3SVPROC</type>
      <name>GLeeFuncPtr_glWindowPos3sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a62ae9020b1ab7be58f0d21b9d01b8294</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENQUERIESPROC</type>
      <name>GLeeFuncPtr_glGenQueries</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acd7e94916720034ee10bfb36efa60a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETEQUERIESPROC</type>
      <name>GLeeFuncPtr_glDeleteQueries</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac0852e2f0655ee149c9af57b3be86080</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISQUERYPROC</type>
      <name>GLeeFuncPtr_glIsQuery</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a83f3a7d66b49ee80d9e623e512db0ad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBEGINQUERYPROC</type>
      <name>GLeeFuncPtr_glBeginQuery</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a16cd24ed0e747ccee30daa269612a0e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLENDQUERYPROC</type>
      <name>GLeeFuncPtr_glEndQuery</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adbfe668485d7f4c36a0ae812dd3ea215</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETQUERYIVPROC</type>
      <name>GLeeFuncPtr_glGetQueryiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a47878cd4ad2ced3ab44a193587ec5113</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETQUERYOBJECTIVPROC</type>
      <name>GLeeFuncPtr_glGetQueryObjectiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abbad02ab26c824cf272dde35fcf9f109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETQUERYOBJECTUIVPROC</type>
      <name>GLeeFuncPtr_glGetQueryObjectuiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9d950286c99b136d444c28f604884e70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDBUFFERPROC</type>
      <name>GLeeFuncPtr_glBindBuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8faf3d4b0b5880363b28549476773632</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETEBUFFERSPROC</type>
      <name>GLeeFuncPtr_glDeleteBuffers</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af0b6c002a6e9d23ae5693afe6fe9878c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENBUFFERSPROC</type>
      <name>GLeeFuncPtr_glGenBuffers</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a73d934cc50a5ec5491ad49e55e37919a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISBUFFERPROC</type>
      <name>GLeeFuncPtr_glIsBuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa9ef64360f53a9d8337824b33f932089</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBUFFERDATAPROC</type>
      <name>GLeeFuncPtr_glBufferData</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a403d4fea027e96bce1088bbf7b80becf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBUFFERSUBDATAPROC</type>
      <name>GLeeFuncPtr_glBufferSubData</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af96f97df3e84cb5821b895946ecc2388</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETBUFFERSUBDATAPROC</type>
      <name>GLeeFuncPtr_glGetBufferSubData</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a66fa158825f53020ebdfb04eb20a7b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMAPBUFFERPROC</type>
      <name>GLeeFuncPtr_glMapBuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a972d9696f95f449c439c280bf39f8b0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNMAPBUFFERPROC</type>
      <name>GLeeFuncPtr_glUnmapBuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae761903a9008b7074fcfadb795cb2606</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETBUFFERPARAMETERIVPROC</type>
      <name>GLeeFuncPtr_glGetBufferParameteriv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a96649784c5680f3ac1873b15310c898c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETBUFFERPOINTERVPROC</type>
      <name>GLeeFuncPtr_glGetBufferPointerv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9835339834efff345f2bcf0dd028074f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBLENDEQUATIONSEPARATEPROC</type>
      <name>GLeeFuncPtr_glBlendEquationSeparate</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa904bcbc3e8418248c029b9a080d63cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDRAWBUFFERSPROC</type>
      <name>GLeeFuncPtr_glDrawBuffers</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa15fe8a1a277fcc1b21c5703a513e0c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSTENCILOPSEPARATEPROC</type>
      <name>GLeeFuncPtr_glStencilOpSeparate</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a99e37ad97bbbb80c6cd1d42724b427a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSTENCILFUNCSEPARATEPROC</type>
      <name>GLeeFuncPtr_glStencilFuncSeparate</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7af71c64d67e29cbca25f8f027100951</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSTENCILMASKSEPARATEPROC</type>
      <name>GLeeFuncPtr_glStencilMaskSeparate</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af24088d55072dbdc18336391e6e5cb8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLATTACHSHADERPROC</type>
      <name>GLeeFuncPtr_glAttachShader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0a00715f09d069be9bcd25b1450977fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDATTRIBLOCATIONPROC</type>
      <name>GLeeFuncPtr_glBindAttribLocation</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a49515abc8a8a65b591bed17458255052</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPILESHADERPROC</type>
      <name>GLeeFuncPtr_glCompileShader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6055807a257040dc8364b0475e3c8688</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCREATEPROGRAMPROC</type>
      <name>GLeeFuncPtr_glCreateProgram</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a099e7dd284e30b22dd8c57c89ece67e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCREATESHADERPROC</type>
      <name>GLeeFuncPtr_glCreateShader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a24f56fe9f976af36f7468d6311604be9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETEPROGRAMPROC</type>
      <name>GLeeFuncPtr_glDeleteProgram</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abde7ccdf3ce121e3c4f890a265fadb52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETESHADERPROC</type>
      <name>GLeeFuncPtr_glDeleteShader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad59cbc0617435257027a92c250a3d5f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDETACHSHADERPROC</type>
      <name>GLeeFuncPtr_glDetachShader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acb36c70b7989e124fef470e866033566</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDISABLEVERTEXATTRIBARRAYPROC</type>
      <name>GLeeFuncPtr_glDisableVertexAttribArray</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4052e93322e49769a2a65dd5394ae127</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLENABLEVERTEXATTRIBARRAYPROC</type>
      <name>GLeeFuncPtr_glEnableVertexAttribArray</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a419ab4a8cd94c9270c028b27dc7e7bd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETACTIVEATTRIBPROC</type>
      <name>GLeeFuncPtr_glGetActiveAttrib</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a60a5e2c9e6c7df26de17a6dfb74951c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETACTIVEUNIFORMPROC</type>
      <name>GLeeFuncPtr_glGetActiveUniform</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac2468d76c101b6cee985e356974e0751</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETATTACHEDSHADERSPROC</type>
      <name>GLeeFuncPtr_glGetAttachedShaders</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4ee32d67454c65139a327122bd3c202c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETATTRIBLOCATIONPROC</type>
      <name>GLeeFuncPtr_glGetAttribLocation</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad6ab6ac8a8b9018796614693a9b57468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETPROGRAMIVPROC</type>
      <name>GLeeFuncPtr_glGetProgramiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a853fc49e7403ff7026ba53d5ed138700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETPROGRAMINFOLOGPROC</type>
      <name>GLeeFuncPtr_glGetProgramInfoLog</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a14ca5178caf47374a17e25a6272e45d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETSHADERIVPROC</type>
      <name>GLeeFuncPtr_glGetShaderiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a17f03ad5f7b5d83dd2087bfe2d7b0e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETSHADERINFOLOGPROC</type>
      <name>GLeeFuncPtr_glGetShaderInfoLog</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a18f2dcfcde681064e24c3d8a2b4472ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETSHADERSOURCEPROC</type>
      <name>GLeeFuncPtr_glGetShaderSource</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa32f82eda7b5d964fa5ea7f4a993651e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETUNIFORMLOCATIONPROC</type>
      <name>GLeeFuncPtr_glGetUniformLocation</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9878ea78af30eec259392b1f5e1dfeb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETUNIFORMFVPROC</type>
      <name>GLeeFuncPtr_glGetUniformfv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9d0f2e3681cf44120912de296bc5d1bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETUNIFORMIVPROC</type>
      <name>GLeeFuncPtr_glGetUniformiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3134ca11260a185046c8c7a59a83531a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVERTEXATTRIBDVPROC</type>
      <name>GLeeFuncPtr_glGetVertexAttribdv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af1493f2f8aaaa496cd4e7a94c838b076</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVERTEXATTRIBFVPROC</type>
      <name>GLeeFuncPtr_glGetVertexAttribfv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a15f49c415c984cc91ec40479ca1957c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVERTEXATTRIBIVPROC</type>
      <name>GLeeFuncPtr_glGetVertexAttribiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4310e0397cf2c39d35cfa17908bbcddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVERTEXATTRIBPOINTERVPROC</type>
      <name>GLeeFuncPtr_glGetVertexAttribPointerv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a229ff4e01f3e0c868f749ae8a2351a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISPROGRAMPROC</type>
      <name>GLeeFuncPtr_glIsProgram</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a490e8f6a26201f4e962bae9946141eea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISSHADERPROC</type>
      <name>GLeeFuncPtr_glIsShader</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8cee7bdfb7fe437acde51d357fbb83b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLLINKPROGRAMPROC</type>
      <name>GLeeFuncPtr_glLinkProgram</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af0d2d305cbf57f7f12ce5f77c97f3538</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSHADERSOURCEPROC</type>
      <name>GLeeFuncPtr_glShaderSource</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a288ba32ef0757a1e9b6318ba1b8f6482</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUSEPROGRAMPROC</type>
      <name>GLeeFuncPtr_glUseProgram</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab44c38cc57efb2b1538ed1bb67da7282</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM1FPROC</type>
      <name>GLeeFuncPtr_glUniform1f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0a6e031d667bf17c7c00d194167d69dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM2FPROC</type>
      <name>GLeeFuncPtr_glUniform2f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3fc874e104c547d39afd2a6fec834726</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM3FPROC</type>
      <name>GLeeFuncPtr_glUniform3f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a03debbbf02225c6edea3157ff282ce88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM4FPROC</type>
      <name>GLeeFuncPtr_glUniform4f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8ff02a72f070e2e84097c4d07ad5d66b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM1IPROC</type>
      <name>GLeeFuncPtr_glUniform1i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9292b2abb0661bfbfa73c8329a3c1915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM2IPROC</type>
      <name>GLeeFuncPtr_glUniform2i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a35e3aa97401bdbe9674ba1c894df4e07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM3IPROC</type>
      <name>GLeeFuncPtr_glUniform3i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af717cc3629d77497eb2e1463c35e60a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM4IPROC</type>
      <name>GLeeFuncPtr_glUniform4i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a39413f9302a13a0926319c2b314227c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM1FVPROC</type>
      <name>GLeeFuncPtr_glUniform1fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af5742f6e22557dfdc1c9027a4fa5083c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM2FVPROC</type>
      <name>GLeeFuncPtr_glUniform2fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1e93208c282e96ea65487581cdf7d7e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM3FVPROC</type>
      <name>GLeeFuncPtr_glUniform3fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aecca4cf13cfa243fcda2923dd6d15af5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM4FVPROC</type>
      <name>GLeeFuncPtr_glUniform4fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa6819c52cda5f4b689e4ff05e8782823</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM1IVPROC</type>
      <name>GLeeFuncPtr_glUniform1iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aed7686395b93296c7a82680b198956c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM2IVPROC</type>
      <name>GLeeFuncPtr_glUniform2iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa83a936a4e6ba5d9cfba3b1737f98663</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM3IVPROC</type>
      <name>GLeeFuncPtr_glUniform3iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ada4a241cb63353268dd114183fb2f291</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM4IVPROC</type>
      <name>GLeeFuncPtr_glUniform4iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2ad94695ebd51716e1ad7baa33629b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORMMATRIX2FVPROC</type>
      <name>GLeeFuncPtr_glUniformMatrix2fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a108f76e194490ef1c24c14a8c417c8a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORMMATRIX3FVPROC</type>
      <name>GLeeFuncPtr_glUniformMatrix3fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8de96178f82a7da68cd82bfbfc4a2891</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORMMATRIX4FVPROC</type>
      <name>GLeeFuncPtr_glUniformMatrix4fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a721e1f93700f3e8cea5c3a5f8254fc63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVALIDATEPROGRAMPROC</type>
      <name>GLeeFuncPtr_glValidateProgram</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a527d9f39fe644798fd80e0dcb6858204</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB1DPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib1d</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a20b15d2e5bb5498e97472d190f50a75a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB1DVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib1dv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a076677610398bef059c641e3d1f6bfe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB1FPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib1f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeada4d806ed638a13fff08194f445e13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB1FVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib1fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1f0a409d27c275b4471c9d3c9495dfb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB1SPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib1s</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a95bd152de9e13c68feec0731f9c50bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB1SVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib1sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3292b10fdafc68c1a1df79238a6e6a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB2DPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib2d</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7aa257b1e9a48c5dda871fa1fba27e20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB2DVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib2dv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3d0668285dc970e2531945106e00d6b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB2FPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib2f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a948b7183d2daf2fd4aee25ac6444ab2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB2FVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib2fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9cf4e44bdf64b86cad28d30b7f5fc657</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB2SPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib2s</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a67a08bf08d2d3f0a8445fd0813572ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB2SVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib2sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a93aa5324e86e0624cff5b0a5eed5af1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB3DPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib3d</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6e7982732cae2481b2bb0a76baf92df3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB3DVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib3dv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7e35679fa4fb42e911da9ed54e946bb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB3FPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib3f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac3d39426066f31806eb02a8792f404ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB3FVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib3fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af065810071f3b03a1f7a4c98acb6c801</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB3SPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib3s</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a06067f08c447cb497ef06282ba4cecdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB3SVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib3sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a08a8a5639bbf383079d56406c6e957bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4NBVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4Nbv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7b9c34ed43ab5a75a46f8ae38520203d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4NIVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4Niv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8d2ff7dfe86c9b44f580e337c5033aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4NSVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4Nsv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8f2f63bd11ca5d0ce9f2e52ee4b274f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4NUBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4Nub</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0e8ddd2327d44201729f0dd50b136c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4NUBVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4Nubv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a097c41ef9590d6a7cc19d32f6cea580f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4NUIVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4Nuiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3f16867163bd7336908ddb005ecb41ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4NUSVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4Nusv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab6f8d7385106d1108d3410b24c35922a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4BVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4bv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0773da8811b1870fa7be5f52ff890f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4DPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4d</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aecfdfb2d7a47a6c8566cf98af7f354cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4DVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4dv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a96a30ab6755ed8f8776d9502da2b397f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4FPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4f</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5887b245ee10044abbf1f9e1eba95410</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4FVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa03f9797ba58b5135ccb4d2bdad752a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4IVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9611a3650192bd37ba7666aeec6feb5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4SPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4s</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4b20dd814602cca41cf3098314393665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4SVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abbb3a789f0e51cd30722bbc2c5938b26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4UBVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4ubv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a92bcd148c5aa73ce27e68459f4d045a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4UIVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4uiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8844709a49d8d05cacfd7bb85a6b0c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4USVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4usv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a63026d1fcbd3efd5526c2130a14c5608</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBPOINTERPROC</type>
      <name>GLeeFuncPtr_glVertexAttribPointer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afdd57313c084656dab5f8f7e16f8ee2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORMMATRIX2X3FVPROC</type>
      <name>GLeeFuncPtr_glUniformMatrix2x3fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a01cad8b9211a9eb6479f139968f33646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORMMATRIX3X2FVPROC</type>
      <name>GLeeFuncPtr_glUniformMatrix3x2fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1cca33c0a106fc2d43cd45bf8bd92055</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORMMATRIX2X4FVPROC</type>
      <name>GLeeFuncPtr_glUniformMatrix2x4fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6dc6e6dc797af5abb0faeb08b7f879ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORMMATRIX4X2FVPROC</type>
      <name>GLeeFuncPtr_glUniformMatrix4x2fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a59e165af9b50dfcb4632ad6af9154c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORMMATRIX3X4FVPROC</type>
      <name>GLeeFuncPtr_glUniformMatrix3x4fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aca995c5028b80e0411a0fd672598e133</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORMMATRIX4X3FVPROC</type>
      <name>GLeeFuncPtr_glUniformMatrix4x3fv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa319602031c5c7ab61f96353b46d0173</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLORMASKIPROC</type>
      <name>GLeeFuncPtr_glColorMaski</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3ab3a9ecfe197d714fbb4c7ea128c351</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETBOOLEANI_VPROC</type>
      <name>GLeeFuncPtr_glGetBooleani_v</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2d33b3bf5c7d2fee12d07559fa515979</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETINTEGERI_VPROC</type>
      <name>GLeeFuncPtr_glGetIntegeri_v</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a84b497f360166f6d8a06efdba8a63c46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLENABLEIPROC</type>
      <name>GLeeFuncPtr_glEnablei</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5e96c85c863495de6cea2be41bfa6299</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDISABLEIPROC</type>
      <name>GLeeFuncPtr_glDisablei</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1cfa7376a2ab58c6c64361b5d0452d9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISENABLEDIPROC</type>
      <name>GLeeFuncPtr_glIsEnabledi</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a13ce815bb80bebc9825590798ff398ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBEGINTRANSFORMFEEDBACKPROC</type>
      <name>GLeeFuncPtr_glBeginTransformFeedback</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a57b850dcef3fc5d6d45ad20c6a01d8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLENDTRANSFORMFEEDBACKPROC</type>
      <name>GLeeFuncPtr_glEndTransformFeedback</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6ba03c74675955663701c67037fc63e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDBUFFERRANGEPROC</type>
      <name>GLeeFuncPtr_glBindBufferRange</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a81bc95245a93d62642234e78a4f6fb60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDBUFFERBASEPROC</type>
      <name>GLeeFuncPtr_glBindBufferBase</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a556e06155ded3afd2012e0f10b146b44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTRANSFORMFEEDBACKVARYINGSPROC</type>
      <name>GLeeFuncPtr_glTransformFeedbackVaryings</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a01a059a4856fbac6958b9f63cfadf037</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETTRANSFORMFEEDBACKVARYINGPROC</type>
      <name>GLeeFuncPtr_glGetTransformFeedbackVarying</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae5664699a6dd1d1bfbceb0035f0fe909</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCLAMPCOLORPROC</type>
      <name>GLeeFuncPtr_glClampColor</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aef8a90389d3611c64a2c1b85d663f2f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBEGINCONDITIONALRENDERPROC</type>
      <name>GLeeFuncPtr_glBeginConditionalRender</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae84c0965c695fd47dc052133237fcc4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLENDCONDITIONALRENDERPROC</type>
      <name>GLeeFuncPtr_glEndConditionalRender</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3535cd06248ce3674874157406a3ac1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI1IPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI1i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aae9ce773835a5587b2b96b92755aef6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI2IPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI2i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac4d5b299ce03d606f9f92de8205c316e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI3IPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI3i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa904448aa1c9519eb911dbcca6c708cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI4IPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI4i</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a44c2b427871b61b6629df4a422485890</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI1UIPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI1ui</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a39dc763b84fabdbc1f7dbf22636011bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI2UIPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI2ui</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afb2a1859edd25fd1b69eed17dbc67c24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI3UIPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI3ui</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adc7908280ceb912e5c1dcf595b690a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI4UIPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI4ui</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a063d08fcb4307431c47ec4efc9913190</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI1IVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI1iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6f9c5d2d0c516c3b429ec3b7e3e06a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI2IVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI2iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3a17fdb374a173dd9adc71f525f7f97d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI3IVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI3iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad21bb6c26842464c486cd7e6d7160b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI4IVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI4iv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aca7a1636a6d2cb4eb9d69354d7557e7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI1UIVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI1uiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a920f373fe0a1eb9125cb260f09938915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI2UIVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI2uiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acc4f74d5769a5e0fe8b169c3ecb1367b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI3UIVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI3uiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a13d83d028d3f88590998ff3efceb8383</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI4UIVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI4uiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae133ef55c88a970c53ee1b635321a639</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI4BVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI4bv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abe66d200254af57ad7a76ce347b632c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI4SVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI4sv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af47aea82616dfd5f725ab2ec4afbf9b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI4UBVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI4ubv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a008e92c5007a5eabc92f6fb2576341b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI4USVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI4usv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1aa09790c8815585a58ec112dfce2030</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBIPOINTERPROC</type>
      <name>GLeeFuncPtr_glVertexAttribIPointer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad2276d86a39385d25c94c6399b875f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVERTEXATTRIBIIVPROC</type>
      <name>GLeeFuncPtr_glGetVertexAttribIiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af37f55913927b11f389d6b8cd19d8b30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVERTEXATTRIBIUIVPROC</type>
      <name>GLeeFuncPtr_glGetVertexAttribIuiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a99ad04e124f56feca881ed8a6c198083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETUNIFORMUIVPROC</type>
      <name>GLeeFuncPtr_glGetUniformuiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a529a34b4787cde43f311011616eb0a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDFRAGDATALOCATIONPROC</type>
      <name>GLeeFuncPtr_glBindFragDataLocation</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8f54dcd8a518e983ecb737516748e401</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETFRAGDATALOCATIONPROC</type>
      <name>GLeeFuncPtr_glGetFragDataLocation</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab616dafb8dbbb717feda1dc47bf7c163</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM1UIPROC</type>
      <name>GLeeFuncPtr_glUniform1ui</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a47ac61c5826a87b457b7568316a2d2d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM2UIPROC</type>
      <name>GLeeFuncPtr_glUniform2ui</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a35caca0ac0c448c7cfb584ea3d66538e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM3UIPROC</type>
      <name>GLeeFuncPtr_glUniform3ui</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaaacf6d60d4702c1471d75f1a9a7e1f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM4UIPROC</type>
      <name>GLeeFuncPtr_glUniform4ui</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af1b08ae92787270fc5fc01bca3c64b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM1UIVPROC</type>
      <name>GLeeFuncPtr_glUniform1uiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9eede429281d1f3a2984eaddd4e3d468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM2UIVPROC</type>
      <name>GLeeFuncPtr_glUniform2uiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a880bd02809f07c70c24150fa83a3e695</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM3UIVPROC</type>
      <name>GLeeFuncPtr_glUniform3uiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9668f9af0485d4bbd61c6c028b66d715</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM4UIVPROC</type>
      <name>GLeeFuncPtr_glUniform4uiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a16f28d0338ae98110eeaae81c92424bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXPARAMETERIIVPROC</type>
      <name>GLeeFuncPtr_glTexParameterIiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa9502b33223d7d92f37a53ac21225c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXPARAMETERIUIVPROC</type>
      <name>GLeeFuncPtr_glTexParameterIuiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a959cabd6b8cbda5147cefe21784e634b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETTEXPARAMETERIIVPROC</type>
      <name>GLeeFuncPtr_glGetTexParameterIiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6f267a2ee1a804018b94fcac51b1da7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETTEXPARAMETERIUIVPROC</type>
      <name>GLeeFuncPtr_glGetTexParameterIuiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a841032a333b16ee15dbb5c9d791da5e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCLEARBUFFERIVPROC</type>
      <name>GLeeFuncPtr_glClearBufferiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af8e79e5fe62bfefd5c1fd47d9aaaf42f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCLEARBUFFERUIVPROC</type>
      <name>GLeeFuncPtr_glClearBufferuiv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aebca550ce71898c6eae77ed4b6102f3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCLEARBUFFERFVPROC</type>
      <name>GLeeFuncPtr_glClearBufferfv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adabbc4e15fa12e1cbe122ab03abb53d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCLEARBUFFERFIPROC</type>
      <name>GLeeFuncPtr_glClearBufferfi</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af8a40d9b8b9faa37e53819fbda3ba2ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETSTRINGIPROC</type>
      <name>GLeeFuncPtr_glGetStringi</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af2ffeb32de03233cc9b1c05cca558342</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLACTIVETEXTUREARBPROC</type>
      <name>GLeeFuncPtr_glActiveTextureARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6270d867f5c3129f4987d2a6a8755744</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCLIENTACTIVETEXTUREARBPROC</type>
      <name>GLeeFuncPtr_glClientActiveTextureARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae8bae1c59a8a0dfd7923a968499976f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD1DARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord1dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac414d771cf6995fb1405524bfae96664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD1DVARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord1dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a714f9876319f31ebb3cae2d77e86c3f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD1FARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord1fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2f02c102f5e058b6e7e6ab8fff661490</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD1FVARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord1fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0493fa525867199276edb707dd0a8858</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD1IARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord1iARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a10ec48e51cb35ded8e3694a6f25e9a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD1IVARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord1ivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac4e57152cf8c3f9ea5200bcdab6a85f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD1SARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord1sARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad593610930fc641a6be5d9fa16a80e13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD1SVARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord1svARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa0d8861aeca16d2251ed98cb5827520f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD2DARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord2dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a45c916d6b627db5bb71e78dd7c639474</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD2DVARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord2dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1849cc0247955a0196eed5ff8a532616</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD2FARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord2fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ace10a356c13a69c16b70918b87db78bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD2FVARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord2fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa1d992c790df8bcad3d12cdeb44f0d54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD2IARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord2iARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6f8b01654fb0f28a1f511c780e0fc583</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD2IVARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord2ivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5bda3e2be7776e5477e2a8242dd7346a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD2SARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord2sARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a806b2e9ea8e9d23c3d44c68cf9c338d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD2SVARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord2svARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9ad9e60e85bfa295cf94f19426998ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD3DARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord3dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac94631b50a58072175114a8f3ab6cc89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD3DVARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord3dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a30766a44f30bef2be5514f67554d1b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD3FARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord3fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a92ff55aa2ca2369e905ead804c4b9128</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD3FVARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord3fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac9c0d7646c0fd1610688204d84c3ab05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD3IARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord3iARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adc7050cbf5488afb93178075a3a0a04b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD3IVARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord3ivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7b54749502c2c1bbf796a1ee3fe32bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD3SARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord3sARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adaa086da64447f3a3e58930bfe02619a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD3SVARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord3svARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a96cc85916eb190cb3b5ae5febd0f125a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD4DARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord4dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8559b4f030d3a73357b8aa21b3223fc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD4DVARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord4dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3e0afa3a65c4788c6137b799bb612e21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD4FARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord4fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a269b61b6f289c56334d325b6abca5e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD4FVARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord4fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aee136253e37b80fd3d8b7cc12d7c51d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD4IARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord4iARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9414eb1df6749b7b9a78d8477e72e229</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD4IVARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord4ivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a04c6279cccb59d57a3bebbb32e151313</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD4SARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord4sARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a08dfbccbc0a800d126afac6cfa22d755</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD4SVARBPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord4svARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adc604aac0672439523bd496ec51597b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLLOADTRANSPOSEMATRIXFARBPROC</type>
      <name>GLeeFuncPtr_glLoadTransposeMatrixfARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a28acc6327e9b047660148f7c89808a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLLOADTRANSPOSEMATRIXDARBPROC</type>
      <name>GLeeFuncPtr_glLoadTransposeMatrixdARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aae7700a9c6d624b0833a0d68ffc9639d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTTRANSPOSEMATRIXFARBPROC</type>
      <name>GLeeFuncPtr_glMultTransposeMatrixfARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af8418cc0b35f620d10543d37643ad4d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTTRANSPOSEMATRIXDARBPROC</type>
      <name>GLeeFuncPtr_glMultTransposeMatrixdARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad8a331f563363fafd25691bdeb0f710f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSAMPLECOVERAGEARBPROC</type>
      <name>GLeeFuncPtr_glSampleCoverageARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a24a8d9f3f3c8c59fb6400d22be63faad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDTEXIMAGE3DARBPROC</type>
      <name>GLeeFuncPtr_glCompressedTexImage3DARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a98a4c5724cb45eaa27bcbf9d56619945</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDTEXIMAGE2DARBPROC</type>
      <name>GLeeFuncPtr_glCompressedTexImage2DARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4964fc9558c09cc010fd393296d3a1ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDTEXIMAGE1DARBPROC</type>
      <name>GLeeFuncPtr_glCompressedTexImage1DARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6d8c7bfaa751080fdcd6f4df8a8b0c00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC</type>
      <name>GLeeFuncPtr_glCompressedTexSubImage3DARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afd2c38c9e601da40cdebe2df98b64c85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC</type>
      <name>GLeeFuncPtr_glCompressedTexSubImage2DARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9366d5e566ada7e1907aefc1e4f987a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC</type>
      <name>GLeeFuncPtr_glCompressedTexSubImage1DARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae14e70f85b4845de3d13b3ea1ee9183b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCOMPRESSEDTEXIMAGEARBPROC</type>
      <name>GLeeFuncPtr_glGetCompressedTexImageARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a44a47c93f4062015b70dcde4c0ff6e87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPOINTPARAMETERFARBPROC</type>
      <name>GLeeFuncPtr_glPointParameterfARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0842eb920a718a4859da3086279d4dd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPOINTPARAMETERFVARBPROC</type>
      <name>GLeeFuncPtr_glPointParameterfvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae0b7769472f768deed462f249ca85a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWEIGHTBVARBPROC</type>
      <name>GLeeFuncPtr_glWeightbvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a06e13c65721e6d9e8ff87f729ae79b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWEIGHTSVARBPROC</type>
      <name>GLeeFuncPtr_glWeightsvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4f539018fe1a8720c9b8ca9ee990397f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWEIGHTIVARBPROC</type>
      <name>GLeeFuncPtr_glWeightivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ade5b4afbd103807f8c12f42ecf90859a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWEIGHTFVARBPROC</type>
      <name>GLeeFuncPtr_glWeightfvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a67c22aa85136de2b436e6de625e60ba1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWEIGHTDVARBPROC</type>
      <name>GLeeFuncPtr_glWeightdvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af411b9f2945ca169376f0fd72557c0ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWEIGHTUBVARBPROC</type>
      <name>GLeeFuncPtr_glWeightubvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a376d93cc21c89cc97eba44f92925edb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWEIGHTUSVARBPROC</type>
      <name>GLeeFuncPtr_glWeightusvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aefb020f44fa2ad48429fcb48edaabb4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWEIGHTUIVARBPROC</type>
      <name>GLeeFuncPtr_glWeightuivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4b844b681a9fffcd82791a581e37ef29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWEIGHTPOINTERARBPROC</type>
      <name>GLeeFuncPtr_glWeightPointerARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a280b82be34ebe58822061cfa1de707e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXBLENDARBPROC</type>
      <name>GLeeFuncPtr_glVertexBlendARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a361cd23b534dfe10350f92e15220307e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCURRENTPALETTEMATRIXARBPROC</type>
      <name>GLeeFuncPtr_glCurrentPaletteMatrixARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a56b5b5ae7cf719bb02a7ff764d3eec9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXINDEXUBVARBPROC</type>
      <name>GLeeFuncPtr_glMatrixIndexubvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa121aad0bcc7fc662a69cc55b9fe2391</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXINDEXUSVARBPROC</type>
      <name>GLeeFuncPtr_glMatrixIndexusvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8ade9fe687f002a08eee5453067e5cbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXINDEXUIVARBPROC</type>
      <name>GLeeFuncPtr_glMatrixIndexuivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a11a0706d65176ae7503e79b800c5eb0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXINDEXPOINTERARBPROC</type>
      <name>GLeeFuncPtr_glMatrixIndexPointerARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad1b4e8d1540764a35781c74a011ac342</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2DARBPROC</type>
      <name>GLeeFuncPtr_glWindowPos2dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad50ec14f6857918371a1241ecf35d3bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2DVARBPROC</type>
      <name>GLeeFuncPtr_glWindowPos2dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8eb73fbcd4b92f7e657a7c613c3ea1a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2FARBPROC</type>
      <name>GLeeFuncPtr_glWindowPos2fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aef89dd9aaaca406b43997726e1a2f6e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2FVARBPROC</type>
      <name>GLeeFuncPtr_glWindowPos2fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0b4f76b432106242302e5b2a7dec0e79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2IARBPROC</type>
      <name>GLeeFuncPtr_glWindowPos2iARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a30d32f34341c876c8e158e7b7c71663b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2IVARBPROC</type>
      <name>GLeeFuncPtr_glWindowPos2ivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad2e7a0554921a3f981101cbb2538dd5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2SARBPROC</type>
      <name>GLeeFuncPtr_glWindowPos2sARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4156004003bf2fb47716d49df746cc41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2SVARBPROC</type>
      <name>GLeeFuncPtr_glWindowPos2svARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaad7e275934f34ccd86631bb2c4e3f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3DARBPROC</type>
      <name>GLeeFuncPtr_glWindowPos3dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a985f17aac1b0322c464b4fe4a2c56c2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3DVARBPROC</type>
      <name>GLeeFuncPtr_glWindowPos3dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acb336339be506c18ee5580958f1f44c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3FARBPROC</type>
      <name>GLeeFuncPtr_glWindowPos3fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8566f0bb2d573c4a80a8367e596f2f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3FVARBPROC</type>
      <name>GLeeFuncPtr_glWindowPos3fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1b361fcfa68edc44dd1b6da78f423e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3IARBPROC</type>
      <name>GLeeFuncPtr_glWindowPos3iARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5d809d5f3edf811160ef2d93ddadf830</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3IVARBPROC</type>
      <name>GLeeFuncPtr_glWindowPos3ivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5809048ebbaa3683823b2ed4a3598ee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3SARBPROC</type>
      <name>GLeeFuncPtr_glWindowPos3sARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a308c780f7f5b5b164656bc51be84ee25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3SVARBPROC</type>
      <name>GLeeFuncPtr_glWindowPos3svARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a47321fea2db6e03568703bc8b50f6e38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB1DARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib1dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af66359f3477b3463979dbc67439c645d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB1DVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib1dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae90b9c52d3cb15b11dda076a778dce1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB1FARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib1fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6533d5516db2e7fa9c7811fd1b0f2fe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB1FVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib1fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a21dd5dc9e44d4210f692aa8ae500a8b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB1SARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib1sARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa1e6dd341bc07eaa00f5e16b32318361</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB1SVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib1svARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abd6db7b38450d24f5d8dab001f59a31a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB2DARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib2dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad50b42de4bfd0595496c4149c9b5e224</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB2DVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib2dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a86a97dd325d6a59365b6a4d18dab0c7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB2FARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib2fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaac661522c0b808e626d61f043a017c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB2FVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib2fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7ae694d2639a7c3fc16f3a4913732475</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB2SARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib2sARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a12c2b2cf528357013aae8ec71c991544</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB2SVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib2svARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1f694faf51b3b0bf16d57c08eb7b8312</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB3DARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib3dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af5a3d9d42d958ca5bdc1ebc945ee012a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB3DVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib3dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acc54b9120690e757db99d760e6ba61d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB3FARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib3fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6529a5299ec0451dd7edf8cd2ee9c9b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB3FVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib3fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af8bcd5d90304b5d5550c7c7960b9798d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB3SARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib3sARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaa2b5c4246e5f6038dbf1d84bb498129</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB3SVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib3svARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9ac7d620e1856323cebdcc0e99b05a9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4NBVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4NbvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a04aef348dba391ea80e0e512e00f9120</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4NIVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4NivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae37981669c14087d8180411acc48fb6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4NSVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4NsvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8ebdf3edc9718b251a93d695820c80a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4NUBARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4NubARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5bc6babb4e6e4e1507cef75edb547fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4NUBVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4NubvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8da17ff9e212cec7b99f3e2ce7d5fd8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4NUIVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4NuivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9fccf5bdc56e27fc4d0906bc463c1a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4NUSVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4NusvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0e2644fa5da15e63ee140baaa2dad577</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4BVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4bvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a58d81687f96b35ff7a6be4c4043e4e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4DARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab8da1d584d2a25c847bbe6b280bac8bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4DVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1d46f563708d5595b0e5519d044e4626</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4FARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ada65ad1a265c702c3a662069b466639e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4FVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0d9e72ad6160e6600e03413efea1013e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4IVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4ivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a64fa2b44a56fdae054ce28d0ef4d49e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4SARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4sARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4b799c11be9e2ff24cd33ee1bac299bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4SVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4svARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a19a7c96fc20a28ba0a08cb60ae89be60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4UBVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4ubvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a30a9b86529776663a61f3d04fa4832bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4UIVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4uivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5cd3b9062e684b941e5fa0501974a5e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4USVARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4usvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a388556191506490bb6adc6f7c9179d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBPOINTERARBPROC</type>
      <name>GLeeFuncPtr_glVertexAttribPointerARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a397deb6d525d84db707fc304e517ffd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLENABLEVERTEXATTRIBARRAYARBPROC</type>
      <name>GLeeFuncPtr_glEnableVertexAttribArrayARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6437a8182204c4cbe0f7c99eb5069fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDISABLEVERTEXATTRIBARRAYARBPROC</type>
      <name>GLeeFuncPtr_glDisableVertexAttribArrayARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a52c542770bddf80abf99e2980bdf7716</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMSTRINGARBPROC</type>
      <name>GLeeFuncPtr_glProgramStringARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac4bf3efef1fa4c77a2257eacc3a1c6cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDPROGRAMARBPROC</type>
      <name>GLeeFuncPtr_glBindProgramARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a907eefc567339ac50fbbf0e262ca00c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETEPROGRAMSARBPROC</type>
      <name>GLeeFuncPtr_glDeleteProgramsARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aed0ad5e1d118a19bbe3f91f5fa2a521a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENPROGRAMSARBPROC</type>
      <name>GLeeFuncPtr_glGenProgramsARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6637712e4c791070502737214647255e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMENVPARAMETER4DARBPROC</type>
      <name>GLeeFuncPtr_glProgramEnvParameter4dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a76f166df8a3d565bff821b0fc400b569</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMENVPARAMETER4DVARBPROC</type>
      <name>GLeeFuncPtr_glProgramEnvParameter4dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3da7ee6e92745814ff7148d23435b78b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMENVPARAMETER4FARBPROC</type>
      <name>GLeeFuncPtr_glProgramEnvParameter4fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a60dac936ccb6ffdebc6c100f40059411</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMENVPARAMETER4FVARBPROC</type>
      <name>GLeeFuncPtr_glProgramEnvParameter4fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a40c5165ff1bb20557edbc894ea7fa7fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMLOCALPARAMETER4DARBPROC</type>
      <name>GLeeFuncPtr_glProgramLocalParameter4dARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8c0f0293daab0a36e6116f832510cb34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMLOCALPARAMETER4DVARBPROC</type>
      <name>GLeeFuncPtr_glProgramLocalParameter4dvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad1e84c2b5064d09716efb62f3615999c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMLOCALPARAMETER4FARBPROC</type>
      <name>GLeeFuncPtr_glProgramLocalParameter4fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6d95a7765e1e993a921f141e38d1525f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMLOCALPARAMETER4FVARBPROC</type>
      <name>GLeeFuncPtr_glProgramLocalParameter4fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a43d00cedf22ce34c1fd4afe8e2dd3939</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETPROGRAMENVPARAMETERDVARBPROC</type>
      <name>GLeeFuncPtr_glGetProgramEnvParameterdvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5062307c7f80ea73365697a91ad7647a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETPROGRAMENVPARAMETERFVARBPROC</type>
      <name>GLeeFuncPtr_glGetProgramEnvParameterfvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af59c68588f9292d5b6fd9dee31787f0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETPROGRAMLOCALPARAMETERDVARBPROC</type>
      <name>GLeeFuncPtr_glGetProgramLocalParameterdvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1fd921e506cc33060d0653363bb63194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETPROGRAMLOCALPARAMETERFVARBPROC</type>
      <name>GLeeFuncPtr_glGetProgramLocalParameterfvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9d52f766e747bc2d62f95544579101e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETPROGRAMIVARBPROC</type>
      <name>GLeeFuncPtr_glGetProgramivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a305272476f414b781afef87de4df3d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETPROGRAMSTRINGARBPROC</type>
      <name>GLeeFuncPtr_glGetProgramStringARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8fc093a2cc6b1a04e17e670d10c0db7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVERTEXATTRIBDVARBPROC</type>
      <name>GLeeFuncPtr_glGetVertexAttribdvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a22ea2409dfc949f9bb0ee76b4c3ecb00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVERTEXATTRIBFVARBPROC</type>
      <name>GLeeFuncPtr_glGetVertexAttribfvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3ba4a8201cb886f9f04ffbf37e542e97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVERTEXATTRIBIVARBPROC</type>
      <name>GLeeFuncPtr_glGetVertexAttribivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abe06e34f803e5002bfc4328f561503a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVERTEXATTRIBPOINTERVARBPROC</type>
      <name>GLeeFuncPtr_glGetVertexAttribPointervARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aac354bee8e2c5f9dfa739d00722fefba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISPROGRAMARBPROC</type>
      <name>GLeeFuncPtr_glIsProgramARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af8464d4f80d3838fcb8df5f2f244145f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDBUFFERARBPROC</type>
      <name>GLeeFuncPtr_glBindBufferARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a980eee960609122c5cc9f3e737da0c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETEBUFFERSARBPROC</type>
      <name>GLeeFuncPtr_glDeleteBuffersARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a30ec49d397beb90d19c766283ecf8b45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENBUFFERSARBPROC</type>
      <name>GLeeFuncPtr_glGenBuffersARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad969178623ae31ee7d804d0c2cc07ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISBUFFERARBPROC</type>
      <name>GLeeFuncPtr_glIsBufferARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af2cda2f7f43ed6995666192067090153</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBUFFERDATAARBPROC</type>
      <name>GLeeFuncPtr_glBufferDataARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab5fb35bee891db4c602f6bc7010f91ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBUFFERSUBDATAARBPROC</type>
      <name>GLeeFuncPtr_glBufferSubDataARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abbea5ff50275c8874316a538cb448d71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETBUFFERSUBDATAARBPROC</type>
      <name>GLeeFuncPtr_glGetBufferSubDataARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4ef4343749a33d67fdbddb6701c42383</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMAPBUFFERARBPROC</type>
      <name>GLeeFuncPtr_glMapBufferARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a959ffed38824854efa8a58b932158e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNMAPBUFFERARBPROC</type>
      <name>GLeeFuncPtr_glUnmapBufferARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8a252cbd2e24e910351970abfeaf349d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETBUFFERPARAMETERIVARBPROC</type>
      <name>GLeeFuncPtr_glGetBufferParameterivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2c48497f416bfaa33a7390551ecf52c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETBUFFERPOINTERVARBPROC</type>
      <name>GLeeFuncPtr_glGetBufferPointervARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae12b24a1ca8bbd60bd4d01e4f13381ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENQUERIESARBPROC</type>
      <name>GLeeFuncPtr_glGenQueriesARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aae06588ff61b3a64a6e97a380d314870</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETEQUERIESARBPROC</type>
      <name>GLeeFuncPtr_glDeleteQueriesARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a82dc4a9a350a573e21b17b4913e8ac28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISQUERYARBPROC</type>
      <name>GLeeFuncPtr_glIsQueryARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aee9e8179c4f1ac0a1f3a818bd27b258c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBEGINQUERYARBPROC</type>
      <name>GLeeFuncPtr_glBeginQueryARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9a76e6b36456068fbebcbab7f49d04a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLENDQUERYARBPROC</type>
      <name>GLeeFuncPtr_glEndQueryARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a16a7ae7c3961eef6da94c2e4b7933776</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETQUERYIVARBPROC</type>
      <name>GLeeFuncPtr_glGetQueryivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a86f670885412f0e98030d450eb3e7ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETQUERYOBJECTIVARBPROC</type>
      <name>GLeeFuncPtr_glGetQueryObjectivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac3079d5b6f2f847574c0216454ddc77b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETQUERYOBJECTUIVARBPROC</type>
      <name>GLeeFuncPtr_glGetQueryObjectuivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a359d12d182ca554b2a99bbd319fac557</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETEOBJECTARBPROC</type>
      <name>GLeeFuncPtr_glDeleteObjectARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acfc41dcd592cfacb9794f2dddf5173fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETHANDLEARBPROC</type>
      <name>GLeeFuncPtr_glGetHandleARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a58e1fd8f77366fa8fa2e68271db353e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDETACHOBJECTARBPROC</type>
      <name>GLeeFuncPtr_glDetachObjectARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a19bee4afc2d6d3a90c64a050d8465c92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCREATESHADEROBJECTARBPROC</type>
      <name>GLeeFuncPtr_glCreateShaderObjectARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae4af0a19ab7f0accf0f9575bcfef9e7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSHADERSOURCEARBPROC</type>
      <name>GLeeFuncPtr_glShaderSourceARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8507f968e407f357a1a67fad36298bc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPILESHADERARBPROC</type>
      <name>GLeeFuncPtr_glCompileShaderARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a46d7a2bba0afe802698a5ea5a87ffe48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCREATEPROGRAMOBJECTARBPROC</type>
      <name>GLeeFuncPtr_glCreateProgramObjectARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af42aab67a8624cea48a206ff331d2b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLATTACHOBJECTARBPROC</type>
      <name>GLeeFuncPtr_glAttachObjectARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa19b494ed5bdaeca03fa9c569b4f885f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLLINKPROGRAMARBPROC</type>
      <name>GLeeFuncPtr_glLinkProgramARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a684db34e16e6dc37284fe7c42dcc14ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUSEPROGRAMOBJECTARBPROC</type>
      <name>GLeeFuncPtr_glUseProgramObjectARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a58330dd4a0a5f34ed66bc20e5789968e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVALIDATEPROGRAMARBPROC</type>
      <name>GLeeFuncPtr_glValidateProgramARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4035f4d8359b94adb8661c15eec52630</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM1FARBPROC</type>
      <name>GLeeFuncPtr_glUniform1fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9be1bd538ab97b83dff9b7a0684d6f2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM2FARBPROC</type>
      <name>GLeeFuncPtr_glUniform2fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a93bcd967bdf410590c2a637bbfba546a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM3FARBPROC</type>
      <name>GLeeFuncPtr_glUniform3fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4876021fa375e4f29f5b33483b353a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM4FARBPROC</type>
      <name>GLeeFuncPtr_glUniform4fARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acaa8d1ce07be9ce74cd9d8b890ce8525</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM1IARBPROC</type>
      <name>GLeeFuncPtr_glUniform1iARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aad7963c643dca6e977a8aca5e9228023</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM2IARBPROC</type>
      <name>GLeeFuncPtr_glUniform2iARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adcfcb1ebf3ae3a364066cd4579c95025</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM3IARBPROC</type>
      <name>GLeeFuncPtr_glUniform3iARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a26a37153c5d3374aed4bb64daa1c567a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM4IARBPROC</type>
      <name>GLeeFuncPtr_glUniform4iARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad73519a744f582721181428d6abdbd9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM1FVARBPROC</type>
      <name>GLeeFuncPtr_glUniform1fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae73da7ab99d7c16dd9051a7e0f4dac70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM2FVARBPROC</type>
      <name>GLeeFuncPtr_glUniform2fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af961a8d8be908d195dec76eed8204a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM3FVARBPROC</type>
      <name>GLeeFuncPtr_glUniform3fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5aedbca45feb276bde61698ff2200c23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM4FVARBPROC</type>
      <name>GLeeFuncPtr_glUniform4fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afc8e80e5370d8c4822f9d447d9744c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM1IVARBPROC</type>
      <name>GLeeFuncPtr_glUniform1ivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac381b155aaa1d3c77f7e025657e25de3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM2IVARBPROC</type>
      <name>GLeeFuncPtr_glUniform2ivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3a529588385dcad05b8c7bde997b2a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM3IVARBPROC</type>
      <name>GLeeFuncPtr_glUniform3ivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4a15d8b1e968fe24f6017c7b89f60c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM4IVARBPROC</type>
      <name>GLeeFuncPtr_glUniform4ivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6fe5e52528a240fb7cbec23412414a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORMMATRIX2FVARBPROC</type>
      <name>GLeeFuncPtr_glUniformMatrix2fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab41f6538d1709d8228df34e97199e3bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORMMATRIX3FVARBPROC</type>
      <name>GLeeFuncPtr_glUniformMatrix3fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a668517b6d1c67927441740a48c7482ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORMMATRIX4FVARBPROC</type>
      <name>GLeeFuncPtr_glUniformMatrix4fvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a28be684a4521c1c53c8a3994c70022fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETOBJECTPARAMETERFVARBPROC</type>
      <name>GLeeFuncPtr_glGetObjectParameterfvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af0a3627da7f7f220a0b831aa4ea4fd08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETOBJECTPARAMETERIVARBPROC</type>
      <name>GLeeFuncPtr_glGetObjectParameterivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a592fd4dd2e657f7b086bbbcd9df960b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETINFOLOGARBPROC</type>
      <name>GLeeFuncPtr_glGetInfoLogARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a64a01859c18e367146e53d3e294f7617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETATTACHEDOBJECTSARBPROC</type>
      <name>GLeeFuncPtr_glGetAttachedObjectsARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af718f6a64a19226a56998c2d68318ba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETUNIFORMLOCATIONARBPROC</type>
      <name>GLeeFuncPtr_glGetUniformLocationARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aba01be671d81259a89066f2f25b042b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETACTIVEUNIFORMARBPROC</type>
      <name>GLeeFuncPtr_glGetActiveUniformARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a51d74e686c56cde7e2477d4b35dd2995</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETUNIFORMFVARBPROC</type>
      <name>GLeeFuncPtr_glGetUniformfvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9811bc70b04063ff524c48f502d4322c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETUNIFORMIVARBPROC</type>
      <name>GLeeFuncPtr_glGetUniformivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5e0c1b5f1aaa1adb1831d981e7ba0994</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETSHADERSOURCEARBPROC</type>
      <name>GLeeFuncPtr_glGetShaderSourceARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac2675890dad1fad34d3da3ea76856b80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDATTRIBLOCATIONARBPROC</type>
      <name>GLeeFuncPtr_glBindAttribLocationARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a08bf401953693ee24775caac8a16a907</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETACTIVEATTRIBARBPROC</type>
      <name>GLeeFuncPtr_glGetActiveAttribARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a66318d04b9133210eba71da9f6616d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETATTRIBLOCATIONARBPROC</type>
      <name>GLeeFuncPtr_glGetAttribLocationARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a794df5ec6705addc96da3b54e56bba4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDRAWBUFFERSARBPROC</type>
      <name>GLeeFuncPtr_glDrawBuffersARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1ea509ab931892d0316b7cf1817fd13a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCLAMPCOLORARBPROC</type>
      <name>GLeeFuncPtr_glClampColorARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af3250fb4c5e8901bc778b9488e0507f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDRAWARRAYSINSTANCEDARBPROC</type>
      <name>GLeeFuncPtr_glDrawArraysInstancedARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5323eced7d2c8c99900ae33e65188cb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDRAWELEMENTSINSTANCEDARBPROC</type>
      <name>GLeeFuncPtr_glDrawElementsInstancedARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4765a695b75f1b381b5b76788d08f01e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISRENDERBUFFERPROC</type>
      <name>GLeeFuncPtr_glIsRenderbuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aee64ca71af3640fec06ab7b2a7b97f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDRENDERBUFFERPROC</type>
      <name>GLeeFuncPtr_glBindRenderbuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abf2de75609215e597143fd5e2f769ff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETERENDERBUFFERSPROC</type>
      <name>GLeeFuncPtr_glDeleteRenderbuffers</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afc68c7eb25d0e99df809a8488b9b80f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENRENDERBUFFERSPROC</type>
      <name>GLeeFuncPtr_glGenRenderbuffers</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aea8142f28c791026ba5f3f0220a50464</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLRENDERBUFFERSTORAGEPROC</type>
      <name>GLeeFuncPtr_glRenderbufferStorage</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5e54ce086b822224b1394fad5fef97db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETRENDERBUFFERPARAMETERIVPROC</type>
      <name>GLeeFuncPtr_glGetRenderbufferParameteriv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a270681395cc5061211b8577795a87e70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISFRAMEBUFFERPROC</type>
      <name>GLeeFuncPtr_glIsFramebuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afa866c43c18824bc976d89643c9e8b35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDFRAMEBUFFERPROC</type>
      <name>GLeeFuncPtr_glBindFramebuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9aab7ac366e3f1978f712ff092851a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETEFRAMEBUFFERSPROC</type>
      <name>GLeeFuncPtr_glDeleteFramebuffers</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a599a1ab64798252dcb3f6b6c9231f3be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENFRAMEBUFFERSPROC</type>
      <name>GLeeFuncPtr_glGenFramebuffers</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa357c85f9130b1e18053158b89c8361f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCHECKFRAMEBUFFERSTATUSPROC</type>
      <name>GLeeFuncPtr_glCheckFramebufferStatus</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a76ebedea519f587a07261f20f9b374f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAMEBUFFERTEXTURE1DPROC</type>
      <name>GLeeFuncPtr_glFramebufferTexture1D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0a1c1abee68ea5bb8af87f76bd8a252b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAMEBUFFERTEXTURE2DPROC</type>
      <name>GLeeFuncPtr_glFramebufferTexture2D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a01631cd139ed1f54c16b986979bc35d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAMEBUFFERTEXTURE3DPROC</type>
      <name>GLeeFuncPtr_glFramebufferTexture3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a645b1105afb247d3f874e701322aef0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAMEBUFFERRENDERBUFFERPROC</type>
      <name>GLeeFuncPtr_glFramebufferRenderbuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acfb58d93fca218cef8fdb1aaf280246a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC</type>
      <name>GLeeFuncPtr_glGetFramebufferAttachmentParameteriv</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a64c20fe8598b898306b459026fa28e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENERATEMIPMAPPROC</type>
      <name>GLeeFuncPtr_glGenerateMipmap</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0e7d2412b140413d3761dd917499c80c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBLITFRAMEBUFFERPROC</type>
      <name>GLeeFuncPtr_glBlitFramebuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae24a2427b6e92112d8673a1aebf1bf32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC</type>
      <name>GLeeFuncPtr_glRenderbufferStorageMultisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afdccbb7344ee75c93289e084106586a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAMEBUFFERTEXTURELAYERPROC</type>
      <name>GLeeFuncPtr_glFramebufferTextureLayer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af048e15833b29e74423d460aba520af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMPARAMETERIARBPROC</type>
      <name>GLeeFuncPtr_glProgramParameteriARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aebf9ea4852706b2d1ff184c45a2dbc23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAMEBUFFERTEXTUREARBPROC</type>
      <name>GLeeFuncPtr_glFramebufferTextureARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3dc25b61b83d021aed4b5efa4685ba87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAMEBUFFERTEXTURELAYERARBPROC</type>
      <name>GLeeFuncPtr_glFramebufferTextureLayerARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2fb0c7a5458fa930027748dfa755cef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAMEBUFFERTEXTUREFACEARBPROC</type>
      <name>GLeeFuncPtr_glFramebufferTextureFaceARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae90b2ab30c1cc89bab7d7145da4ddcec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBDIVISORPROC</type>
      <name>GLeeFuncPtr_glVertexAttribDivisor</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4337ebe8531e73b184c06b21842eaeeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMAPBUFFERRANGEPROC</type>
      <name>GLeeFuncPtr_glMapBufferRange</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a401d1dadd89e6831f340ec0938a643c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFLUSHMAPPEDBUFFERRANGEPROC</type>
      <name>GLeeFuncPtr_glFlushMappedBufferRange</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad5da7338fa188c5c676f15c3524c2fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXBUFFERARBPROC</type>
      <name>GLeeFuncPtr_glTexBufferARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac22be3ea04f2346e67e03e84e6a09ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDVERTEXARRAYPROC</type>
      <name>GLeeFuncPtr_glBindVertexArray</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad56042f45d9453e243e58d8ffd70eb25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETEVERTEXARRAYSPROC</type>
      <name>GLeeFuncPtr_glDeleteVertexArrays</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab6a5e4735f1951606c28884320444b85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENVERTEXARRAYSPROC</type>
      <name>GLeeFuncPtr_glGenVertexArrays</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a19032bb9c04b1642e26f6f2852fa8eb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISVERTEXARRAYPROC</type>
      <name>GLeeFuncPtr_glIsVertexArray</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a13cf79e7e7417288c657ca2ea2ff8e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBLENDCOLOREXTPROC</type>
      <name>GLeeFuncPtr_glBlendColorEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a30595b713697e3a62491a40ea92d0aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPOLYGONOFFSETEXTPROC</type>
      <name>GLeeFuncPtr_glPolygonOffsetEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8bdb22b8061724028a105764ed6ddbcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXIMAGE3DEXTPROC</type>
      <name>GLeeFuncPtr_glTexImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a07a6b1e4d77ca5f41da24ee87cfa712a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXSUBIMAGE3DEXTPROC</type>
      <name>GLeeFuncPtr_glTexSubImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeb409f5d8d272565d42ae6f81a54a917</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETTEXFILTERFUNCSGISPROC</type>
      <name>GLeeFuncPtr_glGetTexFilterFuncSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1802945bef19a5fb9c4259d0e78efc38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXFILTERFUNCSGISPROC</type>
      <name>GLeeFuncPtr_glTexFilterFuncSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acf95202f6b6dac7f65863478ce7c2c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXSUBIMAGE1DEXTPROC</type>
      <name>GLeeFuncPtr_glTexSubImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af7546bd6b65cf78196ccdd348c1ef564</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXSUBIMAGE2DEXTPROC</type>
      <name>GLeeFuncPtr_glTexSubImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab8bf95b1a8b531be8b76b0ec8400f191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYTEXIMAGE1DEXTPROC</type>
      <name>GLeeFuncPtr_glCopyTexImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a89d53a09b55f81602b65eed68d0dec8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYTEXIMAGE2DEXTPROC</type>
      <name>GLeeFuncPtr_glCopyTexImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afe7763620d1e1fb63ece77c566b8f00d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYTEXSUBIMAGE1DEXTPROC</type>
      <name>GLeeFuncPtr_glCopyTexSubImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac4e42df7f41c76260fd68410b491fc89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYTEXSUBIMAGE2DEXTPROC</type>
      <name>GLeeFuncPtr_glCopyTexSubImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4cba85bdfd65bd8d4274fb6440da7ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYTEXSUBIMAGE3DEXTPROC</type>
      <name>GLeeFuncPtr_glCopyTexSubImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a79aaab807b621c22802d4dfc4ea7ea3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETHISTOGRAMEXTPROC</type>
      <name>GLeeFuncPtr_glGetHistogramEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5555372d3495b782c55ee45aca73abb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETHISTOGRAMPARAMETERFVEXTPROC</type>
      <name>GLeeFuncPtr_glGetHistogramParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a28bcd33282209897a5162e6255cd5ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETHISTOGRAMPARAMETERIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetHistogramParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a872352855454836544a9a551e5618f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMINMAXEXTPROC</type>
      <name>GLeeFuncPtr_glGetMinmaxEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae9713e01babab456df7afa8b0559fc49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMINMAXPARAMETERFVEXTPROC</type>
      <name>GLeeFuncPtr_glGetMinmaxParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7429fd224d485316d90d65ab9c8f1243</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMINMAXPARAMETERIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetMinmaxParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a530ef96573ac11228ecfe41d073ae3d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLHISTOGRAMEXTPROC</type>
      <name>GLeeFuncPtr_glHistogramEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa954b44f1329781192a18e075f93bcf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMINMAXEXTPROC</type>
      <name>GLeeFuncPtr_glMinmaxEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1ccccfd23c2fae62e72090c2c19a2431</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLRESETHISTOGRAMEXTPROC</type>
      <name>GLeeFuncPtr_glResetHistogramEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a167ff37f0e5c7b706dfab10709f1c351</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLRESETMINMAXEXTPROC</type>
      <name>GLeeFuncPtr_glResetMinmaxEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a722661ba1d154a0ef1185bec4d4b3a0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCONVOLUTIONFILTER1DEXTPROC</type>
      <name>GLeeFuncPtr_glConvolutionFilter1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae6b166e27a18ed0d69a2b8290603cc4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCONVOLUTIONFILTER2DEXTPROC</type>
      <name>GLeeFuncPtr_glConvolutionFilter2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae25adf91adce9506e14067c1b425a2be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCONVOLUTIONPARAMETERFEXTPROC</type>
      <name>GLeeFuncPtr_glConvolutionParameterfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ade245d9eb2137625b7bd9b16a2d8ff8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCONVOLUTIONPARAMETERFVEXTPROC</type>
      <name>GLeeFuncPtr_glConvolutionParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a22a8570e75e403b080e0075b26a1161d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCONVOLUTIONPARAMETERIEXTPROC</type>
      <name>GLeeFuncPtr_glConvolutionParameteriEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a54bcdd9b66443b6b13c1a2f14f4dcee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCONVOLUTIONPARAMETERIVEXTPROC</type>
      <name>GLeeFuncPtr_glConvolutionParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aedd6dc27565d42537616418e859f7b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYCONVOLUTIONFILTER1DEXTPROC</type>
      <name>GLeeFuncPtr_glCopyConvolutionFilter1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a232462ac5d1b2e013b38b9e023874fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYCONVOLUTIONFILTER2DEXTPROC</type>
      <name>GLeeFuncPtr_glCopyConvolutionFilter2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acaf799758c056a480590d8560be693ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCONVOLUTIONFILTEREXTPROC</type>
      <name>GLeeFuncPtr_glGetConvolutionFilterEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1ff5d7111b0395e0cccafc1a25d86ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCONVOLUTIONPARAMETERFVEXTPROC</type>
      <name>GLeeFuncPtr_glGetConvolutionParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a65fe89654b0b7cfd607b1f7eb9c6b057</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCONVOLUTIONPARAMETERIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetConvolutionParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a39f56b1766d069cbcb2b177990f5af22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETSEPARABLEFILTEREXTPROC</type>
      <name>GLeeFuncPtr_glGetSeparableFilterEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7d21117d5439895d34ba219f3731d4fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSEPARABLEFILTER2DEXTPROC</type>
      <name>GLeeFuncPtr_glSeparableFilter2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa8f826d5da27e5953cc6648f1770f889</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLORTABLESGIPROC</type>
      <name>GLeeFuncPtr_glColorTableSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a43e648e887fadc3958aa71c2501e9026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLORTABLEPARAMETERFVSGIPROC</type>
      <name>GLeeFuncPtr_glColorTableParameterfvSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad369dec6491573ae948933fb1c55f6a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLORTABLEPARAMETERIVSGIPROC</type>
      <name>GLeeFuncPtr_glColorTableParameterivSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa92b2c33b32ed973489f632651b48f27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYCOLORTABLESGIPROC</type>
      <name>GLeeFuncPtr_glCopyColorTableSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9fc2cb3716fc317888430036c06c9735</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCOLORTABLESGIPROC</type>
      <name>GLeeFuncPtr_glGetColorTableSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7294d2a9e281167d63c775e8eb865b3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCOLORTABLEPARAMETERFVSGIPROC</type>
      <name>GLeeFuncPtr_glGetColorTableParameterfvSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae95390323a463f3f0edbc5c60af19bc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCOLORTABLEPARAMETERIVSGIPROC</type>
      <name>GLeeFuncPtr_glGetColorTableParameterivSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a49ffeb6eaf044d406dab30058aefa641</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPIXELTEXGENPARAMETERISGISPROC</type>
      <name>GLeeFuncPtr_glPixelTexGenParameteriSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afb8e1027c773961d1c3234e8e8febeba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPIXELTEXGENPARAMETERIVSGISPROC</type>
      <name>GLeeFuncPtr_glPixelTexGenParameterivSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af427cd0844f91229e763d96193fa5a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPIXELTEXGENPARAMETERFSGISPROC</type>
      <name>GLeeFuncPtr_glPixelTexGenParameterfSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9afa3f460a2fdce86a418aa529a4ea15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPIXELTEXGENPARAMETERFVSGISPROC</type>
      <name>GLeeFuncPtr_glPixelTexGenParameterfvSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a81572eb0337fa3ba3d8e826ab1912c49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETPIXELTEXGENPARAMETERIVSGISPROC</type>
      <name>GLeeFuncPtr_glGetPixelTexGenParameterivSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a02c00627e1c9e83e7c3a40a519837c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETPIXELTEXGENPARAMETERFVSGISPROC</type>
      <name>GLeeFuncPtr_glGetPixelTexGenParameterfvSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7d5e1476f2743d00d95f1126f14924f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPIXELTEXGENSGIXPROC</type>
      <name>GLeeFuncPtr_glPixelTexGenSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0bd2ec5d8b3b28d952a020be098d72f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXIMAGE4DSGISPROC</type>
      <name>GLeeFuncPtr_glTexImage4DSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af7a4e2b80e8366137162928c648eaead</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXSUBIMAGE4DSGISPROC</type>
      <name>GLeeFuncPtr_glTexSubImage4DSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5063b6afed1a1bbe32f6a2524d4d783f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLARETEXTURESRESIDENTEXTPROC</type>
      <name>GLeeFuncPtr_glAreTexturesResidentEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac811f5b5bef09b8adeeeb85e3ff229ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDTEXTUREEXTPROC</type>
      <name>GLeeFuncPtr_glBindTextureEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab8920f6f5215102dc8a6c9ed2bf78fb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETETEXTURESEXTPROC</type>
      <name>GLeeFuncPtr_glDeleteTexturesEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a149cbc972dea9cd2f858de51e7741760</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENTEXTURESEXTPROC</type>
      <name>GLeeFuncPtr_glGenTexturesEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0e6f5067071ea589f7bce0b30017ea6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISTEXTUREEXTPROC</type>
      <name>GLeeFuncPtr_glIsTextureEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae974f7b827ad27d5d078a2c0945779de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPRIORITIZETEXTURESEXTPROC</type>
      <name>GLeeFuncPtr_glPrioritizeTexturesEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af004d41ca4fd097ecd5b05cf8eac2bea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDETAILTEXFUNCSGISPROC</type>
      <name>GLeeFuncPtr_glDetailTexFuncSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a808c33a98f1c1e74114a97559df68c45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETDETAILTEXFUNCSGISPROC</type>
      <name>GLeeFuncPtr_glGetDetailTexFuncSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abd08ee79bc17adf759c40db5467c4ec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSHARPENTEXFUNCSGISPROC</type>
      <name>GLeeFuncPtr_glSharpenTexFuncSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a42137ca5c9d852c334a15a15d47a5f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETSHARPENTEXFUNCSGISPROC</type>
      <name>GLeeFuncPtr_glGetSharpenTexFuncSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab04c6db1c67c591f56df645c9bc565d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSAMPLEMASKSGISPROC</type>
      <name>GLeeFuncPtr_glSampleMaskSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac9e4a5793b85225125894f6c56b89dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSAMPLEPATTERNSGISPROC</type>
      <name>GLeeFuncPtr_glSamplePatternSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af2a1dbe928a9c5bfd2730d0607f21c97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLARRAYELEMENTEXTPROC</type>
      <name>GLeeFuncPtr_glArrayElementEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a75e2eeae85b5cf951a3dedfb9ba0d20e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLORPOINTEREXTPROC</type>
      <name>GLeeFuncPtr_glColorPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4a973cbc1e38b092d1931c7f8da04203</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDRAWARRAYSEXTPROC</type>
      <name>GLeeFuncPtr_glDrawArraysEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab8565906b2f69f2a25a3fdd224961245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLEDGEFLAGPOINTEREXTPROC</type>
      <name>GLeeFuncPtr_glEdgeFlagPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7cf646ae17524228c49912433d4646d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETPOINTERVEXTPROC</type>
      <name>GLeeFuncPtr_glGetPointervEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab0379fb245dd924ff9ff9de9064dfb1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLINDEXPOINTEREXTPROC</type>
      <name>GLeeFuncPtr_glIndexPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a70a666fa1bff35fe64520c4c3fe7bbc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNORMALPOINTEREXTPROC</type>
      <name>GLeeFuncPtr_glNormalPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5af123d3771e60f7ffcb593ab71e63f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORDPOINTEREXTPROC</type>
      <name>GLeeFuncPtr_glTexCoordPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aacd3a4fa3090285bfca12b895deb8c92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXPOINTEREXTPROC</type>
      <name>GLeeFuncPtr_glVertexPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afcd7b372b47080b3365e2c16efb79fbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBLENDEQUATIONEXTPROC</type>
      <name>GLeeFuncPtr_glBlendEquationEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae80a7aa41dda31c3f0c518476d7b5dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSPRITEPARAMETERFSGIXPROC</type>
      <name>GLeeFuncPtr_glSpriteParameterfSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aed88b8d06d138dba00f774dddb9741ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSPRITEPARAMETERFVSGIXPROC</type>
      <name>GLeeFuncPtr_glSpriteParameterfvSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9b8c39dc4febba57e43fe3b14f28d5b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSPRITEPARAMETERISGIXPROC</type>
      <name>GLeeFuncPtr_glSpriteParameteriSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a55a8cca82777e0f60b35bc3d5f480827</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSPRITEPARAMETERIVSGIXPROC</type>
      <name>GLeeFuncPtr_glSpriteParameterivSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a979b186856bd13c2471f2914514ca44c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPOINTPARAMETERFEXTPROC</type>
      <name>GLeeFuncPtr_glPointParameterfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1b231328310a47c8b72bc05a12a97f8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPOINTPARAMETERFVEXTPROC</type>
      <name>GLeeFuncPtr_glPointParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a75b97a637c5174ed18d6ba505664a582</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPOINTPARAMETERFSGISPROC</type>
      <name>GLeeFuncPtr_glPointParameterfSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aacfea04d08adf7a0f4399ea2031410b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPOINTPARAMETERFVSGISPROC</type>
      <name>GLeeFuncPtr_glPointParameterfvSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6d5343baf04dd73ee332e6eddc3a0a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETINSTRUMENTSSGIXPROC</type>
      <name>GLeeFuncPtr_glGetInstrumentsSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeee24f5d1ed1ab1c09d89c6ab7f8a860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLINSTRUMENTSBUFFERSGIXPROC</type>
      <name>GLeeFuncPtr_glInstrumentsBufferSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab0aabd7cf25e7f0dbef82a13e5bd2362</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPOLLINSTRUMENTSSGIXPROC</type>
      <name>GLeeFuncPtr_glPollInstrumentsSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abbbc30565b5cf3618bbf0c7eaeb81d95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREADINSTRUMENTSSGIXPROC</type>
      <name>GLeeFuncPtr_glReadInstrumentsSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a05fd6e5e3a63afe41a3dac92b9f53a05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSTARTINSTRUMENTSSGIXPROC</type>
      <name>GLeeFuncPtr_glStartInstrumentsSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae1bc346c3533a3842979dbcb1365ef1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSTOPINSTRUMENTSSGIXPROC</type>
      <name>GLeeFuncPtr_glStopInstrumentsSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abf8c013312981b45d4cea5ab14ee1b26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAMEZOOMSGIXPROC</type>
      <name>GLeeFuncPtr_glFrameZoomSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1de1999a3bed95aade708b805e0e1e0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTAGSAMPLEBUFFERSGIXPROC</type>
      <name>GLeeFuncPtr_glTagSampleBufferSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a895561c3d2c5e0c140c08998e1dd9116</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDEFORMATIONMAP3DSGIXPROC</type>
      <name>GLeeFuncPtr_glDeformationMap3dSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2bd16784daec417c5ce894cb0503c425</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDEFORMATIONMAP3FSGIXPROC</type>
      <name>GLeeFuncPtr_glDeformationMap3fSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae4ecf710b9d9f6f065d197dc9787850a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDEFORMSGIXPROC</type>
      <name>GLeeFuncPtr_glDeformSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a74485906313c96516b2f3465c8b014b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC</type>
      <name>GLeeFuncPtr_glLoadIdentityDeformationMapSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad85e4ccf4d02c5966b6ce5b6620a8c02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREFERENCEPLANESGIXPROC</type>
      <name>GLeeFuncPtr_glReferencePlaneSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7a165429a1dccc6a67056b15dc44879e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFLUSHRASTERSGIXPROC</type>
      <name>GLeeFuncPtr_glFlushRasterSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeecf24f7a5968f4045ac379d3195d7a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFOGFUNCSGISPROC</type>
      <name>GLeeFuncPtr_glFogFuncSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acae687c3c74267c1be7a64d4fe22635d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETFOGFUNCSGISPROC</type>
      <name>GLeeFuncPtr_glGetFogFuncSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8b4a763eb3fff7c82316142e42a99208</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLIMAGETRANSFORMPARAMETERIHPPROC</type>
      <name>GLeeFuncPtr_glImageTransformParameteriHP</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac4dd9cc5b23a60161750001b020dbcf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLIMAGETRANSFORMPARAMETERFHPPROC</type>
      <name>GLeeFuncPtr_glImageTransformParameterfHP</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a30e4b7e57dc043c777ff1be22200acb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLIMAGETRANSFORMPARAMETERIVHPPROC</type>
      <name>GLeeFuncPtr_glImageTransformParameterivHP</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a61d0f35355e0ba8d1ef7d4ff90362acb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLIMAGETRANSFORMPARAMETERFVHPPROC</type>
      <name>GLeeFuncPtr_glImageTransformParameterfvHP</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2abb91d9d5ea5e7173c5efceee0b8811</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC</type>
      <name>GLeeFuncPtr_glGetImageTransformParameterivHP</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa594858217734f1d34653395e3eae6df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC</type>
      <name>GLeeFuncPtr_glGetImageTransformParameterfvHP</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0f4f543d2aeaaa97065fa99d094a5c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLORSUBTABLEEXTPROC</type>
      <name>GLeeFuncPtr_glColorSubTableEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aca7c5f51b7ff715d2fa7c1d2f24c7277</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYCOLORSUBTABLEEXTPROC</type>
      <name>GLeeFuncPtr_glCopyColorSubTableEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a97ab317f87dffac57c4347e287ab8efb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLHINTPGIPROC</type>
      <name>GLeeFuncPtr_glHintPGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad8cf9bea38f8d27f1047fe9341cb76a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLORTABLEEXTPROC</type>
      <name>GLeeFuncPtr_glColorTableEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6d55e988031f55d40c94acfecdd440aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCOLORTABLEEXTPROC</type>
      <name>GLeeFuncPtr_glGetColorTableEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a08be728171df0af5a07e8ba186b25579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCOLORTABLEPARAMETERIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetColorTableParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3932cd9de318fe08698151ec3f388ec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCOLORTABLEPARAMETERFVEXTPROC</type>
      <name>GLeeFuncPtr_glGetColorTableParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ada27b282c9a4c65875776e06cb3a5416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETLISTPARAMETERFVSGIXPROC</type>
      <name>GLeeFuncPtr_glGetListParameterfvSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a85de5b9dfc016f2cdb2defa25a5e1f9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETLISTPARAMETERIVSGIXPROC</type>
      <name>GLeeFuncPtr_glGetListParameterivSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad71f9203f8fd9aa4e1fc5ea41d62c538</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLLISTPARAMETERFSGIXPROC</type>
      <name>GLeeFuncPtr_glListParameterfSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad61b709809dce34e883db12cdb0d3d2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLLISTPARAMETERFVSGIXPROC</type>
      <name>GLeeFuncPtr_glListParameterfvSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a96a27642c19bb90ee5a00790edb782b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLLISTPARAMETERISGIXPROC</type>
      <name>GLeeFuncPtr_glListParameteriSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a00e02d21b21916667cce4ea95d72d77e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLLISTPARAMETERIVSGIXPROC</type>
      <name>GLeeFuncPtr_glListParameterivSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5a175a63b6fe95fd0b74e9eec413b29f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLINDEXMATERIALEXTPROC</type>
      <name>GLeeFuncPtr_glIndexMaterialEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2e921660a399a8e21c732ea8582c58aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLINDEXFUNCEXTPROC</type>
      <name>GLeeFuncPtr_glIndexFuncEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac8d57b549567109ead401baaf2d88130</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLLOCKARRAYSEXTPROC</type>
      <name>GLeeFuncPtr_glLockArraysEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a40e362dcb71544a741e7ab4cd4b77141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNLOCKARRAYSEXTPROC</type>
      <name>GLeeFuncPtr_glUnlockArraysEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1ca562654512fbb73993e407fda6e85d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCULLPARAMETERDVEXTPROC</type>
      <name>GLeeFuncPtr_glCullParameterdvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a888516000461c6b06f574ac5fda7d3a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCULLPARAMETERFVEXTPROC</type>
      <name>GLeeFuncPtr_glCullParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6bb63eb516df167268f1912f0b3e6ebf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTCOLORMATERIALSGIXPROC</type>
      <name>GLeeFuncPtr_glFragmentColorMaterialSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7d59b2aa73c427f8715825547626576b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTLIGHTFSGIXPROC</type>
      <name>GLeeFuncPtr_glFragmentLightfSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad98b236636853f1a8f5397ceff50886a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTLIGHTFVSGIXPROC</type>
      <name>GLeeFuncPtr_glFragmentLightfvSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ada698269627082dfbfdbc5eaf2eda985</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTLIGHTISGIXPROC</type>
      <name>GLeeFuncPtr_glFragmentLightiSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a137c3adb9fb1d52ec657da0e96baabe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTLIGHTIVSGIXPROC</type>
      <name>GLeeFuncPtr_glFragmentLightivSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abc18c9f19be27e5360afe00364d46f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTLIGHTMODELFSGIXPROC</type>
      <name>GLeeFuncPtr_glFragmentLightModelfSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5d7452646d322d78856e75c63e90c564</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTLIGHTMODELFVSGIXPROC</type>
      <name>GLeeFuncPtr_glFragmentLightModelfvSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a356027018079fb816f553c06182c3f7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTLIGHTMODELISGIXPROC</type>
      <name>GLeeFuncPtr_glFragmentLightModeliSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a36fe199aa828476fcc35f5b208a69a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTLIGHTMODELIVSGIXPROC</type>
      <name>GLeeFuncPtr_glFragmentLightModelivSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab56f3fd1df8efb949d2bbbb89019dd42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTMATERIALFSGIXPROC</type>
      <name>GLeeFuncPtr_glFragmentMaterialfSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afcc66716e8baa354dc8f789cb5dee8e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTMATERIALFVSGIXPROC</type>
      <name>GLeeFuncPtr_glFragmentMaterialfvSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a909b5df47ed1c816ac8b785dd6ecb603</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTMATERIALISGIXPROC</type>
      <name>GLeeFuncPtr_glFragmentMaterialiSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3be62fae5c300ad09be66d3724787dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTMATERIALIVSGIXPROC</type>
      <name>GLeeFuncPtr_glFragmentMaterialivSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a11c57635a1cdba0f96566c4be64beec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETFRAGMENTLIGHTFVSGIXPROC</type>
      <name>GLeeFuncPtr_glGetFragmentLightfvSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3efd91410945bd48fbbaf1262fc0a0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETFRAGMENTLIGHTIVSGIXPROC</type>
      <name>GLeeFuncPtr_glGetFragmentLightivSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a190ba0be06bd22ad101db05760efb4d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETFRAGMENTMATERIALFVSGIXPROC</type>
      <name>GLeeFuncPtr_glGetFragmentMaterialfvSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a18a2638a3289b989803b99a941402bf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETFRAGMENTMATERIALIVSGIXPROC</type>
      <name>GLeeFuncPtr_glGetFragmentMaterialivSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a41ccb8f6b89c9ce2cc8c74338d87a56b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLLIGHTENVISGIXPROC</type>
      <name>GLeeFuncPtr_glLightEnviSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a101e207baae9e5c3b09feae6f1087e8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDRAWRANGEELEMENTSEXTPROC</type>
      <name>GLeeFuncPtr_glDrawRangeElementsEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6fe4bccc96c20b0a8cd4cb3733abc7fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLAPPLYTEXTUREEXTPROC</type>
      <name>GLeeFuncPtr_glApplyTextureEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4fb5ee6baaaf1f0bf72881a83e3d1bbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXTURELIGHTEXTPROC</type>
      <name>GLeeFuncPtr_glTextureLightEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a66005326bf588c64d1f896c4d3e87189</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXTUREMATERIALEXTPROC</type>
      <name>GLeeFuncPtr_glTextureMaterialEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acb4e7f6bd8414138e71cd3ae56815488</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLASYNCMARKERSGIXPROC</type>
      <name>GLeeFuncPtr_glAsyncMarkerSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac8453406133b71ef785f3cc1fad72dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFINISHASYNCSGIXPROC</type>
      <name>GLeeFuncPtr_glFinishAsyncSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3327fd7cdc234fc58d7c5dee2598b6e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPOLLASYNCSGIXPROC</type>
      <name>GLeeFuncPtr_glPollAsyncSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaa5acf4052c02726e6d3c77d51b5eedd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENASYNCMARKERSSGIXPROC</type>
      <name>GLeeFuncPtr_glGenAsyncMarkersSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac1b4e453cf28a588a507382c6568e682</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETEASYNCMARKERSSGIXPROC</type>
      <name>GLeeFuncPtr_glDeleteAsyncMarkersSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ade0489605df9a922d7f25e2fc4a681a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISASYNCMARKERSGIXPROC</type>
      <name>GLeeFuncPtr_glIsAsyncMarkerSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aacf152eb7bbe4acf37d283b3296e3893</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXPOINTERVINTELPROC</type>
      <name>GLeeFuncPtr_glVertexPointervINTEL</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a44efd1eb0968dd9b4b3de4040db5ca39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNORMALPOINTERVINTELPROC</type>
      <name>GLeeFuncPtr_glNormalPointervINTEL</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0bf83744c8a801212b9f1cc3df4f765b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLORPOINTERVINTELPROC</type>
      <name>GLeeFuncPtr_glColorPointervINTEL</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>accb47f264bb65bd3bdf884a5ab3757e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORDPOINTERVINTELPROC</type>
      <name>GLeeFuncPtr_glTexCoordPointervINTEL</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a286451a972b9233607a8685e79cbedbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPIXELTRANSFORMPARAMETERIEXTPROC</type>
      <name>GLeeFuncPtr_glPixelTransformParameteriEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa8cdf91f9457449ff14142497138c983</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPIXELTRANSFORMPARAMETERFEXTPROC</type>
      <name>GLeeFuncPtr_glPixelTransformParameterfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a17e827b82b89a577a64f7751e47da63c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPIXELTRANSFORMPARAMETERIVEXTPROC</type>
      <name>GLeeFuncPtr_glPixelTransformParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa4f9ea9a361562e4c3d60744007f3cd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPIXELTRANSFORMPARAMETERFVEXTPROC</type>
      <name>GLeeFuncPtr_glPixelTransformParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab33a7084fc8a2466d3458fd54e3bf4e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3BEXTPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3bEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a791a399174af07a1177517862507ff5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3BVEXTPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3bvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a12c74c214cd0f38f8f2e881050634c9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3DEXTPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3dEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afe240ae3554d2d45055955345a4eaf54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3DVEXTPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3dvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab1b5d6753005b1b1e22002d8f99bd67e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3FEXTPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3fEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a622635cde741befd3f194c31c6dd4240</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3FVEXTPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab4db569312ef8e1ab9796652e4d68cb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3IEXTPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3iEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afc87a954db12aa86a5f3fb27a157c6d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3IVEXTPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad61cdf83c816088dca661d8692e4f4b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3SEXTPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3sEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac5c33c4c70ae3fd090bacb3bb982cb36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3SVEXTPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3svEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9760f600f7f9f016c72c8d7ca2d5d6d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3UBEXTPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3ubEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7dba1fd168fbcee6c76df48f1def369a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3UBVEXTPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3ubvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa412565092417db35cdb6980518bf727</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3UIEXTPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3e21abdf632e6d4c7150085f0c9a6e56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3UIVEXTPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac759ffaa9aaad7febf6e2f74cc85f693</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3USEXTPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3usEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7347402a2815185a4037c8e1731c669f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3USVEXTPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3usvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a978b26b9fc7a10e8ba257dbf5b9ad393</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLORPOINTEREXTPROC</type>
      <name>GLeeFuncPtr_glSecondaryColorPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a77f92ae3eda22529c0a1b7444c0ded28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXTURENORMALEXTPROC</type>
      <name>GLeeFuncPtr_glTextureNormalEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8394fcb0959454fb97367aa03baf51af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTIDRAWARRAYSEXTPROC</type>
      <name>GLeeFuncPtr_glMultiDrawArraysEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a050f04636f00700aa05c5bebe0b51644</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTIDRAWELEMENTSEXTPROC</type>
      <name>GLeeFuncPtr_glMultiDrawElementsEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab5bb3e546eb8a63f4db265676e8e08e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFOGCOORDFEXTPROC</type>
      <name>GLeeFuncPtr_glFogCoordfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad11c528d6474c6b55f1d78ec9d702427</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFOGCOORDFVEXTPROC</type>
      <name>GLeeFuncPtr_glFogCoordfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adbbef4143bdd387f3839ebcb83f75b53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFOGCOORDDEXTPROC</type>
      <name>GLeeFuncPtr_glFogCoorddEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae97d53efdde4e966c0030f8e2f540676</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFOGCOORDDVEXTPROC</type>
      <name>GLeeFuncPtr_glFogCoorddvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aed5a2b0a2028cc874d5ab7620d9ab4c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFOGCOORDPOINTEREXTPROC</type>
      <name>GLeeFuncPtr_glFogCoordPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2efc5f09e01a0890238e7ef3e32da1ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTANGENT3BEXTPROC</type>
      <name>GLeeFuncPtr_glTangent3bEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2ba5c89dc8c6e5eea4f46801f076f1f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTANGENT3BVEXTPROC</type>
      <name>GLeeFuncPtr_glTangent3bvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1e0df86c4868d66717e3533a31103186</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTANGENT3DEXTPROC</type>
      <name>GLeeFuncPtr_glTangent3dEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9527a4d06df3cfc2dabe895ec5dfb321</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTANGENT3DVEXTPROC</type>
      <name>GLeeFuncPtr_glTangent3dvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2e11eb65163b9d8c84bc71c5c3a931c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTANGENT3FEXTPROC</type>
      <name>GLeeFuncPtr_glTangent3fEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2321948253f5b2e35fb2411bcc0734cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTANGENT3FVEXTPROC</type>
      <name>GLeeFuncPtr_glTangent3fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa9359ef0d62ae933e7bc320f935071cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTANGENT3IEXTPROC</type>
      <name>GLeeFuncPtr_glTangent3iEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4f9216f6081e61311261027994240541</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTANGENT3IVEXTPROC</type>
      <name>GLeeFuncPtr_glTangent3ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5ad13618e28ac4a64deb58a0be4e4978</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTANGENT3SEXTPROC</type>
      <name>GLeeFuncPtr_glTangent3sEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a36d95cec899651ad6438f28b363255f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTANGENT3SVEXTPROC</type>
      <name>GLeeFuncPtr_glTangent3svEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5f352890d2af0f4dbde26d53ded1e429</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINORMAL3BEXTPROC</type>
      <name>GLeeFuncPtr_glBinormal3bEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5c04f02306340ae8e13c86dfe32cfd78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINORMAL3BVEXTPROC</type>
      <name>GLeeFuncPtr_glBinormal3bvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4c0c056c8093d082b97346d828ba8d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINORMAL3DEXTPROC</type>
      <name>GLeeFuncPtr_glBinormal3dEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a68ea850073d9928393ed13a6adb3b0b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINORMAL3DVEXTPROC</type>
      <name>GLeeFuncPtr_glBinormal3dvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0e56dd617f409e694709ed91b4cc04ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINORMAL3FEXTPROC</type>
      <name>GLeeFuncPtr_glBinormal3fEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab1ebc14c77c0b843812efc246241ab0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINORMAL3FVEXTPROC</type>
      <name>GLeeFuncPtr_glBinormal3fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6f0d391d815a2d50102dcb0bb4b92325</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINORMAL3IEXTPROC</type>
      <name>GLeeFuncPtr_glBinormal3iEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4681f1fc5bafbb736a4f79c43c4d27d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINORMAL3IVEXTPROC</type>
      <name>GLeeFuncPtr_glBinormal3ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a49d6ae26cc2eb20ccd6e7ca2dfc41e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINORMAL3SEXTPROC</type>
      <name>GLeeFuncPtr_glBinormal3sEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae09f7796bd6d237629ad5688c0cadd02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINORMAL3SVEXTPROC</type>
      <name>GLeeFuncPtr_glBinormal3svEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae0ce97c1ff8c52507d9170ee289702d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTANGENTPOINTEREXTPROC</type>
      <name>GLeeFuncPtr_glTangentPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a07ce139cc2cb63084e2b38b06f0d1d63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINORMALPOINTEREXTPROC</type>
      <name>GLeeFuncPtr_glBinormalPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a030fc88bcd27e06be7ebcd20ac9eaf38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFINISHTEXTURESUNXPROC</type>
      <name>GLeeFuncPtr_glFinishTextureSUNX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a083557efbc20d4c853f5a1ba0836cf44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGLOBALALPHAFACTORBSUNPROC</type>
      <name>GLeeFuncPtr_glGlobalAlphaFactorbSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa33202543886e03b98a1a9e4a9123b97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGLOBALALPHAFACTORSSUNPROC</type>
      <name>GLeeFuncPtr_glGlobalAlphaFactorsSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4bba2e4e92940302160b1626b025e180</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGLOBALALPHAFACTORISUNPROC</type>
      <name>GLeeFuncPtr_glGlobalAlphaFactoriSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6463f643772fefee204647f035e9b041</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGLOBALALPHAFACTORFSUNPROC</type>
      <name>GLeeFuncPtr_glGlobalAlphaFactorfSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9d432765aafe5e1f50704d4877b61099</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGLOBALALPHAFACTORDSUNPROC</type>
      <name>GLeeFuncPtr_glGlobalAlphaFactordSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad2f50517d6add1f8d208149a5100c1ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGLOBALALPHAFACTORUBSUNPROC</type>
      <name>GLeeFuncPtr_glGlobalAlphaFactorubSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a83df0fa5a2636af22a3a36f71ea723ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGLOBALALPHAFACTORUSSUNPROC</type>
      <name>GLeeFuncPtr_glGlobalAlphaFactorusSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac394baf5c3cb919ccc81e255afc56dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGLOBALALPHAFACTORUISUNPROC</type>
      <name>GLeeFuncPtr_glGlobalAlphaFactoruiSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7a168ffc42af87f93a4b8d9f3b0d39de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEUISUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodeuiSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2c31095f87323ab0dab90bc76a012a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEUSSUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodeusSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab98f76f3a2b296f40b3ce6e1f403ec1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEUBSUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodeubSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4867b211350915c91b6468e57497135a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEUIVSUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodeuivSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a81e6bdc94d3f9dce9cb108ddf83cc919</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEUSVSUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodeusvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6fec9a101065f342d7d54706215b9f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEUBVSUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodeubvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a500b2b098851f49046b3dd4be01b2102</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEPOINTERSUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodePointerSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad98a318d04c42c4471f6cda771eeb690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLOR4UBVERTEX2FSUNPROC</type>
      <name>GLeeFuncPtr_glColor4ubVertex2fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa4f2e0a1db0fb49dae66714966d07cff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLOR4UBVERTEX2FVSUNPROC</type>
      <name>GLeeFuncPtr_glColor4ubVertex2fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9b892825a90138617d7359a25d64177b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLOR4UBVERTEX3FSUNPROC</type>
      <name>GLeeFuncPtr_glColor4ubVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acb5b083847441ac9e444ffff29e8f9a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLOR4UBVERTEX3FVSUNPROC</type>
      <name>GLeeFuncPtr_glColor4ubVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1bbf48931b3fec8c7bce86d5cb221e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLOR3FVERTEX3FSUNPROC</type>
      <name>GLeeFuncPtr_glColor3fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae9d6f893836f4fe986154930c3b22c1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLOR3FVERTEX3FVSUNPROC</type>
      <name>GLeeFuncPtr_glColor3fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acb0359bdfcf0c8e224024ab43efb4b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNORMAL3FVERTEX3FSUNPROC</type>
      <name>GLeeFuncPtr_glNormal3fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2e47aecc24a75b67ac1f6d9ad2c9e542</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNORMAL3FVERTEX3FVSUNPROC</type>
      <name>GLeeFuncPtr_glNormal3fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae316529cae24f9b4ffe6c773bdaffb42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC</type>
      <name>GLeeFuncPtr_glColor4fNormal3fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a086a6ee704343057abcb8531daa7558d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC</type>
      <name>GLeeFuncPtr_glColor4fNormal3fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa25bad4f1ff51cec03ad55213b588732</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORD2FVERTEX3FSUNPROC</type>
      <name>GLeeFuncPtr_glTexCoord2fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af8964bde9b9cf74295816d3813ec160f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORD2FVERTEX3FVSUNPROC</type>
      <name>GLeeFuncPtr_glTexCoord2fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a42f2705d2c88ee8723a76644e08b8f3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORD4FVERTEX4FSUNPROC</type>
      <name>GLeeFuncPtr_glTexCoord4fVertex4fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a788c7f865a55d831b7a4cb5a46c7ae91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORD4FVERTEX4FVSUNPROC</type>
      <name>GLeeFuncPtr_glTexCoord4fVertex4fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a13f14fe6438a5e28533249813efe6fb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC</type>
      <name>GLeeFuncPtr_glTexCoord2fColor4ubVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac9cdfaa362150a3604de74c1d63b5858</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC</type>
      <name>GLeeFuncPtr_glTexCoord2fColor4ubVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae97e5e4cb7002c803bb0783777e9dea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC</type>
      <name>GLeeFuncPtr_glTexCoord2fColor3fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a936d0711137bc28618832a232d26c6d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC</type>
      <name>GLeeFuncPtr_glTexCoord2fColor3fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae0e8500acf35c2996da6f466b5f34d11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC</type>
      <name>GLeeFuncPtr_glTexCoord2fNormal3fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af1bdbde8b5a539d7012b7372ef9e5f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC</type>
      <name>GLeeFuncPtr_glTexCoord2fNormal3fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a91743e3a60ddd348f5373e066bd522a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC</type>
      <name>GLeeFuncPtr_glTexCoord2fColor4fNormal3fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1d7bb375f0773535ad12344d0bf112a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC</type>
      <name>GLeeFuncPtr_glTexCoord2fColor4fNormal3fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a071e78a5790037c0644be29b876c0ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC</type>
      <name>GLeeFuncPtr_glTexCoord4fColor4fNormal3fVertex4fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af3b00e26844b6d306afaa60187b53181</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC</type>
      <name>GLeeFuncPtr_glTexCoord4fColor4fNormal3fVertex4fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a233f0f9d8eb4b79d276754e9a47e648c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodeuiVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab133301afb681f0285cf5a62ce0b2634</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodeuiVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a461e4dcb670e38d0cf2f007dc318a5f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodeuiColor4ubVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1edf3aa302814a0729e45263e8bd808d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodeuiColor4ubVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac285004d040bbd5bb970a29ed468caa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodeuiColor3fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a73c3607ee2c7aec2102b60f977f5bc90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodeuiColor3fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a15c426454bd2654fe0eed38d4c47744f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodeuiNormal3fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af2767977af2e05e6acb0094e0a35629d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodeuiNormal3fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa1a5ab5b126183cc99771d0c52753aff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodeuiColor4fNormal3fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afb5eda448bb1417e1e5abe01d9a337b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodeuiColor4fNormal3fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a91f3599647a991ec427145bb0138a87f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodeuiTexCoord2fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9eefbda608fa410210b2199e99ce686d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodeuiTexCoord2fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2fc0c797b3dba42304ef8546d353ad05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a795ae898f6bf925ccc5d6449674af5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0827beef2237132dadedca682b30de50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a50062eb04c5e19eb3d850eddaf59c39c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC</type>
      <name>GLeeFuncPtr_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a06ac0b6981d0734d17f4cf229f93d4b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBLENDFUNCSEPARATEEXTPROC</type>
      <name>GLeeFuncPtr_glBlendFuncSeparateEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a26719edfea6463c9ddbc5ac1f4e6ed79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXWEIGHTFEXTPROC</type>
      <name>GLeeFuncPtr_glVertexWeightfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a46d1ca6fe39d2b3ed0f60f05a225d6d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXWEIGHTFVEXTPROC</type>
      <name>GLeeFuncPtr_glVertexWeightfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1b3aa99fcd4bb271f2de15760e8de9e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXWEIGHTPOINTEREXTPROC</type>
      <name>GLeeFuncPtr_glVertexWeightPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a69b80f49d50af8c34916bea1fb6b63df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFLUSHVERTEXARRAYRANGENVPROC</type>
      <name>GLeeFuncPtr_glFlushVertexArrayRangeNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab9858f14b423e0bc58ba387ccda33fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXARRAYRANGENVPROC</type>
      <name>GLeeFuncPtr_glVertexArrayRangeNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7a0bdb597825aa79c8359c5cc4c91c23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMBINERPARAMETERFVNVPROC</type>
      <name>GLeeFuncPtr_glCombinerParameterfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae7040b712866d13d6cdb943a6cee20b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMBINERPARAMETERFNVPROC</type>
      <name>GLeeFuncPtr_glCombinerParameterfNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acb4b5e2a4246310bbb2d8728b3469c2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMBINERPARAMETERIVNVPROC</type>
      <name>GLeeFuncPtr_glCombinerParameterivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0a4ad80b41515241d352a669554ed167</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMBINERPARAMETERINVPROC</type>
      <name>GLeeFuncPtr_glCombinerParameteriNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afd247ef5426ad8a36b431fbc415e9b5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMBINERINPUTNVPROC</type>
      <name>GLeeFuncPtr_glCombinerInputNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa12254eaf210826503693c0829e11607</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMBINEROUTPUTNVPROC</type>
      <name>GLeeFuncPtr_glCombinerOutputNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a31c09c9c85adc8421142308af253b2cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFINALCOMBINERINPUTNVPROC</type>
      <name>GLeeFuncPtr_glFinalCombinerInputNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2d6adcf5968fa8a2c804ca6ef80bdcd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCOMBINERINPUTPARAMETERFVNVPROC</type>
      <name>GLeeFuncPtr_glGetCombinerInputParameterfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a81c86dceac916d1a6b31b7b1c8c9a1b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCOMBINERINPUTPARAMETERIVNVPROC</type>
      <name>GLeeFuncPtr_glGetCombinerInputParameterivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa0b005148d7c2c281bb4008344477d9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC</type>
      <name>GLeeFuncPtr_glGetCombinerOutputParameterfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a06258455caa21bdff33d7e2f9c1022d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC</type>
      <name>GLeeFuncPtr_glGetCombinerOutputParameterivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acf2f273ef0046ff28d98a3ef78076e56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC</type>
      <name>GLeeFuncPtr_glGetFinalCombinerInputParameterfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa602d33b76930382c4e1ff259b3a2bbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC</type>
      <name>GLeeFuncPtr_glGetFinalCombinerInputParameterivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0810b91e3f60b3df5f58f04acfd8708e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLRESIZEBUFFERSMESAPROC</type>
      <name>GLeeFuncPtr_glResizeBuffersMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0c3e81f3afa6b1070ef55fa87eb2ce84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2DMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos2dMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af815b7675dc7cbc4a10ccf3f807d9108</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2DVMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos2dvMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2998c3fc854d52b34e3f24a21ff77dc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2FMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos2fMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afd5048422e79dcb2934efab2d86aa9bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2FVMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos2fvMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab3ef213fad619f59a896f4c2db061d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2IMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos2iMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7a2688dfb3e797171cf5333a88166074</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2IVMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos2ivMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adb27b15410ec8273fa0f31528624f402</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2SMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos2sMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa2131855af1cbeb44a76564a6882cc52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS2SVMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos2svMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab19b9a5d4b4021809ab2f73b788e69d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3DMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos3dMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7c2d9c984ab8243a9d01237cd2701607</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3DVMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos3dvMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a767c95a39045c26ec3bb6b233933ee1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3FMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos3fMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae6bcc7a2119afef42ef7f87cdde6a93a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3FVMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos3fvMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0a3a590625320f5044128a0ff2b23a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3IMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos3iMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeae0da84ca616a14d4603740f407e61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3IVMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos3ivMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a42970f25acfe71ecc5466fa69e093951</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3SMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos3sMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af267bb1570ad1f0605f07096d0f8f852</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS3SVMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos3svMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8e8032c88964212c92fc40924a2c0291</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS4DMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos4dMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abf31b52d12db532611cffe8adac78a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS4DVMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos4dvMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>add81af1ad287e7126b40f60a827a7504</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS4FMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos4fMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>accb22606031fdb18a7e1278ae887c85a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS4FVMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos4fvMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8a780aef1b0b2f4859ce15c8275b260a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS4IMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos4iMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa8cbed7ea26d7886e98fdcd8aaf7d557</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS4IVMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos4ivMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af7255f347c5baf03fabc0a8637098da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS4SMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos4sMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a38dc5d897c0ea838ffae85048574122d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWINDOWPOS4SVMESAPROC</type>
      <name>GLeeFuncPtr_glWindowPos4svMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a054dacdc334e2a33a1aa17c8e5190727</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTIMODEDRAWARRAYSIBMPROC</type>
      <name>GLeeFuncPtr_glMultiModeDrawArraysIBM</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac3706dfc16fdd30616ae54b6e24b807f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTIMODEDRAWELEMENTSIBMPROC</type>
      <name>GLeeFuncPtr_glMultiModeDrawElementsIBM</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a31135b26d6131039d216f060469ae59f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLORPOINTERLISTIBMPROC</type>
      <name>GLeeFuncPtr_glColorPointerListIBM</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adf3f1b6f032059697f0b50aa46968b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLORPOINTERLISTIBMPROC</type>
      <name>GLeeFuncPtr_glSecondaryColorPointerListIBM</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab8261d1c5d5d0613e331db769131b40c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLEDGEFLAGPOINTERLISTIBMPROC</type>
      <name>GLeeFuncPtr_glEdgeFlagPointerListIBM</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a603fc26725f7ed200ef44cd71f2b369e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFOGCOORDPOINTERLISTIBMPROC</type>
      <name>GLeeFuncPtr_glFogCoordPointerListIBM</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aecac838d0cf5e9056880e2cf6422ce3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLINDEXPOINTERLISTIBMPROC</type>
      <name>GLeeFuncPtr_glIndexPointerListIBM</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeec9c7cf2344640c899fe1f3c07c8c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNORMALPOINTERLISTIBMPROC</type>
      <name>GLeeFuncPtr_glNormalPointerListIBM</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2d6ac2febffdc5704ce2a7d9b7095647</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORDPOINTERLISTIBMPROC</type>
      <name>GLeeFuncPtr_glTexCoordPointerListIBM</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a75abb93fadf3fa7e31b82bfd577a49b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXPOINTERLISTIBMPROC</type>
      <name>GLeeFuncPtr_glVertexPointerListIBM</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4c2ad40c651b1995e17656f3a109c131</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTBUFFERMASK3DFXPROC</type>
      <name>GLeeFuncPtr_glTbufferMask3DFX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a36fec9b33edbcac5126df2e6043a5b0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSAMPLEMASKEXTPROC</type>
      <name>GLeeFuncPtr_glSampleMaskEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1052cde38a91c0f7fb9ca92d3405aff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSAMPLEPATTERNEXTPROC</type>
      <name>GLeeFuncPtr_glSamplePatternEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8d26492313cea28059eb75d0244b9715</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXTURECOLORMASKSGISPROC</type>
      <name>GLeeFuncPtr_glTextureColorMaskSGIS</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af415fa2b46936c314cf474ff7bb9e6bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETEFENCESNVPROC</type>
      <name>GLeeFuncPtr_glDeleteFencesNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a96857ac0674df581845c9f228ec4a060</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENFENCESNVPROC</type>
      <name>GLeeFuncPtr_glGenFencesNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3ef43a0d07a888e824dde852b96b1a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISFENCENVPROC</type>
      <name>GLeeFuncPtr_glIsFenceNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2702923d57231ee10b61b73ea956405c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTESTFENCENVPROC</type>
      <name>GLeeFuncPtr_glTestFenceNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7c6cfc5a9972f6468647fab5fd954560</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETFENCEIVNVPROC</type>
      <name>GLeeFuncPtr_glGetFenceivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9a563905f1f19b32a33bf7d8bc81f06e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFINISHFENCENVPROC</type>
      <name>GLeeFuncPtr_glFinishFenceNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a343c37840d9b69bc115c8aa770c38196</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSETFENCENVPROC</type>
      <name>GLeeFuncPtr_glSetFenceNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a11993d3ee1d3abcf56ef821e70c401c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMAPCONTROLPOINTSNVPROC</type>
      <name>GLeeFuncPtr_glMapControlPointsNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8459dc7f1023ea78367b04fdeff91c5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMAPPARAMETERIVNVPROC</type>
      <name>GLeeFuncPtr_glMapParameterivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a54c20aa8466406b7dcb6d98983932541</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMAPPARAMETERFVNVPROC</type>
      <name>GLeeFuncPtr_glMapParameterfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a276221d7c11e5da1249b45f076382cab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMAPCONTROLPOINTSNVPROC</type>
      <name>GLeeFuncPtr_glGetMapControlPointsNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a53a0bc30376fbd29046554b5ce2c8552</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMAPPARAMETERIVNVPROC</type>
      <name>GLeeFuncPtr_glGetMapParameterivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8e7b3777b9efb4e563e735c7706c56f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMAPPARAMETERFVNVPROC</type>
      <name>GLeeFuncPtr_glGetMapParameterfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4f852ebe58994933df9ac169039d2ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMAPATTRIBPARAMETERIVNVPROC</type>
      <name>GLeeFuncPtr_glGetMapAttribParameterivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a172c6adc110b2edac841198bb26e9727</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMAPATTRIBPARAMETERFVNVPROC</type>
      <name>GLeeFuncPtr_glGetMapAttribParameterfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeb33764701663da4d340fd8e895ffd4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLEVALMAPSNVPROC</type>
      <name>GLeeFuncPtr_glEvalMapsNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af8ed92c17323fc11102b86865bc72325</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMBINERSTAGEPARAMETERFVNVPROC</type>
      <name>GLeeFuncPtr_glCombinerStageParameterfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa3c00d7d67f3f9058355c91a29411296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC</type>
      <name>GLeeFuncPtr_glGetCombinerStageParameterfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aff227bc4108997658ff0236f1aacc2e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLAREPROGRAMSRESIDENTNVPROC</type>
      <name>GLeeFuncPtr_glAreProgramsResidentNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad8e428a06e61ca700b93ec0736193f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDPROGRAMNVPROC</type>
      <name>GLeeFuncPtr_glBindProgramNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af99a2c6f33fb35216f98fba713dc3d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETEPROGRAMSNVPROC</type>
      <name>GLeeFuncPtr_glDeleteProgramsNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a56e672c2353da27839b4abb067f8cf68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLEXECUTEPROGRAMNVPROC</type>
      <name>GLeeFuncPtr_glExecuteProgramNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab886b101da878c201e5bb1c704ed6612</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENPROGRAMSNVPROC</type>
      <name>GLeeFuncPtr_glGenProgramsNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab5cb16e20079875c775f359877b41189</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETPROGRAMPARAMETERDVNVPROC</type>
      <name>GLeeFuncPtr_glGetProgramParameterdvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a85fb437cdace9e1deb7a602c80f0a9d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETPROGRAMPARAMETERFVNVPROC</type>
      <name>GLeeFuncPtr_glGetProgramParameterfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad3570beed489cc597af8cc5c28154f1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETPROGRAMIVNVPROC</type>
      <name>GLeeFuncPtr_glGetProgramivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa2c2608ac1b1f8bad8f0df871257e44e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETPROGRAMSTRINGNVPROC</type>
      <name>GLeeFuncPtr_glGetProgramStringNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a487c48806efa909557ead5880fdd885f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETTRACKMATRIXIVNVPROC</type>
      <name>GLeeFuncPtr_glGetTrackMatrixivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1f8530d64992e59e62c5ba8a5a71aca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVERTEXATTRIBDVNVPROC</type>
      <name>GLeeFuncPtr_glGetVertexAttribdvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a27f468fdb65f6c2c5b74a865d62ff65d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVERTEXATTRIBFVNVPROC</type>
      <name>GLeeFuncPtr_glGetVertexAttribfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a61929a8fdb02b4529817444c67744d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVERTEXATTRIBIVNVPROC</type>
      <name>GLeeFuncPtr_glGetVertexAttribivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a84a6e4f531c55edd1da6dcb8600b1a8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVERTEXATTRIBPOINTERVNVPROC</type>
      <name>GLeeFuncPtr_glGetVertexAttribPointervNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a39397e3d89947b3c18fb5d327905c0bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISPROGRAMNVPROC</type>
      <name>GLeeFuncPtr_glIsProgramNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3695e2a9192640a1f4b76a0288f98f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLLOADPROGRAMNVPROC</type>
      <name>GLeeFuncPtr_glLoadProgramNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6f2ce135cd9e83f60548f33a25204548</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMPARAMETER4DNVPROC</type>
      <name>GLeeFuncPtr_glProgramParameter4dNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aac9efa3a4760a639ea3a8717aec47a99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMPARAMETER4DVNVPROC</type>
      <name>GLeeFuncPtr_glProgramParameter4dvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abae1b84ddf88a6efbf74ca33d467abdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMPARAMETER4FNVPROC</type>
      <name>GLeeFuncPtr_glProgramParameter4fNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adb0cbffb006cc2f61d0a2339275f3126</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMPARAMETER4FVNVPROC</type>
      <name>GLeeFuncPtr_glProgramParameter4fvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab01157c44519191a6daf1497da154c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMPARAMETERS4DVNVPROC</type>
      <name>GLeeFuncPtr_glProgramParameters4dvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a02df0bf4869566918c94fc8ef1e3f6e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMPARAMETERS4FVNVPROC</type>
      <name>GLeeFuncPtr_glProgramParameters4fvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7a5e3ff1fa1f21680331906172446688</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLREQUESTRESIDENTPROGRAMSNVPROC</type>
      <name>GLeeFuncPtr_glRequestResidentProgramsNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad1c52587d1f3d8a58d5a2d8f3caed442</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTRACKMATRIXNVPROC</type>
      <name>GLeeFuncPtr_glTrackMatrixNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4d7cc15b8dfd9349a1ba7ce31e5dc6b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBPOINTERNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribPointerNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a088a250f38c74c9157232a40fbdb1465</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB1DNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib1dNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae4619dfdc5db9e1fce7b25f5050bdb7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB1DVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib1dvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a619363675be04be280252f4fb92f30bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB1FNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib1fNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a07b7e5e662a5b3bf6c45d1ecf621b7c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB1FVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib1fvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a281d51ff1df91174d706803ea5e70f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB1SNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib1sNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aea9f15c4d23a8c2c06f9c24ba42746bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB1SVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib1svNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af7f8e274b5467aad676e36f216894de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB2DNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib2dNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a38c56eca26567f729d4221f42a7d5713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB2DVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib2dvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8f104f09872426e93f4339344d202b87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB2FNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib2fNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a45b95f1e0a2e1117804047235675fa41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB2FVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib2fvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad5159e8662812553c9faf3753f997999</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB2SNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib2sNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a120ec1245f520dd16812e4d1fcec5d59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB2SVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib2svNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0e4e3636903b109e49c643657f9c6866</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB3DNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib3dNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afcc8b9e865b9c3cd7920c44efc084fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB3DVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib3dvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3a58cf840669648ef8a7342ac94ff2d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB3FNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib3fNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0dc9de589eebb3e8da2d63152c7b797e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB3FVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib3fvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4e9216e855ca1ad2a6a6fc9a8564198f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB3SNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib3sNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3e9423d68667cdf3760acb5d211f86cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB3SVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib3svNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a941a99445d283a5113997e992e562efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4DNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4dNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a338f4fad57838b7305c76150a9b411b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4DVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4dvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeb22b6891c65f1f0969a267254162a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4FNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4fNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aefddc949bc238d0145d239f65067594b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4FVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4fvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9aad4b68e0d208ca9318234516914582</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4SNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4sNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a47f74ec022f0b74ae3fcae7478344faf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4SVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4svNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a55997b4a9e18aa20ed915867113be13b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4UBNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4ubNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a226fe8b4722e0f3beaf3c10c8635e161</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4UBVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4ubvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a096bb5c029020f7deea044b30854a4a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBS1DVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribs1dvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a048593104636a7812e8a3e1a87fd2155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBS1FVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribs1fvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a894c28a3c8c2e5a578b4d4f959677d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBS1SVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribs1svNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af74d09aaac7f3806f310b96dbe1d1351</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBS2DVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribs2dvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac6adde34039d3cd5d111fd92526705b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBS2FVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribs2fvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a91cfb517c4f567c86ae92e79a89f8e0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBS2SVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribs2svNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afdb6130525455bac0ba476d2d4a406a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBS3DVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribs3dvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a24fe9f5e6e33b88452d97fc2c7a96afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBS3FVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribs3fvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5ffe7f00f9df8498d02ce285112992e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBS3SVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribs3svNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a258dcbc2cebb05898a8ce1c99ca3b441</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBS4DVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribs4dvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a98d877fb2297dbb33dfd7611b851ee90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBS4FVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribs4fvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9a9f2b6dbd31e4df11a04be1d0fe527f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBS4SVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribs4svNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1d0e9c5ee371be762e39a954b08fb53e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBS4UBVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribs4ubvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a608195879aee605d01ff2cd769533d1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXBUMPPARAMETERIVATIPROC</type>
      <name>GLeeFuncPtr_glTexBumpParameterivATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a304c0dc966d15ecb5431977802b2829d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXBUMPPARAMETERFVATIPROC</type>
      <name>GLeeFuncPtr_glTexBumpParameterfvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab09c9ce19fbc4fdd44f0ec3585e3f792</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETTEXBUMPPARAMETERIVATIPROC</type>
      <name>GLeeFuncPtr_glGetTexBumpParameterivATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a01ccca9f06d4c9a26412c8b7226a2d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETTEXBUMPPARAMETERFVATIPROC</type>
      <name>GLeeFuncPtr_glGetTexBumpParameterfvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a81f8cbe142fba338e68e1bb50604b22c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENFRAGMENTSHADERSATIPROC</type>
      <name>GLeeFuncPtr_glGenFragmentShadersATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9b0596e398bd9d654205d745ef697771</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDFRAGMENTSHADERATIPROC</type>
      <name>GLeeFuncPtr_glBindFragmentShaderATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5133e3054b00a53fde2c920a2f3c3a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETEFRAGMENTSHADERATIPROC</type>
      <name>GLeeFuncPtr_glDeleteFragmentShaderATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a450a0f9acf7f3323c5dc9cadaf1ca9a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBEGINFRAGMENTSHADERATIPROC</type>
      <name>GLeeFuncPtr_glBeginFragmentShaderATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6121bf3be0ed354a5377ec042850fcbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLENDFRAGMENTSHADERATIPROC</type>
      <name>GLeeFuncPtr_glEndFragmentShaderATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a58be48bd199578df552103f72e1bc4d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPASSTEXCOORDATIPROC</type>
      <name>GLeeFuncPtr_glPassTexCoordATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5b56677a1b2d9c2e505bdf45b01308f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSAMPLEMAPATIPROC</type>
      <name>GLeeFuncPtr_glSampleMapATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a43a0b8b1af64ec8ecdb002416d4e7896</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLORFRAGMENTOP1ATIPROC</type>
      <name>GLeeFuncPtr_glColorFragmentOp1ATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7d2af3f8756d63fd2b787e3f029d7fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLORFRAGMENTOP2ATIPROC</type>
      <name>GLeeFuncPtr_glColorFragmentOp2ATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ada710967f6a1149998c4ca77faa3136f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLORFRAGMENTOP3ATIPROC</type>
      <name>GLeeFuncPtr_glColorFragmentOp3ATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afb6ef0797b020755170cd17d51b73a5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLALPHAFRAGMENTOP1ATIPROC</type>
      <name>GLeeFuncPtr_glAlphaFragmentOp1ATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a40c8f942f7566ca676bc43e99c65f18d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLALPHAFRAGMENTOP2ATIPROC</type>
      <name>GLeeFuncPtr_glAlphaFragmentOp2ATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a75a6fe032e0dd944bef8864aed9c5861</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLALPHAFRAGMENTOP3ATIPROC</type>
      <name>GLeeFuncPtr_glAlphaFragmentOp3ATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1f3f3425a3a7d3fe1383b61e8e531324</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSETFRAGMENTSHADERCONSTANTATIPROC</type>
      <name>GLeeFuncPtr_glSetFragmentShaderConstantATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aca12569fc08cd04eb864cd1a0c01e455</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPNTRIANGLESIATIPROC</type>
      <name>GLeeFuncPtr_glPNTrianglesiATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a375ed24220820eaec9a2672edf689071</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPNTRIANGLESFATIPROC</type>
      <name>GLeeFuncPtr_glPNTrianglesfATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa82c23620d72adde3f7604a1a310306a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNEWOBJECTBUFFERATIPROC</type>
      <name>GLeeFuncPtr_glNewObjectBufferATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a53bf35adc2334d856d4cacef0c762670</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISOBJECTBUFFERATIPROC</type>
      <name>GLeeFuncPtr_glIsObjectBufferATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a685bed5d32c9c73789f13136b58dab87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUPDATEOBJECTBUFFERATIPROC</type>
      <name>GLeeFuncPtr_glUpdateObjectBufferATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acf6bc004b1cbbdd83b823c80f7f96e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETOBJECTBUFFERFVATIPROC</type>
      <name>GLeeFuncPtr_glGetObjectBufferfvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3a431a038b6ae11c33aa2571555be295</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETOBJECTBUFFERIVATIPROC</type>
      <name>GLeeFuncPtr_glGetObjectBufferivATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a311270bf01f3962a5a2889fd4cc9a444</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFREEOBJECTBUFFERATIPROC</type>
      <name>GLeeFuncPtr_glFreeObjectBufferATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7e8a8d2664c479e6b37e3ed27d1b9a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLARRAYOBJECTATIPROC</type>
      <name>GLeeFuncPtr_glArrayObjectATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9300c0a00e231d50cf0fb84a1935e408</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETARRAYOBJECTFVATIPROC</type>
      <name>GLeeFuncPtr_glGetArrayObjectfvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad71255a374d18a8104032e2a0cd706db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETARRAYOBJECTIVATIPROC</type>
      <name>GLeeFuncPtr_glGetArrayObjectivATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9b8564e1d6c523bc6c6a21aff312efad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVARIANTARRAYOBJECTATIPROC</type>
      <name>GLeeFuncPtr_glVariantArrayObjectATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeedee17ae50956f3f2ae99a7cd572fd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVARIANTARRAYOBJECTFVATIPROC</type>
      <name>GLeeFuncPtr_glGetVariantArrayObjectfvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a441897b7d236ec7820b9b021e204f44d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVARIANTARRAYOBJECTIVATIPROC</type>
      <name>GLeeFuncPtr_glGetVariantArrayObjectivATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a28d880e65f27956eec08b25b151cfff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBEGINVERTEXSHADEREXTPROC</type>
      <name>GLeeFuncPtr_glBeginVertexShaderEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a40d21b2c4860b204cf05b68c68392833</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLENDVERTEXSHADEREXTPROC</type>
      <name>GLeeFuncPtr_glEndVertexShaderEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab5030501921facfdfcaf4ae5538bb967</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDVERTEXSHADEREXTPROC</type>
      <name>GLeeFuncPtr_glBindVertexShaderEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aae814113085c9f735b09073ff57d7acb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENVERTEXSHADERSEXTPROC</type>
      <name>GLeeFuncPtr_glGenVertexShadersEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6fcc3fe79ef091a388f3cff38fcbcfa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETEVERTEXSHADEREXTPROC</type>
      <name>GLeeFuncPtr_glDeleteVertexShaderEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7cd588c920394d7220b44df98d97d6aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSHADEROP1EXTPROC</type>
      <name>GLeeFuncPtr_glShaderOp1EXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aace46a4cc1008b3397c0fe63d057a281</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSHADEROP2EXTPROC</type>
      <name>GLeeFuncPtr_glShaderOp2EXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9211bab3b7620c4184663b5f0328583e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSHADEROP3EXTPROC</type>
      <name>GLeeFuncPtr_glShaderOp3EXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a75bd24ed33736002236e1f8fba741069</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSWIZZLEEXTPROC</type>
      <name>GLeeFuncPtr_glSwizzleEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa06a7c2319abda5a5c2337e94da38b36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLWRITEMASKEXTPROC</type>
      <name>GLeeFuncPtr_glWriteMaskEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3c6b84ff773d380e025b9fdf2f5dda34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLINSERTCOMPONENTEXTPROC</type>
      <name>GLeeFuncPtr_glInsertComponentEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a05556b637d5ed2bc35e2c1594399d013</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLEXTRACTCOMPONENTEXTPROC</type>
      <name>GLeeFuncPtr_glExtractComponentEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2baa4ab40ab56caf85b79ca668d28fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENSYMBOLSEXTPROC</type>
      <name>GLeeFuncPtr_glGenSymbolsEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a92df01d6819d0fb4ff73b3f4c7fd31df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSETINVARIANTEXTPROC</type>
      <name>GLeeFuncPtr_glSetInvariantEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac1bf455599081dcf9a747d6d3624fb85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSETLOCALCONSTANTEXTPROC</type>
      <name>GLeeFuncPtr_glSetLocalConstantEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a364584564af2cc27eca8f1200a09bfea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVARIANTBVEXTPROC</type>
      <name>GLeeFuncPtr_glVariantbvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a59fdbef2995f5c54730b972ff6dfbaa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVARIANTSVEXTPROC</type>
      <name>GLeeFuncPtr_glVariantsvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a12bb6937d69c9524d57239de3d1d0b7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVARIANTIVEXTPROC</type>
      <name>GLeeFuncPtr_glVariantivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a49dd416ed8a5ad8075a55ea71d287d33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVARIANTFVEXTPROC</type>
      <name>GLeeFuncPtr_glVariantfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abb9bf67d67b6d7cfb597d9cc311f5bae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVARIANTDVEXTPROC</type>
      <name>GLeeFuncPtr_glVariantdvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8d161a77bbbdda715be09c166c232130</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVARIANTUBVEXTPROC</type>
      <name>GLeeFuncPtr_glVariantubvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a09239aa4c16e34214cfc7141ccba63ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVARIANTUSVEXTPROC</type>
      <name>GLeeFuncPtr_glVariantusvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac11f070eb07b4c612cad415e0768327d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVARIANTUIVEXTPROC</type>
      <name>GLeeFuncPtr_glVariantuivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7c19d2a5cb821b60c18706eaa63d4e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVARIANTPOINTEREXTPROC</type>
      <name>GLeeFuncPtr_glVariantPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a547fa0c2976e9695a1385f8ad106b5f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLENABLEVARIANTCLIENTSTATEEXTPROC</type>
      <name>GLeeFuncPtr_glEnableVariantClientStateEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a495de943ed2e86cdd9a99274973fd4fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDISABLEVARIANTCLIENTSTATEEXTPROC</type>
      <name>GLeeFuncPtr_glDisableVariantClientStateEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adab96d29c5ff93ce9ef340a2e4f03a8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDLIGHTPARAMETEREXTPROC</type>
      <name>GLeeFuncPtr_glBindLightParameterEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7c77d68a4cff08ca1add6f30df16e456</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDMATERIALPARAMETEREXTPROC</type>
      <name>GLeeFuncPtr_glBindMaterialParameterEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1343d430c31d8412bf0eaafba5f55031</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDTEXGENPARAMETEREXTPROC</type>
      <name>GLeeFuncPtr_glBindTexGenParameterEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa300861901d4fc25d1d1a6a1e61e1f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDTEXTUREUNITPARAMETEREXTPROC</type>
      <name>GLeeFuncPtr_glBindTextureUnitParameterEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa69ac127caf49a603cd6c159497d6952</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDPARAMETEREXTPROC</type>
      <name>GLeeFuncPtr_glBindParameterEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a28ce500bf0d3f39520bf2518be870d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISVARIANTENABLEDEXTPROC</type>
      <name>GLeeFuncPtr_glIsVariantEnabledEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac3131b059fd88dd2b989e2562256355f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVARIANTBOOLEANVEXTPROC</type>
      <name>GLeeFuncPtr_glGetVariantBooleanvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8d0eabfbdcf044e9adc80d43a7107427</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVARIANTINTEGERVEXTPROC</type>
      <name>GLeeFuncPtr_glGetVariantIntegervEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7dfe197baa980db1cf0aac8ee5b94569</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVARIANTFLOATVEXTPROC</type>
      <name>GLeeFuncPtr_glGetVariantFloatvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7cd89e651a1381e4ee20b72323ea512e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVARIANTPOINTERVEXTPROC</type>
      <name>GLeeFuncPtr_glGetVariantPointervEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1c2dab252492117387b8c618989907ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETINVARIANTBOOLEANVEXTPROC</type>
      <name>GLeeFuncPtr_glGetInvariantBooleanvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9bb6a8ab5deebd0f1f065f07d2438a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETINVARIANTINTEGERVEXTPROC</type>
      <name>GLeeFuncPtr_glGetInvariantIntegervEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abb94286ddb8211b0ffba4c65f837ac5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETINVARIANTFLOATVEXTPROC</type>
      <name>GLeeFuncPtr_glGetInvariantFloatvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a79bd2ddd95b229a7544c9d4f12088c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETLOCALCONSTANTBOOLEANVEXTPROC</type>
      <name>GLeeFuncPtr_glGetLocalConstantBooleanvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3e01a74d8f4cee88e9ca1c2c788e9ba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETLOCALCONSTANTINTEGERVEXTPROC</type>
      <name>GLeeFuncPtr_glGetLocalConstantIntegervEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8e7067cfaef49b6ca6d1ef7762d6b4ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETLOCALCONSTANTFLOATVEXTPROC</type>
      <name>GLeeFuncPtr_glGetLocalConstantFloatvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac47dd0ec3ed32171c54f8cd82eb8f9df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM1SATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream1sATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5f5e72e95e25ccc43658aaf60775580e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM1SVATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream1svATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5097b03582a2395bee0d0439cfd62402</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM1IATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream1iATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa8caf230afa6210cd66f62dc8f2812ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM1IVATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream1ivATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae2191edd0c88f4cf3128d4dbed165062</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM1FATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream1fATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a78c04c09054aa41be459b6f0ac1e750f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM1FVATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream1fvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2199e37fe48d50f8bbb53faa27bbd28e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM1DATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream1dATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0a7866070e7b7162021f9bb3628ec19b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM1DVATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream1dvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aea74528bb255b59dcf9b256466100e3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM2SATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream2sATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7478597dd555a23f1df5040b42d6305f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM2SVATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream2svATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a799f35e7f76ddfdc52b2e0f59934f2d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM2IATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream2iATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af5482796e0095a834488a97fce415e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM2IVATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream2ivATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6bc7a93065da9ab8da08e84edc4246be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM2FATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream2fATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6d85681ef5477d573494bfdfd6dd4965</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM2FVATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream2fvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae2812b84f91b13001c7b14074d47b2cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM2DATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream2dATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a821dd4f8df70076ce9d3bea776de4a8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM2DVATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream2dvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4551114d0de980136b9bae84178a6037</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM3SATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream3sATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8f612b6735651c56beaf2c1ad8fe5c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM3SVATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream3svATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a924639566929b726407fa2e69b291349</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM3IATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream3iATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5f8acabc92682b970113fa75adfa1371</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM3IVATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream3ivATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad14ce1e485d8c8687c0111fa61601f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM3FATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream3fATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1ae5c82885a83bd9d6f3e8c4863395e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM3FVATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream3fvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3878ee676e74a99c5b80bdc8af676ebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM3DATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream3dATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab76f2915594fe194d8da7c79d54022ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM3DVATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream3dvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a230b58cf7feff9118778bb8d144bd9a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM4SATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream4sATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4248b4b0241ff5960aebe13e06d41b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM4SVATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream4svATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0fdb5dda62df0320bfa14ea066e07d3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM4IATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream4iATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a85613bf605f90725fdc23319b61166bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM4IVATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream4ivATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adb2980f8e75bdc5d9950f9514cf34ce9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM4FATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream4fATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2526bd8fe6196a4e8250242dcd3acf58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM4FVATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream4fvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4d895eaef9520a3e57d826d1dbbe9c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM4DATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream4dATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae2113f3f5b58b09202838dbfc4a427e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXSTREAM4DVATIPROC</type>
      <name>GLeeFuncPtr_glVertexStream4dvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeb8335f30a766f5c2717eaf7d5fa807c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNORMALSTREAM3BATIPROC</type>
      <name>GLeeFuncPtr_glNormalStream3bATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a56d43b0339becb9fb13d223d5910d9f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNORMALSTREAM3BVATIPROC</type>
      <name>GLeeFuncPtr_glNormalStream3bvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa5874a2452e4ac916ecedad197572cce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNORMALSTREAM3SATIPROC</type>
      <name>GLeeFuncPtr_glNormalStream3sATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa5aa4067b4794f1225367336b6b31c8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNORMALSTREAM3SVATIPROC</type>
      <name>GLeeFuncPtr_glNormalStream3svATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a52208e51f389d14d40cc0dac4ac348a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNORMALSTREAM3IATIPROC</type>
      <name>GLeeFuncPtr_glNormalStream3iATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3c8013bd891cbbc04aa6f293a4513781</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNORMALSTREAM3IVATIPROC</type>
      <name>GLeeFuncPtr_glNormalStream3ivATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afd4043d7a97117ffb127d27a71a1ee0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNORMALSTREAM3FATIPROC</type>
      <name>GLeeFuncPtr_glNormalStream3fATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a36150f41d6cbf6ae2b1bcf77ef414668</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNORMALSTREAM3FVATIPROC</type>
      <name>GLeeFuncPtr_glNormalStream3fvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a64ea4981367e3b6843718f421a32f639</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNORMALSTREAM3DATIPROC</type>
      <name>GLeeFuncPtr_glNormalStream3dATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac2704accf7ea67633c5b2425e6f60551</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNORMALSTREAM3DVATIPROC</type>
      <name>GLeeFuncPtr_glNormalStream3dvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab8c736f16385e2df2e0c0881acc20d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCLIENTACTIVEVERTEXSTREAMATIPROC</type>
      <name>GLeeFuncPtr_glClientActiveVertexStreamATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa6d76c7255b0c199f4b3aec13e8718d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXBLENDENVIATIPROC</type>
      <name>GLeeFuncPtr_glVertexBlendEnviATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adbff5927785594977bcf3a068b64ccc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXBLENDENVFATIPROC</type>
      <name>GLeeFuncPtr_glVertexBlendEnvfATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af2bccfd376450b0cddc975168016e1c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLELEMENTPOINTERATIPROC</type>
      <name>GLeeFuncPtr_glElementPointerATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a805c0e6406285e676eaa6a5217fdc716</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDRAWELEMENTARRAYATIPROC</type>
      <name>GLeeFuncPtr_glDrawElementArrayATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a01fcf03e28ee541d9bc1fe0569547bdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDRAWRANGEELEMENTARRAYATIPROC</type>
      <name>GLeeFuncPtr_glDrawRangeElementArrayATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8b95a142ad2a886fc097353f58809320</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDRAWMESHARRAYSSUNPROC</type>
      <name>GLeeFuncPtr_glDrawMeshArraysSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abdf62b8af29770a5a140fb38abf96a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENOCCLUSIONQUERIESNVPROC</type>
      <name>GLeeFuncPtr_glGenOcclusionQueriesNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a721fb25fdd0b037d20b40ca7fd13f0d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETEOCCLUSIONQUERIESNVPROC</type>
      <name>GLeeFuncPtr_glDeleteOcclusionQueriesNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa19d4b8b370de69c99fd744c71953424</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISOCCLUSIONQUERYNVPROC</type>
      <name>GLeeFuncPtr_glIsOcclusionQueryNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa390761cf750d8b4996cb1db6d9a1820</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBEGINOCCLUSIONQUERYNVPROC</type>
      <name>GLeeFuncPtr_glBeginOcclusionQueryNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1304bc966e299823ed058959779231ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLENDOCCLUSIONQUERYNVPROC</type>
      <name>GLeeFuncPtr_glEndOcclusionQueryNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>add1c0197a48746e4bdefc59abad67fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETOCCLUSIONQUERYIVNVPROC</type>
      <name>GLeeFuncPtr_glGetOcclusionQueryivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a39bd5ea1a3dd7daae3aab7d51cdac05d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETOCCLUSIONQUERYUIVNVPROC</type>
      <name>GLeeFuncPtr_glGetOcclusionQueryuivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5ff9bc690360a9b1d1d5a85e99e9f922</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPOINTPARAMETERINVPROC</type>
      <name>GLeeFuncPtr_glPointParameteriNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a90fce70bf85d68efc6a4e6d79b74eb65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPOINTPARAMETERIVNVPROC</type>
      <name>GLeeFuncPtr_glPointParameterivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a89a61b90231b65dd6ba69a25d6ba4e5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLACTIVESTENCILFACEEXTPROC</type>
      <name>GLeeFuncPtr_glActiveStencilFaceEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5791abd5fb678b645a795bcad7773ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLELEMENTPOINTERAPPLEPROC</type>
      <name>GLeeFuncPtr_glElementPointerAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a928155f4dceea5e4daf8b6d212f561e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDRAWELEMENTARRAYAPPLEPROC</type>
      <name>GLeeFuncPtr_glDrawElementArrayAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaf672cd79fdd782e46dd27f7f10448f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDRAWRANGEELEMENTARRAYAPPLEPROC</type>
      <name>GLeeFuncPtr_glDrawRangeElementArrayAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a913c406f18c5892b7de7a4e5da5c8f8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTIDRAWELEMENTARRAYAPPLEPROC</type>
      <name>GLeeFuncPtr_glMultiDrawElementArrayAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4aff322f525ff2ab838b40bcf537cdef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC</type>
      <name>GLeeFuncPtr_glMultiDrawRangeElementArrayAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9228825ffc8f8caa1aed0e8fce557907</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENFENCESAPPLEPROC</type>
      <name>GLeeFuncPtr_glGenFencesAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab65f49cb79598bff1c2a59b4192f80f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETEFENCESAPPLEPROC</type>
      <name>GLeeFuncPtr_glDeleteFencesAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad49d8b89574219b7825b2a276cc19626</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSETFENCEAPPLEPROC</type>
      <name>GLeeFuncPtr_glSetFenceAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a554b5624ec6afd826caf09574d336b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISFENCEAPPLEPROC</type>
      <name>GLeeFuncPtr_glIsFenceAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a29bea6d9106573b0ab31d5cd17caf290</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTESTFENCEAPPLEPROC</type>
      <name>GLeeFuncPtr_glTestFenceAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af1bd829c1687f85a89598d8e7cd525f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFINISHFENCEAPPLEPROC</type>
      <name>GLeeFuncPtr_glFinishFenceAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a55d26a2a224a58d818da923e52d104cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTESTOBJECTAPPLEPROC</type>
      <name>GLeeFuncPtr_glTestObjectAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6b95ebe2ff818f2d051cf21f30812be1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFINISHOBJECTAPPLEPROC</type>
      <name>GLeeFuncPtr_glFinishObjectAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a26442a5ba07ecbf10d2f7dacfb6dd76c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDVERTEXARRAYAPPLEPROC</type>
      <name>GLeeFuncPtr_glBindVertexArrayAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0ce6ca81d4dcd8f452a84bef68be344a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETEVERTEXARRAYSAPPLEPROC</type>
      <name>GLeeFuncPtr_glDeleteVertexArraysAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae9a204742bd495a90592bb93fb89be12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENVERTEXARRAYSAPPLEPROC</type>
      <name>GLeeFuncPtr_glGenVertexArraysAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8cede075744c7233bef006552f3cda84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISVERTEXARRAYAPPLEPROC</type>
      <name>GLeeFuncPtr_glIsVertexArrayAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3f2bb733a5301705223a6c9213a716bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXARRAYRANGEAPPLEPROC</type>
      <name>GLeeFuncPtr_glVertexArrayRangeAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a84b0310301196157f392ba4f6843cf23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC</type>
      <name>GLeeFuncPtr_glFlushVertexArrayRangeAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abe4d7bf401e59ff24a040d2ae5cb6077</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXARRAYPARAMETERIAPPLEPROC</type>
      <name>GLeeFuncPtr_glVertexArrayParameteriAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5610dc22d5d2f197ff98c8943bf5fd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDRAWBUFFERSATIPROC</type>
      <name>GLeeFuncPtr_glDrawBuffersATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a73e9d8e6bd32e668f186bfa4f211b03b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMNAMEDPARAMETER4FNVPROC</type>
      <name>GLeeFuncPtr_glProgramNamedParameter4fNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab47e365d9f0e81c601c6a6fcb3c88521</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMNAMEDPARAMETER4DNVPROC</type>
      <name>GLeeFuncPtr_glProgramNamedParameter4dNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad7226771dcd7a0c0df627916fde33570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMNAMEDPARAMETER4FVNVPROC</type>
      <name>GLeeFuncPtr_glProgramNamedParameter4fvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9cbd437ecb1fdb04b74d38cc08cd664f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMNAMEDPARAMETER4DVNVPROC</type>
      <name>GLeeFuncPtr_glProgramNamedParameter4dvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a176a359e2e7f438a0d578e6473076d40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC</type>
      <name>GLeeFuncPtr_glGetProgramNamedParameterfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab4047e4302436688c65abb5cfca9cd44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC</type>
      <name>GLeeFuncPtr_glGetProgramNamedParameterdvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae8a9d3fa50ddaeaee52cf9881504aa05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEX2HNVPROC</type>
      <name>GLeeFuncPtr_glVertex2hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a71d82cf6090477bd109df8edc7b4fa69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEX2HVNVPROC</type>
      <name>GLeeFuncPtr_glVertex2hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6eef9210115cb4fa6aea373e374c684f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEX3HNVPROC</type>
      <name>GLeeFuncPtr_glVertex3hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a80b447d2ea57d5241e1580d4aec998ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEX3HVNVPROC</type>
      <name>GLeeFuncPtr_glVertex3hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0c78e7920aa40b10de454ea52adfec12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEX4HNVPROC</type>
      <name>GLeeFuncPtr_glVertex4hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afb28b982794410933b0862e715a54f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEX4HVNVPROC</type>
      <name>GLeeFuncPtr_glVertex4hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a95c98a4b2a258dceb00242995c57fef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNORMAL3HNVPROC</type>
      <name>GLeeFuncPtr_glNormal3hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aef3b92ea9ee27b514857d9bf35a62870</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNORMAL3HVNVPROC</type>
      <name>GLeeFuncPtr_glNormal3hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a65685838f9e98ed0deb945a16de4af34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLOR3HNVPROC</type>
      <name>GLeeFuncPtr_glColor3hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0318c222708a618b995dacb2110e07f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLOR3HVNVPROC</type>
      <name>GLeeFuncPtr_glColor3hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a58bab34b22728739e4c3a478e0aa0f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLOR4HNVPROC</type>
      <name>GLeeFuncPtr_glColor4hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad09c9bfa18eab4d563d1269c6a297021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLOR4HVNVPROC</type>
      <name>GLeeFuncPtr_glColor4hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a748e3e3622909bc10aeb3acf62616c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORD1HNVPROC</type>
      <name>GLeeFuncPtr_glTexCoord1hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a643c8eefd75b1dc34b6e0a976991f7c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORD1HVNVPROC</type>
      <name>GLeeFuncPtr_glTexCoord1hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abfc923ec44e3482cebc4da947f0f60a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORD2HNVPROC</type>
      <name>GLeeFuncPtr_glTexCoord2hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaec5af1d7c4d5c1bb9fa6b398d135dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORD2HVNVPROC</type>
      <name>GLeeFuncPtr_glTexCoord2hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeeabd94bed2909951924d5c4316fed74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORD3HNVPROC</type>
      <name>GLeeFuncPtr_glTexCoord3hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa0731d21695591cf865558f5016f0db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORD3HVNVPROC</type>
      <name>GLeeFuncPtr_glTexCoord3hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3204ec7e1a6e431bef8bab1d2d12e900</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORD4HNVPROC</type>
      <name>GLeeFuncPtr_glTexCoord4hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afefa832f4a159f9f5b61638c1f6e694b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXCOORD4HVNVPROC</type>
      <name>GLeeFuncPtr_glTexCoord4hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a256edd394adf18ce9536fdd3c857629e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD1HNVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord1hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a31bb5ce0038f6483e10ece1da8aade3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD1HVNVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord1hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acaa6a02a2e17f951e80f12cc0cd9a5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD2HNVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord2hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adb10f069eff6a1487273e9c7f59f9a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD2HVNVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord2hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a49b179e4ebc8f15b1921cc36434f9805</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD3HNVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord3hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a53dbc7f0cd9892af548cff752e59379a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD3HVNVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord3hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a287875b7db254f8047b6d4138a0d64bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD4HNVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord4hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad00f65283c77ba768951281cd54508c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORD4HVNVPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoord4hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9959495472f439c38195a325907aa9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFOGCOORDHNVPROC</type>
      <name>GLeeFuncPtr_glFogCoordhNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaf7482fd46951dfbb37556476985254f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFOGCOORDHVNVPROC</type>
      <name>GLeeFuncPtr_glFogCoordhvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a73f5ba14c273579223d6242ef7a476e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3HNVPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab8d191b644f182a2ba4bebe27959a191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSECONDARYCOLOR3HVNVPROC</type>
      <name>GLeeFuncPtr_glSecondaryColor3hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a732f68a853771bd07c41bda949854f85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXWEIGHTHNVPROC</type>
      <name>GLeeFuncPtr_glVertexWeighthNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a24032cc7d95a162a735e91be6e6cca3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXWEIGHTHVNVPROC</type>
      <name>GLeeFuncPtr_glVertexWeighthvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af7470fc61077ee62284923890ff9a7ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB1HNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib1hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abbe99f0d761e56f5fdbf1e00968e929a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB1HVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib1hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aba9566df9c6f3292d4cc726c282661c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB2HNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib2hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9bfa654ca63175636387335d9b3c8354</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB2HVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib2hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaea1c48c978910d43cf6c93c208af0ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB3HNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib3hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a54b46cc9e602788a447c8372fe517a9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB3HVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib3hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3900f65ab28b4d186d93af650e11226b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4HNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4hNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af12e2e4f2b89a054e3d520fa0d438cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIB4HVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttrib4hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afa86bb67e43da07c5337d977b56e8553</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBS1HVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribs1hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a694cf675db56d921f5a0b6f16c82212b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBS2HVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribs2hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aebed5a6a7308edeb4a4a9a98a0885a02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBS3HVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribs3hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7f97fabcad537905cf8582245f62546f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBS4HVNVPROC</type>
      <name>GLeeFuncPtr_glVertexAttribs4hvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a06a73799ed08fc18706222345289cee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPIXELDATARANGENVPROC</type>
      <name>GLeeFuncPtr_glPixelDataRangeNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af6495c4ee130649c2c38b3bc3408c79d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFLUSHPIXELDATARANGENVPROC</type>
      <name>GLeeFuncPtr_glFlushPixelDataRangeNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a95e2a029897b3e53a18f1e03cd2a848e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPRIMITIVERESTARTNVPROC</type>
      <name>GLeeFuncPtr_glPrimitiveRestartNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a059313e268de788c4a0235e65ee8d31d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPRIMITIVERESTARTINDEXNVPROC</type>
      <name>GLeeFuncPtr_glPrimitiveRestartIndexNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a46027afa0441dfdbdbd6f4308d7be538</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMAPOBJECTBUFFERATIPROC</type>
      <name>GLeeFuncPtr_glMapObjectBufferATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7329ef66d6aec0746eac6aadeab9fe32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNMAPOBJECTBUFFERATIPROC</type>
      <name>GLeeFuncPtr_glUnmapObjectBufferATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3b52052b954a03716e0a90399a7b4c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSTENCILOPSEPARATEATIPROC</type>
      <name>GLeeFuncPtr_glStencilOpSeparateATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa8591ed842e3083bdf6d449a06632a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSTENCILFUNCSEPARATEATIPROC</type>
      <name>GLeeFuncPtr_glStencilFuncSeparateATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3a41bb052ef6dda34351169ea80e05de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBARRAYOBJECTATIPROC</type>
      <name>GLeeFuncPtr_glVertexAttribArrayObjectATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac95615e01404d361a1e5ed654256e7ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC</type>
      <name>GLeeFuncPtr_glGetVertexAttribArrayObjectfvATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac8f0bc48c9d5453b463314b43a28da54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC</type>
      <name>GLeeFuncPtr_glGetVertexAttribArrayObjectivATI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad2ed71dee0e04a9c0a498b3ff5062d12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDEPTHBOUNDSEXTPROC</type>
      <name>GLeeFuncPtr_glDepthBoundsEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a043f8e206d3893ca1e0c372c28c30584</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBLENDEQUATIONSEPARATEEXTPROC</type>
      <name>GLeeFuncPtr_glBlendEquationSeparateEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3f1a2837cc2c011ba3e33125997c2972</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISRENDERBUFFEREXTPROC</type>
      <name>GLeeFuncPtr_glIsRenderbufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a87ec92e4ffb10e78ff39cd6fce64af62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDRENDERBUFFEREXTPROC</type>
      <name>GLeeFuncPtr_glBindRenderbufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>accb80f28510b405db0578e6ba71fe6c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETERENDERBUFFERSEXTPROC</type>
      <name>GLeeFuncPtr_glDeleteRenderbuffersEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5fb4c010db8d0925f5059aa762a7a3f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENRENDERBUFFERSEXTPROC</type>
      <name>GLeeFuncPtr_glGenRenderbuffersEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae3232cb99b5a7ebba002bb936d43ca3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLRENDERBUFFERSTORAGEEXTPROC</type>
      <name>GLeeFuncPtr_glRenderbufferStorageEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a98d5c71f9fdddc03b67b51df8c406fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETRENDERBUFFERPARAMETERIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetRenderbufferParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae03e19f3676f163f987cbb60e232b5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISFRAMEBUFFEREXTPROC</type>
      <name>GLeeFuncPtr_glIsFramebufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3ee3ed8c86e6451343db6b1674c33e12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDFRAMEBUFFEREXTPROC</type>
      <name>GLeeFuncPtr_glBindFramebufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa49267ddcff57030e46654603341f263</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETEFRAMEBUFFERSEXTPROC</type>
      <name>GLeeFuncPtr_glDeleteFramebuffersEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0450344338f20f68e8fa364dc2f8d8dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENFRAMEBUFFERSEXTPROC</type>
      <name>GLeeFuncPtr_glGenFramebuffersEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a851fb1cecbaed41c026ea660a671fdfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCHECKFRAMEBUFFERSTATUSEXTPROC</type>
      <name>GLeeFuncPtr_glCheckFramebufferStatusEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1d1a5b779913dd3f7c8329ff2580a038</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAMEBUFFERTEXTURE1DEXTPROC</type>
      <name>GLeeFuncPtr_glFramebufferTexture1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac7e0ba9bd634987948a4fdcb86324121</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAMEBUFFERTEXTURE2DEXTPROC</type>
      <name>GLeeFuncPtr_glFramebufferTexture2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8b7dbed89fbf09f5d90d3c5b95af3550</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAMEBUFFERTEXTURE3DEXTPROC</type>
      <name>GLeeFuncPtr_glFramebufferTexture3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aed49c6da2a204b30b2255cde2eec54bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAMEBUFFERRENDERBUFFEREXTPROC</type>
      <name>GLeeFuncPtr_glFramebufferRenderbufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a76986a45b9d28076a58677de0016d539</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetFramebufferAttachmentParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a84da5fc2d3b7aad8b682988a6372719a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENERATEMIPMAPEXTPROC</type>
      <name>GLeeFuncPtr_glGenerateMipmapEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa8ed4e47dcb64ed808e816da0abbd5c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSTRINGMARKERGREMEDYPROC</type>
      <name>GLeeFuncPtr_glStringMarkerGREMEDY</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa9b2fd1186e56cc10bfea403af313eaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSTENCILCLEARTAGEXTPROC</type>
      <name>GLeeFuncPtr_glStencilClearTagEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2f37520930696c7edb0ab28a92aa5b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBLITFRAMEBUFFEREXTPROC</type>
      <name>GLeeFuncPtr_glBlitFramebufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6207311071e2445d38200b8617f8c65b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC</type>
      <name>GLeeFuncPtr_glRenderbufferStorageMultisampleEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abe764daa6bfdea0b86d3dae73e6c6ff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETQUERYOBJECTI64VEXTPROC</type>
      <name>GLeeFuncPtr_glGetQueryObjecti64vEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7520efd62c12a5765245725b9478567e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETQUERYOBJECTUI64VEXTPROC</type>
      <name>GLeeFuncPtr_glGetQueryObjectui64vEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3914d1a9abe80783b7362ba2c52c22ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMENVPARAMETERS4FVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramEnvParameters4fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acd6bc74832e8c46e75ab371eaa58ef76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramLocalParameters4fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a20b0517f13c03b610aab9b28af9200c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBUFFERPARAMETERIAPPLEPROC</type>
      <name>GLeeFuncPtr_glBufferParameteriAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a153e7dfdcffcdcd0b30745eeef8901d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC</type>
      <name>GLeeFuncPtr_glFlushMappedBufferRangeAPPLE</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab1b1273e17f2ac4294decc909d87314e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETUNIFORMUIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetUniformuivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>addc7efd4e6a6d4faf2f77a5e529cec94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDFRAGDATALOCATIONEXTPROC</type>
      <name>GLeeFuncPtr_glBindFragDataLocationEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1f9bd3a9ae1cb88fb39e0e28b6a7d268</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETFRAGDATALOCATIONEXTPROC</type>
      <name>GLeeFuncPtr_glGetFragDataLocationEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a665dcec293a9e1c17fb3ff9719abeda9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM1UIEXTPROC</type>
      <name>GLeeFuncPtr_glUniform1uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a796d66344edd3e84e4e623359aa8c93f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM2UIEXTPROC</type>
      <name>GLeeFuncPtr_glUniform2uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0f8aff84df5de82da47c91a60249dacf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM3UIEXTPROC</type>
      <name>GLeeFuncPtr_glUniform3uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a92b889b6385531a54af17527a99b612a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM4UIEXTPROC</type>
      <name>GLeeFuncPtr_glUniform4uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac00f884d11b78631ae9d07ee17e3a07b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM1UIVEXTPROC</type>
      <name>GLeeFuncPtr_glUniform1uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9ca1010ec2d50886ce4028e709cc37f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM2UIVEXTPROC</type>
      <name>GLeeFuncPtr_glUniform2uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abe64a7620fc88354e14ef95dec0615cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM3UIVEXTPROC</type>
      <name>GLeeFuncPtr_glUniform3uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aee08880ef703b7420777eaa38337530a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORM4UIVEXTPROC</type>
      <name>GLeeFuncPtr_glUniform4uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af807804850e810c52224d5d450a5b910</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDRAWARRAYSINSTANCEDEXTPROC</type>
      <name>GLeeFuncPtr_glDrawArraysInstancedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a54da70aa8248c34c5a747df3f9d21c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDRAWELEMENTSINSTANCEDEXTPROC</type>
      <name>GLeeFuncPtr_glDrawElementsInstancedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a80f13e701b84dce509d05990904627bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXBUFFEREXTPROC</type>
      <name>GLeeFuncPtr_glTexBufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af455416fa5e39ebebebaec8f42516cd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDEPTHRANGEDNVPROC</type>
      <name>GLeeFuncPtr_glDepthRangedNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aad61e8ea3b8e2c99c61ea10c4150e093</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCLEARDEPTHDNVPROC</type>
      <name>GLeeFuncPtr_glClearDepthdNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0b954944cde63d7c3bddb638542d48d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDEPTHBOUNDSDNVPROC</type>
      <name>GLeeFuncPtr_glDepthBoundsdNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a325fc5e71b5d7c078439a4ec281837a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC</type>
      <name>GLeeFuncPtr_glRenderbufferStorageMultisampleCoverageNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5db91846cb82f56377951481aad4a4d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMBUFFERPARAMETERSFVNVPROC</type>
      <name>GLeeFuncPtr_glProgramBufferParametersfvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a888738f0b25a235c07189c725c773e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC</type>
      <name>GLeeFuncPtr_glProgramBufferParametersIivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>addf825c7ddb431c1086e74fb49c20ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC</type>
      <name>GLeeFuncPtr_glProgramBufferParametersIuivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae0efdf51fac87fb5d791699480b11996</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOLORMASKINDEXEDEXTPROC</type>
      <name>GLeeFuncPtr_glColorMaskIndexedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a38ec7447131f3bb4c21c55fb2641974d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETBOOLEANINDEXEDVEXTPROC</type>
      <name>GLeeFuncPtr_glGetBooleanIndexedvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ade139396ddb86b2b3c350941d60b5744</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETINTEGERINDEXEDVEXTPROC</type>
      <name>GLeeFuncPtr_glGetIntegerIndexedvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a50f7b8ffbf5a45ff95608950e17d1149</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLENABLEINDEXEDEXTPROC</type>
      <name>GLeeFuncPtr_glEnableIndexedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7ff52b1d0f8aa688d8f6ee64b0a5c301</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDISABLEINDEXEDEXTPROC</type>
      <name>GLeeFuncPtr_glDisableIndexedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a303ff5d59c5c13650e4091d88477b088</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISENABLEDINDEXEDEXTPROC</type>
      <name>GLeeFuncPtr_glIsEnabledIndexedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abc51a5d14a7a16df12037cb7cea707a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBEGINTRANSFORMFEEDBACKNVPROC</type>
      <name>GLeeFuncPtr_glBeginTransformFeedbackNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a83b5ac3b2a8814c9c654ae357614772a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLENDTRANSFORMFEEDBACKNVPROC</type>
      <name>GLeeFuncPtr_glEndTransformFeedbackNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa23edf700729b98539568362000f36da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTRANSFORMFEEDBACKATTRIBSNVPROC</type>
      <name>GLeeFuncPtr_glTransformFeedbackAttribsNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaef8e50f9ed201945c4619c0d8f8f756</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDBUFFERRANGENVPROC</type>
      <name>GLeeFuncPtr_glBindBufferRangeNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a80f84721e9996e9072aad61d8be3ced9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDBUFFEROFFSETNVPROC</type>
      <name>GLeeFuncPtr_glBindBufferOffsetNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae6d1edcc4d902e71e2a214829ae1af97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDBUFFERBASENVPROC</type>
      <name>GLeeFuncPtr_glBindBufferBaseNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae247ea123e5cf5fcacadf096f21baa17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTRANSFORMFEEDBACKVARYINGSNVPROC</type>
      <name>GLeeFuncPtr_glTransformFeedbackVaryingsNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9922b1350b344c562f9c6f020870b9c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLACTIVEVARYINGNVPROC</type>
      <name>GLeeFuncPtr_glActiveVaryingNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8335f123a85442735d63f4dd79aa5ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVARYINGLOCATIONNVPROC</type>
      <name>GLeeFuncPtr_glGetVaryingLocationNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6b9a98f8d671bd528da66d3c7dcb1f6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETACTIVEVARYINGNVPROC</type>
      <name>GLeeFuncPtr_glGetActiveVaryingNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7e31a705581d119163993f9576bac0df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC</type>
      <name>GLeeFuncPtr_glGetTransformFeedbackVaryingNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1e566444201e4e8243ba45362c32f0d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNIFORMBUFFEREXTPROC</type>
      <name>GLeeFuncPtr_glUniformBufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ade1e925b698d25d339003981481fc250</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETUNIFORMBUFFERSIZEEXTPROC</type>
      <name>GLeeFuncPtr_glGetUniformBufferSizeEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1692132dc8f4ba1e17ec22b572c6aa80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETUNIFORMOFFSETEXTPROC</type>
      <name>GLeeFuncPtr_glGetUniformOffsetEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad0172f17fb382fd2318780d1644a90f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXPARAMETERIIVEXTPROC</type>
      <name>GLeeFuncPtr_glTexParameterIivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afd81038f16db24b765f4e627c945a77f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXPARAMETERIUIVEXTPROC</type>
      <name>GLeeFuncPtr_glTexParameterIuivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4d3bfc88b8a140bca6cf6c07f1fbff1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETTEXPARAMETERIIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetTexParameterIivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1b84d7e45e554b2cb4f8a9ab10879d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETTEXPARAMETERIUIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetTexParameterIuivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad94838eb7a9363bbb5fd63b437f57dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCLEARCOLORIIEXTPROC</type>
      <name>GLeeFuncPtr_glClearColorIiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af5b748934745ca11618d127d99380cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCLEARCOLORIUIEXTPROC</type>
      <name>GLeeFuncPtr_glClearColorIuiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1d5f96e151c75fc7f64cc26734e9e79b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAMETERMINATORGREMEDYPROC</type>
      <name>GLeeFuncPtr_glFrameTerminatorGREMEDY</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a57d3483c10b9f2029007042e441db93f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBEGINCONDITIONALRENDERNVPROC</type>
      <name>GLeeFuncPtr_glBeginConditionalRenderNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9e43b5c361e3ad136343380895d700a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLENDCONDITIONALRENDERNVPROC</type>
      <name>GLeeFuncPtr_glEndConditionalRenderNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a53e35e37aecdca99b8da68e4f6cd5c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBEGINTRANSFORMFEEDBACKEXTPROC</type>
      <name>GLeeFuncPtr_glBeginTransformFeedbackEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a71bb2076a573b9e06109e35a04514965</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLENDTRANSFORMFEEDBACKEXTPROC</type>
      <name>GLeeFuncPtr_glEndTransformFeedbackEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8609eaf2b94e2e523752d8915185ce14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDBUFFERRANGEEXTPROC</type>
      <name>GLeeFuncPtr_glBindBufferRangeEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a50904e7c861835b19a9d219559810e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDBUFFEROFFSETEXTPROC</type>
      <name>GLeeFuncPtr_glBindBufferOffsetEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a840bb649dbd9117054a69b9f115a9d1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDBUFFERBASEEXTPROC</type>
      <name>GLeeFuncPtr_glBindBufferBaseEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a27f8ce394944ce40afaa7d486b3bb7d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC</type>
      <name>GLeeFuncPtr_glTransformFeedbackVaryingsEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a21ffc9848c8cf630a3f8ddcd53f4e5bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC</type>
      <name>GLeeFuncPtr_glGetTransformFeedbackVaryingEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a990d80a9d6b3f56d5b76a9a87e8e1c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCLIENTATTRIBDEFAULTEXTPROC</type>
      <name>GLeeFuncPtr_glClientAttribDefaultEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a779303e8203d080af40cd9dc3e176bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC</type>
      <name>GLeeFuncPtr_glPushClientAttribDefaultEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adccbebac015f4c7265c56b41b953a339</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXLOADFEXTPROC</type>
      <name>GLeeFuncPtr_glMatrixLoadfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1d746a80b2ca8e6dfd8afdf82289ab41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXLOADDEXTPROC</type>
      <name>GLeeFuncPtr_glMatrixLoaddEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1ce73ef72250e730996863f7b5fa4c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXMULTFEXTPROC</type>
      <name>GLeeFuncPtr_glMatrixMultfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a92a45f8f6095622fbf3688c88cdb9675</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXMULTDEXTPROC</type>
      <name>GLeeFuncPtr_glMatrixMultdEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a528924959505254efbd2e2c8b6de369f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXLOADIDENTITYEXTPROC</type>
      <name>GLeeFuncPtr_glMatrixLoadIdentityEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa3d7fcec290d664d4285ef73541746da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXROTATEFEXTPROC</type>
      <name>GLeeFuncPtr_glMatrixRotatefEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af762aaaca0c8fd2282493ae02af6db93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXROTATEDEXTPROC</type>
      <name>GLeeFuncPtr_glMatrixRotatedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a89bafacc0054403781242613cee1153f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXSCALEFEXTPROC</type>
      <name>GLeeFuncPtr_glMatrixScalefEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7449c655d9f2c239a32fb357521324d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXSCALEDEXTPROC</type>
      <name>GLeeFuncPtr_glMatrixScaledEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a14b664f7f40c798d6aa2f4c32ed4899f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXTRANSLATEFEXTPROC</type>
      <name>GLeeFuncPtr_glMatrixTranslatefEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab7b881a2edd9492c57dd795119748c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXTRANSLATEDEXTPROC</type>
      <name>GLeeFuncPtr_glMatrixTranslatedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a04492e895a93fc37c605d0324d4f5235</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXFRUSTUMEXTPROC</type>
      <name>GLeeFuncPtr_glMatrixFrustumEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a757b5805551e1e5f271bebfd69ebbca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXORTHOEXTPROC</type>
      <name>GLeeFuncPtr_glMatrixOrthoEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac0607147ecd2085db4a19ca866ae265a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXPOPEXTPROC</type>
      <name>GLeeFuncPtr_glMatrixPopEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4bb9b39e83336ebe5f51400425bbf7ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXPUSHEXTPROC</type>
      <name>GLeeFuncPtr_glMatrixPushEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa63c9cdde61dd1f0d271712fa28a2c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXLOADTRANSPOSEFEXTPROC</type>
      <name>GLeeFuncPtr_glMatrixLoadTransposefEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2ce6a34ba76dc77eb9d68322aef12c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXLOADTRANSPOSEDEXTPROC</type>
      <name>GLeeFuncPtr_glMatrixLoadTransposedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af5fd669009e25ae10008eec9fe6dcfae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXMULTTRANSPOSEFEXTPROC</type>
      <name>GLeeFuncPtr_glMatrixMultTransposefEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab0492c911e0822de525425b312a9820f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMATRIXMULTTRANSPOSEDEXTPROC</type>
      <name>GLeeFuncPtr_glMatrixMultTransposedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeb51f0209345ea9a7f334709ce7b8c73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXTUREPARAMETERFEXTPROC</type>
      <name>GLeeFuncPtr_glTextureParameterfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af45ffa0c326bc26058aa73a69d14c8d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXTUREPARAMETERFVEXTPROC</type>
      <name>GLeeFuncPtr_glTextureParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0a931eccdb94b6ddd3a34e00829f2f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXTUREPARAMETERIEXTPROC</type>
      <name>GLeeFuncPtr_glTextureParameteriEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad96fc93880bed39d861a7cfede7bc409</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXTUREPARAMETERIVEXTPROC</type>
      <name>GLeeFuncPtr_glTextureParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac39e4c5b36e19f39e4802ea4e2c406b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXTUREIMAGE1DEXTPROC</type>
      <name>GLeeFuncPtr_glTextureImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aec8f7222b09d8362283f0266580587a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXTUREIMAGE2DEXTPROC</type>
      <name>GLeeFuncPtr_glTextureImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae64c98c22713404942658fdceceeac8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXTURESUBIMAGE1DEXTPROC</type>
      <name>GLeeFuncPtr_glTextureSubImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a66450e4493002c746d8229aa800cbcbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXTURESUBIMAGE2DEXTPROC</type>
      <name>GLeeFuncPtr_glTextureSubImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4ef760530c5ffdb20052f9e6947a9061</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYTEXTUREIMAGE1DEXTPROC</type>
      <name>GLeeFuncPtr_glCopyTextureImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3936bb9d40bd0e38119fc033447dea16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYTEXTUREIMAGE2DEXTPROC</type>
      <name>GLeeFuncPtr_glCopyTextureImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a089255b09068d584011442dfc03f980e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYTEXTURESUBIMAGE1DEXTPROC</type>
      <name>GLeeFuncPtr_glCopyTextureSubImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a658bffceecca2959f8dac60c672927c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYTEXTURESUBIMAGE2DEXTPROC</type>
      <name>GLeeFuncPtr_glCopyTextureSubImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa4b5b065b8a48cca223bc0e56394cade</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETTEXTUREIMAGEEXTPROC</type>
      <name>GLeeFuncPtr_glGetTextureImageEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a70e000881065d75effd8046809c48565</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETTEXTUREPARAMETERFVEXTPROC</type>
      <name>GLeeFuncPtr_glGetTextureParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac7e1b633e9c378c774a0a8fcb5db442b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETTEXTUREPARAMETERIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetTextureParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1bce1f482e5f6c659131e7473fdcd491</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETTEXTURELEVELPARAMETERFVEXTPROC</type>
      <name>GLeeFuncPtr_glGetTextureLevelParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7902a3e821e68b332346faa707e69b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETTEXTURELEVELPARAMETERIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetTextureLevelParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a768b9e97eb36a2de513fb80afc2b47ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXTUREIMAGE3DEXTPROC</type>
      <name>GLeeFuncPtr_glTextureImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a41a354d13c65c22f72c9522f0717236b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXTURESUBIMAGE3DEXTPROC</type>
      <name>GLeeFuncPtr_glTextureSubImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afb72af6e4557c1c6bbe9c72bbc84c248</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYTEXTURESUBIMAGE3DEXTPROC</type>
      <name>GLeeFuncPtr_glCopyTextureSubImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7880f0c91060009a33a54548195b963a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXPARAMETERFEXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexParameterfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1e1b0dea004ffbac2c0768cb6d3aa128</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXPARAMETERFVEXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a709d8a79791332995c17efab92efc259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXPARAMETERIEXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexParameteriEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab4ea98bf8048ca6c4aeded3532d88e61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXPARAMETERIVEXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7068d3307989d0cb103cece6108273dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXIMAGE1DEXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af8bfccae0fe15dc2f349181c69214d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXIMAGE2DEXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad89d2d8bfc981165935db91a0ac591e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXSUBIMAGE1DEXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexSubImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ababc26bbcb19f8b267f57b05b805e372</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXSUBIMAGE2DEXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexSubImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad5726e840b80b08fe98ad8babc0265b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYMULTITEXIMAGE1DEXTPROC</type>
      <name>GLeeFuncPtr_glCopyMultiTexImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4110582515c5835fd7d0afbc9d928deb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYMULTITEXIMAGE2DEXTPROC</type>
      <name>GLeeFuncPtr_glCopyMultiTexImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad5eab797c43d2c3faa3eb19574bbe7ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC</type>
      <name>GLeeFuncPtr_glCopyMultiTexSubImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a20cc7165f6e02e18c548e8a09595c8b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC</type>
      <name>GLeeFuncPtr_glCopyMultiTexSubImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8d76190a896c48a14324eed7a820b557</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMULTITEXIMAGEEXTPROC</type>
      <name>GLeeFuncPtr_glGetMultiTexImageEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4313d9123b35286a2f83fff5cde9d012</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMULTITEXPARAMETERFVEXTPROC</type>
      <name>GLeeFuncPtr_glGetMultiTexParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af4af9a50b537a845c6dcbd9eeb565958</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMULTITEXPARAMETERIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetMultiTexParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a984556b208fcb44eadabbb61833956db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC</type>
      <name>GLeeFuncPtr_glGetMultiTexLevelParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab4ef6adb6fcebec65eb590f8fa789bcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetMultiTexLevelParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a710adbee7543fdc877ad74e2c0f91fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXIMAGE3DEXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a89098b74ba0da9c9a03937ef38390704</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXSUBIMAGE3DEXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexSubImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a202b3a275248de341c6bbcbb9b70da23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC</type>
      <name>GLeeFuncPtr_glCopyMultiTexSubImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0fd0693dfbad4e27e77030a20e4634bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDMULTITEXTUREEXTPROC</type>
      <name>GLeeFuncPtr_glBindMultiTextureEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad1dfb6681e061045c71fed185f8c8898</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLENABLECLIENTSTATEINDEXEDEXTPROC</type>
      <name>GLeeFuncPtr_glEnableClientStateIndexedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab6ecbac492bc5281d4c2e6da29d491ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDISABLECLIENTSTATEINDEXEDEXTPROC</type>
      <name>GLeeFuncPtr_glDisableClientStateIndexedEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af07d210c67c41a98a3ef13194fc8eca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXCOORDPOINTEREXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexCoordPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab3951a3e7e596c4df6f155a435843bf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXENVFEXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexEnvfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3df9728513fbf30afb234d8a7e97a7fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXENVFVEXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexEnvfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a586f1acf8b2d36021e1794c0ae982f09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXENVIEXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexEnviEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4d875e762e46f3efdf19f6d3706dcd69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXENVIVEXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexEnvivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a87e86206218e0d420ce47b12cc52f32e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXGENDEXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexGendEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7ba55dea5a75375073b1dfa9191c40e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXGENDVEXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexGendvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a89beaf2be9358fe754bf4eec0f1e6a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXGENFEXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexGenfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5056d41b2fb7ca94ec2cf76d56e02cc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXGENFVEXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexGenfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0d666eb2f3add312b7691f172afc3830</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXGENIEXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexGeniEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3625841be25088b50cffaf43e02c832d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXGENIVEXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexGenivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a592ec7e6a7273c3c4d51750243a30cf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMULTITEXENVFVEXTPROC</type>
      <name>GLeeFuncPtr_glGetMultiTexEnvfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a46e9db235d004f0f7dc0073a10dbeba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMULTITEXENVIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetMultiTexEnvivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af480e661d710bf2f30478027cad54168</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMULTITEXGENDVEXTPROC</type>
      <name>GLeeFuncPtr_glGetMultiTexGendvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8995309b3443829ec9fa4a062c3e0def</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMULTITEXGENFVEXTPROC</type>
      <name>GLeeFuncPtr_glGetMultiTexGenfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a81b14199c605f4eccabcda1f42619528</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMULTITEXGENIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetMultiTexGenivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afb58affc977fe5db2db5d302d0d2eabf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETFLOATINDEXEDVEXTPROC</type>
      <name>GLeeFuncPtr_glGetFloatIndexedvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a454ddf32915d11423b44a2a385809e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETDOUBLEINDEXEDVEXTPROC</type>
      <name>GLeeFuncPtr_glGetDoubleIndexedvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9769a3faab7113f5453a29d06b8feb88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETPOINTERINDEXEDVEXTPROC</type>
      <name>GLeeFuncPtr_glGetPointerIndexedvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adb42537affed777ca92e59a6d8d4c0ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC</type>
      <name>GLeeFuncPtr_glCompressedTextureImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6659f198c89a6463071d2ccd75d1bcbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC</type>
      <name>GLeeFuncPtr_glCompressedTextureImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad78ee07e9fc3897eddd8ad1b4f66d8a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC</type>
      <name>GLeeFuncPtr_glCompressedTextureImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a77b2cbd58d4bd23716eaf21e1547707e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC</type>
      <name>GLeeFuncPtr_glCompressedTextureSubImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a926dc3f5cc92a90b34b91db0605470ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC</type>
      <name>GLeeFuncPtr_glCompressedTextureSubImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afbf751d6cf0a8dc34c2cf19883f3b90b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC</type>
      <name>GLeeFuncPtr_glCompressedTextureSubImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aad0890e0b095b5bcd68418f40cce23fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC</type>
      <name>GLeeFuncPtr_glGetCompressedTextureImageEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1112956efbb3a7a32566e2bada2c7bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC</type>
      <name>GLeeFuncPtr_glCompressedMultiTexImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abfc0d860eb7cd5f94e7e6f2cf85f1f6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC</type>
      <name>GLeeFuncPtr_glCompressedMultiTexImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a908ad0496fb0cac3bd849634893e0786</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC</type>
      <name>GLeeFuncPtr_glCompressedMultiTexImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6faf2a2b879eebec1039da37a78a125c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC</type>
      <name>GLeeFuncPtr_glCompressedMultiTexSubImage3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a247542035dbd65e732c119477dc3018d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC</type>
      <name>GLeeFuncPtr_glCompressedMultiTexSubImage2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeea4c88611b04c6e19842eccb078601f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC</type>
      <name>GLeeFuncPtr_glCompressedMultiTexSubImage1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a013cf645c4d9cb134b697008a27beab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC</type>
      <name>GLeeFuncPtr_glGetCompressedMultiTexImageEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4f8366d42a73813e43b7f063841c7eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDPROGRAMSTRINGEXTPROC</type>
      <name>GLeeFuncPtr_glNamedProgramStringEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae908c08c80d2d87ac488cecf323d411d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC</type>
      <name>GLeeFuncPtr_glNamedProgramLocalParameter4dEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a514d41dc4a9adadee9a409a70b4102fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC</type>
      <name>GLeeFuncPtr_glNamedProgramLocalParameter4dvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae964884b36082a7a9731cb1b895b974a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC</type>
      <name>GLeeFuncPtr_glNamedProgramLocalParameter4fEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ade09d83577ac05b59a25d42559422230</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC</type>
      <name>GLeeFuncPtr_glNamedProgramLocalParameter4fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ada7a71a2bff6c3eff97dddc377fcd0af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC</type>
      <name>GLeeFuncPtr_glGetNamedProgramLocalParameterdvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afd6684998672204b9e6afe9b202c05c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC</type>
      <name>GLeeFuncPtr_glGetNamedProgramLocalParameterfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6c22cfeda23050fe6404bb7424fb5ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETNAMEDPROGRAMIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetNamedProgramivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a249f4e5645b097c35450656a61fd881f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETNAMEDPROGRAMSTRINGEXTPROC</type>
      <name>GLeeFuncPtr_glGetNamedProgramStringEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a67d4d28167fc7cf17e13c633151d1d78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC</type>
      <name>GLeeFuncPtr_glNamedProgramLocalParameters4fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a97e5ef34b0df22743cc9ab6135e09aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC</type>
      <name>GLeeFuncPtr_glNamedProgramLocalParameterI4iEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8f4b5f3387556a9ce055de5f81681065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC</type>
      <name>GLeeFuncPtr_glNamedProgramLocalParameterI4ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a216b8d175db3f7da439b0a490f925c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC</type>
      <name>GLeeFuncPtr_glNamedProgramLocalParametersI4ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6f7aa399ff78cefaaf1f0c2c55bdf2d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC</type>
      <name>GLeeFuncPtr_glNamedProgramLocalParameterI4uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6bebb5ab338cd738cd729a5b1ebf9886</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC</type>
      <name>GLeeFuncPtr_glNamedProgramLocalParameterI4uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8e5ff8213d09630b096698d82175ec79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC</type>
      <name>GLeeFuncPtr_glNamedProgramLocalParametersI4uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8a95974a6cc87bebe505e3cf425194b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetNamedProgramLocalParameterIivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6e4a59d0c8cf33261a54ad7179737d3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetNamedProgramLocalParameterIuivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9d31b4b4b7869932b966bcf21cb751a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXTUREPARAMETERIIVEXTPROC</type>
      <name>GLeeFuncPtr_glTextureParameterIivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4746e6da62f270f7c9d43c5429441c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXTUREPARAMETERIUIVEXTPROC</type>
      <name>GLeeFuncPtr_glTextureParameterIuivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af475c0f09c028140b11bc7b334708607</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETTEXTUREPARAMETERIIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetTextureParameterIivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa0ff2007b149a5b7efa14cf98faffdd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETTEXTUREPARAMETERIUIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetTextureParameterIuivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a916edb01b4bcf34aded77a4fe25768cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXPARAMETERIIVEXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexParameterIivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a80ed5f994025ed59beb2971e4c6a4ef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXPARAMETERIUIVEXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexParameterIuivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4f32141c0e66bff7086df414015f9e2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMULTITEXPARAMETERIIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetMultiTexParameterIivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a20552ff596dd29862a5a9a4ac77089d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMULTITEXPARAMETERIUIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetMultiTexParameterIuivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8dc8cd58bc1814d510a53d49e6465521</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM1FEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform1fEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a94969107461790b3e32c459b1b5412d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM2FEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform2fEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9e150323e85ce154fe985c8df1a81d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM3FEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform3fEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4b2c4e2a822a6c2569d268e26f1b471b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM4FEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform4fEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad59760de0d83509a52e72357a137d6d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM1IEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform1iEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acfd9a81c65a2e3b3eb9012b3a6341b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM2IEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform2iEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa1ed7084b5aa58e89b057b6476b4352e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM3IEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform3iEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4feb9bf9ddfb600dccd13201cdf2fda8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM4IEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform4iEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a44f096115d175d9828c5d1ff26807303</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM1FVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform1fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a541362f6c19b5966a9ccaf4d5ba5eadc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM2FVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform2fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a48d3f7cf41846a724efc60a2dcf89926</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM3FVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform3fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abcbb05bc543a64a081b4e834d4bf73ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM4FVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform4fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad716d0cc5a826e394d136932f9b40c92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM1IVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform1ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a929139efbc0927fef0e5150659346224</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM2IVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform2ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1f2c1894753bb4111b48133a63da9c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM3IVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform3ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab2dafcca15cf632c11f9e7b051a76b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM4IVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform4ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aca9b7ef9c5fa3888f083bdeacb7f81fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniformMatrix2fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0eeb900f1c49df59823879bf1c1c8fcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniformMatrix3fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a570ffbfb87cb439fd5c83faa2a1eaa43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniformMatrix4fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af78bf844ec1ab25730dc85d85bba9e42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniformMatrix2x3fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aadaeeb80fb523c5350b54ddc0d4424d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniformMatrix3x2fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2a20c2c87f7746291fb0a0b50ec698b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniformMatrix2x4fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af948e648ad59d3821db45a1af55a4549</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniformMatrix4x2fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8848963d59b879f490a5f235d89ff5c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniformMatrix3x4fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a804013dfd4e689a08820ba3df2f9d8b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniformMatrix4x3fvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3dc6790bf66ca5d14e37f5037edeebb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM1UIEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform1uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0f3b747e26a7b8797eb3e447d4074580</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM2UIEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform2uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a239c75ebbbb548994ef010320183e82a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM3UIEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform3uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3aca010f7392ef6deb34c1df5e390731</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM4UIEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform4uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3bf3f8910ebd467bddd91999f937d817</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM1UIVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform1uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a67f92beb464e9d5d83cd8df9e28070c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM2UIVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform2uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a23e3ac7b3f34b112a6e3b19d0c0fb3d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM3UIVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform3uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5e95afb18bcb73b19b65de09addd304a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMUNIFORM4UIVEXTPROC</type>
      <name>GLeeFuncPtr_glProgramUniform4uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aed4cef1f75a51503650b21d5351eae22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDBUFFERDATAEXTPROC</type>
      <name>GLeeFuncPtr_glNamedBufferDataEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afe411b69fd75b82fcac40955ded22d12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDBUFFERSUBDATAEXTPROC</type>
      <name>GLeeFuncPtr_glNamedBufferSubDataEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a216875f9afa6a83c35ac693b3194a1ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMAPNAMEDBUFFEREXTPROC</type>
      <name>GLeeFuncPtr_glMapNamedBufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9d4414b4e6a58db6bf7f877e6567d889</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLUNMAPNAMEDBUFFEREXTPROC</type>
      <name>GLeeFuncPtr_glUnmapNamedBufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0ed5c8472610cf37562544c6754e581a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetNamedBufferParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac2608b3ff9b3cbc90d1d11135b80a86a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETNAMEDBUFFERPOINTERVEXTPROC</type>
      <name>GLeeFuncPtr_glGetNamedBufferPointervEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a98c4117fd26515cbc707007ed1b3e582</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETNAMEDBUFFERSUBDATAEXTPROC</type>
      <name>GLeeFuncPtr_glGetNamedBufferSubDataEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a629f7d701fcc54df60ef65f574e145ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXTUREBUFFEREXTPROC</type>
      <name>GLeeFuncPtr_glTextureBufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae65be240d7320b7dcda54b09b99abdc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXBUFFEREXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexBufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5169da7341f8ec657aaa79bc671fe8fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC</type>
      <name>GLeeFuncPtr_glNamedRenderbufferStorageEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8359098408585713d387bb4ec760e8fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetNamedRenderbufferParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4abbf19f9a24ee5cad8b6cdfacb80e2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC</type>
      <name>GLeeFuncPtr_glCheckNamedFramebufferStatusEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae11ab3a15235bada2a5d6728bd622572</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC</type>
      <name>GLeeFuncPtr_glNamedFramebufferTexture1DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5b4fc5f30b5ab3221572e340976891e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC</type>
      <name>GLeeFuncPtr_glNamedFramebufferTexture2DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8a9b84f4c6c19208cc0df022817388d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC</type>
      <name>GLeeFuncPtr_glNamedFramebufferTexture3DEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adf39d6a94fc905330acadaef287c0de8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC</type>
      <name>GLeeFuncPtr_glNamedFramebufferRenderbufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae7dd03494efc567cf239c3baf620b523</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetNamedFramebufferAttachmentParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9ec073fb2ba4a91f3b4d5bdf1a068c78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENERATETEXTUREMIPMAPEXTPROC</type>
      <name>GLeeFuncPtr_glGenerateTextureMipmapEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8a41328502faf48266e00140189c25c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENERATEMULTITEXMIPMAPEXTPROC</type>
      <name>GLeeFuncPtr_glGenerateMultiTexMipmapEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4427bc52b26256269e3e43562741d757</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAMEBUFFERDRAWBUFFEREXTPROC</type>
      <name>GLeeFuncPtr_glFramebufferDrawBufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab1cd2185456675908edd4a38f809f403</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC</type>
      <name>GLeeFuncPtr_glFramebufferDrawBuffersEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af655c1ce9cca45a6957a43cf7b80eaa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAMEBUFFERREADBUFFEREXTPROC</type>
      <name>GLeeFuncPtr_glFramebufferReadBufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab55ed91f80c3fa2da005a084e5ae9b13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetFramebufferParameterivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8fe31ba0f59beb5fee98c9a3f141d1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC</type>
      <name>GLeeFuncPtr_glNamedRenderbufferStorageMultisampleEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a410a0c67782c0b762f20aaca0d034f06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC</type>
      <name>GLeeFuncPtr_glNamedRenderbufferStorageMultisampleCoverageEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af6e71e7b244ae94da5a62db474ddf224</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC</type>
      <name>GLeeFuncPtr_glNamedFramebufferTextureEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af391aeddd7d4b7a1717f5adf04f23f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC</type>
      <name>GLeeFuncPtr_glNamedFramebufferTextureLayerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a51f6a85d7ef4d1ef048b0fda52dd4d18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC</type>
      <name>GLeeFuncPtr_glNamedFramebufferTextureFaceEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac019a8bfcdd63287e130b466b5f12833</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXTURERENDERBUFFEREXTPROC</type>
      <name>GLeeFuncPtr_glTextureRenderbufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8fff908e58278c83583f54ef63a7ea92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLMULTITEXRENDERBUFFEREXTPROC</type>
      <name>GLeeFuncPtr_glMultiTexRenderbufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab3d37d9705a0176d4b7b2803c60c8371</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETMULTISAMPLEFVNVPROC</type>
      <name>GLeeFuncPtr_glGetMultisamplefvNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae4f043398cd9d5e5b8a1d56e35e67ee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLSAMPLEMASKINDEXEDNVPROC</type>
      <name>GLeeFuncPtr_glSampleMaskIndexedNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a019f1d7381b53bd4c672d094abcc08ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLTEXRENDERBUFFERNVPROC</type>
      <name>GLeeFuncPtr_glTexRenderbufferNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1cfdd8b800e7addc91b999abe9a68f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBINDTRANSFORMFEEDBACKNVPROC</type>
      <name>GLeeFuncPtr_glBindTransformFeedbackNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abd4e19a03cfbe8b51bc76bf457a05499</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDELETETRANSFORMFEEDBACKSNVPROC</type>
      <name>GLeeFuncPtr_glDeleteTransformFeedbacksNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae5632c6d110959e2d1c5a09b3a2a0091</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGENTRANSFORMFEEDBACKSNVPROC</type>
      <name>GLeeFuncPtr_glGenTransformFeedbacksNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a63349aa2e77ea1d4314064ff2e685dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLISTRANSFORMFEEDBACKNVPROC</type>
      <name>GLeeFuncPtr_glIsTransformFeedbackNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4cc8325f55a881b18945a3c78b62a915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPAUSETRANSFORMFEEDBACKNVPROC</type>
      <name>GLeeFuncPtr_glPauseTransformFeedbackNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a195a58e278547846d9a4e796bff9a2a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLRESUMETRANSFORMFEEDBACKNVPROC</type>
      <name>GLeeFuncPtr_glResumeTransformFeedbackNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3f5cea1064a8ec29b2cd8b8e6d40fb8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDRAWTRANSFORMFEEDBACKNVPROC</type>
      <name>GLeeFuncPtr_glDrawTransformFeedbackNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac6d45ddf4c4c737a116e29b9a60cb6d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBLENDFUNCSEPARATEINGRPROC</type>
      <name>GLeeFuncPtr_glBlendFuncSeparateINGR</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9368eca9f9323d6107ed0540f67080ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLIGLOOINTERFACESGIXPROC</type>
      <name>GLeeFuncPtr_glIglooInterfaceSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3c2d5d4493d484b27906980943eb43a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTLIGHTMODELIEXTPROC</type>
      <name>GLeeFuncPtr_glFragmentLightModeliEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afdf7f4b8caa779a0b74cc1aeb42a5c77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTLIGHTMODELFEXTPROC</type>
      <name>GLeeFuncPtr_glFragmentLightModelfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1206698a2f2be4cb456919f40db492ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTLIGHTMODELIVEXTPROC</type>
      <name>GLeeFuncPtr_glFragmentLightModelivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afb8b381663f490856b071b1046de1dec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTLIGHTMODELFVEXTPROC</type>
      <name>GLeeFuncPtr_glFragmentLightModelfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a806d524a4ead4ecb9f45062bea1d0f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTLIGHTIEXTPROC</type>
      <name>GLeeFuncPtr_glFragmentLightiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6078bc2f9b28e351e1ef04cb4e42c6ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTLIGHTFEXTPROC</type>
      <name>GLeeFuncPtr_glFragmentLightfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa5b5977c01c84969e0daf385de5097e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTLIGHTIVEXTPROC</type>
      <name>GLeeFuncPtr_glFragmentLightivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3d275383b1c2085ce9a3490990ec471e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTLIGHTFVEXTPROC</type>
      <name>GLeeFuncPtr_glFragmentLightfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9500453393f63fb97d7b9d1e91b196c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETFRAGMENTLIGHTIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetFragmentLightivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4c7e0cd5e80006419ad0f26e8f99f11a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETFRAGMENTLIGHTFVEXTPROC</type>
      <name>GLeeFuncPtr_glGetFragmentLightfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8ad0a1c58fde2d2f4628cbcd3c3dc6b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTMATERIALFEXTPROC</type>
      <name>GLeeFuncPtr_glFragmentMaterialfEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2c5aba74255c1c4b2c1d7721c0f9bbfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTMATERIALIEXTPROC</type>
      <name>GLeeFuncPtr_glFragmentMaterialiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a245136e4ccad700a0773dfea3159cfe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTMATERIALFVEXTPROC</type>
      <name>GLeeFuncPtr_glFragmentMaterialfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa530d70b3e86f091e5e396b5434d6f57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTMATERIALIVEXTPROC</type>
      <name>GLeeFuncPtr_glFragmentMaterialivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae8f0d1c71a6c29c8f564191642baece1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAGMENTCOLORMATERIALEXTPROC</type>
      <name>GLeeFuncPtr_glFragmentColorMaterialEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a09014f66e02931652082dd5964d7737f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETFRAGMENTMATERIALFVEXTPROC</type>
      <name>GLeeFuncPtr_glGetFragmentMaterialfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3082460e51d9a3a31ab476041f523307</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETFRAGMENTMATERIALIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetFragmentMaterialivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a19b9172871e1dd0019f130e5cfd6cf45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLLIGHTENVIEXTPROC</type>
      <name>GLeeFuncPtr_glLightEnviEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a49a1e070fa4e4d88a4d701adf4233b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMPARAMETERIEXTPROC</type>
      <name>GLeeFuncPtr_glProgramParameteriEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6929b9e13c7d518b8fd957752a65f1fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAMEBUFFERTEXTUREEXTPROC</type>
      <name>GLeeFuncPtr_glFramebufferTextureEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a233ae43234da1f30d93b9a70b09dfaa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAMEBUFFERTEXTURELAYEREXTPROC</type>
      <name>GLeeFuncPtr_glFramebufferTextureLayerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5ee89c3ae5e763c1f4f151135b4002d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRAMEBUFFERTEXTUREFACEEXTPROC</type>
      <name>GLeeFuncPtr_glFramebufferTextureFaceEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7933a5f155ebfb38b2a21e669c10ce99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLBEGINSCENEEXTPROC</type>
      <name>GLeeFuncPtr_glBeginSceneEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a224781782f62e5d7e2ebb8002ef35376</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLENDSCENEEXTPROC</type>
      <name>GLeeFuncPtr_glEndSceneEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7a586f0185085a67bb3e6e39df8a0f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMLOCALPARAMETERI4INVPROC</type>
      <name>GLeeFuncPtr_glProgramLocalParameterI4iNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5d414c91770dadb37a2333488fa66337</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMLOCALPARAMETERI4IVNVPROC</type>
      <name>GLeeFuncPtr_glProgramLocalParameterI4ivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a522ff932edb629eda2eef9fdd32cda68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC</type>
      <name>GLeeFuncPtr_glProgramLocalParametersI4ivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab1ddfca07e1c2e57c82af332e2522119</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMLOCALPARAMETERI4UINVPROC</type>
      <name>GLeeFuncPtr_glProgramLocalParameterI4uiNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afc822209bbf75e6f07299ec743d4c597</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC</type>
      <name>GLeeFuncPtr_glProgramLocalParameterI4uivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afa418585f66fb42a3d769af04171459b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC</type>
      <name>GLeeFuncPtr_glProgramLocalParametersI4uivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae6b59bbbdfd15c8229a462d605e10ad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMENVPARAMETERI4INVPROC</type>
      <name>GLeeFuncPtr_glProgramEnvParameterI4iNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6b230573add25ecf154878fd9235b278</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMENVPARAMETERI4IVNVPROC</type>
      <name>GLeeFuncPtr_glProgramEnvParameterI4ivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4a474982b9bbd7f384f56dbf17aa278a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMENVPARAMETERSI4IVNVPROC</type>
      <name>GLeeFuncPtr_glProgramEnvParametersI4ivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aca4d2b6e4c6d101ba899c659feafd498</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMENVPARAMETERI4UINVPROC</type>
      <name>GLeeFuncPtr_glProgramEnvParameterI4uiNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a246e2270f73c1f06af6660aba2d5fa70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMENVPARAMETERI4UIVNVPROC</type>
      <name>GLeeFuncPtr_glProgramEnvParameterI4uivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac83b15d452f0a11e7e13a7ed61dc8777</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLPROGRAMENVPARAMETERSI4UIVNVPROC</type>
      <name>GLeeFuncPtr_glProgramEnvParametersI4uivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a88a831926278ce0cb5a14754d30190e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC</type>
      <name>GLeeFuncPtr_glGetProgramLocalParameterIivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aba4ee6cd593459c3b4baaf23f3f98a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC</type>
      <name>GLeeFuncPtr_glGetProgramLocalParameterIuivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afcb93699e696810637e7cf6e4a32a1de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETPROGRAMENVPARAMETERIIVNVPROC</type>
      <name>GLeeFuncPtr_glGetProgramEnvParameterIivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae26f61cbd58864ff6674f3c6a3db40f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETPROGRAMENVPARAMETERIUIVNVPROC</type>
      <name>GLeeFuncPtr_glGetProgramEnvParameterIuivNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a77d62e24cde62ab1c1a33a6d4986e907</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI2IEXTPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI2iEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab5b69898014708c6d7d07eb08eb94f4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI3IEXTPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI3iEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a69560eeb4c2487e52c0778bb517381a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI4IEXTPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI4iEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3b7ea714980a12debf5e38f4391d8e37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI1UIEXTPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI1uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad774034d7c98e3474d97d4dac3f01f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI2UIEXTPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI2uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a81982ccca4b9fcb76afed933db878ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI3UIEXTPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI3uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad0032b3d010c7430bde7d71f808260eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI4UIEXTPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI4uiEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a855f5e6172edb7c1720e2d02a87d971a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI1IVEXTPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI1ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acc00b31e406286c533380f17fb0309b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI2IVEXTPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI2ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abf6bfd786e944857de2c2392dccb3e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI3IVEXTPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI3ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab5ec649d521b02a39ef6f8beb1945e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI4IVEXTPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI4ivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a795b465e4358144e5f9a6bba35ff161b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI1UIVEXTPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI1uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a71ea846b5da08bd4109d4e3f7ede14eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI2UIVEXTPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI2uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad81c5e2060e4a475ab5f7373e07a5155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI3UIVEXTPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI3uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a25158e694fcdd12482408e1a30a4d5b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI4UIVEXTPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI4uivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a70c2fdedd5488ca882cf75a137d4f785</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI4BVEXTPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI4bvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2d7744c228be58e477cdf52ec692ec22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI4SVEXTPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI4svEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a38515ee46e2f55f5aaebc4b47cf3d7fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI4UBVEXTPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI4ubvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad0118c28320214f04fc9bbf08c3bd9b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBI4USVEXTPROC</type>
      <name>GLeeFuncPtr_glVertexAttribI4usvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a321b6e15949cb14b65e69e92222d3c84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLVERTEXATTRIBIPOINTEREXTPROC</type>
      <name>GLeeFuncPtr_glVertexAttribIPointerEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa7905887ce056ea747000c5f78882903</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVERTEXATTRIBIIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetVertexAttribIivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5867463e91486bf632699dbcab4cf7b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETVERTEXATTRIBIUIVEXTPROC</type>
      <name>GLeeFuncPtr_glGetVertexAttribIuivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aff22c66d32e8db7a4a302240aac62306</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLDEPTHRANGEFOESPROC</type>
      <name>GLeeFuncPtr_glDepthRangefOES</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab7f617597c3ffbfa1d301941a83a5e1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLFRUSTUMFOESPROC</type>
      <name>GLeeFuncPtr_glFrustumfOES</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2b1b5d0a950057fac82e89322655b04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLORTHOFOESPROC</type>
      <name>GLeeFuncPtr_glOrthofOES</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa0c1bafd140b3ca25c7469c0b8ef3f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCLIPPLANEFOESPROC</type>
      <name>GLeeFuncPtr_glClipPlanefOES</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5974042eade711108a9b27015f08a03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLGETCLIPPLANEFOESPROC</type>
      <name>GLeeFuncPtr_glGetClipPlanefOES</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0621da149d2b5414a49274de48d2f6a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLCLEARDEPTHFOESPROC</type>
      <name>GLeeFuncPtr_glClearDepthfOES</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af680691f165e0df3982ffc178137293b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_ARB_buffer_region</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7bad011d549033b75c16ad059917a2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_ARB_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad3f109de8b83330947b03c23ecd33054</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_ARB_extensions_string</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aca63e98a56a6d11ddf8f570ad2c5b43e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_ARB_pixel_format</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8e3a91ecfa5f38732592d538009c1332</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_ARB_make_current_read</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac41ab14a6129f22edd079f00dad04f80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_ARB_pbuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad2334b19c0376dcb001685126b0e1e5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_ARB_render_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac9a16b699ff973a4d30d00096c33abdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_ARB_pixel_format_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa97a41ac56f7dfcbb74538b5ceffe0c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_ARB_create_context</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a68d343a2f51d66a805135f6afed43e1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_EXT_make_current_read</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ada75c3637f10d31bd4f9610d7d515fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_EXT_pixel_format</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a712adb55c429914d5aa575a2d63d920f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_EXT_pbuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3b6ea67e4d5d92d49a64ccbd092ac14b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_EXT_depth_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af9b9f0b1431f3ba5672a58e2f464dc37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_3DFX_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a54713a395b5e1eb1fe192acc4e63e463</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_EXT_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaccc36acd89dc507c3a0cf8d30a44afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_I3D_digital_video_control</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a48867b5958010c79a355a54c51aa3cf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_I3D_gamma</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9286cedb788033d26b9138e2a17ef9d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_I3D_genlock</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af84db5c1491cfd91c594565d73fd206e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_I3D_image_buffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7443ffd83dcb289cf0159ac179d905ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_I3D_swap_frame_lock</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acf4e734d78c55cf00d978d5efd8e53d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_NV_render_depth_texture</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0a0f5c0c5ac9b93b06d943b6ea3fe51f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_NV_render_texture_rectangle</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a78db8ce49f4da68149adbbbdba10d1b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_ATI_pixel_format_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af48689f8e03059403377ddf030712e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_NV_float_buffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a82af239c518f171424faa16120b2c761</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_3DL_stereo_control</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a866f175039a0d274775727366d9f5fb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_EXT_pixel_format_packed_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4efc729615f3fa4bf5b818a4476546d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_EXT_framebuffer_sRGB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a825f472ba493f2aeb34b5fb812292eb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_NV_present_video</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5034fc5ccdf408238fe83cad65a3c3f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_NV_swap_group</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a370c70fc92d3d8e494564705b6065b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_NV_gpu_affinity</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5608a8732b6bcb559ac58e9652ae0141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_EXT_display_color_table</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6823eb033d8b79e847202d7decf21c0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_EXT_extensions_string</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac8db32f0d84b534c6cda8252c1103194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_EXT_swap_control</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1a19d76823dc8cfeed5ab41b9955f2f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_NV_vertex_array_range</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0c07bb68f9c9d51c75f0ca0d10c5067b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_OML_sync_control</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a86909f7714e5dc9052340e179c24be67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_I3D_swap_frame_usage</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa68ed8f66e95079125022cdab9dc75a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_WGL_NV_video_output</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a942dcf2eb718b39c738be702563f0b7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>__GLeeWGLExtensionNames</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a01eb4a3502ab314d6c0b00797115cd78</anchor>
      <arglist>[37][34]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>__GLeeWGLNumExtensions</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a789dbe593e680ddd947b43abadc75541</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLCREATEBUFFERREGIONARBPROC</type>
      <name>GLeeFuncPtr_wglCreateBufferRegionARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abecf77bf2a3215ed924e15cd336bcb31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLDELETEBUFFERREGIONARBPROC</type>
      <name>GLeeFuncPtr_wglDeleteBufferRegionARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4ee7bcf7add3941e3889c6e26100797b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLSAVEBUFFERREGIONARBPROC</type>
      <name>GLeeFuncPtr_wglSaveBufferRegionARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaa2d11b3e9e12008d872bb644989a7e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLRESTOREBUFFERREGIONARBPROC</type>
      <name>GLeeFuncPtr_wglRestoreBufferRegionARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeb148902e20bd5e36f35f8ba31e1c468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETEXTENSIONSSTRINGARBPROC</type>
      <name>GLeeFuncPtr_wglGetExtensionsStringARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a05438a47f8a054c482b741dcecbc04ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETPIXELFORMATATTRIBIVARBPROC</type>
      <name>GLeeFuncPtr_wglGetPixelFormatAttribivARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae40b514457e59f27ca75c9c7f031b531</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETPIXELFORMATATTRIBFVARBPROC</type>
      <name>GLeeFuncPtr_wglGetPixelFormatAttribfvARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a751d0b5463e7061031413a75ef495885</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLCHOOSEPIXELFORMATARBPROC</type>
      <name>GLeeFuncPtr_wglChoosePixelFormatARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9dbe2894c06e415a29a79e838a43efe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLMAKECONTEXTCURRENTARBPROC</type>
      <name>GLeeFuncPtr_wglMakeContextCurrentARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac43f57f29cc9e2829f21d1634433364e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETCURRENTREADDCARBPROC</type>
      <name>GLeeFuncPtr_wglGetCurrentReadDCARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af15f799c9ec9b356e67b56cacf912a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLCREATEPBUFFERARBPROC</type>
      <name>GLeeFuncPtr_wglCreatePbufferARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a910f7d81f4b4bf0a75c4307d7bbbc7bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETPBUFFERDCARBPROC</type>
      <name>GLeeFuncPtr_wglGetPbufferDCARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abc9897c6053b653d65703a76f52c01ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLRELEASEPBUFFERDCARBPROC</type>
      <name>GLeeFuncPtr_wglReleasePbufferDCARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6f321986370ba1cb219ae79bc805f456</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLDESTROYPBUFFERARBPROC</type>
      <name>GLeeFuncPtr_wglDestroyPbufferARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa80cd584619328925feafcce8d0c6e35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLQUERYPBUFFERARBPROC</type>
      <name>GLeeFuncPtr_wglQueryPbufferARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab5a5bbb00de899665c37b884741b55fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLBINDTEXIMAGEARBPROC</type>
      <name>GLeeFuncPtr_wglBindTexImageARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a791024a3a3b7bcafe051cf33ba8400eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLRELEASETEXIMAGEARBPROC</type>
      <name>GLeeFuncPtr_wglReleaseTexImageARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5625fed6265ece94bc41e5d7eadc8b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLSETPBUFFERATTRIBARBPROC</type>
      <name>GLeeFuncPtr_wglSetPbufferAttribARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2cb07e46ccf76370c8715ab95536e1a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLCREATECONTEXTATTRIBSARBPROC</type>
      <name>GLeeFuncPtr_wglCreateContextAttribsARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2d6cc393e4142cbe4eed80f74e16e18d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLMAKECONTEXTCURRENTEXTPROC</type>
      <name>GLeeFuncPtr_wglMakeContextCurrentEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab7f80623830d9ae79b28306f0d50737e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETCURRENTREADDCEXTPROC</type>
      <name>GLeeFuncPtr_wglGetCurrentReadDCEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a06177fff8cf61e06acfa2860b338bf5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETPIXELFORMATATTRIBIVEXTPROC</type>
      <name>GLeeFuncPtr_wglGetPixelFormatAttribivEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a32774726032036f2f3811259e6559cba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETPIXELFORMATATTRIBFVEXTPROC</type>
      <name>GLeeFuncPtr_wglGetPixelFormatAttribfvEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7483c918e24df5bab69a831ef6252619</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLCHOOSEPIXELFORMATEXTPROC</type>
      <name>GLeeFuncPtr_wglChoosePixelFormatEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afa351547d2c753941b8848b4c78da0ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLCREATEPBUFFEREXTPROC</type>
      <name>GLeeFuncPtr_wglCreatePbufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4ec915bf9060862ac2a18c471ffd3ade</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETPBUFFERDCEXTPROC</type>
      <name>GLeeFuncPtr_wglGetPbufferDCEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a391f2746e2cd96e645b581d79b429660</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLRELEASEPBUFFERDCEXTPROC</type>
      <name>GLeeFuncPtr_wglReleasePbufferDCEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8d27e4bbec3be1d985ec24e419e6bfa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLDESTROYPBUFFEREXTPROC</type>
      <name>GLeeFuncPtr_wglDestroyPbufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a47b0e21961de1e6a5cc962f1447ee104</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLQUERYPBUFFEREXTPROC</type>
      <name>GLeeFuncPtr_wglQueryPbufferEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a622979aedf377f9a8e41ecc7a11d0a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETDIGITALVIDEOPARAMETERSI3DPROC</type>
      <name>GLeeFuncPtr_wglGetDigitalVideoParametersI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a79d8aeedbac110adff99c358e6a2de04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLSETDIGITALVIDEOPARAMETERSI3DPROC</type>
      <name>GLeeFuncPtr_wglSetDigitalVideoParametersI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a678aef4507de5744e906ddb168174bc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETGAMMATABLEPARAMETERSI3DPROC</type>
      <name>GLeeFuncPtr_wglGetGammaTableParametersI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae5783ddc4fb772627764fb16d125461c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLSETGAMMATABLEPARAMETERSI3DPROC</type>
      <name>GLeeFuncPtr_wglSetGammaTableParametersI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aef61b674a98d08479e1432814f5a7505</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETGAMMATABLEI3DPROC</type>
      <name>GLeeFuncPtr_wglGetGammaTableI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5fb7ecc8db72381057895a32c34bb7a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLSETGAMMATABLEI3DPROC</type>
      <name>GLeeFuncPtr_wglSetGammaTableI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a03fe3d47a70500940086c70bdebf2265</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLENABLEGENLOCKI3DPROC</type>
      <name>GLeeFuncPtr_wglEnableGenlockI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a15b240f7897b1fcbca6b0c7acd61d89c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLDISABLEGENLOCKI3DPROC</type>
      <name>GLeeFuncPtr_wglDisableGenlockI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeafa5c043dd5b324ca717d09ef904145</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLISENABLEDGENLOCKI3DPROC</type>
      <name>GLeeFuncPtr_wglIsEnabledGenlockI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0a999ea665fd95b5756db028ef9af63a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGENLOCKSOURCEI3DPROC</type>
      <name>GLeeFuncPtr_wglGenlockSourceI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a77b29182fa6db9cf2f616db817368070</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETGENLOCKSOURCEI3DPROC</type>
      <name>GLeeFuncPtr_wglGetGenlockSourceI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a785d4690a196a2834d96ebb313476c33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGENLOCKSOURCEEDGEI3DPROC</type>
      <name>GLeeFuncPtr_wglGenlockSourceEdgeI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abd2289620106b5d8f6158796c2543ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETGENLOCKSOURCEEDGEI3DPROC</type>
      <name>GLeeFuncPtr_wglGetGenlockSourceEdgeI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6051041137a2ad87dba505aad7351c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGENLOCKSAMPLERATEI3DPROC</type>
      <name>GLeeFuncPtr_wglGenlockSampleRateI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae03be19748bd4162d76986e4175abd78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETGENLOCKSAMPLERATEI3DPROC</type>
      <name>GLeeFuncPtr_wglGetGenlockSampleRateI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a19cfcd8c7c6a8b52d67134ba14a7cf66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGENLOCKSOURCEDELAYI3DPROC</type>
      <name>GLeeFuncPtr_wglGenlockSourceDelayI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6a7a11b56c287ca91108fe868f725267</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETGENLOCKSOURCEDELAYI3DPROC</type>
      <name>GLeeFuncPtr_wglGetGenlockSourceDelayI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a72cd8f1d519c26ae5dadb42a57579af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLQUERYGENLOCKMAXSOURCEDELAYI3DPROC</type>
      <name>GLeeFuncPtr_wglQueryGenlockMaxSourceDelayI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac728d9db9c1dcc2635a883306d4b54b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLCREATEIMAGEBUFFERI3DPROC</type>
      <name>GLeeFuncPtr_wglCreateImageBufferI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5bf762af7134146c7fd9b0526152884e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLDESTROYIMAGEBUFFERI3DPROC</type>
      <name>GLeeFuncPtr_wglDestroyImageBufferI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a308ab61c6aebaec27a4ac65c18248e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLASSOCIATEIMAGEBUFFEREVENTSI3DPROC</type>
      <name>GLeeFuncPtr_wglAssociateImageBufferEventsI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab10b3781539dcc0562e52414105e7f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLRELEASEIMAGEBUFFEREVENTSI3DPROC</type>
      <name>GLeeFuncPtr_wglReleaseImageBufferEventsI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6368a09f3b110928b03801f29f3dd32c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLENABLEFRAMELOCKI3DPROC</type>
      <name>GLeeFuncPtr_wglEnableFrameLockI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7b2dea7d2140cf70e43f8ba328f7b91f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLDISABLEFRAMELOCKI3DPROC</type>
      <name>GLeeFuncPtr_wglDisableFrameLockI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7e1efd7399aad6db22017975a98030f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLISENABLEDFRAMELOCKI3DPROC</type>
      <name>GLeeFuncPtr_wglIsEnabledFrameLockI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aff0120f1df1cd757610a9748a60371bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLQUERYFRAMELOCKMASTERI3DPROC</type>
      <name>GLeeFuncPtr_wglQueryFrameLockMasterI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abd114ddafb430e6802432a59f2e83dc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLENUMERATEVIDEODEVICESNVPROC</type>
      <name>GLeeFuncPtr_wglEnumerateVideoDevicesNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a49ff317cd70e9a8eae52fb71e654b2ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLBINDVIDEODEVICENVPROC</type>
      <name>GLeeFuncPtr_wglBindVideoDeviceNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad2e23835174e700e954b6ef8296e32c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLQUERYCURRENTCONTEXTNVPROC</type>
      <name>GLeeFuncPtr_wglQueryCurrentContextNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ace36f8d7bd526300029e82baea6c123c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLJOINSWAPGROUPNVPROC</type>
      <name>GLeeFuncPtr_wglJoinSwapGroupNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a66a46f81006a6dfbe13f301d718d865a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLBINDSWAPBARRIERNVPROC</type>
      <name>GLeeFuncPtr_wglBindSwapBarrierNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6a661d716e555ee14e98a68e80e694c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLQUERYSWAPGROUPNVPROC</type>
      <name>GLeeFuncPtr_wglQuerySwapGroupNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aac032d052da782ebe62f62400b8121bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLQUERYMAXSWAPGROUPSNVPROC</type>
      <name>GLeeFuncPtr_wglQueryMaxSwapGroupsNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7b2cfeab2eca40a321701a3fdea6cc98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLQUERYFRAMECOUNTNVPROC</type>
      <name>GLeeFuncPtr_wglQueryFrameCountNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab59bbbc0f530420156e3e3e878ea30ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLRESETFRAMECOUNTNVPROC</type>
      <name>GLeeFuncPtr_wglResetFrameCountNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abe60cbabfdf804815f8c8a0a3afc4b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLENUMGPUSNVPROC</type>
      <name>GLeeFuncPtr_wglEnumGpusNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae23568fe12e0a1dc16d8c237aa7b4f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLENUMGPUDEVICESNVPROC</type>
      <name>GLeeFuncPtr_wglEnumGpuDevicesNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2e9f58c02590995bc47744fc510a6cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLCREATEAFFINITYDCNVPROC</type>
      <name>GLeeFuncPtr_wglCreateAffinityDCNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac2188f3329d9e8858148f0f23397ba7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLENUMGPUSFROMAFFINITYDCNVPROC</type>
      <name>GLeeFuncPtr_wglEnumGpusFromAffinityDCNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5fe5db48d6c6dc31ba0b505419705142</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLDELETEDCNVPROC</type>
      <name>GLeeFuncPtr_wglDeleteDCNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9058a4f3cc3a5e9ea525d409459d98fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLCREATEDISPLAYCOLORTABLEEXTPROC</type>
      <name>GLeeFuncPtr_wglCreateDisplayColorTableEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1b47bb8e4a71ee79fabe58988f1a3912</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLLOADDISPLAYCOLORTABLEEXTPROC</type>
      <name>GLeeFuncPtr_wglLoadDisplayColorTableEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab692bf0b1770798aa90c993194084305</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLBINDDISPLAYCOLORTABLEEXTPROC</type>
      <name>GLeeFuncPtr_wglBindDisplayColorTableEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae4034a6654d0a7cf4d319365f25fd370</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLDESTROYDISPLAYCOLORTABLEEXTPROC</type>
      <name>GLeeFuncPtr_wglDestroyDisplayColorTableEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3b687de63236b15be50ae08844203b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETEXTENSIONSSTRINGEXTPROC</type>
      <name>GLeeFuncPtr_wglGetExtensionsStringEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acc31efe11cb2bdec9c4b8adf5a433009</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLSWAPINTERVALEXTPROC</type>
      <name>GLeeFuncPtr_wglSwapIntervalEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a403018e794293fda39914466419725a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETSWAPINTERVALEXTPROC</type>
      <name>GLeeFuncPtr_wglGetSwapIntervalEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5e98fff12d6dc01039cffb34d8b66efe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLALLOCATEMEMORYNVPROC</type>
      <name>GLeeFuncPtr_wglAllocateMemoryNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a253fcab789c79bc01d0663a9aa1b92d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLFREEMEMORYNVPROC</type>
      <name>GLeeFuncPtr_wglFreeMemoryNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a693dc9d2f0d1fcdaf4a6d101c352b4ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETSYNCVALUESOMLPROC</type>
      <name>GLeeFuncPtr_wglGetSyncValuesOML</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5aea9017b155b95c4d3017752c78a589</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETMSCRATEOMLPROC</type>
      <name>GLeeFuncPtr_wglGetMscRateOML</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa0d79007383a601257aad64638344b97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLSWAPBUFFERSMSCOMLPROC</type>
      <name>GLeeFuncPtr_wglSwapBuffersMscOML</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aef51058c2865397131e142e61644f684</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLSWAPLAYERBUFFERSMSCOMLPROC</type>
      <name>GLeeFuncPtr_wglSwapLayerBuffersMscOML</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a338e10a9584c58689d478d8c5f22a03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLWAITFORMSCOMLPROC</type>
      <name>GLeeFuncPtr_wglWaitForMscOML</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a25a00f574aeace538dcf534758800a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLWAITFORSBCOMLPROC</type>
      <name>GLeeFuncPtr_wglWaitForSbcOML</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a590f45644326d6f6624af6a1f7e474ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETFRAMEUSAGEI3DPROC</type>
      <name>GLeeFuncPtr_wglGetFrameUsageI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa42564c7a0458230542b898299fa3ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLBEGINFRAMETRACKINGI3DPROC</type>
      <name>GLeeFuncPtr_wglBeginFrameTrackingI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a30273299b48dd24a7ecd77df8a4476d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLENDFRAMETRACKINGI3DPROC</type>
      <name>GLeeFuncPtr_wglEndFrameTrackingI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a70fd0b716bd7744830857bdd1330b519</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLQUERYFRAMETRACKINGI3DPROC</type>
      <name>GLeeFuncPtr_wglQueryFrameTrackingI3D</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0d6a6e01db8c15b0693a09486dc927a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETVIDEODEVICENVPROC</type>
      <name>GLeeFuncPtr_wglGetVideoDeviceNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac353f22c62051896a8e62e54add782d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLRELEASEVIDEODEVICENVPROC</type>
      <name>GLeeFuncPtr_wglReleaseVideoDeviceNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a115db674a7bce9f9d7c1839e30a0973c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLBINDVIDEOIMAGENVPROC</type>
      <name>GLeeFuncPtr_wglBindVideoImageNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3e32676f87b370d8a13a58ad1cf6dcf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLRELEASEVIDEOIMAGENVPROC</type>
      <name>GLeeFuncPtr_wglReleaseVideoImageNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeb5ba891a3e0ce657adeb3e439e7d78c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLSENDPBUFFERTOVIDEONVPROC</type>
      <name>GLeeFuncPtr_wglSendPbufferToVideoNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aae7cce303a971a36bc1ef4035f4bf931</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNWGLGETVIDEOINFONVPROC</type>
      <name>GLeeFuncPtr_wglGetVideoInfoNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaa0a97285aa563554bda3f3d24050481</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_VERSION_1_3</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a087f9575abedd7700a2f854888a97f24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_VERSION_1_4</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acc962676ae5fa92119fc0113688eeef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_ARB_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a03bd60b9a132f21910ec962a90195ed2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_ARB_fbconfig_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4b124d79879f32f2b8a9c713360a5fee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_ARB_create_context</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a747b4a3c2d24757db8c4dbfd710950ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_SGIS_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7d75cc540903bc3d9a0a7c6d1e89177d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_EXT_visual_info</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9a5c688e282a20d99d14c079d86fba80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_SGI_swap_control</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af8f62d37c783a267caa4649318bf23e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_SGI_video_sync</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a69398b74174f03b70f3dc90c1dc28431</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_SGI_make_current_read</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a645d2d0375e9c0ac51ec9d3813aa4b12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_EXT_visual_rating</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a44ccdac02ce4e7a75d194e1db4914129</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_EXT_import_context</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a84da8b88b280fcfa264bfcb2b06e83e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_SGIX_fbconfig</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a92fe5129be52da6f249a7cd351ff9287</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_SGIX_pbuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3656f323f7074c467adcac08316ac83e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_SGI_cushion</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad1d4467854566d6f427054108e5dc6da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_SGIX_video_resize</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9fb6f2821c7784c4a844e0f2ae66e96e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_SGIX_swap_group</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a11f83f90fc918a6c474d2fdac45d8cca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_SGIX_swap_barrier</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad0ed47b6bfdc4fcf3392fc67e2dffa10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_SGIS_blended_overlay</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aaae527a6b2492e0e0b556bb5f53329ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_SGIS_shared_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aedb3a86330e321c5b61d297b8cd9e19e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_SUN_get_transparent_index</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a750f6cb5d9a191d8aa2756ca3b5f286b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_3DFX_multisample</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae9d40b4e88d0736cfac7c66791ba7b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_MESA_copy_sub_buffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a382734708b33a434d353da26c4aed4b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_MESA_pixmap_colormap</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae146cd0470d0b22c3054397282d61cb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_MESA_release_buffers</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae7d00748d019d9f5c2527a7b58d31df8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_MESA_set_3dfx_mode</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9a11a35caf9998f989277201fd622b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_SGIX_visual_select_group</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a200ab62d745cfa25bf5f485f419bea34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_OML_swap_method</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac75a378fb862efc801609fa8bcd1db2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_OML_sync_control</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adca7006f98f365b1154cdf080b44de32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_NV_float_buffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af59357678c580c04ae3faa3ab4abf2f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_SGIX_hyperpipe</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5e6298e11b570a0c1c7dd5ff424a510f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_MESA_agp_offset</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af5598c1a4cfdae314527b3bc6ac435ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_EXT_fbconfig_packed_float</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae601506f30b746a841d0368f1c4d66d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_EXT_framebuffer_sRGB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a82fd889746340726bf991291f254914c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_EXT_texture_from_pixmap</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1d7e06b2479e4c3fe8de21e6d8e9ff3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_NV_present_video</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9ea2ac6cb96f0b6b61ab0f92a11bad8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_NV_video_out</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a12b9302f90f7d3647c13e042177ebb80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_NV_swap_group</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abc1b953a40a7e232fa0d841c1cba5085</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_EXT_scene_marker</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8b2455419f4650e2f8617ee2c461f681</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>_GLEE_GLX_NV_video_output</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a58da65ad3b81ac6c0e8eb48c31f2a268</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>__GLeeGLXExtensionNames</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afde38bc9546b70835af8db216b876673</anchor>
      <arglist>[40][30]</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>__GLeeGLXNumExtensions</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a197f2e05011cbf99f5c574b4dadc9e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXGETFBCONFIGSPROC</type>
      <name>GLeeFuncPtr_glXGetFBConfigs</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3d0910eee921cdf2a0cdfd629951ddc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXCHOOSEFBCONFIGPROC</type>
      <name>GLeeFuncPtr_glXChooseFBConfig</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a318f8834d37fff70e45fe2dcaa681bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXGETFBCONFIGATTRIBPROC</type>
      <name>GLeeFuncPtr_glXGetFBConfigAttrib</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad65e3dad63e809988c65c96e6818f368</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXGETVISUALFROMFBCONFIGPROC</type>
      <name>GLeeFuncPtr_glXGetVisualFromFBConfig</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>addb799298d539f89e4aa67b11c659f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXCREATEWINDOWPROC</type>
      <name>GLeeFuncPtr_glXCreateWindow</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af66122ae2c1e117c44ea88a2cd026a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXDESTROYWINDOWPROC</type>
      <name>GLeeFuncPtr_glXDestroyWindow</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0ccc5aa55134dc2b7f23dc34bdc1beac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXCREATEPIXMAPPROC</type>
      <name>GLeeFuncPtr_glXCreatePixmap</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9ec644353f0721f2bda5367baed2a8fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXDESTROYPIXMAPPROC</type>
      <name>GLeeFuncPtr_glXDestroyPixmap</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a033015593993398f3cd6c2a93a0420cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXCREATEPBUFFERPROC</type>
      <name>GLeeFuncPtr_glXCreatePbuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3466dbb3efb1a763abb40f7fe86272e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXDESTROYPBUFFERPROC</type>
      <name>GLeeFuncPtr_glXDestroyPbuffer</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2828e188d0e0cd62eb39bd63d63b88b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXQUERYDRAWABLEPROC</type>
      <name>GLeeFuncPtr_glXQueryDrawable</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acc063f247ed322c8c7584026d6cc9697</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXCREATENEWCONTEXTPROC</type>
      <name>GLeeFuncPtr_glXCreateNewContext</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae412a3f92c769e5f47985820d4462311</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXMAKECONTEXTCURRENTPROC</type>
      <name>GLeeFuncPtr_glXMakeContextCurrent</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6e657ad7f692eb5cef0a87a43bc5c1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXGETCURRENTREADDRAWABLEPROC</type>
      <name>GLeeFuncPtr_glXGetCurrentReadDrawable</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a94767444ff1b57315b3d3ec74c42772b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXGETCURRENTDISPLAYPROC</type>
      <name>GLeeFuncPtr_glXGetCurrentDisplay</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a38b453c9108d1935c9189a9bc8c312ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXQUERYCONTEXTPROC</type>
      <name>GLeeFuncPtr_glXQueryContext</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a489f017592139da88ee8904ac5c4635c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXSELECTEVENTPROC</type>
      <name>GLeeFuncPtr_glXSelectEvent</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>adc23d411db4650d3f7fc1ae8900166dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXGETSELECTEDEVENTPROC</type>
      <name>GLeeFuncPtr_glXGetSelectedEvent</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac3f31b856bfc951e2aadb5a8ae7fb5ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXGETPROCADDRESSPROC</type>
      <name>GLeeFuncPtr_glXGetProcAddress</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a453d320fcbd5d79656f59a4878096fd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXCREATECONTEXTATTRIBSARBPROC</type>
      <name>GLeeFuncPtr_glXCreateContextAttribsARB</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a65b9eb8003af71ca817721b34c623028</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXSWAPINTERVALSGIPROC</type>
      <name>GLeeFuncPtr_glXSwapIntervalSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac6f67a468070d0f7e5980b2d6312bd99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXGETVIDEOSYNCSGIPROC</type>
      <name>GLeeFuncPtr_glXGetVideoSyncSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af53a742c9e5912ba35ac51cd5897f984</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXWAITVIDEOSYNCSGIPROC</type>
      <name>GLeeFuncPtr_glXWaitVideoSyncSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad24ac36e02eae644b135dd9b2fd68d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXMAKECURRENTREADSGIPROC</type>
      <name>GLeeFuncPtr_glXMakeCurrentReadSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a306b348fa29d51f48d9a976428429b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXGETCURRENTREADDRAWABLESGIPROC</type>
      <name>GLeeFuncPtr_glXGetCurrentReadDrawableSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa919be8f9560f34db834c86954054ec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXGETCURRENTDISPLAYEXTPROC</type>
      <name>GLeeFuncPtr_glXGetCurrentDisplayEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a934d92e2cbd547aeec6e702df1e8561b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXQUERYCONTEXTINFOEXTPROC</type>
      <name>GLeeFuncPtr_glXQueryContextInfoEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>acbebea9b8cf3dfde3fe23e2a45695929</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXGETCONTEXTIDEXTPROC</type>
      <name>GLeeFuncPtr_glXGetContextIDEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aba11d2fa8f2e5f439fdf22d1ba4e95f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXIMPORTCONTEXTEXTPROC</type>
      <name>GLeeFuncPtr_glXImportContextEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a1184057f11d15116a8c6684d4e248465</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXFREECONTEXTEXTPROC</type>
      <name>GLeeFuncPtr_glXFreeContextEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a48e5f7d2ba0e8a35ef160a4f243976a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXGETFBCONFIGATTRIBSGIXPROC</type>
      <name>GLeeFuncPtr_glXGetFBConfigAttribSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a7f9acab9621d2c0ac3930cd23c09c1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXCHOOSEFBCONFIGSGIXPROC</type>
      <name>GLeeFuncPtr_glXChooseFBConfigSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4a387fddb74d82d43b08ed3cf5d7ad6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC</type>
      <name>GLeeFuncPtr_glXCreateGLXPixmapWithConfigSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad810caeb4c60adc0caa4f31c8692208e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXCREATECONTEXTWITHCONFIGSGIXPROC</type>
      <name>GLeeFuncPtr_glXCreateContextWithConfigSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a29f8f5ced227098f6685aae75a77dbea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXGETVISUALFROMFBCONFIGSGIXPROC</type>
      <name>GLeeFuncPtr_glXGetVisualFromFBConfigSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af12bbca17c8aaf42ff9ce9a75ffec3a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXGETFBCONFIGFROMVISUALSGIXPROC</type>
      <name>GLeeFuncPtr_glXGetFBConfigFromVisualSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aa20120613b057ecb233980a23cff90fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXCREATEGLXPBUFFERSGIXPROC</type>
      <name>GLeeFuncPtr_glXCreateGLXPbufferSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3b55518c6fb7b5992a746abbe9dd2921</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXDESTROYGLXPBUFFERSGIXPROC</type>
      <name>GLeeFuncPtr_glXDestroyGLXPbufferSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a29de9554bd91803254db41e934711450</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXQUERYGLXPBUFFERSGIXPROC</type>
      <name>GLeeFuncPtr_glXQueryGLXPbufferSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a808809fb38feafd6db4f55529ad1f4b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXSELECTEVENTSGIXPROC</type>
      <name>GLeeFuncPtr_glXSelectEventSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac392a999520217fa82d38da0a9a1e0d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXGETSELECTEDEVENTSGIXPROC</type>
      <name>GLeeFuncPtr_glXGetSelectedEventSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a79410e596017563700a506e5e268200b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXCUSHIONSGIPROC</type>
      <name>GLeeFuncPtr_glXCushionSGI</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a62a9a0396507c431054ead88e2ea132d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXBINDCHANNELTOWINDOWSGIXPROC</type>
      <name>GLeeFuncPtr_glXBindChannelToWindowSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a942598e7475c1d12d86a0285931cbadc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXCHANNELRECTSGIXPROC</type>
      <name>GLeeFuncPtr_glXChannelRectSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aeabdd430e78306b94b4ebdb320d1d89e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXQUERYCHANNELRECTSGIXPROC</type>
      <name>GLeeFuncPtr_glXQueryChannelRectSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab76c6c45fd3730e1a6398885eae37724</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXQUERYCHANNELDELTASSGIXPROC</type>
      <name>GLeeFuncPtr_glXQueryChannelDeltasSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2c8bbf4bf0f1a68cf23e3d493658c403</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXCHANNELRECTSYNCSGIXPROC</type>
      <name>GLeeFuncPtr_glXChannelRectSyncSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ac1c3da15fed29e84d3359d6723797218</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXJOINSWAPGROUPSGIXPROC</type>
      <name>GLeeFuncPtr_glXJoinSwapGroupSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5d92c010545c39f080e61cfce38c960e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXBINDSWAPBARRIERSGIXPROC</type>
      <name>GLeeFuncPtr_glXBindSwapBarrierSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a81dc3fd7c411b9ec0597030f6a0d4b9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXQUERYMAXSWAPBARRIERSSGIXPROC</type>
      <name>GLeeFuncPtr_glXQueryMaxSwapBarriersSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>af3ae780eba2e0f7a2bc83ed39c7e8d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXGETTRANSPARENTINDEXSUNPROC</type>
      <name>GLeeFuncPtr_glXGetTransparentIndexSUN</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a0ed4f28eca7ec929a39b56499bd78873</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXCOPYSUBBUFFERMESAPROC</type>
      <name>GLeeFuncPtr_glXCopySubBufferMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4e0aba36d5e3732710baa0905d496866</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXCREATEGLXPIXMAPMESAPROC</type>
      <name>GLeeFuncPtr_glXCreateGLXPixmapMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a2bb843c1c8c5448f728a204a108f27fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXRELEASEBUFFERSMESAPROC</type>
      <name>GLeeFuncPtr_glXReleaseBuffersMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ae188d582f03a3c8f6f63c354fb71d356</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXSET3DFXMODEMESAPROC</type>
      <name>GLeeFuncPtr_glXSet3DfxModeMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a63ce9f22900e690b3804afbea02bae66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXGETSYNCVALUESOMLPROC</type>
      <name>GLeeFuncPtr_glXGetSyncValuesOML</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>abfcca5c712f712a03f1391d10f05d48b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXGETMSCRATEOMLPROC</type>
      <name>GLeeFuncPtr_glXGetMscRateOML</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a85dc820bad4b8d28739dec7e281e28bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXSWAPBUFFERSMSCOMLPROC</type>
      <name>GLeeFuncPtr_glXSwapBuffersMscOML</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a878ef78c1d1ee81a11ea412df7a023a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXWAITFORMSCOMLPROC</type>
      <name>GLeeFuncPtr_glXWaitForMscOML</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a97ba3163610756e85d09d078a0046d4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXWAITFORSBCOMLPROC</type>
      <name>GLeeFuncPtr_glXWaitForSbcOML</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ad1bf61884a6ada65e88cbc7542ab4687</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXQUERYHYPERPIPENETWORKSGIXPROC</type>
      <name>GLeeFuncPtr_glXQueryHyperpipeNetworkSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a254f8b84d24f3b266d6ce169021ad91c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXHYPERPIPECONFIGSGIXPROC</type>
      <name>GLeeFuncPtr_glXHyperpipeConfigSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a67db1f2c2b3624e26a2299d133d0a30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXQUERYHYPERPIPECONFIGSGIXPROC</type>
      <name>GLeeFuncPtr_glXQueryHyperpipeConfigSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a3b3d36f47b9cbd14ca550093ed5b75cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXDESTROYHYPERPIPECONFIGSGIXPROC</type>
      <name>GLeeFuncPtr_glXDestroyHyperpipeConfigSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab92374ad86dd11e4d1e52731cacf19fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXBINDHYPERPIPESGIXPROC</type>
      <name>GLeeFuncPtr_glXBindHyperpipeSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5d19be6f408de1584421ba42121b9006</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC</type>
      <name>GLeeFuncPtr_glXQueryHyperpipeBestAttribSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a9c2e7ba43ee370130f7551e1f4c8dc73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXHYPERPIPEATTRIBSGIXPROC</type>
      <name>GLeeFuncPtr_glXHyperpipeAttribSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a68c4e174affd1c72c6bc0be7d39f5071</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXQUERYHYPERPIPEATTRIBSGIXPROC</type>
      <name>GLeeFuncPtr_glXQueryHyperpipeAttribSGIX</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a20a3bd08b6202f36035619111df326de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXGETAGPOFFSETMESAPROC</type>
      <name>GLeeFuncPtr_glXGetAGPOffsetMESA</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a052c2528e60b245526422ff5f05a8c69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXBINDTEXIMAGEEXTPROC</type>
      <name>GLeeFuncPtr_glXBindTexImageEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a75716dab32e2ae2463c71321f74fc2a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXRELEASETEXIMAGEEXTPROC</type>
      <name>GLeeFuncPtr_glXReleaseTexImageEXT</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a5e761eb5d1059cb30ce7ea97e15b04ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXGETVIDEODEVICENVPROC</type>
      <name>GLeeFuncPtr_glXGetVideoDeviceNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab9e22b74a0b358a660a888d26cfb60d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXRELEASEVIDEODEVICENVPROC</type>
      <name>GLeeFuncPtr_glXReleaseVideoDeviceNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a50d09757f4a25413be8ca99ef7a95649</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXBINDVIDEOIMAGENVPROC</type>
      <name>GLeeFuncPtr_glXBindVideoImageNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>afaa528f7151c262a82d9e4d7877ce917</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXRELEASEVIDEOIMAGENVPROC</type>
      <name>GLeeFuncPtr_glXReleaseVideoImageNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>aae088b5c20388a7a4030773da8d227c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXSENDPBUFFERTOVIDEONVPROC</type>
      <name>GLeeFuncPtr_glXSendPbufferToVideoNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a4d0cc86d9083652044985b7bb3525ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEEPFNGLXGETVIDEOINFONVPROC</type>
      <name>GLeeFuncPtr_glXGetVideoInfoNV</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab57d448122f53b9dfe249eaf326f00d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLEE_LINK_FUNCTION</type>
      <name>__GLeeGLLoadFunction</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>ab9f3f4550e6ff8023ba31b7d6149a9e3</anchor>
      <arglist>[322]</arglist>
    </member>
    <member kind="variable">
      <type>GLEE_LINK_FUNCTION</type>
      <name>__GLeeWGLLoadFunction</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a8794f1b5c2fd4a0621ae090d7988d862</anchor>
      <arglist>[37]</arglist>
    </member>
    <member kind="variable">
      <type>GLEE_LINK_FUNCTION</type>
      <name>__GLeeGLXLoadFunction</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a35bf978882313135cfb8e102de3423b7</anchor>
      <arglist>[40]</arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>GLeeErrorString</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a58d9d19e008b14da4634d9a7255ea39d</anchor>
      <arglist>[256]</arglist>
    </member>
    <member kind="variable">
      <type>GLboolean</type>
      <name>__GLeeInitedLoadFunctions</name>
      <anchorfile>_g_lee_8c.html</anchorfile>
      <anchor>a6d8a13f7536566eabafc617561715695</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GlslProg.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/gl/</path>
    <filename>_glsl_prog_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
  </compound>
  <compound kind="file">
    <name>Light.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/gl/</path>
    <filename>_light_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
  </compound>
  <compound kind="file">
    <name>Material.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/gl/</path>
    <filename>_material_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
  </compound>
  <compound kind="file">
    <name>StereoAutoFocuser.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/gl/</path>
    <filename>_stereo_auto_focuser_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
  </compound>
  <compound kind="file">
    <name>Texture.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/gl/</path>
    <filename>_texture_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
  </compound>
  <compound kind="file">
    <name>TextureFont.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/gl/</path>
    <filename>_texture_font_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
    <member kind="function">
      <type>set&lt; Font::Glyph &gt;</type>
      <name>getNecessaryGlyphs</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a3d65ac9eee7dd72073d1880fb7652ba3</anchor>
      <arglist>(const Font &amp;font, const string &amp;supportedChars)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TileRender.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/gl/</path>
    <filename>_tile_render_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
  </compound>
  <compound kind="file">
    <name>Vbo.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/gl/</path>
    <filename>_vbo_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::gl</namespace>
  </compound>
  <compound kind="file">
    <name>ImageIo.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_image_io_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>ImageSourceFileQuartz.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_image_source_file_quartz_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>ImageSourceFileWic.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_image_source_file_wic_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>ImageSourcePng.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_image_source_png_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>ImageTargetFileQuartz.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_image_target_file_quartz_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>ImageTargetFileWic.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_image_target_file_wic_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Blend.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/ip/</path>
    <filename>_blend_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::ip</namespace>
    <member kind="function">
      <type>void</type>
      <name>blendImpl_u8</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a38e3f58523d410ebeee2e21ff50e1400</anchor>
      <arglist>(Surface8u *background, const Surface8u &amp;foreground, const Area &amp;srcArea, Vec2i absOffset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blendImpl_float</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a4343c0206739fe055135fce542f8fbdd</anchor>
      <arglist>(Surface32f *background, const Surface32f &amp;foreground, const Area &amp;srcArea, Vec2i absOffset)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EdgeDetect.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/ip/</path>
    <filename>_edge_detect_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::ip</namespace>
  </compound>
  <compound kind="file">
    <name>Fill.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/ip/</path>
    <filename>_fill_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::ip</namespace>
    <member kind="function">
      <type>void</type>
      <name>fill_impl</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a9124f03d376f3acdf63ebaef5d4cd2cf</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface, const ColorT&lt; T &gt; &amp;color, const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill_impl</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a8a82377949d0a2f12114e97dd999b34f</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface, const ColorAT&lt; T &gt; &amp;color, const Area &amp;area)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Flip.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/ip/</path>
    <filename>_flip_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::ip</namespace>
  </compound>
  <compound kind="file">
    <name>Grayscale.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/ip/</path>
    <filename>_grayscale_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::ip</namespace>
    <member kind="function">
      <type>void</type>
      <name>grayscale</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a431b35bbbc7adbb14e33ecc2e4566646</anchor>
      <arglist>(const Surface8u &amp;srcSurface, Channel8u *dstChannel)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>grayscale</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a725449a2493df2c5363e50217c36918e</anchor>
      <arglist>(const SurfaceT&lt; float &gt; &amp;srcSurface, ChannelT&lt; float &gt; *dstChannel)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Hdr.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/ip/</path>
    <filename>_hdr_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::ip</namespace>
  </compound>
  <compound kind="file">
    <name>Premultiply.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/ip/</path>
    <filename>_premultiply_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::ip</namespace>
    <member kind="function">
      <type>void</type>
      <name>unpremultiply&lt; uint8_t &gt;</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a9f98c7b751de0adef7dd2174bd2dddeb</anchor>
      <arglist>(SurfaceT&lt; uint8_t &gt; *surface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpremultiply&lt; float &gt;</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>ad811b15b2ef339e47a1bd76e7d8fe12d</anchor>
      <arglist>(SurfaceT&lt; float &gt; *surface)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Resize.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/ip/</path>
    <filename>_resize_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::ip</namespace>
    <member kind="function">
      <type>void</type>
      <name>scanlineAccumulate</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a9b0b7f7981e5d85cdd38d8efd535cc0a</anchor>
      <arglist>(LT weight, LT *lineBuffer, int32_t lineBufferWidth, AT *accum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeWeightTable</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>ac15a4107eb2db43ae4a9de3b8d85f625</anchor>
      <arglist>(int32_t b, float cen, const FilterBase &amp;filter, const FilterParams *params, int32_t len, bool trimzeros, WeightTable&lt; WT &gt; *wtab)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scanlineShiftAccumToChannel</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>abdb1d20e2b669fc77fcb6f780e05a696</anchor>
      <arglist>(AT *accum, int32_t x1, int32_t y, int32_t width, ChannelT&lt; T &gt; *channel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scanlineFilterChannelToBuffer</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a423df24894840d73beeff3e4394085f2</anchor>
      <arglist>(WeightTable&lt; WT &gt; *weights, int32_t x, int32_t y, const ChannelT&lt; T &gt; &amp;channel, AT *lineBuffer, int32_t width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resample</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a4b44eebb83009049ab8efe8da81c5026</anchor>
      <arglist>(const vector&lt; const ChannelT&lt; T &gt; * &gt; &amp;srcChannels, const FilterBase &amp;filter, const Area &amp;srcArea, const Area &amp;dstArea, const vector&lt; ChannelT&lt; T &gt; * &gt; &amp;dstChannels)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Threshold.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/ip/</path>
    <filename>_threshold_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::ip</namespace>
    <member kind="function">
      <type>void</type>
      <name>thresholdImpl</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>ad3a9346851f3d31dfbfa16903593a590</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface, T value, const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thresholdImpl</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a666ca62a6a95baf277f123ec25f271ca</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;srcSurface, T value, const Area &amp;srcArea, const Vec2i &amp;dstLT, SurfaceT&lt; T &gt; *dstSurface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thresholdImpl</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a1355c410cbcde1050aff5b81ff4f7099</anchor>
      <arglist>(const ChannelT&lt; T &gt; &amp;srcChannel, T value, const Area &amp;srcArea, const Vec2i &amp;dstLT, ChannelT&lt; T &gt; *dstChannel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateAdaptiveThreshold</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>af2e1d7c820949c3c16d33a7f4f4df0a5</anchor>
      <arglist>(const ChannelT&lt; T &gt; *srcChannel, typename CHANTRAIT&lt; T &gt;::Accum *integralImage, int32_t windowSize, float percentageDelta, ChannelT&lt; T &gt; *dstChannel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateAdaptiveThresholdZero</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a491c2582a29119aa25d0df35d2c3512f</anchor>
      <arglist>(const ChannelT&lt; T &gt; *srcChannel, typename CHANTRAIT&lt; T &gt;::Accum *integralImage, int32_t windowSize, ChannelT&lt; T &gt; *dstChannel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateIntegralImage</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>ae0953669ec156ceb423b0ad46d3091b6</anchor>
      <arglist>(const ChannelT&lt; T &gt; &amp;channel, typename CHANTRAIT&lt; T &gt;::Accum *integralImage)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Trim.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/ip/</path>
    <filename>_trim_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::ip</namespace>
    <member kind="function">
      <type>bool</type>
      <name>transparentHorizontalScanline</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a57cc8a90d3556b81f7233512e8f0eac0</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;surface, int32_t row, int32_t x1, int32_t x2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>transparentVerticalScanline</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a34fb0480b444b5f121410f4efff7f6a8</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;surface, int32_t column, int32_t y1, int32_t y2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Json.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_json_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Matrix.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_matrix_8cpp</filename>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>template Matrix44f</type>
      <name>firstFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a613b8557fdd309e843ddc796bda91662</anchor>
      <arglist>(const Vec3f &amp;firstPoint, const Vec3f &amp;secondPoint, const Vec3f &amp;thirdPoint)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix44f</type>
      <name>nextFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a2d4b1fae6d9dc4cad57bcd617923bc91</anchor>
      <arglist>(const Matrix44f &amp;prevMatrix, const Vec3f &amp;prevPoint, const Vec3f &amp;curPoint, Vec3f &amp;prevTangent, Vec3f &amp;curTangent)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix44f</type>
      <name>lastFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a660a29457d3d974343a68fd1ed70d0d6</anchor>
      <arglist>(const Matrix44f &amp;prevMatrix, const Vec3f &amp;prevPoint, const Vec3f &amp;lastPoint)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix44d</type>
      <name>firstFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae8936880d5e58010be6a8b29a556bbad</anchor>
      <arglist>(const Vec3d &amp;firstPoint, const Vec3d &amp;secondPoint, const Vec3d &amp;thirdPoint)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix44d</type>
      <name>nextFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a8f26e68f210fc98e78e2f502616d60ff</anchor>
      <arglist>(const Matrix44d &amp;prevMatrix, const Vec3d &amp;prevPoint, const Vec3d &amp;curPoint, Vec3d &amp;prevTangent, Vec3d &amp;curTangent)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix44d</type>
      <name>lastFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a8207d125dd30649115bd71f73e41294a</anchor>
      <arglist>(const Matrix44d &amp;prevMatrix, const Vec3d &amp;prevPoint, const Vec3d &amp;lastPoint)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CinderMsw.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/msw/</path>
    <filename>_cinder_msw_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::msw</namespace>
    <member kind="variable">
      <type>boost::thread_specific_ptr&lt; ComInitializer &gt;</type>
      <name>threadComInitializer</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>a6ff3cd02b33c1961d101988eded56352</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>CinderMswGdiPlus.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/msw/</path>
    <filename>_cinder_msw_gdi_plus_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::msw</namespace>
  </compound>
  <compound kind="file">
    <name>StackWalker.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/msw/</path>
    <filename>_stack_walker_8cpp</filename>
    <member kind="typedef">
      <type>struct _IMAGEHLP_LINE64</type>
      <name>IMAGEHLP_LINE64</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a75e1533fce106bfa7ed6f6d257c58c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _IMAGEHLP_LINE64 *</type>
      <name>PIMAGEHLP_LINE64</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a02a0106b705d60bd132ba0e1a7e3b87d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _IMAGEHLP_MODULE64</type>
      <name>IMAGEHLP_MODULE64</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a02dc528603c4c89ba25a8870097f63dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _IMAGEHLP_MODULE64 *</type>
      <name>PIMAGEHLP_MODULE64</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a383abe824802b2c7b4528651aa5b0996</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _IMAGEHLP_SYMBOL64</type>
      <name>IMAGEHLP_SYMBOL64</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a090e687777462f443d2ddafbeecc49e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _IMAGEHLP_SYMBOL64 *</type>
      <name>PIMAGEHLP_SYMBOL64</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a61ba945c2905d16b431a2d66ba569b01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _tagADDRESS64</type>
      <name>ADDRESS64</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a1a2de8bf22d3662a667f5aeb85fb6d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _tagADDRESS64 *</type>
      <name>LPADDRESS64</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a0a9c850218b1adce868e2a94abcb7ab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _KDHELP64</type>
      <name>KDHELP64</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a6ad1f5acfd6357df080e9f4155b09aff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _KDHELP64 *</type>
      <name>PKDHELP64</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>abbd9d0eb1f47e53c6c338a1dbf209b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _tagSTACKFRAME64</type>
      <name>STACKFRAME64</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>ad052606594ee2aa371b8901f9d3f6f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct _tagSTACKFRAME64 *</type>
      <name>LPSTACKFRAME64</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a1645fb6e1f8e09b5a9eac1b9d5cddaca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BOOL(__stdcall *</type>
      <name>PREAD_PROCESS_MEMORY_ROUTINE64</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a8d21bc6f316637942af2918298f765bd</anchor>
      <arglist>)(HANDLE hProcess, DWORD64 qwBaseAddress, PVOID lpBuffer, DWORD nSize, LPDWORD lpNumberOfBytesRead)</arglist>
    </member>
    <member kind="typedef">
      <type>PVOID(__stdcall *</type>
      <name>PFUNCTION_TABLE_ACCESS_ROUTINE64</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>abb96de57bd95202c410dda2bb7909fe1</anchor>
      <arglist>)(HANDLE hProcess, DWORD64 AddrBase)</arglist>
    </member>
    <member kind="typedef">
      <type>DWORD64(__stdcall *</type>
      <name>PGET_MODULE_BASE_ROUTINE64</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>aa650fcfe6749c5a800ddc172b9424d9a</anchor>
      <arglist>)(HANDLE hProcess, DWORD64 Address)</arglist>
    </member>
    <member kind="typedef">
      <type>DWORD64(__stdcall *</type>
      <name>PTRANSLATE_ADDRESS_ROUTINE64</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>aa4565ac0aa3072ad7372d9531daa23de</anchor>
      <arglist>)(HANDLE hProcess, HANDLE hThread, LPADDRESS64 lpaddr)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SYM_TYPE</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a3ac18bf070251bbc81b0a6629840f6b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SymNone</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a3ac18bf070251bbc81b0a6629840f6b6a066b6751ec0756d17fa92f4df73262a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SymCoff</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a3ac18bf070251bbc81b0a6629840f6b6a5f0157749ab77c4131aec228289710c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SymCv</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a3ac18bf070251bbc81b0a6629840f6b6a255f1ef0ab9a81f0fc15c4b41630e156</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SymPdb</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a3ac18bf070251bbc81b0a6629840f6b6ac446237e1e808a6643e9ac75440f63f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SymExport</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a3ac18bf070251bbc81b0a6629840f6b6a553118f5140199686220cfd0f3b53911</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SymDeferred</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a3ac18bf070251bbc81b0a6629840f6b6a496e586970b8165f725ed0e4062c4475</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SymSym</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a3ac18bf070251bbc81b0a6629840f6b6a88eee046e8c2b4d8583ce362bb9ad037</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SymDia</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a3ac18bf070251bbc81b0a6629840f6b6a5a655dd6039899e580816b9f0429bf73</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SymVirtual</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a3ac18bf070251bbc81b0a6629840f6b6a71047375da6952484d51be8391f52982</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NumSymTypes</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a3ac18bf070251bbc81b0a6629840f6b6a8bc4da898f781d3dc664e3ee78a5d57b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ADDRESS_MODE</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a7ccaea3b5eded8c0bc63d2f6766a216a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AddrMode1616</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a7ccaea3b5eded8c0bc63d2f6766a216aadfe55e32377d90c7e3b1eef550ba2ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AddrMode1632</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a7ccaea3b5eded8c0bc63d2f6766a216aaeb9e880bd582a8c61c3a2b5364f163ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AddrModeReal</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a7ccaea3b5eded8c0bc63d2f6766a216aa030bae688275e38b52b5c7896c1d2ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>AddrModeFlat</name>
      <anchorfile>_stack_walker_8cpp.html</anchorfile>
      <anchor>a7ccaea3b5eded8c0bc63d2f6766a216aaa70f2bbafd673b07ae511f5b5b5985f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ObjLoader.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_obj_loader_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Params.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/params/</path>
    <filename>_params_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::params</namespace>
    <member kind="function">
      <type>int</type>
      <name>initAntGl</name>
      <anchorfile>namespacecinder_1_1params.html</anchorfile>
      <anchor>a368526abebb87d32fd0696f4d59fb6bc</anchor>
      <arglist>(weak_ptr&lt; app::Window &gt; winWeak)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Path2d.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_path2d_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Perlin.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_perlin_8cpp</filename>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>float</type>
      <name>nlerp</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a3bcf948e559a12a02c819457f8b951bd</anchor>
      <arglist>(float t, float a, float b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Plane.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_plane_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>PolyLine.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_poly_line_8cpp</filename>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>T</type>
      <name>linearYatX</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a70243149cd8608ed717bab4502bd1009</anchor>
      <arglist>(const Vec2&lt; T &gt; p[2], T x)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>linearCrossings</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a941edc4762d1d66e9cd6779677638bf6</anchor>
      <arglist>(const Vec2&lt; T &gt; p[2], const Vec2f &amp;pt)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MovieWriter.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/qtime/</path>
    <filename>_movie_writer_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::qtime</namespace>
    <member kind="function">
      <type>OSStatus</type>
      <name>enableMultiPassWithTemporaryFile</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>afb4a682b21ce48c6ca80e04c24b85e1e</anchor>
      <arglist>(ICMCompressionSessionOptionsRef inCompressionSessionOptions, ICMMultiPassStorageRef *outMultiPassStorage)</arglist>
    </member>
    <member kind="variable">
      <type>const float</type>
      <name>PLATFORM_DEFAULT_GAMMA</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>af2505c9cec93c2b8e242ce67ea90b560</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QuickTime.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/qtime/</path>
    <filename>_quick_time_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::qtime</namespace>
    <member kind="function">
      <type></type>
      <name>EXTERN_API_C</name>
      <anchorfile>_quick_time_8cpp.html</anchorfile>
      <anchor>a6211d1950e894c6d5d0554ca14ee0ef5</anchor>
      <arglist>(OSStatus) QTPixelBufferContextCreate(CFAllocatorRef</arglist>
    </member>
    <member kind="function">
      <type>::Movie</type>
      <name>openMovieFromUrl</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a8142f9b8e3765982177f867955229a91</anchor>
      <arglist>(const Url &amp;url)</arglist>
    </member>
    <member kind="function">
      <type>::Movie</type>
      <name>openMovieFromPath</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>abe998e5387368166ba91e386849c3228</anchor>
      <arglist>(const fs::path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startQuickTime</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a4a8216e6a310f79e904a08818d846eac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getQuickTimeVersion</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>ae9b4d6b136b59de1ae3e1d82a4bf4d13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getQuickTimeVersionString</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a683d1761480a9d2399b1f8c9865b46ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quickTimeTask</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>ab497ea551ed6a6163489fffa92b2e660</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>CFDictionaryRef</name>
      <anchorfile>_quick_time_8cpp.html</anchorfile>
      <anchor>abed8246a782240f7e3d87ac8a411ca25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>QuickTimeUtils.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/qtime/</path>
    <filename>_quick_time_utils_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::qtime</namespace>
    <member kind="function">
      <type>bool</type>
      <name>dictionarySetValue</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>ae7ca69309d5cbbaf186fdcc40fd85046</anchor>
      <arglist>(CFMutableDictionaryRef dict, CFStringRef key, SInt32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dictionarySetPixelBufferPixelFormatType</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>ac81d27422c2b56f0d0ec59bdeb2dd514</anchor>
      <arglist>(bool alpha, CFMutableDictionaryRef dict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dictionarySetPixelBufferSize</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>aed68ef39b727c7c199f813665b8f92c1</anchor>
      <arglist>(const unsigned int width, const unsigned int height, CFMutableDictionaryRef dict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dictionarySetPixelBufferBytesPerRowAlignment</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a3c39e3309c12fea19df4455886f26e14</anchor>
      <arglist>(CFMutableDictionaryRef dict)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dictionarySetPixelBufferOpenGLCompatibility</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a7868680cefd2128a9ea5883887326c04</anchor>
      <arglist>(CFMutableDictionaryRef dict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dictionarySetPixelBufferOptions</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a5557b1b8090efcf48f94432fbc5c3c69</anchor>
      <arglist>(unsigned int width, unsigned int height, bool alpha, CFMutableDictionaryRef *pixelBufferOptions)</arglist>
    </member>
    <member kind="function">
      <type>CFMutableDictionaryRef</type>
      <name>initQTVisualContextOptions</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>ab580d688633967582431444e993bbf32</anchor>
      <arglist>(int width, int height, bool alpha)</arglist>
    </member>
    <member kind="function">
      <type>::ItemCount</type>
      <name>openMovieBaseProperties</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a7119854b268c3963174b2b95f3449863</anchor>
      <arglist>(QTNewMoviePropertyElement movieProps[10])</arglist>
    </member>
    <member kind="function">
      <type>Handle</type>
      <name>createPointerReferenceHandle</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a5e65328344cc109491ecb1edda4d9b3c</anchor>
      <arglist>(void *data, Size dataSize)</arglist>
    </member>
    <member kind="function">
      <type>OSStatus</type>
      <name>ptrDataRefAddFileNameExtension</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>ac75a1e3799eec3731d0dec6cc1380678</anchor>
      <arglist>(ComponentInstance dataRefHandler, const string &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>OSStatus</type>
      <name>ptrDataRefAddMIMETypeExtension</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a4f34cb45f5344e79f6566179849c011d</anchor>
      <arglist>(ComponentInstance dataRefHandler, const std::string &amp;mimeType)</arglist>
    </member>
    <member kind="function">
      <type>Handle</type>
      <name>createPointerDataRefWithExtensions</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>adcc2da0d18108b7a7dcc7d7336182527</anchor>
      <arglist>(void *data, size_t dataSize, const string &amp;fileName, const string &amp;mimeType)</arglist>
    </member>
    <member kind="function">
      <type>::Movie</type>
      <name>openMovieFromMemory</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a756310d585911e3ea58f7ee0f4a414d0</anchor>
      <arglist>(const void *data, size_t dataSize, const string &amp;fileNameHint, const string &amp;mimeTypeHint)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Rand.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_rand_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Ray.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_ray_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Rect.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_rect_8cpp</filename>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6248d694a9a3d1f3dbb7e49b4eeb994d</anchor>
      <arglist>(std::ostream &amp;o, const RectT&lt; T &gt; &amp;rect)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Serial.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_serial_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Shape2d.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_shape2d_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Sphere.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_sphere_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Stream.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_stream_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Surface.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_surface_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Svg.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/svg/</path>
    <filename>_svg_8cpp</filename>
    <namespace>cinder</namespace>
    <namespace>cinder::svg</namespace>
    <member kind="function">
      <type>void</type>
      <name>ellipticalArc</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>a9df806a8b1002e827edbb84852fef1bb</anchor>
      <arglist>(Shape2d &amp;path, float x1, float y1, float x2, float y2, float rx, float ry, float xAxisRotation, bool largeArcFlag, bool sweepFlag)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>readNextCommand</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>acab60cb4e6eabc0a1c5e689cb8481e4d</anchor>
      <arglist>(const char **sInOut)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readFlag</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>a835e846fa0dd7dfe6b03f128a4b81340</anchor>
      <arglist>(const char **sInOut)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextItemIsFloat</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>af64a73b970503922157bb5f92ed0fc1d</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>Shape2d</type>
      <name>parsePath</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>a4142d36d11cd515da4036f1878a8e020</anchor>
      <arglist>(const std::string &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; Vec2f &gt;</type>
      <name>parsePointList</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>a21ede2c7201c00989279288e1dff6f5f</anchor>
      <arglist>(const std::string &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>System.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_system_8cpp</filename>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>struct cinder::_LOGICALPROCESSORDATA</type>
      <name>LOGICALPROCESSORDATA</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a22c835ebe3ab99d4a9e9b645c16d2483</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct cinder::_LOGICALPROCESSORDATA *</type>
      <name>PLOGICALPROCESSORDATA</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad9368f255aff32214e3f3e4c93746a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cpuidwrap</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a2a418086ca843e514985e78395ee017b</anchor>
      <arglist>(int *p, unsigned int param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lockToLogicalProcessor</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a7e26fd76860d704d0051dc9ce871341c</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cpuid</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad040b4cff0911da14c6f54c660345c3d</anchor>
      <arglist>(int whichlp, PLOGICALPROCESSORDATA p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Text.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_text_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Timeline.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_timeline_8cpp</filename>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>std::multimap&lt; void *, TimelineItemRef &gt;::iterator</type>
      <name>s_iter</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad2e8812b1f1d8c5b4ed5546cf9903567</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::multimap&lt; void *, TimelineItemRef &gt;::const_iterator</type>
      <name>s_const_iter</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6fee6f0111324be596e0030846be90fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TimelineItem.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_timeline_item_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Timer.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_timer_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Triangulate.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_triangulate_8cpp</filename>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>void *</type>
      <name>stdAlloc</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4f2d65b28872faf7f90c82643df1ba7a</anchor>
      <arglist>(void *userData, unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stdFree</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a08fe4a003bc128070211160dd1f4f905</anchor>
      <arglist>(void *userData, void *ptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TriMesh.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_tri_mesh_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Tween.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_tween_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Unicode.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_unicode_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Url.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_url_8cpp</filename>
    <namespace>cinder</namespace>
    <member kind="typedef">
      <type>cinder::IStreamUrlImplWinInet</type>
      <name>IStreamUrlPlatformImpl</name>
      <anchorfile>_url_8cpp.html</anchorfile>
      <anchor>a8f348fdfdee439fe49a79aa5dbed2aeb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>UrlImplCocoa.mm</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_url_impl_cocoa_8mm</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>UrlImplCurl.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_url_impl_curl_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>UrlImplWinInet.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_url_impl_win_inet_8cpp</filename>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>void</type>
      <name>safeInternetCloseHandle</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aeabf3ae807ae2eb4cdd3ae8c389d9522</anchor>
      <arglist>(HINTERNET hInternet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testAndThrowHttpStatus</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a470eba39e83e270ff3e1d983064a5fc2</anchor>
      <arglist>(HINTERNET hInternet)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Utilities.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_utilities_8cpp</filename>
    <namespace>cinder</namespace>
  </compound>
  <compound kind="file">
    <name>Xml.cpp</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>_xml_8cpp</filename>
    <namespace>cinder</namespace>
    <member kind="function">
      <type>void</type>
      <name>parseItem</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a812ba58b098a00b6a590def2c011965d</anchor>
      <arglist>(const rapidxml::xml_node&lt;&gt; &amp;node, XmlTree *parent, XmlTree *result, const XmlTree::ParseOptions &amp;parseOptions)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>anatomypage</name>
    <title>The Anatomy of a Cinder App</title>
    <filename>anatomypage</filename>
  </compound>
  <compound kind="page">
    <name>CinderBoost</name>
    <title>Cinder &amp; the Boost Libraries</title>
    <filename>_cinder_boost</filename>
    <docanchor file="_cinder_boost">Introduction</docanchor>
    <docanchor file="_cinder_boost" title="Setting up Boost">setup</docanchor>
    <docanchor file="_cinder_boost" title="Building Boost (Advanced Users)">build</docanchor>
  </compound>
  <compound kind="page">
    <name>guide_gl_Fbo</name>
    <title>Guide to Framebuffer Objects (FBOs)</title>
    <filename>guide_gl__fbo</filename>
  </compound>
  <compound kind="page">
    <name>guide_Images</name>
    <title>Images in Cinder</title>
    <filename>guide__images</filename>
  </compound>
  <compound kind="page">
    <name>guide_ImplShared</name>
    <title>Implicitly Shared Objects in Cinder</title>
    <filename>guide__impl_shared</filename>
  </compound>
  <compound kind="page">
    <name>guide_qtime_MovieWriter</name>
    <title>Guide to Saving QuickTime Movies</title>
    <filename>guide_qtime__movie_writer</filename>
  </compound>
  <compound kind="page">
    <name>CinderResources</name>
    <title>Assets &amp; Resources in Cinder</title>
    <filename>_cinder_resources</filename>
    <docanchor file="flocking_chapter1" title="Introduction">intro</docanchor>
    <docanchor file="_cinder_resources" title="Project File Structure">layout</docanchor>
    <docanchor file="_cinder_resources" title="Assets">assets</docanchor>
    <docanchor file="_cinder_resources" title="How Assets Work">shippingAssets</docanchor>
    <docanchor file="_cinder_resources" title="Assets on iOS">assetsIOs</docanchor>
    <docanchor file="_cinder_resources" title="Additional Asset Folders">assetsExternal</docanchor>
    <docanchor file="_cinder_resources" title="Resources on Mac OS X &amp; iOS">mac</docanchor>
    <docanchor file="_cinder_resources" title="Adding a Resource">macAdd</docanchor>
    <docanchor file="_cinder_resources" title="Using a Resource">macUse</docanchor>
    <docanchor file="_cinder_resources" title="Resources on Windows">msw</docanchor>
    <docanchor file="_cinder_resources" title="Adding a Resource">mswAdd</docanchor>
    <docanchor file="_cinder_resources" title="Using a Resource">mswUse</docanchor>
    <docanchor file="_cinder_resources" title="Cross-Platform Resources">xplatform</docanchor>
  </compound>
  <compound kind="page">
    <name>ScreensaverPage</name>
    <title>Screensaver Notes</title>
    <filename>_screensaver_page</filename>
    <docanchor file="_screensaver_page" title="Mac OS 10.7">Targeting</docanchor>
  </compound>
  <compound kind="page">
    <name>helloCinderChapter1</name>
    <title>Chapter 1: Getting Started</title>
    <filename>hello_cinder_chapter1</filename>
    <docanchor file="hello_cinder_chapter1" title="Building a new project">newProject</docanchor>
    <docanchor file="hello_cinder_chapter1" title="Loading and displaying images">loadingDisplayingImages</docanchor>
    <docanchor file="hello_cinder_chapter1" title="Other options for dealing with images">options</docanchor>
    <docanchor file="hello_cinder_chapter1" title="Drawing Shapes">drawingShapes</docanchor>
    <docanchor file="hello_cinder_chapter1" title="Creating a basic Particle engine">particleEngine</docanchor>
  </compound>
  <compound kind="page">
    <name>helloCinderChapter2</name>
    <title>Chapter 2: Personality and diversity</title>
    <filename>hello_cinder_chapter2</filename>
    <docanchor file="hello_cinder_chapter2" title="Lining up the Particles">gridParticles</docanchor>
    <docanchor file="hello_cinder_chapter2" title="Recreating the Image with Particles">returnImage</docanchor>
  </compound>
  <compound kind="page">
    <name>helloCinderChapter3</name>
    <title>Chapter 3: Influence</title>
    <filename>hello_cinder_chapter3</filename>
    <docanchor file="hello_cinder_chapter3" title="User interaction">userInteraction</docanchor>
    <docanchor file="hello_cinder_chapter3" title="Keyboard input">keyboard</docanchor>
    <docanchor file="hello_cinder_chapter3" title="Mouse input">mouse</docanchor>
    <docanchor file="hello_cinder_chapter3" title="Iteration 1: Mouse Distortion">iteration1</docanchor>
    <docanchor file="hello_cinder_chapter3" title="Iteration 2: Wavey Pixels">iteration2</docanchor>
    <docanchor file="hello_cinder_chapter3" title="Iteration 3: Wavey Particles">iteration3</docanchor>
  </compound>
  <compound kind="page">
    <name>helloCinderChapter4</name>
    <title>Chapter 4: Fine tuning</title>
    <filename>hello_cinder_chapter4</filename>
    <docanchor file="hello_cinder_chapter4" title="Moving the Particles off the grid">breakingFree</docanchor>
    <docanchor file="hello_cinder_chapter4" title="Creating Particles with Mouse events">MouseParticles</docanchor>
    <docanchor file="hello_cinder_chapter4" title="Particle death">death</docanchor>
    <docanchor file="hello_cinder_chapter4" title="Particle velocity">velocity</docanchor>
    <docanchor file="hello_cinder_chapter4" title="Enter Perlin noise">perlin</docanchor>
  </compound>
  <compound kind="page">
    <name>helloCinderChapter5</name>
    <title>Chapter 5: External Forces</title>
    <filename>hello_cinder_chapter5</filename>
    <docanchor file="hello_cinder_chapter5" title="Personal space">personalSpace</docanchor>
    <docanchor file="hello_cinder_chapter5" title="Basic Repulsive Force">repulsion</docanchor>
  </compound>
  <compound kind="page">
    <name>flockingChapter1</name>
    <title>Flocking Chapter 1: Camera and Parameters</title>
    <filename>flocking_chapter1</filename>
    <docanchor file="flocking_chapter1" title="Introduction">intro</docanchor>
    <docanchor file="flocking_chapter1" title="Camera">camera</docanchor>
    <docanchor file="flocking_chapter1" title="PARAMS">params</docanchor>
    <docanchor file="flocking_chapter1" title="FLOCKING">flocking</docanchor>
  </compound>
  <compound kind="page">
    <name>flockingChapter2</name>
    <title>Flocking Chapter 2: Rule One - Separation</title>
    <filename>flocking_chapter2</filename>
    <docanchor file="flocking_chapter2" title="SPEED LIMIT">sectionName</docanchor>
  </compound>
  <compound kind="page">
    <name>flockingChapter3</name>
    <title>Flocking Chapter 3: Rule Two - Cohesion</title>
    <filename>flocking_chapter3</filename>
    <docanchor file="flocking_chapter3" title="RULE 2: COHESION (Avoid isolation)">cohesion</docanchor>
  </compound>
  <compound kind="page">
    <name>flockingChapter4</name>
    <title>Flocking Chapter 4: Rule Three - Alignment</title>
    <filename>flocking_chapter4</filename>
    <docanchor file="flocking_chapter4" title="RULE 3: ALIGNMENT">alignment</docanchor>
  </compound>
  <compound kind="page">
    <name>flockingChapter5</name>
    <title>Flocking Chapter 5: Rule Four - Evasion</title>
    <filename>flocking_chapter5</filename>
    <docanchor file="flocking_chapter5" title="RULE 4: EVASION">evasion</docanchor>
    <docanchor file="flocking_chapter5" title="CROWDING">crowding</docanchor>
    <docanchor file="flocking_chapter5" title="CURRENT">current</docanchor>
    <docanchor file="flocking_chapter5" title="CONCLUSION">conclusion</docanchor>
  </compound>
  <compound kind="page">
    <name>helloCinder</name>
    <title>Hello, Cinder</title>
    <filename>hello_cinder</filename>
    <docanchor file="hello_cinder" title="Introduction">tourIntro</docanchor>
    <docanchor file="hello_cinder" title="Section One: Introduction and Particle Engine">section1</docanchor>
    <docanchor file="hello_cinder" title="Section Two: Flocking Simulation">section2</docanchor>
  </compound>
  <compound kind="page">
    <name>guide_XmlTree</name>
    <title>XML in Cinder</title>
    <filename>guide__xml_tree</filename>
  </compound>
  <compound kind="class" objc="yes">
    <name>AppImplCocoaScreenSaver</name>
    <filename>interface_app_impl_cocoa_screen_saver.html</filename>
    <member kind="function" virtualness="virtual">
      <type>AppImplCocoaScreenSaver *</type>
      <name>init</name>
      <anchorfile>interface_app_impl_cocoa_screen_saver.html</anchorfile>
      <anchor>a1cac2192bf43f2bc2612279cd9f49aaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>addWindow:</name>
      <anchorfile>interface_app_impl_cocoa_screen_saver.html</anchorfile>
      <anchor>a39e817020c08178d31e5178545b78d0b</anchor>
      <arglist>(WindowImplCocoaScreenSaver *windowImpl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>BOOL</type>
      <name>isPreview</name>
      <anchorfile>interface_app_impl_cocoa_screen_saver.html</anchorfile>
      <anchor>a781c8ca4c69066427300a656a2a73313</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>size_t</type>
      <name>getNumWindows</name>
      <anchorfile>interface_app_impl_cocoa_screen_saver.html</anchorfile>
      <anchor>ae57c848efc36453687f39b67a7c8c860</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>cinder::app::WindowRef</type>
      <name>getWindowIndex:</name>
      <anchorfile>interface_app_impl_cocoa_screen_saver.html</anchorfile>
      <anchor>adbe22aa1a3f450d96c1e87237e9015c9</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>cinder::app::WindowRef</type>
      <name>getWindow</name>
      <anchorfile>interface_app_impl_cocoa_screen_saver.html</anchorfile>
      <anchor>af39df194d5aae0a7af2bedcb0909ff8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>setActiveWindow:</name>
      <anchorfile>interface_app_impl_cocoa_screen_saver.html</anchorfile>
      <anchor>a9f1bfc8d8e7485e4aec2fca9d805f87f</anchor>
      <arglist>(WindowImplCocoaScreenSaver *activeWindow)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>animateOneFrame:</name>
      <anchorfile>interface_app_impl_cocoa_screen_saver.html</anchorfile>
      <anchor>a30cf00c5ebf84c6dcdedaefc991c0137</anchor>
      <arglist>(WindowImplCocoaScreenSaver *callee)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>float</type>
      <name>getFrameRate</name>
      <anchorfile>interface_app_impl_cocoa_screen_saver.html</anchorfile>
      <anchor>a98bc02079f395af3afe348b7caff862b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>setFrameRate:</name>
      <anchorfile>interface_app_impl_cocoa_screen_saver.html</anchorfile>
      <anchor>ac874b914c305d6309a99a3a36e4ad230</anchor>
      <arglist>(float frameRate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>cinder::fs::path</type>
      <name>getAppPath</name>
      <anchorfile>interface_app_impl_cocoa_screen_saver.html</anchorfile>
      <anchor>a08e6ca6136e8663e5e8425f7f701fa5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>removeCinderView:</name>
      <anchorfile>interface_app_impl_cocoa_screen_saver.html</anchorfile>
      <anchor>ae811d3d90439054d7eee179d3225d8e5</anchor>
      <arglist>(WindowImplCocoaScreenSaver *win)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>finalCleanup</name>
      <anchorfile>interface_app_impl_cocoa_screen_saver.html</anchorfile>
      <anchor>ab88ef865dee1896b537248467d4a99e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>cinder::app::AppScreenSaver *</type>
      <name>mApp</name>
      <anchorfile>interface_app_impl_cocoa_screen_saver.html</anchorfile>
      <anchor>aaa93b245f06cddcae337bcb73f83cb29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::list&lt; WindowImplCocoaScreenSaver * &gt;</type>
      <name>mWindows</name>
      <anchorfile>interface_app_impl_cocoa_screen_saver.html</anchorfile>
      <anchor>af6668afb2f2559e2df905a3907550fa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>WindowImplCocoaScreenSaver *</type>
      <name>mActiveWindow</name>
      <anchorfile>interface_app_impl_cocoa_screen_saver.html</anchorfile>
      <anchor>ae04c4325bc3c3af41567e45c2f5d1266</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mFrameRate</name>
      <anchorfile>interface_app_impl_cocoa_screen_saver.html</anchorfile>
      <anchor>a5e5bb71116fd69d636d81bc3aa63a3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BOOL</type>
      <name>mSetupCalled</name>
      <anchorfile>interface_app_impl_cocoa_screen_saver.html</anchorfile>
      <anchor>a55db927ab880746b21de92cf9866ac3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="protocol" objc="yes">
    <name>CinderViewCocoaTouchDelegate-p</name>
    <filename>protocol_cinder_view_cocoa_touch_delegate-p.html</filename>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>resize</name>
      <anchorfile>protocol_cinder_view_cocoa_touch_delegate-p.html</anchorfile>
      <anchor>ad742d3321d8cf3d8733ca92952b88453</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>draw</name>
      <anchorfile>protocol_cinder_view_cocoa_touch_delegate-p.html</anchorfile>
      <anchor>a683e323dc250a2575b45b13b9937a38d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>mouseDown:</name>
      <anchorfile>protocol_cinder_view_cocoa_touch_delegate-p.html</anchorfile>
      <anchor>aaa8c36615ab500b1a4687e9d9f5e454a</anchor>
      <arglist>(cinder::app::MouseEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>mouseDrag:</name>
      <anchorfile>protocol_cinder_view_cocoa_touch_delegate-p.html</anchorfile>
      <anchor>a38aa5b2819c0bb63ed92f50c83beb6fa</anchor>
      <arglist>(cinder::app::MouseEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>mouseUp:</name>
      <anchorfile>protocol_cinder_view_cocoa_touch_delegate-p.html</anchorfile>
      <anchor>aa9f8639ee1d0b8376d34954a35574758</anchor>
      <arglist>(cinder::app::MouseEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>keyDown:</name>
      <anchorfile>protocol_cinder_view_cocoa_touch_delegate-p.html</anchorfile>
      <anchor>a4a70d6bd2a9a58057294b7d241c905fb</anchor>
      <arglist>(cinder::app::KeyEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>setKeyboardString:</name>
      <anchorfile>protocol_cinder_view_cocoa_touch_delegate-p.html</anchorfile>
      <anchor>ad4d48220ca28a86feebe022030969427</anchor>
      <arglist>(const std::string *keyboardString)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>touchesBegan:</name>
      <anchorfile>protocol_cinder_view_cocoa_touch_delegate-p.html</anchorfile>
      <anchor>a6f50ce3fdd155d22eeb0dfca28b26c2d</anchor>
      <arglist>(cinder::app::TouchEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>touchesMoved:</name>
      <anchorfile>protocol_cinder_view_cocoa_touch_delegate-p.html</anchorfile>
      <anchor>a5181f333f044b172410f4801a43b54af</anchor>
      <arglist>(cinder::app::TouchEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>touchesEnded:</name>
      <anchorfile>protocol_cinder_view_cocoa_touch_delegate-p.html</anchorfile>
      <anchor>a2f306ac4caea9d80527c92a283e908b9</anchor>
      <arglist>(cinder::app::TouchEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>cinder::app::WindowRef</type>
      <name>getWindowRef</name>
      <anchorfile>protocol_cinder_view_cocoa_touch_delegate-p.html</anchorfile>
      <anchor>a945080507621ccbdee58163a50f8f760</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="protocol" objc="yes">
    <name>CinderViewDelegate-p</name>
    <filename>protocol_cinder_view_delegate-p.html</filename>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>resize</name>
      <anchorfile>protocol_cinder_view_delegate-p.html</anchorfile>
      <anchor>a8c1ac2999227c79e552d96a8f4548d7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>draw</name>
      <anchorfile>protocol_cinder_view_delegate-p.html</anchorfile>
      <anchor>a4ad2db59e8ad89adb908cf77e25eecf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>mouseDown:</name>
      <anchorfile>protocol_cinder_view_delegate-p.html</anchorfile>
      <anchor>a59ab0f2254c3801e2722f007d453ecf6</anchor>
      <arglist>(cinder::app::MouseEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>mouseDrag:</name>
      <anchorfile>protocol_cinder_view_delegate-p.html</anchorfile>
      <anchor>a0b83d5c3fb1cdcaa55c09267be810132</anchor>
      <arglist>(cinder::app::MouseEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>mouseUp:</name>
      <anchorfile>protocol_cinder_view_delegate-p.html</anchorfile>
      <anchor>a92a3431acd91bf16b1a1c9701d721760</anchor>
      <arglist>(cinder::app::MouseEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>mouseMove:</name>
      <anchorfile>protocol_cinder_view_delegate-p.html</anchorfile>
      <anchor>a2599fae7aac4af2d3d5381ff9b225fbe</anchor>
      <arglist>(cinder::app::MouseEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>mouseWheel:</name>
      <anchorfile>protocol_cinder_view_delegate-p.html</anchorfile>
      <anchor>a9fc5a7738046f41bb2e80aa2d451f3c2</anchor>
      <arglist>(cinder::app::MouseEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>keyDown:</name>
      <anchorfile>protocol_cinder_view_delegate-p.html</anchorfile>
      <anchor>a778915bd35d6a03ad71f01eb9d952cf6</anchor>
      <arglist>(cinder::app::KeyEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>keyUp:</name>
      <anchorfile>protocol_cinder_view_delegate-p.html</anchorfile>
      <anchor>accfa7251dd1d13be1370a15839a2e625</anchor>
      <arglist>(cinder::app::KeyEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>touchesBegan:</name>
      <anchorfile>protocol_cinder_view_delegate-p.html</anchorfile>
      <anchor>a3e56dec6017c0ffa320105598de9ce70</anchor>
      <arglist>(cinder::app::TouchEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>touchesMoved:</name>
      <anchorfile>protocol_cinder_view_delegate-p.html</anchorfile>
      <anchor>a8bd637fb04e92ac5cb4a9d9d2e14679b</anchor>
      <arglist>(cinder::app::TouchEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>touchesEnded:</name>
      <anchorfile>protocol_cinder_view_delegate-p.html</anchorfile>
      <anchor>a154c6a11c84687880b55e8974e3f1bd9</anchor>
      <arglist>(cinder::app::TouchEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>fileDrop:</name>
      <anchorfile>protocol_cinder_view_delegate-p.html</anchorfile>
      <anchor>a6b5dadb2d2db80538477bba36efcbd58</anchor>
      <arglist>(cinder::app::FileDropEvent *event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>cinder::app::WindowRef</type>
      <name>getWindowRef</name>
      <anchorfile>protocol_cinder_view_delegate-p.html</anchorfile>
      <anchor>ae65d7e0f61563a53fedd6b1f119ab8a0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StackWalker</name>
    <filename>class_stack_walker.html</filename>
    <class kind="struct">StackWalker::CallstackEntry</class>
    <member kind="enumeration">
      <type></type>
      <name>StackWalkOptions</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>aa09267d1a2142548625d11131fd9f6d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RetrieveNone</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>aa09267d1a2142548625d11131fd9f6d2a217edd06baf71722717097d0dfa1f766</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RetrieveSymbol</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>aa09267d1a2142548625d11131fd9f6d2a7e8ceb867b904c580c6f745f5d182802</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RetrieveLine</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>aa09267d1a2142548625d11131fd9f6d2abb12b49bb039b045e1d8aeb530bc4941</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RetrieveModuleInfo</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>aa09267d1a2142548625d11131fd9f6d2aa84a7a674a45b13f77ca173e44917cbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RetrieveFileVersion</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>aa09267d1a2142548625d11131fd9f6d2aa955b878359106a2494f579faccb2354</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RetrieveVerbose</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>aa09267d1a2142548625d11131fd9f6d2a91202654d609646725e168223b0f1551</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SymBuildPath</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>aa09267d1a2142548625d11131fd9f6d2a80f3f984925d8c6e322d087770edf6c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SymUseSymSrv</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>aa09267d1a2142548625d11131fd9f6d2a9a1c39fb96215df2b05d12c02d198698</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SymAll</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>aa09267d1a2142548625d11131fd9f6d2aa8ab514748c8fed1fcaf8b50d35123cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>OptionsAll</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>aa09267d1a2142548625d11131fd9f6d2a2955cdf5dd2683a3951f89d41d8b9c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum StackWalker::StackWalkOptions</type>
      <name>StackWalkOptions</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>a547d82a4196c05a09fd365d83ca9cd44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BOOL(__stdcall *</type>
      <name>PReadProcessMemoryRoutine</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>a61956985807c0d6c582304c78c6dc85c</anchor>
      <arglist>)(HANDLE hProcess, DWORD64 qwBaseAddress, PVOID lpBuffer, DWORD nSize, LPDWORD lpNumberOfBytesRead, LPVOID pUserData)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StackWalker</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>a70ca0d3bd1d2b015815fc951ab0442df</anchor>
      <arglist>(int options=OptionsAll, LPCSTR szSymPath=NULL, DWORD dwProcessId=GetCurrentProcessId(), HANDLE hProcess=GetCurrentProcess())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StackWalker</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>af36f5f0c916b2f350363c7ec8a8de15a</anchor>
      <arglist>(DWORD dwProcessId, HANDLE hProcess)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StackWalker</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>ae208af01c973541f335e5391677f2492</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BOOL</type>
      <name>LoadModules</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>a3e0e7f1329f594d89362309bf8fe2b21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BOOL</type>
      <name>ShowCallstack</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>a26bacb66734ee2d1de20d51070b825ba</anchor>
      <arglist>(HANDLE hThread=GetCurrentThread(), const CONTEXT *context=NULL, PReadProcessMemoryRoutine readMemoryFunction=NULL, LPVOID pUserData=NULL)</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>STACKWALK_MAX_NAMELEN</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>a90c9cd1b5bed99d45e2ed8d45664a913a9be56eae1b6e1edf9fbcd5df5e7dbb91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>CallstackEntryType</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>a6de6dcd460d11abee0c498fb55cba96e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>firstEntry</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>a6de6dcd460d11abee0c498fb55cba96eaa638808af6959ce776853d2b1c706bba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>nextEntry</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>a6de6dcd460d11abee0c498fb55cba96ea3f79f8f3d18eca44ec7d1c4f403edd37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <type>@</type>
      <name>lastEntry</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>a6de6dcd460d11abee0c498fb55cba96ea953ece8d7477db020bbe434a96ad7803</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>struct StackWalker::CallstackEntry</type>
      <name>CallstackEntry</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>ad0ad9c321961aad36f54779a8ca4ec12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>OnSymInit</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>a7feaf96c40d81dcbd0bfcd34f78eaa30</anchor>
      <arglist>(LPCSTR szSearchPath, DWORD symOptions, LPCSTR szUserName)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>OnLoadModule</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>a64c6c648aee9a33e881f449aecd51912</anchor>
      <arglist>(LPCSTR img, LPCSTR mod, DWORD64 baseAddr, DWORD size, DWORD result, LPCSTR symType, LPCSTR pdbName, ULONGLONG fileVersion)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>OnCallstackEntry</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>a0fbb480cd30e9ff437a4baf9a18c2372</anchor>
      <arglist>(CallstackEntryType eType, CallstackEntry &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>OnDbgHelpErr</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>ab2220ae2084e72d2f0f005784c21e8dc</anchor>
      <arglist>(LPCSTR szFuncName, DWORD gle, DWORD64 addr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>OnOutput</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>a20ec3b0a1ba7723e113889135989ea6b</anchor>
      <arglist>(LPCSTR szText)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static BOOL __stdcall</type>
      <name>myReadProcMem</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>a3428311b98b8e8366419e9e5467c294d</anchor>
      <arglist>(HANDLE hProcess, DWORD64 qwBaseAddress, PVOID lpBuffer, DWORD nSize, LPDWORD lpNumberOfBytesRead)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StackWalkerInternal *</type>
      <name>m_sw</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>a13524e6f4cd89a8b3a3fd378e3cd3f55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HANDLE</type>
      <name>m_hProcess</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>a7db892daef90d499084f5e9dd5294ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DWORD</type>
      <name>m_dwProcessId</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>adf8bda5434856605a470d42c3db49b38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BOOL</type>
      <name>m_modulesLoaded</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>a20279e66ed48886369111d47dee4762f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LPSTR</type>
      <name>m_szSymPath</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>aff1b39f2ea31f24b4a693928cdf5549d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_options</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>a3534033da2986b16d5f15f0b4feefa54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_MaxRecursionCount</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>acc7320865d2e5ce2d33536e94208c1f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>friend</type>
      <name>StackWalkerInternal</name>
      <anchorfile>class_stack_walker.html</anchorfile>
      <anchor>ab0d4fa92227f651635d04da2947b873a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>StackWalker::CallstackEntry</name>
    <filename>struct_stack_walker_1_1_callstack_entry.html</filename>
    <member kind="variable">
      <type>DWORD64</type>
      <name>offset</name>
      <anchorfile>struct_stack_walker_1_1_callstack_entry.html</anchorfile>
      <anchor>aa6cecf3032065d37a0e2891dc1b90d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CHAR</type>
      <name>name</name>
      <anchorfile>struct_stack_walker_1_1_callstack_entry.html</anchorfile>
      <anchor>a645c2afec348019287eb2913cca59b94</anchor>
      <arglist>[STACKWALK_MAX_NAMELEN]</arglist>
    </member>
    <member kind="variable">
      <type>CHAR</type>
      <name>undName</name>
      <anchorfile>struct_stack_walker_1_1_callstack_entry.html</anchorfile>
      <anchor>a35b6b8892cfd374d6e8706f8d54461f9</anchor>
      <arglist>[STACKWALK_MAX_NAMELEN]</arglist>
    </member>
    <member kind="variable">
      <type>CHAR</type>
      <name>undFullName</name>
      <anchorfile>struct_stack_walker_1_1_callstack_entry.html</anchorfile>
      <anchor>abc37f050946b46082c26b10a89f45765</anchor>
      <arglist>[STACKWALK_MAX_NAMELEN]</arglist>
    </member>
    <member kind="variable">
      <type>DWORD64</type>
      <name>offsetFromSmybol</name>
      <anchorfile>struct_stack_walker_1_1_callstack_entry.html</anchorfile>
      <anchor>aee3a3250c900fca383d490c0157dc4eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DWORD</type>
      <name>offsetFromLine</name>
      <anchorfile>struct_stack_walker_1_1_callstack_entry.html</anchorfile>
      <anchor>a1fc963b2492073e1ae10699dfc200cf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DWORD</type>
      <name>lineNumber</name>
      <anchorfile>struct_stack_walker_1_1_callstack_entry.html</anchorfile>
      <anchor>acf789192badda2afeeaf03fdeca67727</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CHAR</type>
      <name>lineFileName</name>
      <anchorfile>struct_stack_walker_1_1_callstack_entry.html</anchorfile>
      <anchor>a5bda5c59f059dcfa090432b7e10fd1ee</anchor>
      <arglist>[STACKWALK_MAX_NAMELEN]</arglist>
    </member>
    <member kind="variable">
      <type>DWORD</type>
      <name>symType</name>
      <anchorfile>struct_stack_walker_1_1_callstack_entry.html</anchorfile>
      <anchor>a03429a9193b3fb335eba35dd94f50528</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LPCSTR</type>
      <name>symTypeString</name>
      <anchorfile>struct_stack_walker_1_1_callstack_entry.html</anchorfile>
      <anchor>ab5e0a4df0bf80be98ddb879aa32729ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CHAR</type>
      <name>moduleName</name>
      <anchorfile>struct_stack_walker_1_1_callstack_entry.html</anchorfile>
      <anchor>a79589ee14ad3c43520714d08b2b04dc1</anchor>
      <arglist>[STACKWALK_MAX_NAMELEN]</arglist>
    </member>
    <member kind="variable">
      <type>DWORD64</type>
      <name>baseOfImage</name>
      <anchorfile>struct_stack_walker_1_1_callstack_entry.html</anchorfile>
      <anchor>a0f2f3cf18a7b0f185bacd2c98f954d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CHAR</type>
      <name>loadedImageName</name>
      <anchorfile>struct_stack_walker_1_1_callstack_entry.html</anchorfile>
      <anchor>a599eaa04c323cacdb79c99601fd45eae</anchor>
      <arglist>[STACKWALK_MAX_NAMELEN]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>tagTOUCHINPUT</name>
    <filename>structtag_t_o_u_c_h_i_n_p_u_t.html</filename>
    <member kind="variable">
      <type>LONG</type>
      <name>x</name>
      <anchorfile>structtag_t_o_u_c_h_i_n_p_u_t.html</anchorfile>
      <anchor>a03f410440e0dfd7abf18ff7e04d4a708</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LONG</type>
      <name>y</name>
      <anchorfile>structtag_t_o_u_c_h_i_n_p_u_t.html</anchorfile>
      <anchor>a206389f4d50953dc84fc0629f9828d40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>HANDLE</type>
      <name>hSource</name>
      <anchorfile>structtag_t_o_u_c_h_i_n_p_u_t.html</anchorfile>
      <anchor>ab4609b795e9a1fd2c437fd1460001238</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DWORD</type>
      <name>dwID</name>
      <anchorfile>structtag_t_o_u_c_h_i_n_p_u_t.html</anchorfile>
      <anchor>a77f306919bed07745155ffe68c215d11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DWORD</type>
      <name>dwFlags</name>
      <anchorfile>structtag_t_o_u_c_h_i_n_p_u_t.html</anchorfile>
      <anchor>ab3275e706b1f80e6f75d6e36e27f925e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DWORD</type>
      <name>dwMask</name>
      <anchorfile>structtag_t_o_u_c_h_i_n_p_u_t.html</anchorfile>
      <anchor>af47f3afc0c34c83c7d4c0c4bdce920eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DWORD</type>
      <name>dwTime</name>
      <anchorfile>structtag_t_o_u_c_h_i_n_p_u_t.html</anchorfile>
      <anchor>a6f64ba28f667557abc4de3532f933ff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ULONG_PTR</type>
      <name>dwExtraInfo</name>
      <anchorfile>structtag_t_o_u_c_h_i_n_p_u_t.html</anchorfile>
      <anchor>ac2bf25359de183b3052bf5a499e42864</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DWORD</type>
      <name>cxContact</name>
      <anchorfile>structtag_t_o_u_c_h_i_n_p_u_t.html</anchorfile>
      <anchor>a3d7701b5e73e421974c624334d0616f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DWORD</type>
      <name>cyContact</name>
      <anchorfile>structtag_t_o_u_c_h_i_n_p_u_t.html</anchorfile>
      <anchor>a2b66d11b9b6264058e4c529eb45872d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="protocol" objc="yes">
    <name>WindowImplCocoa-p</name>
    <filename>protocol_window_impl_cocoa-p.html</filename>
    <member kind="function" virtualness="virtual">
      <type>BOOL</type>
      <name>isFullScreen</name>
      <anchorfile>protocol_window_impl_cocoa-p.html</anchorfile>
      <anchor>a3b9b1fe78b21ecea04a7d797ff684a1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>setFullScreen:options:</name>
      <anchorfile>protocol_window_impl_cocoa-p.html</anchorfile>
      <anchor>a78ac60e145443ee06e1151206c6cf6ad</anchor>
      <arglist>(BOOL fullScreen,[options] const cinder::app::FullScreenOptions *options)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>cinder::Vec2i</type>
      <name>getSize</name>
      <anchorfile>protocol_window_impl_cocoa-p.html</anchorfile>
      <anchor>a1bb60208bdcea66a301808ac527b2cf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>setSize:</name>
      <anchorfile>protocol_window_impl_cocoa-p.html</anchorfile>
      <anchor>af2b37b05d5dc77bd1f04fdcd2d9d81f0</anchor>
      <arglist>(cinder::Vec2i size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>cinder::Vec2i</type>
      <name>getPos</name>
      <anchorfile>protocol_window_impl_cocoa-p.html</anchorfile>
      <anchor>aead5db2a3ff701112465d6e18642fd2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>setPos:</name>
      <anchorfile>protocol_window_impl_cocoa-p.html</anchorfile>
      <anchor>abdf84046b6721d80735e42f20cdc2f2e</anchor>
      <arglist>(cinder::Vec2i pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>float</type>
      <name>getContentScale</name>
      <anchorfile>protocol_window_impl_cocoa-p.html</anchorfile>
      <anchor>a24e70ce916839888e8255a96b501675b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>close</name>
      <anchorfile>protocol_window_impl_cocoa-p.html</anchorfile>
      <anchor>ae583360253b3b4026d9b5b2f17d2a77c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>NSString *</type>
      <name>getTitle</name>
      <anchorfile>protocol_window_impl_cocoa-p.html</anchorfile>
      <anchor>aae285ac70a0a3a89adc710e1dcc38aa8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>setTitle:</name>
      <anchorfile>protocol_window_impl_cocoa-p.html</anchorfile>
      <anchor>a090c76248726e74c12ec20e3deeb8d62</anchor>
      <arglist>(NSString *title)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>BOOL</type>
      <name>isBorderless</name>
      <anchorfile>protocol_window_impl_cocoa-p.html</anchorfile>
      <anchor>a7d1241d454e07dc52ae842e084522cb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>setBorderless:</name>
      <anchorfile>protocol_window_impl_cocoa-p.html</anchorfile>
      <anchor>a6a183afc8fd11e9a9799783483e42f22</anchor>
      <arglist>(BOOL borderless)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>BOOL</type>
      <name>isAlwaysOnTop</name>
      <anchorfile>protocol_window_impl_cocoa-p.html</anchorfile>
      <anchor>ac6fb38953f008a7a66ad727a7c446e92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>setAlwaysOnTop:</name>
      <anchorfile>protocol_window_impl_cocoa-p.html</anchorfile>
      <anchor>a57a58f011262527b3ab0e03615838419</anchor>
      <arglist>(BOOL alwaysOnTop)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>hide</name>
      <anchorfile>protocol_window_impl_cocoa-p.html</anchorfile>
      <anchor>a4fd4e6a28b3dcc65146d6e6cb61838e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void</type>
      <name>show</name>
      <anchorfile>protocol_window_impl_cocoa-p.html</anchorfile>
      <anchor>a51993a177977aec18d83b0f94e601063</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>BOOL</type>
      <name>isHidden</name>
      <anchorfile>protocol_window_impl_cocoa-p.html</anchorfile>
      <anchor>aeb0678f0787c928f7278a7ca91563063</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>cinder::DisplayRef</type>
      <name>getDisplay</name>
      <anchorfile>protocol_window_impl_cocoa-p.html</anchorfile>
      <anchor>aa86ceec5fbbe9d4ca7c5a672ba750e51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>cinder::app::RendererRef</type>
      <name>getRenderer</name>
      <anchorfile>protocol_window_impl_cocoa-p.html</anchorfile>
      <anchor>a59479b155495f6f02a98a9eac38b3d24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>const std::vector&lt; cinder::app::TouchEvent::Touch &gt; &amp;</type>
      <name>getActiveTouches</name>
      <anchorfile>protocol_window_impl_cocoa-p.html</anchorfile>
      <anchor>ac59bdce68ae957675a3cf9c467c29405</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>void *</type>
      <name>getNative</name>
      <anchorfile>protocol_window_impl_cocoa-p.html</anchorfile>
      <anchor>a72b529b53b00665bc81439778d193688</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>UIViewController *</type>
      <name>getNativeViewController</name>
      <anchorfile>protocol_window_impl_cocoa-p.html</anchorfile>
      <anchor>a0c318859a39e02061234857d4c5bb210</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>boost</name>
    <filename>namespaceboost.html</filename>
    <namespace>boost::asio</namespace>
  </compound>
  <compound kind="namespace">
    <name>boost::asio</name>
    <filename>namespaceboost_1_1asio.html</filename>
  </compound>
  <compound kind="namespace">
    <name>cinder</name>
    <filename>namespacecinder.html</filename>
    <namespace>cinder::app</namespace>
    <namespace>cinder::audio</namespace>
    <namespace>cinder::cocoa</namespace>
    <namespace>cinder::gl</namespace>
    <namespace>cinder::ip</namespace>
    <namespace>cinder::msw</namespace>
    <namespace>cinder::params</namespace>
    <namespace>cinder::qtime</namespace>
    <namespace>cinder::svg</namespace>
    <namespace>cinder::signals</namespace>
    <class kind="class">cinder::Arcball</class>
    <class kind="class">cinder::RectT</class>
    <class kind="class">cinder::Area</class>
    <class kind="class">cinder::AxisAlignedBox3f</class>
    <class kind="class">cinder::BandedMatrix</class>
    <class kind="class">cinder::BSplineBasis</class>
    <class kind="class">cinder::BSpline</class>
    <class kind="class">cinder::Buffer</class>
    <class kind="class">cinder::Camera</class>
    <class kind="class">cinder::CameraPersp</class>
    <class kind="class">cinder::CameraOrtho</class>
    <class kind="class">cinder::CameraStereo</class>
    <class kind="class">cinder::Capture</class>
    <class kind="class">cinder::CaptureImplAvFoundationDevice</class>
    <class kind="class">cinder::CaptureImplCocoaDummyDevice</class>
    <class kind="class">cinder::CaptureImplDirectShow</class>
    <class kind="class">cinder::CaptureImplQtKitDevice</class>
    <class kind="class">cinder::ChannelT</class>
    <class kind="struct">cinder::CHANTRAIT</class>
    <class kind="struct">cinder::CHANTRAIT&lt; uint8_t &gt;</class>
    <class kind="struct">cinder::CHANTRAIT&lt; uint16_t &gt;</class>
    <class kind="struct">cinder::CHANTRAIT&lt; float &gt;</class>
    <class kind="struct">cinder::math</class>
    <class kind="struct">cinder::math&lt; float &gt;</class>
    <class kind="class">cinder::Clipboard</class>
    <class kind="class">cinder::ColorT</class>
    <class kind="class">cinder::ColorAT</class>
    <class kind="class">cinder::ConcurrentCircularBuffer</class>
    <class kind="class">cinder::DataSource</class>
    <class kind="class">cinder::DataSourcePath</class>
    <class kind="class">cinder::DataSourceUrl</class>
    <class kind="class">cinder::DataSourceBuffer</class>
    <class kind="class">cinder::DataTarget</class>
    <class kind="class">cinder::DataTargetPath</class>
    <class kind="class">cinder::DataTargetStream</class>
    <class kind="class">cinder::Display</class>
    <class kind="struct">cinder::EaseNone</class>
    <class kind="struct">cinder::EaseInQuad</class>
    <class kind="struct">cinder::EaseOutQuad</class>
    <class kind="struct">cinder::EaseInOutQuad</class>
    <class kind="struct">cinder::EaseOutInQuad</class>
    <class kind="struct">cinder::EaseInCubic</class>
    <class kind="struct">cinder::EaseOutCubic</class>
    <class kind="struct">cinder::EaseInOutCubic</class>
    <class kind="struct">cinder::EaseOutInCubic</class>
    <class kind="struct">cinder::EaseInQuart</class>
    <class kind="struct">cinder::EaseOutQuart</class>
    <class kind="struct">cinder::EaseInOutQuart</class>
    <class kind="struct">cinder::EaseOutInQuart</class>
    <class kind="struct">cinder::EaseInQuint</class>
    <class kind="struct">cinder::EaseOutQuint</class>
    <class kind="struct">cinder::EaseInOutQuint</class>
    <class kind="struct">cinder::EaseOutInQuint</class>
    <class kind="struct">cinder::EaseInSine</class>
    <class kind="struct">cinder::EaseOutSine</class>
    <class kind="struct">cinder::EaseInOutSine</class>
    <class kind="struct">cinder::EaseOutInSine</class>
    <class kind="struct">cinder::EaseInExpo</class>
    <class kind="struct">cinder::EaseOutExpo</class>
    <class kind="struct">cinder::EaseInOutExpo</class>
    <class kind="struct">cinder::EaseOutInExpo</class>
    <class kind="struct">cinder::EaseInCirc</class>
    <class kind="struct">cinder::EaseOutCirc</class>
    <class kind="struct">cinder::EaseInOutCirc</class>
    <class kind="struct">cinder::EaseOutInCirc</class>
    <class kind="struct">cinder::EaseInBounce</class>
    <class kind="struct">cinder::EaseOutBounce</class>
    <class kind="struct">cinder::EaseInOutBounce</class>
    <class kind="struct">cinder::EaseOutInBounce</class>
    <class kind="struct">cinder::EaseInBack</class>
    <class kind="struct">cinder::EaseOutBack</class>
    <class kind="struct">cinder::EaseInOutBack</class>
    <class kind="struct">cinder::EaseOutInBack</class>
    <class kind="struct">cinder::EaseInElastic</class>
    <class kind="struct">cinder::EaseOutElastic</class>
    <class kind="struct">cinder::EaseInOutElastic</class>
    <class kind="struct">cinder::EaseOutInElastic</class>
    <class kind="struct">cinder::EaseInAtan</class>
    <class kind="struct">cinder::EaseOutAtan</class>
    <class kind="struct">cinder::EaseInOutAtan</class>
    <class kind="class">cinder::Exception</class>
    <class kind="class">cinder::FilterBase</class>
    <class kind="class">cinder::FilterBox</class>
    <class kind="class">cinder::FilterTriangle</class>
    <class kind="class">cinder::FilterQuadratic</class>
    <class kind="class">cinder::FilterCubic</class>
    <class kind="class">cinder::FilterCatmullRom</class>
    <class kind="class">cinder::FilterMitchell</class>
    <class kind="class">cinder::FilterSincBlackman</class>
    <class kind="class">cinder::FilterGaussian</class>
    <class kind="class">cinder::FilterBesselBlackman</class>
    <class kind="class">cinder::Font</class>
    <class kind="class">cinder::FontInvalidNameExc</class>
    <class kind="class">cinder::FontGlyphFailureExc</class>
    <class kind="class">cinder::Frustum</class>
    <class kind="class">cinder::CallbackMgr</class>
    <class kind="class">cinder::ImageIo</class>
    <class kind="class">cinder::ImageSource</class>
    <class kind="class">cinder::ImageTarget</class>
    <class kind="class">cinder::ImageIoException</class>
    <class kind="class">cinder::ImageIoExceptionFailedLoad</class>
    <class kind="class">cinder::ImageIoExceptionFailedWrite</class>
    <class kind="class">cinder::ImageIoExceptionUnknownExtension</class>
    <class kind="class">cinder::ImageIoExceptionIllegalColorModel</class>
    <class kind="class">cinder::ImageIoExceptionIllegalDataType</class>
    <class kind="class">cinder::ImageIoExceptionIllegalChannelOrder</class>
    <class kind="struct">cinder::ImageIoRegistrar</class>
    <class kind="struct">cinder::ImageIoRegistrant</class>
    <class kind="class">cinder::ImageSourceFileQuartz</class>
    <class kind="class">cinder::ImageSourceFileWic</class>
    <class kind="class">cinder::ImageSourcePng</class>
    <class kind="class">cinder::ImageTargetFileQuartz</class>
    <class kind="class">cinder::ImageTargetFileWic</class>
    <class kind="class">cinder::JsonTree</class>
    <class kind="struct">cinder::KdNode</class>
    <class kind="struct">cinder::NullLookupProc</class>
    <class kind="class">cinder::KdTree</class>
    <class kind="struct">cinder::NodeDataVectorTraits</class>
    <class kind="struct">cinder::NodeDataTraits</class>
    <class kind="struct">cinder::NodeDataTraits&lt; Vec2f &gt;</class>
    <class kind="struct">cinder::CompareNode</class>
    <class kind="class">cinder::Matrix22</class>
    <class kind="class">cinder::Matrix33</class>
    <class kind="class">cinder::Matrix44</class>
    <class kind="class">cinder::MatrixAffine2</class>
    <class kind="class">cinder::MayaCamUI</class>
    <class kind="class">cinder::SurfaceConstraintsGdiPlus</class>
    <class kind="class">cinder::ObjLoader</class>
    <class kind="class">cinder::Path2d</class>
    <class kind="class">cinder::Path2dExc</class>
    <class kind="class">cinder::Perlin</class>
    <class kind="class">cinder::Plane</class>
    <class kind="class">cinder::PlaneExc</class>
    <class kind="class">cinder::PolyLine</class>
    <class kind="struct">cinder::QUATCONV</class>
    <class kind="class">cinder::Quaternion</class>
    <class kind="class">cinder::Rand</class>
    <class kind="class">cinder::Ray</class>
    <class kind="class">cinder::RectMapping</class>
    <class kind="class">cinder::Serial</class>
    <class kind="class">cinder::SerialExc</class>
    <class kind="class">cinder::SerialExcOpenFailed</class>
    <class kind="class">cinder::SerialExcDeviceEnumerationFailed</class>
    <class kind="class">cinder::SerialExcReadFailure</class>
    <class kind="class">cinder::SerialExcWriteFailure</class>
    <class kind="class">cinder::SerialTimeoutExc</class>
    <class kind="class">cinder::Shape2d</class>
    <class kind="class">cinder::Sphere</class>
    <class kind="class">cinder::StreamBase</class>
    <class kind="class">cinder::OStream</class>
    <class kind="class">cinder::IStream</class>
    <class kind="class">cinder::IoStream</class>
    <class kind="class">cinder::IStreamFile</class>
    <class kind="class">cinder::OStreamFile</class>
    <class kind="class">cinder::IoStreamFile</class>
    <class kind="class">cinder::IStreamMem</class>
    <class kind="class">cinder::OStreamMem</class>
    <class kind="class">cinder::IStreamStateRestore</class>
    <class kind="class">cinder::StreamExc</class>
    <class kind="class">cinder::StreamExcOutOfMemory</class>
    <class kind="class">cinder::cinder_stream_source</class>
    <class kind="class">cinder::cinder_stream_sink</class>
    <class kind="class">cinder::cinder_stream_bidirectional_device</class>
    <class kind="class">cinder::SurfaceChannelOrder</class>
    <class kind="class">cinder::SurfaceConstraints</class>
    <class kind="class">cinder::SurfaceConstraintsDefault</class>
    <class kind="class">cinder::SurfaceT</class>
    <class kind="class">cinder::SurfaceExc</class>
    <class kind="class">cinder::SurfaceConstraintsExc</class>
    <class kind="class">cinder::SvgRendererGl</class>
    <class kind="class">cinder::System</class>
    <class kind="class">cinder::SystemExc</class>
    <class kind="class">cinder::SystemExcFailedQuery</class>
    <class kind="class">cinder::TextLayout</class>
    <class kind="class">cinder::TextBox</class>
    <class kind="class">cinder::ThreadSetup</class>
    <class kind="class">cinder::Timeline</class>
    <class kind="class">cinder::Cue</class>
    <class kind="class">cinder::TimelineItem</class>
    <class kind="class">cinder::Timer</class>
    <class kind="class">cinder::Triangulator</class>
    <class kind="class">cinder::TriMesh</class>
    <class kind="class">cinder::TriMesh2d</class>
    <class kind="class">cinder::Tween</class>
    <class kind="class">cinder::Anim</class>
    <class kind="class">cinder::TweenBase</class>
    <class kind="class">cinder::TweenRef</class>
    <class kind="class">cinder::FnTween</class>
    <class kind="class">cinder::FnTweenRef</class>
    <class kind="class">cinder::AnimBase</class>
    <class kind="class">cinder::Url</class>
    <class kind="class">cinder::UrlOptions</class>
    <class kind="class">cinder::IStreamUrl</class>
    <class kind="class">cinder::UrlLoadExc</class>
    <class kind="class">cinder::IStreamUrlImplCurl</class>
    <class kind="class">cinder::IStreamUrlImplWinInet</class>
    <class kind="class">cinder::Vec3</class>
    <class kind="class">cinder::Vec2</class>
    <class kind="class">cinder::Vec4</class>
    <class kind="class">cinder::XmlTree</class>
    <member kind="typedef">
      <type>BSplineFit&lt; float &gt;</type>
      <name>BSplineFitf</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae9056e93b3d2a28766d6af9c16157324</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BSplineFit&lt; double &gt;</type>
      <name>BSplineFitd</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a46a91a79822da4a7ad2ceefc54d01c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BSplineFitBasis&lt; float &gt;</type>
      <name>BSplineFitBasisf</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae81c9effc426dca595a1c811f03c3bf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BSplineFitBasis&lt; double &gt;</type>
      <name>BSplineFitBasisd</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac99a2fbd7b85a15375ec0c5c022d2d9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::geometry::model::polygon&lt; boost::geometry::model::d2::point_xy&lt; double &gt; &gt;</type>
      <name>polygon</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>af235f738414aac1126713d5c71b7df3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct cinder::_LOGICALPROCESSORDATA</type>
      <name>LOGICALPROCESSORDATA</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a22c835ebe3ab99d4a9e9b645c16d2483</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct cinder::_LOGICALPROCESSORDATA *</type>
      <name>PLOGICALPROCESSORDATA</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad9368f255aff32214e3f3e4c93746a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::multimap&lt; void *, TimelineItemRef &gt;::iterator</type>
      <name>s_iter</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad2e8812b1f1d8c5b4ed5546cf9903567</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::multimap&lt; void *, TimelineItemRef &gt;::const_iterator</type>
      <name>s_const_iter</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6fee6f0111324be596e0030846be90fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BandedMatrix&lt; float &gt;</type>
      <name>BandedMatrixf</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4acf2e2bc83a66a0e405fde00c2a82de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BandedMatrix&lt; double &gt;</type>
      <name>BandedMatrixd</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a582c91052512906459ce2eae364f1c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BSpline&lt; Vec2f &gt;</type>
      <name>BSpline2f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4f457a2b8d99ab115bd1316ef461854b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BSpline&lt; Vec3f &gt;</type>
      <name>BSpline3f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>af881eef1dc044d32b8d7ce9f226fe21e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class Capture &gt;</type>
      <name>CaptureRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aa0967d1963a3e51cbdad1fda8dddf36d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageSource &gt;</type>
      <name>ImageSourceRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aca11590d504e68de86f3a57444c2eb70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ChannelT&lt; uint8_t &gt;</type>
      <name>Channel</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a01a19731f74d719ca973b24d0567373f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ChannelT&lt; uint8_t &gt;</type>
      <name>Channel8u</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1870220d9d40c02c4cf4ff135b22f3ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ChannelT&lt; uint16_t &gt;</type>
      <name>Channel16u</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a91dd9a6adc754492cb14be54f49d589f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ChannelT&lt; float &gt;</type>
      <name>Channel32f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a55542066ef5e4df2176ef692419aa2dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ColorT&lt; float &gt;</type>
      <name>Color</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a957e45ea5178e7c7264bfe19ba91992b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ColorT&lt; float &gt;</type>
      <name>Colorf</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a37f78dd41b0dd9c37cec5007055181de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ColorT&lt; uint8_t &gt;</type>
      <name>Color8u</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a0c860907658a359cf5cfc87639998563</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ColorAT&lt; float &gt;</type>
      <name>ColorA</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a13f71c63cea5bb08f5d971d72fbf6a09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ColorAT&lt; float &gt;</type>
      <name>ColorAf</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac4f81fbed94173c020008c7fd066fdca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ColorAT&lt; uint8_t &gt;</type>
      <name>ColorA8u</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad0f6124d9a275729dfecaa7f4f2774e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class DataSource &gt;</type>
      <name>DataSourceRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>abf9b2897625343b11326b9e785d44fc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class DataSourcePath &gt;</type>
      <name>DataSourcePathRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5fc82ff55b90ff558594b4c9655575f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class DataSourceUrl &gt;</type>
      <name>DataSourceUrlRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a93ced4993f8378d8ad5f28c7338b343d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class DataSourceBuffer &gt;</type>
      <name>DataSourceBufferRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac03726349c1b445f28f939f9768571c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class DataTarget &gt;</type>
      <name>DataTargetRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a7fd1772289ec39e6cef6da865f4c5161</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class DataTargetPath &gt;</type>
      <name>DataTargetPathRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac169764013541dad8f518ca4ed474e80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class DataTargetStream &gt;</type>
      <name>DataTargetStreamRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a3f1aaab3d6b81532c2f393409471bba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class Display &gt;</type>
      <name>DisplayRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a57f2c2374c4301b55bc5f6ded77d3ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Frustum&lt; float &gt;</type>
      <name>Frustumf</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a854319a8f823ab524be30a45ec01570c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Frustum&lt; double &gt;</type>
      <name>Frustumd</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aa159b6b0d0efbf740bc22c3ecdc11e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>CallbackId</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6dab31a04afdccbcf04fcb31bc8029c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageLoader &gt;</type>
      <name>ImageLoaderRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a06e3d391fa476d41d96037f777e51d1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageTarget &gt;</type>
      <name>ImageTargetRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aa5caf83179f34be27691363934b85afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageTargetFile &gt;</type>
      <name>ImageTargetFileRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad944840f458c0f177ed36de8715f9187</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageSourceFileQuartz &gt;</type>
      <name>ImageSourceFileQuartzRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a59712a1136e06dd7fa825844d8db8792</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageSourceFileWic &gt;</type>
      <name>ImageSourceFileWicRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a83e211e15a896d031cff9b05661dc4b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageSourcePng &gt;</type>
      <name>ImageSourcePngRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5071a00c245d15dce03957c94794a69f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageTargetFileQuartz &gt;</type>
      <name>ImageTargetFileQuartzRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a640d9008ce90cd20485f3ab15f4376fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageTargetFileWic &gt;</type>
      <name>ImageTargetFileWicRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae03719056355ba81763b192822ab4b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix22&lt; float &gt;</type>
      <name>Matrix22f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1b032095effaa246cbd9a1639d3baa2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix22&lt; double &gt;</type>
      <name>Matrix22d</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a2be3214e107cb4930f9aaed77b0b3e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix33&lt; float &gt;</type>
      <name>Matrix33f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae6e55b63499e1860adb47d54519e2f2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix33&lt; double &gt;</type>
      <name>Matrix33d</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a05d6818f0e3d720859a87a9af1523427</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix44&lt; float &gt;</type>
      <name>Matrix44f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a42cb03686769617fe76b0cff00545a8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix44&lt; double &gt;</type>
      <name>Matrix44d</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>acbcf2c4eb8eb86753f638ce36db758b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixAffine2&lt; float &gt;</type>
      <name>MatrixAffine2f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac4d2f21605d9ac199dd96a8c99886761</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixAffine2&lt; double &gt;</type>
      <name>MatrixAffine2d</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6454b52ee3fe3872ef449c0b9a147ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Plane&lt; float &gt;</type>
      <name>Planef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a957776346f452ec64073f5797b6595c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Plane&lt; double &gt;</type>
      <name>Planed</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a37388f55702b96e21588fbe2ec0dfaa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolyLine&lt; Vec2f &gt;</type>
      <name>PolyLine2f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac0b27fd31f3c4f75a887e0a9d656e970</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolyLine&lt; Vec2d &gt;</type>
      <name>PolyLine2d</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac958d4b7248a773e0f29eec8411af231</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Quaternion&lt; float &gt;</type>
      <name>Quatf</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aebe7d270f96a07df222b9870e3220cbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Quaternion&lt; double &gt;</type>
      <name>Quatd</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a2511d8bb18da71aca56c9af0a7d71b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RectT&lt; float &gt;</type>
      <name>Rectf</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac60c086a9aa8f5320c96da74cbf20f8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RectT&lt; double &gt;</type>
      <name>Rectd</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a90596ab49684a517407bd53ab6cb80aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class OStream &gt;</type>
      <name>OStreamRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a150f14f908a9befa6eaab8fb6e345c74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; IStream &gt;</type>
      <name>IStreamRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad360b4711055d4cb532daa839674b8a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; IoStream &gt;</type>
      <name>IoStreamRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a26cce2f9e91eabde2c66c4597d6d394e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class IStreamFile &gt;</type>
      <name>IStreamFileRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad890b7e422100c98499b3a58d281b902</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class OStreamFile &gt;</type>
      <name>OStreamFileRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6e2f4f582197df0ac387e4d9e4156bb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class IoStreamFile &gt;</type>
      <name>IoStreamFileRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>acf3e2005fe30ea972e44c6dbed984647</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class IStreamMem &gt;</type>
      <name>IStreamMemRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a183eabd1aadab330a5ea44899381c62a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class OStreamMem &gt;</type>
      <name>OStreamMemRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae5c99be6a56d8ecb500ec623ee20898a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iostreams::stream&lt; cinder_stream_source &gt;</type>
      <name>cinder_istream</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4cf45c54aea1844f6f1d95f90be2b002</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iostreams::stream&lt; cinder_stream_sink &gt;</type>
      <name>cinder_ostream</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4ca34d440859a05e99a52dc0504bc25b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iostreams::stream&lt; cinder_stream_bidirectional_device &gt;</type>
      <name>cinder_iostream</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5e43e334d5c673a0c9a2c3c13794e44e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfaceT&lt; uint8_t &gt;</type>
      <name>Surface</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a7f62055e4cb811edb9868b32595a1d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfaceT&lt; uint8_t &gt;</type>
      <name>Surface8u</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad8b046fa928d58861b60465ceda392c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfaceT&lt; uint16_t &gt;</type>
      <name>Surface16u</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a8d12457845cf49dfabd567551dabf2d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfaceT&lt; float &gt;</type>
      <name>Surface32f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a69465422e6011583c33994f0280dcd29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class Cue &gt;</type>
      <name>CueRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a593a42176b7cdde1d4c3afd595117128</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class Timeline &gt;</type>
      <name>TimelineRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac0bdfcdff9bd292f9491b3a1c9091db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class TimelineItem &gt;</type>
      <name>TimelineItemRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a903c982f3f41f069cd6d08386dd5d61f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; float(float)&gt;</type>
      <name>EaseFn</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae83c3d6bbf28cc637f2dd60fa02a7aca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class IStreamUrl &gt;</type>
      <name>IStreamUrlRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a85865156aba65495f42d5e85dcdae06c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec2&lt; int &gt;</type>
      <name>Vec2i</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a856f2784df30e9b72860f0fa3ca059cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec2&lt; float &gt;</type>
      <name>Vec2f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad2764a1271ad16462755205deb72a71e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec2&lt; double &gt;</type>
      <name>Vec2d</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a949f3074b04c17e575561420d713366a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec3&lt; int &gt;</type>
      <name>Vec3i</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae25fb02de5ab8de676d5f01eda0dde6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec3&lt; float &gt;</type>
      <name>Vec3f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a3b206bc2a596ae4c5aa0ff695b32e6c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec3&lt; double &gt;</type>
      <name>Vec3d</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4376621a5e0e2f5f087d4c1bee0c1996</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec4&lt; int &gt;</type>
      <name>Vec4i</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae211d5e51713473d1e1859e10741ae88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec4&lt; float &gt;</type>
      <name>Vec4f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a2d7876ac5ddcf229fbbff1c8560b99d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec4&lt; double &gt;</type>
      <name>Vec4d</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1f43f683f30504f42a9a92e7770e5931</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ColorModel</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5092f51b2e343b235efb131db224da80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CM_RGB</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5092f51b2e343b235efb131db224da80ae7b4bcdb80ed0b225ea2ecffc61aed91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CM_HSV</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5092f51b2e343b235efb131db224da80a2a413968d599720022665839ba3fffb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>UnicodeBreaks</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a674879384d4fbbf6e7f4778e6236c845</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_MUST_BREAK</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a674879384d4fbbf6e7f4778e6236c845af563da81c377071620d1f09c9f75c562</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_ALLOW_BREAK</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a674879384d4fbbf6e7f4778e6236c845aba36d08deb8b82b288998eb9a3dc7b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_NO_BREAK</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a674879384d4fbbf6e7f4778e6236c845a46d477b1c77f9491095eb3e5f455db9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNICODE_INSIDE_CHAR</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a674879384d4fbbf6e7f4778e6236c845a8e5fa9eac928ed917f2fe5eb634f4c2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>pair&lt; Area, Vec2i &gt;</type>
      <name>clippedSrcDst</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>af91512ff3a962a41682cf7f51296ddbd</anchor>
      <arglist>(const Area &amp;srcSurfaceBounds, const Area &amp;srcArea, const Area &amp;dstSurfaceBounds, const Vec2i &amp;dstLT)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toBase64</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a8841b796ca305d493be56a368289c63c</anchor>
      <arglist>(const std::string &amp;input, int charsPerLine=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toBase64</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a7368373544e97253ba9c8dbebccd548e</anchor>
      <arglist>(const Buffer &amp;input, int charsPerLine=0)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toBase64</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a77e21721709ec967013bbc7171e78413</anchor>
      <arglist>(const void *input, size_t inputSize, int charsPerLine=0)</arglist>
    </member>
    <member kind="function">
      <type>Buffer</type>
      <name>fromBase64</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a84c1f015347ec232442b63a6c1464b15</anchor>
      <arglist>(const std::string &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>Buffer</type>
      <name>fromBase64</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a573f9808147d6c9e45f77dbf60f20c49</anchor>
      <arglist>(const Buffer &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>Buffer</type>
      <name>fromBase64</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a39acecf05dcb4c37d9fb36fa1d2ffed5</anchor>
      <arglist>(const void *input, size_t inputSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocate2D</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>afecb29648586808db0ec44a952be3692</anchor>
      <arglist>(int iCols, int iRows, T **&amp;raatArray)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate2D</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a48fa056dfdd9f7ddba1f38ae3f8db7c0</anchor>
      <arglist>(T **&amp;raatArray)</arglist>
    </member>
    <member kind="function">
      <type>T::TYPE</type>
      <name>getSpeedWithData</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a65150260bd0dfa39c6873de2806f9a97</anchor>
      <arglist>(float fTime, void *pvData)</arglist>
    </member>
    <member kind="function">
      <type>Real</type>
      <name>rombergIntegral</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>acb59a1eba8f350ef2d80f67230e51e49</anchor>
      <arglist>(int iOrder, Real fA, Real fB, Real(*oF)(Real, void *), void *pvUserData)</arglist>
    </member>
    <member kind="function">
      <type>BSpline&lt; T &gt;</type>
      <name>fitBSpline</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a42536dadeb39f694b31e42bfdf8e5013</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;samples, int degree, int outputSamples)</arglist>
    </member>
    <member kind="function">
      <type>template BSpline&lt; Vec2f &gt;</type>
      <name>fitBSpline</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6c5998564c5601a9275a1ea514183b48</anchor>
      <arglist>(const std::vector&lt; Vec2f &gt; &amp;samples, int degree, int outputSamples)</arglist>
    </member>
    <member kind="function">
      <type>template BSpline&lt; Vec3f &gt;</type>
      <name>fitBSpline</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a36bf3bad5048f637260c790d3b658480</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;samples, int degree, int outputSamples)</arglist>
    </member>
    <member kind="function">
      <type>template BSpline&lt; Vec4f &gt;</type>
      <name>fitBSpline</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a86f59f78ae8d997d6c3baaae77d6a76c</anchor>
      <arglist>(const std::vector&lt; Vec4f &gt; &amp;samples, int degree, int outputSamples)</arglist>
    </member>
    <member kind="function">
      <type>Buffer</type>
      <name>compressBuffer</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5732b504521585d47ff4a5882c6a7d7a</anchor>
      <arglist>(const Buffer &amp;aBuffer, int8_t compressionLevel, bool resizeResult)</arglist>
    </member>
    <member kind="function">
      <type>Buffer</type>
      <name>decompressBuffer</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>acbb53753d5980aff0d29f485fc43b26e</anchor>
      <arglist>(const Buffer &amp;aBuffer, bool resizeResult, bool useGZip)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solveCubic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a9e1ccfc2c09536517cffb2a3563826a9</anchor>
      <arglist>(T a, T b, T c, T d, T result[3])</arglist>
    </member>
    <member kind="function">
      <type>template int</type>
      <name>solveCubic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>abf210dab11de34fcd082cb591005e0e3</anchor>
      <arglist>(float a, float b, float c, float d, float result[3])</arglist>
    </member>
    <member kind="function">
      <type>template int</type>
      <name>solveCubic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a616c2e3e4641ed8add33f0aabdfa6860</anchor>
      <arglist>(double a, double b, double c, double d, double result[3])</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>clipboardContainsFormat</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad35aa5b63ab2acc75a47125d9efd2481</anchor>
      <arglist>(const std::set&lt; UINT &gt; &amp;formats)</arglist>
    </member>
    <member kind="function">
      <type>Colorf</type>
      <name>hsvToRGB</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad627ee892a85f4f7b20fa094c879427c</anchor>
      <arglist>(const Vec3f &amp;hsv)</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>rgbToHSV</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a632321978b47c840213ac98c81d2eea0</anchor>
      <arglist>(const Colorf &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5bcbe587c4e08df583013092cce963f9</anchor>
      <arglist>(std::ostream &amp;lhs, const ColorT&lt; float &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a9066b34c941dc78d4a39fbd7aeec553a</anchor>
      <arglist>(std::ostream &amp;lhs, const ColorT&lt; uint8_t &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a047613bd717a0a87431989fecfce1781</anchor>
      <arglist>(std::ostream &amp;lhs, const ColorAT&lt; float &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ade77e8174dd97899554b42fd2f7d048c</anchor>
      <arglist>(std::ostream &amp;lhs, const ColorAT&lt; uint8_t &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>PolyLine2f</type>
      <name>calcConvexHull</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a052b9449d2ea491f999cd47eb8dee06a</anchor>
      <arglist>(const std::vector&lt; Vec2f &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>PolyLine2f</type>
      <name>calcConvexHull</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab7f5fa62477895da8e125629bb9717db</anchor>
      <arglist>(const Vec2f *points, size_t numPoints)</arglist>
    </member>
    <member kind="function">
      <type>PolyLine2f</type>
      <name>calcConvexHull</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab6b42220f9858667a79421eac2e37760</anchor>
      <arglist>(const Shape2d &amp;shape)</arglist>
    </member>
    <member kind="function">
      <type>PolyLine2f</type>
      <name>calcConvexHull</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6642f6337dcd97cf57e0d4f057d601e7</anchor>
      <arglist>(const Path2d &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>PolyLine2f</type>
      <name>calcConvexHull</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1d709510392e9741a5ab5295f910aa03</anchor>
      <arglist>(const PolyLine2f &amp;polyLine)</arglist>
    </member>
    <member kind="function">
      <type>DataSourceRef</type>
      <name>loadFile</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5914d1dcf8a37d479ed1186326a8eae7</anchor>
      <arglist>(const fs::path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>DataSourceRef</type>
      <name>loadUrl</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad213a3dfdd12dc114836664756ce28ca</anchor>
      <arglist>(const Url &amp;url, const UrlOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>DataTargetPathRef</type>
      <name>writeFile</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1262c33ede2938ea16f22143758f96bb</anchor>
      <arglist>(const fs::path &amp;path, bool createParents=true)</arglist>
    </member>
    <member kind="function">
      <type>int CALLBACK</type>
      <name>EnumFontFamiliesExProc</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a3bd8b4c7feb29318ce18976394f4c0ff</anchor>
      <arglist>(ENUMLOGFONTEX *lpelfe, NEWTEXTMETRICEX *lpntme, int FontType, LPARAM lParam)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CFRelease</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a612078d249c8e246cad1d4eafc3f3f21</anchor>
      <arglist>(cfName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a88a12bdd651c04a70fefadb73ac42362</anchor>
      <arglist>(mCGFont==0) throw FontInvalidNameExc(aName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>assert</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a62624269f932e4f701acd768d37953b5</anchor>
      <arglist>(sizeof(wchar_t)==2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>finishSetup</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>adde49e18a185e70d5d8a4b2592829331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Font::Obj::Obj(DataSourceRef dataSource, float size) std::shared_ptr&lt; CGDataProvider &gt;</type>
      <name>dataProvider</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>acb35c89f8bc1948edd79834a8cfa73ec</anchor>
      <arglist>(::CGDataProviderCreateWithData(NULL, buffer.getData(), buffer.getDataSize(), NULL),::CGDataProviderRelease)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5685ea33102481208d352e00531c3ad3</anchor>
      <arglist>(!dataProvider) throw FontInvalidNameExc()</arglist>
    </member>
    <member kind="function">
      <type>privateFontCollection</type>
      <name>AddMemoryFont</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae9b96d230896d487c24400dd24ef7c44</anchor>
      <arglist>(buffer.getData(), buffer.getDataSize())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a2a64e3b3803bce5cd2f98651bf213a66</anchor>
      <arglist>(count&lt;=0) throw FontInvalidNameExc()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; void &gt;</type>
      <name>fontFamily</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aa7358bf053d932eda06b021e804ee347</anchor>
      <arglist>(malloc(sizeof(Gdiplus::FontFamily)), free)</arglist>
    </member>
    <member kind="function">
      <type>privateFontCollection</type>
      <name>GetFamilies</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aab7d61962f491f28b9d0dd694ad36ca9</anchor>
      <arglist>(1,(Gdiplus::FontFamily *) fontFamily.get(),&amp;found)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a71dc10e520dd6bd7f9e30a9ba2ce06c0</anchor>
      <arglist>(found!=0)</arglist>
    </member>
    <member kind="function">
      <type>else throw</type>
      <name>FontInvalidNameExc</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab56ac94e00ebcc5b88b7cff2a7439154</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>add6d255be8d927eb66114814068b6371</anchor>
      <arglist>(numFonts&lt; 1) throw FontInvalidNameExc()</arglist>
    </member>
    <member kind="function">
      <type>ImageSourceRef</type>
      <name>loadImage</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad49aa427548e365f95336af782c2161a</anchor>
      <arglist>(const fs::path &amp;path, ImageSource::Options options=ImageSource::Options(), std::string extension=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>ImageSourceRef</type>
      <name>loadImage</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a720be629dd9f6a149ce02033b2dd7552</anchor>
      <arglist>(DataSourceRef dataSource, ImageSource::Options options=ImageSource::Options(), std::string extension=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeImage</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6fbfe793b4f48c02e115bc9f9a4b92e8</anchor>
      <arglist>(const fs::path &amp;path, const ImageSourceRef &amp;imageSource, ImageTarget::Options options, std::string extension)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeImage</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae77edb896e2f8e90bba70000725f3b6e</anchor>
      <arglist>(DataTargetRef dataTarget, const ImageSourceRef &amp;imageSource, ImageTarget::Options options=ImageTarget::Options(), std::string extension=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeImage</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a0d6e2471ce9d2c0eb4eb50a39e73aba2</anchor>
      <arglist>(ImageTargetRef imageTarget, const ImageSourceRef &amp;imageSource)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1c674e3865e00833826d30a21a1a6e33</anchor>
      <arglist>(ostream &amp;out, const JsonTree &amp;json)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt;</type>
      <name>firstFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1c3e869a78a02a520fe9007d052efae2</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;firstPoint, const Vec3&lt; T &gt; &amp;secondPoint, const Vec3&lt; T &gt; &amp;thirdPoint)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt;</type>
      <name>nextFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a388ba9e39bb5f7e31763a23478e7d685</anchor>
      <arglist>(const Matrix44&lt; T &gt; &amp;prevMatrix, const Vec3&lt; T &gt; &amp;prevPoint, const Vec3&lt; T &gt; &amp;curPoint, Vec3&lt; T &gt; &amp;prevTangent, Vec3&lt; T &gt; &amp;curTangent)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt;</type>
      <name>lastFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>adb1940d9071401c7c47a164ef4953a86</anchor>
      <arglist>(const Matrix44&lt; T &gt; &amp;prevMatrix, const Vec3&lt; T &gt; &amp;prevPoint, const Vec3&lt; T &gt; &amp;lastPoint)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix44f</type>
      <name>firstFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a613b8557fdd309e843ddc796bda91662</anchor>
      <arglist>(const Vec3f &amp;firstPoint, const Vec3f &amp;secondPoint, const Vec3f &amp;thirdPoint)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix44f</type>
      <name>nextFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a2d4b1fae6d9dc4cad57bcd617923bc91</anchor>
      <arglist>(const Matrix44f &amp;prevMatrix, const Vec3f &amp;prevPoint, const Vec3f &amp;curPoint, Vec3f &amp;prevTangent, Vec3f &amp;curTangent)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix44f</type>
      <name>lastFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a660a29457d3d974343a68fd1ed70d0d6</anchor>
      <arglist>(const Matrix44f &amp;prevMatrix, const Vec3f &amp;prevPoint, const Vec3f &amp;lastPoint)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix44d</type>
      <name>firstFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae8936880d5e58010be6a8b29a556bbad</anchor>
      <arglist>(const Vec3d &amp;firstPoint, const Vec3d &amp;secondPoint, const Vec3d &amp;thirdPoint)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix44d</type>
      <name>nextFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a8f26e68f210fc98e78e2f502616d60ff</anchor>
      <arglist>(const Matrix44d &amp;prevMatrix, const Vec3d &amp;prevPoint, const Vec3d &amp;curPoint, Vec3d &amp;prevTangent, Vec3d &amp;curTangent)</arglist>
    </member>
    <member kind="function">
      <type>template Matrix44d</type>
      <name>lastFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a8207d125dd30649115bd71f73e41294a</anchor>
      <arglist>(const Matrix44d &amp;prevMatrix, const Vec3d &amp;prevPoint, const Vec3d &amp;lastPoint)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>nlerp</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a3bcf948e559a12a02c819457f8b951bd</anchor>
      <arglist>(float t, float a, float b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>linearYatX</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a70243149cd8608ed717bab4502bd1009</anchor>
      <arglist>(const Vec2&lt; T &gt; p[2], T x)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>linearCrossings</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a941edc4762d1d66e9cd6779677638bf6</anchor>
      <arglist>(const Vec2&lt; T &gt; p[2], const Vec2f &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sleep</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a014dc9c26196cb3a83c83f36c0ef797a</anchor>
      <arglist>(float milliseconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getClippedScaledRects</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a9182c71107e67e29d957225a02f98a82</anchor>
      <arglist>(const Area &amp;srcSurfaceBounds, const Rectf &amp;srcRect, const Area &amp;dstSurfaceBounds, const Area &amp;dstArea, Rectf *resultSrcRect, Area *resultDstArea)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6248d694a9a3d1f3dbb7e49b4eeb994d</anchor>
      <arglist>(std::ostream &amp;o, const RectT&lt; T &gt; &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>IStreamFileRef</type>
      <name>loadFileStream</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a0567ed6e407fc665725c7c7d2c78ff60</anchor>
      <arglist>(const fs::path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; OStreamFile &gt;</type>
      <name>writeFileStream</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab9164657b7becde39334d8d3f453faf0</anchor>
      <arglist>(const fs::path &amp;path, bool createParents=true)</arglist>
    </member>
    <member kind="function">
      <type>IoStreamFileRef</type>
      <name>readWriteFileStream</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab44424110d981c852598f8a3d89ba79a</anchor>
      <arglist>(const fs::path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadStreamMemory</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a820698ccd3520fbaba30c624de979994</anchor>
      <arglist>(IStreamRef is, std::shared_ptr&lt; uint8_t &gt; *resultData, size_t *resultDataSize)</arglist>
    </member>
    <member kind="function">
      <type>Buffer</type>
      <name>loadStreamBuffer</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6f247505ffa143d331909c906b66ff71</anchor>
      <arglist>(IStreamRef is)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cpuidwrap</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a2a418086ca843e514985e78395ee017b</anchor>
      <arglist>(int *p, unsigned int param)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lockToLogicalProcessor</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a7e26fd76860d704d0051dc9ce871341c</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cpuid</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad040b4cff0911da14c6f54c660345c3d</anchor>
      <arglist>(int whichlp, PLOGICALPROCESSORDATA p)</arglist>
    </member>
    <member kind="function">
      <type>Surface</type>
      <name>renderStringPow2</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a744b10b4104bd320a398cc7c1a5cb07c</anchor>
      <arglist>(const std::string &amp;str, const Font &amp;font, const ColorA &amp;color, Vec2i *actualSize, float *baselineOffset=0)</arglist>
    </member>
    <member kind="function">
      <type>Surface</type>
      <name>renderString</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a681e52c6285bd00030325094e4bf2cc3</anchor>
      <arglist>(const string &amp;str, const Font &amp;font, const ColorA &amp;color, float *baselineOffset)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>stdAlloc</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4f2d65b28872faf7f90c82643df1ba7a</anchor>
      <arglist>(void *userData, unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stdFree</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a08fe4a003bc128070211160dd1f4f905</anchor>
      <arglist>(void *userData, void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>stringLengthUtf8</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a20862ab101293fad75e220fbfae58bd4</anchor>
      <arglist>(const char *str, size_t lengthInBytes=0)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>nextCharUtf8</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae1a9b4b049959b293dbd676fdc81c10a</anchor>
      <arglist>(const char *str, size_t *inOutByte, size_t lengthInBytes=0)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>advanceCharUtf8</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>af03ff0cf135716bd29ad465d69bcfe99</anchor>
      <arglist>(const char *str, size_t numChars, size_t lengthInBytes=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lineBreakUtf8</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad50b9a0c5fcf324483972742f56ab476</anchor>
      <arglist>(const char *line, const std::function&lt; bool(const char *, size_t)&gt; &amp;measureFn, std::function&lt; void(const char *, size_t)&gt; lineProcessFn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcLinebreaksUtf8</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>addf78fcb03235268093a20d8348d6386</anchor>
      <arglist>(const char *str, std::vector&lt; uint8_t &gt; *resultBreaks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcLinebreaksUtf8</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1cd3044f309f7e721ed79301ade38aab</anchor>
      <arglist>(const char *str, size_t strLength, std::vector&lt; uint8_t &gt; *resultBreaks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcLinebreaksUtf16</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a351e0ef5fb38bbd93eeaab818ef89d99</anchor>
      <arglist>(const uint16_t *str, std::vector&lt; uint8_t &gt; *resultBreaks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcLinebreaksUtf16</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a0677ab9a5e5ae156a252ba625efeb164</anchor>
      <arglist>(const uint16_t *str, size_t strLength, std::vector&lt; uint8_t &gt; *resultBreaks)</arglist>
    </member>
    <member kind="function">
      <type>IStreamUrlRef</type>
      <name>loadUrlStream</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a9fdbcb205154eb74e72a9226edce3f8c</anchor>
      <arglist>(const Url &amp;url, const UrlOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>IStreamUrlRef</type>
      <name>loadUrlStream</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac8e403ec35fcc2d466ad856c697c4301</anchor>
      <arglist>(const std::string &amp;url, const std::string &amp;user, const std::string &amp;password, const UrlOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>safeInternetCloseHandle</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aeabf3ae807ae2eb4cdd3ae8c389d9522</anchor>
      <arglist>(HINTERNET hInternet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>testAndThrowHttpStatus</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a470eba39e83e270ff3e1d983064a5fc2</anchor>
      <arglist>(HINTERNET hInternet)</arglist>
    </member>
    <member kind="function">
      <type>fs::path</type>
      <name>expandPath</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae781343c5e29106e9bb2661800591349</anchor>
      <arglist>(const fs::path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>fs::path</type>
      <name>getHomeDirectory</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a2b598230b99b65cfa51a92eace60abc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fs::path</type>
      <name>getDocumentsDirectory</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aa4e3c9b5bd9041dc72842ed5834d67e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fs::path</type>
      <name>getTemporaryDirectory</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1c4b33178657dc62b4274f64dee4dc8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>fs::path</type>
      <name>getTemporaryFilePath</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a3f932b4d725903eac6230672f4a59b28</anchor>
      <arglist>(const std::string &amp;prefix=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPathDirectory</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae6ed416d1d9f51eb8de3d43ad4565c20</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPathFileName</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a7394aab1a3cb8ed3d304a9a945c16ff2</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPathExtension</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a65402f44675f45804bec44b754dc3634</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>createDirectories</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>af4b8ad67998031cf889182a8a5d1c5ad</anchor>
      <arglist>(const fs::path &amp;path, bool createParents=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>launchWebBrowser</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a8874403f7696a261886a5e64144dde06</anchor>
      <arglist>(const Url &amp;url)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteFile</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a94d5ef744d4556e04d67f7be7bdb087a</anchor>
      <arglist>(const fs::path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>split</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad6bbb2d260d3fc4cc6dcd295147b81d6</anchor>
      <arglist>(const std::string &amp;str, char separator, bool compress=true)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>split</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4f3796ac1738cfbbd32fae273cb37bca</anchor>
      <arglist>(const std::string &amp;str, const std::string &amp;separators, bool compress=true)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>loadString</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a8633ec4e77ac31ee162d5e81dfbdfdb6</anchor>
      <arglist>(DataSourceRef dataSource)</arglist>
    </member>
    <member kind="function">
      <type>wstring</type>
      <name>toUtf16</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a202edcdf0600aeef42bf2918bfca180a</anchor>
      <arglist>(const std::string &amp;utf8)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>toUtf8</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad18f0eef583db6c8d360db77d8f1b355</anchor>
      <arglist>(const std::wstring &amp;utf16)</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; string &gt;</type>
      <name>stackTrace</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a03414bb985e32d8d5abdaec198c67ece</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int16_t</type>
      <name>swapEndian</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a03115204b26baeae65cc9ecac9b79611</anchor>
      <arglist>(int16_t val)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>swapEndian</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1908a73491a8bc38a1771a5307f63bab</anchor>
      <arglist>(uint16_t val)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>swapEndian</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a09e891e5903fa0d3ebc134434989e01a</anchor>
      <arglist>(int32_t val)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>swapEndian</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>af45659ccd7b6a856c66c3c33231832b4</anchor>
      <arglist>(uint32_t val)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>swapEndian</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a7b40eea7333e9cd70610df3fca76953d</anchor>
      <arglist>(float val)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>swapEndian</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a12b0529d707b16f70b5d43e8de2e1c23</anchor>
      <arglist>(double val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapEndianBlock</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a023a4abe2acda0d4b1df324898e53f16</anchor>
      <arglist>(uint16_t *blockPtr, size_t blockSizeInBytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swapEndianBlock</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad385840f68925ed0a1fcabff3c1300c7</anchor>
      <arglist>(float *blockPtr, size_t blockSizeInBytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseItem</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a812ba58b098a00b6a590def2c011965d</anchor>
      <arglist>(const rapidxml::xml_node&lt;&gt; &amp;node, XmlTree *parent, XmlTree *result, const XmlTree::ParseOptions &amp;parseOptions)</arglist>
    </member>
    <member kind="function">
      <type>ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aa0374a726bd49f390da046ca3126d913</anchor>
      <arglist>(ostream &amp;out, const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toRadians</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a58fcd32682c783702ba286c45461ef0a</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>toRadians</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a58d7e5dcc9af7b7126244d563ce7ccf2</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>toDegrees</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a15dd7288be984f011acc0ce3d94d6094</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>toDegrees</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a7d491d9648b463ff7e6c2bdd7796843f</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lerp</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab5ba4695d2834e0a5ae92239967e6884</anchor>
      <arglist>(const T &amp;a, const T &amp;b, L factor)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lmap</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>af7f7062e11558323dd6d478b3ab75806</anchor>
      <arglist>(T val, T inMin, T inMax, T outMin, T outMax)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bezierInterp</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>af802093fd5b545817598a52b7a03c934</anchor>
      <arglist>(T a, T b, T c, T d, L t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>bezierInterpRef</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a0424bbbeed35858cb84c757bd2af2503</anchor>
      <arglist>(const T &amp;a, const T &amp;b, const T &amp;c, const T &amp;d, L t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>constrain</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a8f2890f3e88827988771e37f9954bd29</anchor>
      <arglist>(T val, T minVal, T maxVal)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sinx_over_x</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a392089cbf345bd89da084a54c45fb385</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>log2floor</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>abdf2e5797e2b8111a03ee3ab0a20e3a1</anchor>
      <arglist>(uint32_t x)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>log2ceil</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4a4fb9612a16029e421ca1356603387d</anchor>
      <arglist>(uint32_t x)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>nextPowerOf2</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6bfdf96389bcb6fe80b91ee5eddbbd4d</anchor>
      <arglist>(uint32_t x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solveLinear</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab3bf9f8700dbc0abe80aef923810c5d3</anchor>
      <arglist>(T a, T b, T result[1])</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>solveQuadratic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a10cc7dbd84b34468b626f9db35dbd353</anchor>
      <arglist>(T a, T b, T c, T result[2])</arglist>
    </member>
    <member kind="function">
      <type>ColorT&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4c8d3f8fe316acc15e4f144f37f562c8</anchor>
      <arglist>(Y s, const ColorT&lt; T &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>ColorAT&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>afcf72d08feeb11c3114050530dc265e4</anchor>
      <arglist>(Y s, const ColorAT&lt; T &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>DataSourceRef</type>
      <name>loadUrl</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a87eaee595ba54a4e230096ef654222a9</anchor>
      <arglist>(const std::string &amp;urlString, const UrlOptions &amp;options=UrlOptions())</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeNone</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aeb0499f1d9aef8a4bc94f3c2fc2e840b</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInQuad</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a8cb4db9f9378635d8cfeaf84857a884d</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutQuad</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab64ed1c6bb650a29df83dbc1b1568b66</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInOutQuad</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a71a4ca8d5df601f6edc54afcd6e56211</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutInQuad</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a754c5de7e4a3f8ccb155fa92fa96d1da</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInCubic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a03c3c7b2f59cc0194ecfdd05aa648e37</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutCubic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a467bf2c001ff148d1e110facc6c2c6f8</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInOutCubic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a61be228494be6b9cbc7d8b4bd641d100</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutInCubic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>afb25e174959ade822ef21a7d2fd6b8d4</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInQuart</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a684baa1ace5db911066542e543d11f5d</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutQuart</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac27137a9ea8f06474ea11d44064ac73f</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInOutQuart</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a460fa62c47c43670d16134c847d3543e</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutInQuart</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac2a04fb1b62121158a13084e0888839b</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInQuint</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a517d1bd987afd1f88d130fe065073576</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutQuint</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a7092c573b41c4969fc5ae4bc2ddecb97</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInOutQuint</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a55bb4775c0bd9280f2abd2474819def2</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutInQuint</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aac9e142ddc082ed26cc717afd767ec9f</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInSine</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aafd807f639ad81149494f66bbf159838</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutSine</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a643af8c93db6a1a0cee0abde2125554a</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInOutSine</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5322436c956f7b9eef26759d6834eddb</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutInSine</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a2353e1dd8ed6c39a75972e8d6c38cc6a</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInExpo</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aca0ff180655ab50eadfea71a7336eba8</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutExpo</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad5c0b36cf2a776245e97a9388b2a90ab</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInOutExpo</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>acf881767739a6d1e23f818910044e60b</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutInExpo</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a3177b6a52949f43c72d8caa601f058bc</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInCirc</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a042095cf2c66b0a7510dfd1f3096a146</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutCirc</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>afebeb8b03d62a61f6b1a5e31eaafbc23</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInOutCirc</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a7fce0fcea04051e45df54d13ac1ebeae</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutInCirc</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1cfcb6817aa420e5cb310c2eefb92506</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInBounce</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4edc572c15125138d105a797f2d2863b</anchor>
      <arglist>(float t, float a=1.70158f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutBounce</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1e3216ca72228cf15e1d67e2d2fda054</anchor>
      <arglist>(float t, float a=1.70158f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInOutBounce</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a880841c340688b14bbe111a2e86088f7</anchor>
      <arglist>(float t, float a=1.70158f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutInBounce</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aee857ee0670516b88423b781cff9ea6f</anchor>
      <arglist>(float t, float a=1.70158f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInBack</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad6331c7c6ef02d67a3c7fbea7e54c8d9</anchor>
      <arglist>(float t, float s=1.70158f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutBack</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a85f73eee00b69036af5f672e9dae6449</anchor>
      <arglist>(float t, float s=1.70158f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInOutBack</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab2dd0b86c67a04bc98f049d67db168bd</anchor>
      <arglist>(float t, float s=1.70158f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutInBack</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad7bdc56b774169887c76e9664e3185af</anchor>
      <arglist>(float t, float s)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInElastic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad7d98eea46f712206c91782dbe8d6f98</anchor>
      <arglist>(float t, float amplitude, float period)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutElastic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4ad93bca24dad2e4beb577a2c38353c4</anchor>
      <arglist>(float t, float amplitude, float period)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInOutElastic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aab4bdf9a775db0b4b14df599dc3e0dbc</anchor>
      <arglist>(float t, float amplitude, float period)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutInElastic</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aa7062e137e1eda02e6e89daec8290684</anchor>
      <arglist>(float t, float amplitude, float period)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInAtan</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a45e3cb2d5a2b1e46071a1027e7d16893</anchor>
      <arglist>(float t, float a=15)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeOutAtan</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a85844d4d294d4a095296398c2188e761</anchor>
      <arglist>(float t, float a=15)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>easeInOutAtan</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab0fd1a709378df4ee23e37dc3f0934b8</anchor>
      <arglist>(float t, float a=15)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt;</type>
      <name>firstFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a72334f6c07944f96eb5962f0d4643d23</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;firstPoint, const Vec4&lt; T &gt; &amp;secondPoint, const Vec4&lt; T &gt; &amp;thirdPoint)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt;</type>
      <name>nextFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a31a91747888155130337c3e7e3a22c04</anchor>
      <arglist>(const Matrix44&lt; T &gt; &amp;prevMatrix, const Vec4&lt; T &gt; &amp;prevPoint, const Vec4&lt; T &gt; &amp;curPoint, Vec4&lt; T &gt; &amp;prevTangent, Vec4&lt; T &gt; &amp;curTangent)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt;</type>
      <name>lastFrame</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac85aafc69393bd31db27c33e8df94f03</anchor>
      <arglist>(const Matrix44&lt; T &gt; &amp;prevMatrix, const Vec4&lt; T &gt; &amp;prevPoint, const Vec4&lt; T &gt; &amp;lastPoint)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44f</type>
      <name>SseMultiply</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>af8b2c96b868dc1212b194689d9224f73</anchor>
      <arglist>(const Matrix44f &amp;mat0, const Matrix44f &amp;mat1)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44f</type>
      <name>SseInvert</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad9fa895c994ff76573458cfdd5ec3567</anchor>
      <arglist>(const Matrix44f &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad6f342436fdfabadc08aefba1c9e1952</anchor>
      <arglist>(std::ostream &amp;out, const Path2d &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a81ab3d6ae7ce9ab4633b62030a9b7185</anchor>
      <arglist>(std::ostream &amp;o, const Plane&lt; T &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>afcd4d0bb0835846a303df15a3fbaf969</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;vec, const Quaternion&lt; T &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>randSeed</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>acbd626335ccefa6b3a8c30eb072279a6</anchor>
      <arglist>(unsigned long seedValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>randBool</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a45b7d562dca29a2b50ca7313a09a3668</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>randInt</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aedf80ba7eace9f6369aa0ba639b11ec6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>randInt</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac130cc676b0813f4de3be9acbb5b1fb0</anchor>
      <arglist>(int32_t v)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>randInt</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6da6784e077165a635d737c328803908</anchor>
      <arglist>(int32_t a, int32_t b)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>randFloat</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab7637c0d6db3b9234d15be30c2e7ccb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>randFloat</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>acdce31142cd6ad87fb673e4e3d53f06b</anchor>
      <arglist>(float v)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>randFloat</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a525935bc7e3f1e1b43dca642c381165d</anchor>
      <arglist>(float a, float b)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>randPosNegFloat</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a03d75ec664f2a52ee020f7dc336a7376</anchor>
      <arglist>(float a, float b)</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>randVec3f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a52eb0358cc915e37b8e8c3a3c6e4a04e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>randVec2f</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab081b92ad309e8853392a56434431709</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>randGaussian</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6602a13cb0df6220babec1aaa2341a9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad4e6a7bcbc413f573b7e5580ca744841</anchor>
      <arglist>(std::ostream &amp;outp, const System::NetworkAdapter &amp;adapter)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>tweenLerp</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>afea54ab087c36314a1ba675abc994431</anchor>
      <arglist>(const T &amp;start, const T &amp;end, float time)</arglist>
    </member>
    <member kind="function">
      <type>Quatf</type>
      <name>tweenLerp</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aad309a6c2580ad98848207d46b8a2765</anchor>
      <arglist>(const Quatf &amp;start, const Quatf &amp;end, float time)</arglist>
    </member>
    <member kind="function">
      <type>Quatd</type>
      <name>tweenLerp</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a19adc6381ecbf942605d961d89120ef8</anchor>
      <arglist>(const Quatd &amp;start, const Quatd &amp;end, float time)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5b8daf6759ead301f522da03b4c465bc</anchor>
      <arglist>(std::ostream &amp;out, const Url &amp;url)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aa646d6c168125be064a7bbedc773386a</anchor>
      <arglist>(std::istream &amp;is, Url &amp;url)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getPathSeparator</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aabe408479a7fa64a7ff8b705100c122e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ac77d757b302731879c7ad8525eaa90de</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fromString</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a70db084d03f9df2913bca81d5e78cf8b</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Url</type>
      <name>fromString</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a3eda8e09ee3f9e64b035650481e70a4d</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>int8_t</type>
      <name>swapEndian</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a77e9e5c58d673373aa837eba3cd6ecea</anchor>
      <arglist>(int8_t val)</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>swapEndian</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad0a4422c2d087828534834dc884dee04</anchor>
      <arglist>(uint8_t val)</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>toPolar</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a32edc174fc54523e8a5d304c882bcd26</anchor>
      <arglist>(Vec2&lt; T &gt; car)</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>fromPolar</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aabeb1da7b37ae95bd1d00230aea9d973</anchor>
      <arglist>(Vec2&lt; T &gt; pol)</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5fd2a978530d4fe0f9530c193afbcc79</anchor>
      <arglist>(Y s, const Vec2&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a815a7c0ccfb95ac3c9c14fd1a2858405</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;v, Y s)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ab16bdfda06c3b426d76016ce3d8a122f</anchor>
      <arglist>(Y s, const Vec3&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a2942b477b9113ecc0aaa3e09fb7185e0</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;v, Y s)</arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aa4e06a06ca4db31403bd13e68d12f2f7</anchor>
      <arglist>(Y s, const Vec4&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a164a9e827dc3d31b9c89df8245f0c1e7</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;v, Y s)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a1a2791d20778e7119aa84213da3f89e5</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;a, const Vec2&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ae5ccc39c9b220cc7b19ac24172223afb</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;a, const Vec3&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a19387216aacb9a150814346c57729f6c</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;a, const Vec4&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>cross</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aa2c02b83cf67e5cf3d8d411f9f1719e6</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;a, const Vec3&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>cross</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a50716fbf1f8e884ba689a292d6b336dc</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;a, const Vec4&lt; T &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a6778e2a88f47737cb85fbd5e35c83b89</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a5ccc6f0e2f12dc6380e91bca0784753e</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ad72fc534b611d48e33ca599abb5a804e</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;a)</arglist>
    </member>
    <member kind="variable">
      <type>Font::Obj::Obj(const string &amp;aName, float aSize)</type>
      <name>mCGFont</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a93e61751836f84af8121af17568d566e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>mCTFont</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aa0a5123f1f6d8720036519334b87fa46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::CFStringRef</type>
      <name>fullName</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a8ce490c2db84399c935cb509360b5299</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>string</type>
      <name>result</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a39abeeee2fc580f6d0f9359967e6d6a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>wstring</type>
      <name>faceName</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>ade7d33d4d4ae0601b07b2163a1da0a99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>mHfont</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a9a2fd6cce484c3ae9f5a7d37cda10c55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>mGdiplusFont</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a89d912e05615a5d4c9d92bbab1870f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>INT</type>
      <name>found</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a90d1b0ef7f78d1f26f3fc25213a2788d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>INT</type>
      <name>count</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a49349787b58c4b21097e27f0b9bc14e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>WCHAR</type>
      <name>familyName</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a0e5522e2fa6e03c54058b770e909131e</anchor>
      <arglist>[1024]</arglist>
    </member>
    <member kind="variable">
      <type>Gdiplus::PrivateFontCollection</type>
      <name>privateFontCollection</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a4688aac388c003c9150d47c275829a0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ci::Buffer</type>
      <name>buffer</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aba4f36c69e234b56e03daa47da5c7a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DWORD</type>
      <name>numFonts</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>aac73deb3fb41a10193111804d3c14b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>EPSILON_VALUE</name>
      <anchorfile>namespacecinder.html</anchorfile>
      <anchor>a9281e216c0a051535fd4382246debff0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Arcball</name>
    <filename>classcinder_1_1_arcball.html</filename>
    <member kind="function">
      <type></type>
      <name>Arcball</name>
      <anchorfile>classcinder_1_1_arcball.html</anchorfile>
      <anchor>a397047fbc89f92f170c6b5d348f9b52c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Arcball</name>
      <anchorfile>classcinder_1_1_arcball.html</anchorfile>
      <anchor>a2610b7e4da751099491ea8f22786def4</anchor>
      <arglist>(const Vec2i &amp;aScreenSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classcinder_1_1_arcball.html</anchorfile>
      <anchor>af3728a26c5a2663fd6df3675dafa7373</anchor>
      <arglist>(const Vec2i &amp;mousePos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classcinder_1_1_arcball.html</anchorfile>
      <anchor>a9d8be9604c68528546e4e0568a0b8c44</anchor>
      <arglist>(const Vec2i &amp;mousePos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetQuat</name>
      <anchorfile>classcinder_1_1_arcball.html</anchorfile>
      <anchor>a470f9dfe964186869a8840c6fc769e25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quatf</type>
      <name>getQuat</name>
      <anchorfile>classcinder_1_1_arcball.html</anchorfile>
      <anchor>ab6d7528ee52fcf901851b1b721c3f694</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuat</name>
      <anchorfile>classcinder_1_1_arcball.html</anchorfile>
      <anchor>a05518bd979d69b2034427b68488169f9</anchor>
      <arglist>(const Quatf &amp;quat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWindowSize</name>
      <anchorfile>classcinder_1_1_arcball.html</anchorfile>
      <anchor>a989783a674a99d3e234d047a86ac5159</anchor>
      <arglist>(const Vec2i &amp;aWindowSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCenter</name>
      <anchorfile>classcinder_1_1_arcball.html</anchorfile>
      <anchor>ad70dda62da6aad73a5ea41f78b8a5548</anchor>
      <arglist>(const Vec2f &amp;aCenter)</arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>getCenter</name>
      <anchorfile>classcinder_1_1_arcball.html</anchorfile>
      <anchor>a2d4cf52f0dcfff41482219e5b1a1ec30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadius</name>
      <anchorfile>classcinder_1_1_arcball.html</anchorfile>
      <anchor>a379d75d6e4bce61492468ff5d21b3d3d</anchor>
      <arglist>(float aRadius)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRadius</name>
      <anchorfile>classcinder_1_1_arcball.html</anchorfile>
      <anchor>a041c294eefeeba44c3dcee18c5e60015</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstraintAxis</name>
      <anchorfile>classcinder_1_1_arcball.html</anchorfile>
      <anchor>a59b4d8d73eafab6799fc08a022a56b12</anchor>
      <arglist>(const Vec3f &amp;aConstraintAxis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoConstraintAxis</name>
      <anchorfile>classcinder_1_1_arcball.html</anchorfile>
      <anchor>ac2cebf53c2731baeaad64fb9839d8cd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUsingConstraint</name>
      <anchorfile>classcinder_1_1_arcball.html</anchorfile>
      <anchor>a8969cfab5e485ff7ff34f83197415f56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getConstraintAxis</name>
      <anchorfile>classcinder_1_1_arcball.html</anchorfile>
      <anchor>ab0dd2290e2cffe7c77d250737c975c7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>mouseOnSphere</name>
      <anchorfile>classcinder_1_1_arcball.html</anchorfile>
      <anchor>a021f3d4efd2215617c031fd373d05e7f</anchor>
      <arglist>(const Vec2i &amp;point)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::RectT</name>
    <filename>classcinder_1_1_rect_t.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>RectT</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a2ddcab89512f8371a7382efabaf07e9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectT</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a67f35f4718d198b749229eae599ccce9</anchor>
      <arglist>(const std::vector&lt; Vec2&lt; T &gt; &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectT</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>adf917a76e5a25087be8094989d4e352d</anchor>
      <arglist>(T aX1, T aY1, T aX2, T aY2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectT</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a91922c0a9de2b89c27d04e1b92852476</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;v1, const Vec2&lt; T &gt; &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectT</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a83ad4453d33a5ed16d849b09ac5f431b</anchor>
      <arglist>(const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a7a468b6413ab83ce4eee461906120795</anchor>
      <arglist>(T aX1, T aY1, T aX2, T aY2)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getWidth</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>af6a8fea974a88165079b3a1a5d81f0b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getHeight</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a58d6f17e0f68e3a60bb9c4641e9ca63f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getAspectRatio</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a3834d27ebe51e66907ffd928f21d8f16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>calcArea</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a4e418c62cc8271435cf1a91fa2af9826</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>canonicalize</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a8eb0751485beb955814203be374b0bb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RectT</type>
      <name>canonicalized</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a3a50f9776a77f5d6ddf6638c0eadd2d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clipBy</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a245ce706fc320f2e370a0ca29163550f</anchor>
      <arglist>(const RectT &amp;clip)</arglist>
    </member>
    <member kind="function">
      <type>RectT</type>
      <name>getClipBy</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>ac2f6706b967ef017c0c4f9717e7af7de</anchor>
      <arglist>(const RectT &amp;clip) const </arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>getInteriorArea</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>acd5dafa5f955609b6ec46190c2da54a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>offset</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>ad9d159473303be347dfcb9c6367b5244</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>RectT</type>
      <name>getOffset</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>af2ad8e7c1429f02f9f6bc5c3f2d08ba6</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;off) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inflate</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>ab5f91a07da46e2989fd606a6e7f91f8f</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;amount)</arglist>
    </member>
    <member kind="function">
      <type>RectT</type>
      <name>inflated</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>aa913dda610a09beac20415eecfff462d</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;amount) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>offsetCenterTo</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a7ee77a6ee526c73844217d7562539f93</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;center)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleCentered</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>afe698c791040406799ecd7cd04b00504</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleCentered</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a0605cae5c3c121b0d5e889a5884a954c</anchor>
      <arglist>(T scale)</arglist>
    </member>
    <member kind="function">
      <type>RectT</type>
      <name>scaledCentered</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>af9debe8e07a96c39ab59685abbbfea42</anchor>
      <arglist>(T scale) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a5240c7ab19c85d3fb4477f335c38905d</anchor>
      <arglist>(T scale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>ab8d953bf7b55bdaa63321983f47f218d</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>RectT</type>
      <name>scaled</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a9dc51a3d962de0f313e4635199112aa9</anchor>
      <arglist>(T scale) const </arglist>
    </member>
    <member kind="function">
      <type>RectT</type>
      <name>scaled</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a7b58d842a7f12e561223085f7d3c1979</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;scale) const </arglist>
    </member>
    <member kind="function">
      <type>RectT</type>
      <name>transformCopy</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>abc827023cffd36fc5eaa7b19afe0e4b4</anchor>
      <arglist>(const class MatrixAffine2&lt; T &gt; &amp;matrix) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>abe82cd2dceef5f0e71442f1b721fab96</anchor>
      <arglist>(const Vec2&lt; Y &gt; &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>aeaa54fad5c57ac428d43c45c966e5b36</anchor>
      <arglist>(const RectT &amp;rect) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>distance</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a29c8e3cb336336d1dc91e4a9fded8029</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>distanceSquared</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a8a339648e06c5532d7ec2f33d31e84d4</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>closestPoint</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a0dec51d4bf4595dd198d02cc65e94fe2</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getX1</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a81f0abf266f4494d4a914c5187f297c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getY1</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>ac805c67afc00659f69ba58eea551aaed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getX2</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a7884be3e6b861c94ec20dac94290e746</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getY2</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>ad6f96b66fac7a175d62d0d704e14ecd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>getUpperLeft</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a9fbf9606c8c57404ba66809b578bc770</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>getUpperRight</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a5b56f80beac73ca3db88208e0421f5f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>getLowerRight</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a4b5b1b60fb168df311ad6cecb3ab01e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>getLowerLeft</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a399ef72345b5ab4d34a940348c5d09e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>getCenter</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>afbf259e0788bc2e4116b189855b40503</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>getSize</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a37682f7ac70978def8266ebd270c9bbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RectT</type>
      <name>getCenteredFit</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>ac2566f9b86697782719ea7639e39e25e</anchor>
      <arglist>(const RectT &amp;other, bool expand) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>include</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a41213a4dd70358ca9443d4556e2803ed</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>include</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a2613d1d32eb577047193ffbe7a8bf2ad</anchor>
      <arglist>(const std::vector&lt; Vec2&lt; T &gt; &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>include</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a366e7fbce80e12cdb9e7326f72f04842</anchor>
      <arglist>(const RectT &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>const RectT&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a0c1f4c084a42e62250fd9b10c619ecb5</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>const RectT&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a3e24b5f6716d3b70c1169e065fcabf73</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>const RectT&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a734bef0bf278afc3536683fc1376d392</anchor>
      <arglist>(T s) const </arglist>
    </member>
    <member kind="function">
      <type>const RectT&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a6a07daba9e15396320dc135a327c7228</anchor>
      <arglist>(T s) const </arglist>
    </member>
    <member kind="function">
      <type>const RectT&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a8cbcda360ec60b382872fe6d1a085fd4</anchor>
      <arglist>(const RectT&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const RectT&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>aadbeb692007db1a364f00e5b7e96528b</anchor>
      <arglist>(const RectT&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>RectT&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>aef14ce5bc5b124d0c77fc33f110f5aa8</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>RectT&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a1988cbd186f877197a7c20d503e4de24</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>RectT&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>abcc6dc39040a32ebf9c675ca22f2f631</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function">
      <type>RectT&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a87cb7a3f8ac576a343c872f4b7b7c92d</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>x1</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a71848bc6eebdcde5f710d0151b547917</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>y1</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>ada1efad0cd7d9af84355e6c17a1926f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>x2</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a017d6c0f0ad1a56f18d33a97302e9c16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>y2</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>ac91ffc71f8baee8d454c8cc63f5b3007</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classcinder_1_1_rect_t.html</anchorfile>
      <anchor>a39764fa1c3692da9868ceee9b36853c6</anchor>
      <arglist>(std::ostream &amp;o, const RectT &amp;rect)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Area</name>
    <filename>classcinder_1_1_area.html</filename>
    <member kind="function">
      <type></type>
      <name>Area</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>ae20e53e29e57fa488c92029710d5ac09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Area</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a6e2e2c8af81f2bae018b1844ee6a2360</anchor>
      <arglist>(const Vec2i &amp;UL, const Vec2i &amp;LR)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Area</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>afbcc6615874dde0840a054bddcfb81b3</anchor>
      <arglist>(int32_t aX1, int32_t aY1, int32_t aX2, int32_t aY2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Area</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a76ec0c23e787d95a8368dd6420077293</anchor>
      <arglist>(const RectT&lt; float &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>aa010486c4fbfdad0ede851bc222f4541</anchor>
      <arglist>(int32_t aX1, int32_t aY1, int32_t aX2, int32_t aY2)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getWidth</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>abbace43b37f5a8474e8d784be94904de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getHeight</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a779a5deba967ed4b3a706f96688a9151</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getSize</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a2ace53e71e72b240d4c26dd4c4df5ca6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>getCenter</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>abad1b4f67e7cecfa9566ca5c3b4a2e5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>calcArea</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a816c4f53bf2ceedb883be6cc4c5bb0d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clipBy</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a0960ed87ea081a0f7f5a3f71538c0556</anchor>
      <arglist>(const Area &amp;clip)</arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>getClipBy</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a9594649182c1269724759a9133ccfd80</anchor>
      <arglist>(const Area &amp;clip) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>offset</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>ac357863bd390a265c5c1d88b8379d39f</anchor>
      <arglist>(const Vec2i &amp;off)</arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>getOffset</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a2559fe5a2fd4941dbb4caac4d4cf7e36</anchor>
      <arglist>(const Vec2i &amp;off) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveULTo</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>ac0f799ab5ca4acc60b2a4d694d3b88e0</anchor>
      <arglist>(const Vec2i &amp;newUL)</arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>getMoveULTo</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a6da2732d2a458b384275735ad683d049</anchor>
      <arglist>(const Vec2i &amp;newUL) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>afcef7c64fc089d4a95142af42465342e</anchor>
      <arglist>(int32_t expandX, int32_t expandY)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getX1</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>aa3115a64550b81a2d5a83083a88f736b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX1</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>aac1715749d3c0185923cbfd4b7ab7d14</anchor>
      <arglist>(int32_t aX1)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getY1</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a1877375565526e81ff64d0563db00cbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY1</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a8b2635408441c58b68e346109e6d372c</anchor>
      <arglist>(int32_t aY1)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getX2</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>abc5e670d3083b2b2b6928c5ab061271e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setX2</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a0de5313346606dd6b20f5d6e5e8d5ad1</anchor>
      <arglist>(int32_t aX2)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getY2</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a393f4954df8345d74fa3555ba5b62b31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setY2</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a172d34a37d1d6a7def625f4a906b797f</anchor>
      <arglist>(int32_t aY2)</arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getUL</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>acd1c7a7c07a58625ed11431e6c11dceb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getLR</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>abf452adeeaa2e097b9f1e4a8ab50fab6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>aec20711797b997937f8cf629b926d56a</anchor>
      <arglist>(const Vec2i &amp;offset) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a9a1c28c87a69c2ed62d942238abab139</anchor>
      <arglist>(const Vec2&lt; Y &gt; &amp;offset) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a2c6273b00caf04b3d81ba8de914c31dd</anchor>
      <arglist>(const Area &amp;area) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>include</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>aedad0c27b152c66933c98095e044e05d</anchor>
      <arglist>(const Vec2i &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>include</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a90520c44f88007cda35b220cb7388bf7</anchor>
      <arglist>(const std::vector&lt; Vec2i &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>include</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a43134cf8657edd2dc310010aeab5d33e</anchor>
      <arglist>(const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>distance</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a3c82afed8eaf5878520a163dca00f7d3</anchor>
      <arglist>(const Vec2&lt; Y &gt; &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>distanceSquared</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>abc59903b57d18afc808b0dc8a64c14aa</anchor>
      <arglist>(const Vec2&lt; Y &gt; &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; Y &gt;</type>
      <name>closestPoint</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a3ae8082e8bfecc94e40934735c5a7b31</anchor>
      <arglist>(const Vec2&lt; Y &gt; &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>acdb25af0f37ede984dc98cc9bb9e46ec</anchor>
      <arglist>(const Area &amp;aArea) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a5c5bc3c5d67355eae5d35c2ff493de5f</anchor>
      <arglist>(const Area &amp;aArea) const </arglist>
    </member>
    <member kind="function">
      <type>const Area</type>
      <name>operator+</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>ad86e65969c59c11caa5c7293bfc6121e</anchor>
      <arglist>(const Vec2i &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>const Area</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a8760c8807c46ca756790bf1096e2a28f</anchor>
      <arglist>(const Vec2i &amp;o) const </arglist>
    </member>
    <member kind="function">
      <type>const Area</type>
      <name>operator+</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>ac4b882214efd78abca760c192d9c373a</anchor>
      <arglist>(const Area &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Area</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>ad07b9c86783ac5dd72df62bcf9b185da</anchor>
      <arglist>(const Area &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Area &amp;</type>
      <name>operator+=</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>abc1b35271c511a2da1241a3157eee9a9</anchor>
      <arglist>(const Vec2i &amp;o)</arglist>
    </member>
    <member kind="function">
      <type>Area &amp;</type>
      <name>operator-=</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>acd67106608a0d613e68e95075e389bab</anchor>
      <arglist>(const Vec2i &amp;o)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Area</type>
      <name>proportionalFit</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a1fe7d7444cda1ff824211a0c7d1cb479</anchor>
      <arglist>(const Area &amp;srcArea, const Area &amp;dstArea, bool center, bool expand=false)</arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>x1</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a0c643ea2b13a4b5949e3adbc5ed9d8ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>y1</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a268a301f033b18450e8128f0d8dc6b26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>x2</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a4100f2a88e925db291ab28a346e71a93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32_t</type>
      <name>y2</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a1aad526096339f4b7e91cf0ceeefaad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classcinder_1_1_area.html</anchorfile>
      <anchor>a53fa2b6cae04bcfd538ec90c42ea56b5</anchor>
      <arglist>(std::ostream &amp;o, const Area &amp;area)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::AxisAlignedBox3f</name>
    <filename>classcinder_1_1_axis_aligned_box3f.html</filename>
    <member kind="function">
      <type></type>
      <name>AxisAlignedBox3f</name>
      <anchorfile>classcinder_1_1_axis_aligned_box3f.html</anchorfile>
      <anchor>a763648a295fa1efec3352568ceea7ea9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AxisAlignedBox3f</name>
      <anchorfile>classcinder_1_1_axis_aligned_box3f.html</anchorfile>
      <anchor>a52212657168a02d02e68caa3804ed0fb</anchor>
      <arglist>(const Vec3f &amp;aMin, const Vec3f &amp;aMax)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classcinder_1_1_axis_aligned_box3f.html</anchorfile>
      <anchor>a530ffd7ef15749fa22b8de21b9d51abb</anchor>
      <arglist>(const Ray &amp;ray)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>intersect</name>
      <anchorfile>classcinder_1_1_axis_aligned_box3f.html</anchorfile>
      <anchor>aecdcb76d1d762c3d27a6a6861c258567</anchor>
      <arglist>(const Ray &amp;ray, float intersections[2])</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getCenter</name>
      <anchorfile>classcinder_1_1_axis_aligned_box3f.html</anchorfile>
      <anchor>afa730bf70fd77675b9763ec51c762de0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getSize</name>
      <anchorfile>classcinder_1_1_axis_aligned_box3f.html</anchorfile>
      <anchor>a72ebfd0c764090cb2fbc9803a3c93742</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>include</name>
      <anchorfile>classcinder_1_1_axis_aligned_box3f.html</anchorfile>
      <anchor>af7ada9c9abe82addb6516f9675cad65b</anchor>
      <arglist>(const AxisAlignedBox3f &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getMin</name>
      <anchorfile>classcinder_1_1_axis_aligned_box3f.html</anchorfile>
      <anchor>a9e47bc85fdd6b7215bc9ccf575e0f6e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getMax</name>
      <anchorfile>classcinder_1_1_axis_aligned_box3f.html</anchorfile>
      <anchor>ad148cb66530b1fd65716a609b00d6ad2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getNegative</name>
      <anchorfile>classcinder_1_1_axis_aligned_box3f.html</anchorfile>
      <anchor>adae9d8b4e627f3d7a46ac5cb7eecda24</anchor>
      <arglist>(const Vec3f &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getPositive</name>
      <anchorfile>classcinder_1_1_axis_aligned_box3f.html</anchorfile>
      <anchor>ab991162e1e4ab4ec9dc9940913308604</anchor>
      <arglist>(const Vec3f &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type>AxisAlignedBox3f</type>
      <name>transformed</name>
      <anchorfile>classcinder_1_1_axis_aligned_box3f.html</anchorfile>
      <anchor>a71355d853878f5fcd3050c033b74a2a4</anchor>
      <arglist>(const Matrix44f &amp;transform) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>calcTriangleIntersection</name>
      <anchorfile>classcinder_1_1_axis_aligned_box3f.html</anchorfile>
      <anchor>a72e6d6e2b00cbabaccab9d67d8b250e5</anchor>
      <arglist>(const Ray &amp;ray, const Vec3f &amp;vert0, const Vec3f &amp;vert1, const Vec3f &amp;vert2, float *result)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>mExtents</name>
      <anchorfile>classcinder_1_1_axis_aligned_box3f.html</anchorfile>
      <anchor>a5f98aa811f30fc00a8da38ee65dee450</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>mVerts</name>
      <anchorfile>classcinder_1_1_axis_aligned_box3f.html</anchorfile>
      <anchor>a268e495e6a2f9757be01e20b49249840</anchor>
      <arglist>[8]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::BandedMatrix</name>
    <filename>classcinder_1_1_banded_matrix.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BandedMatrix</name>
      <anchorfile>classcinder_1_1_banded_matrix.html</anchorfile>
      <anchor>a1c2682f1467dc6b10bb5b12400155cf6</anchor>
      <arglist>(int iSize, int iLBands, int iUBands)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BandedMatrix</name>
      <anchorfile>classcinder_1_1_banded_matrix.html</anchorfile>
      <anchor>a27676c4ec34ffea2e4bb041d9891b617</anchor>
      <arglist>(const BandedMatrix &amp;rkM)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BandedMatrix</name>
      <anchorfile>classcinder_1_1_banded_matrix.html</anchorfile>
      <anchor>ad968a20e28730683bd69d9252e8e8b24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BandedMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_banded_matrix.html</anchorfile>
      <anchor>a6af0a28dc22572d67cd805b14dd26ba9</anchor>
      <arglist>(const BandedMatrix &amp;rkM)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSize</name>
      <anchorfile>classcinder_1_1_banded_matrix.html</anchorfile>
      <anchor>a7818f00e7e7229d1e6f88739d00d5bee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLBands</name>
      <anchorfile>classcinder_1_1_banded_matrix.html</anchorfile>
      <anchor>a091588bc3f30ef99694afb935418586a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getUBands</name>
      <anchorfile>classcinder_1_1_banded_matrix.html</anchorfile>
      <anchor>a63c79f9ab76d7985c0dbd091d02a49d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getDBand</name>
      <anchorfile>classcinder_1_1_banded_matrix.html</anchorfile>
      <anchor>a65fc097434a5b49adaaaeab3545265aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>getDBand</name>
      <anchorfile>classcinder_1_1_banded_matrix.html</anchorfile>
      <anchor>a7ee5ed0000a9e7013f31b273d036120c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLBandMax</name>
      <anchorfile>classcinder_1_1_banded_matrix.html</anchorfile>
      <anchor>a0aa26bb5439e3cd0ab2d7b2351beba6b</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getLBand</name>
      <anchorfile>classcinder_1_1_banded_matrix.html</anchorfile>
      <anchor>ae17992c371c33209ca09bc1bfe165dd1</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>getLBand</name>
      <anchorfile>classcinder_1_1_banded_matrix.html</anchorfile>
      <anchor>a08b2b66c39bd7c189ea8f26fd7672e99</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getUBandMax</name>
      <anchorfile>classcinder_1_1_banded_matrix.html</anchorfile>
      <anchor>a76be10f5ead24f74597a9b1d12dd796f</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getUBand</name>
      <anchorfile>classcinder_1_1_banded_matrix.html</anchorfile>
      <anchor>a0d7465ede2a2195601f7ff40cbf29938</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>getUBand</name>
      <anchorfile>classcinder_1_1_banded_matrix.html</anchorfile>
      <anchor>a1a0cbcc1450e56ab740b330b3337f62f</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>classcinder_1_1_banded_matrix.html</anchorfile>
      <anchor>a4d3a4fb61c896e3b2bf3d90664a7e066</anchor>
      <arglist>(int iRow, int iCol)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>classcinder_1_1_banded_matrix.html</anchorfile>
      <anchor>a78f9cb67500b09e580c7a0b4590d6ec2</anchor>
      <arglist>(int iRow, int iCol) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classcinder_1_1_banded_matrix.html</anchorfile>
      <anchor>a317940c70f96b895a161932ac37e3e5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classcinder_1_1_banded_matrix.html</anchorfile>
      <anchor>ab0a8934db4026aab2fd57aeea63e594f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::BSplineBasis</name>
    <filename>classcinder_1_1_b_spline_basis.html</filename>
    <member kind="function">
      <type></type>
      <name>BSplineBasis</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>ae0fbddf989f0879fc1faed9f1403367d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineBasis</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>a0de5511f3f8ea79f98fba1199b6be4e6</anchor>
      <arglist>(int aNumCtrlPoints, int iDegree, bool bOpen)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>a796b4b16c100732dccb716fbdd56f6e8</anchor>
      <arglist>(int aNumCtrlPoints, int iDegree, bool bOpen)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineBasis</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>aff355017bf399eaf1590fe7b815649ad</anchor>
      <arglist>(int aNumCtrlPoints, int iDegree, const float *afKnot)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>aed65a603cce019538a2f32a4d4b83013</anchor>
      <arglist>(int aNumCtrlPoints, int iDegree, const float *afKnot)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSplineBasis</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>a0325f691a50434b8397a72d57e9bc772</anchor>
      <arglist>(const BSplineBasis &amp;basis)</arglist>
    </member>
    <member kind="function">
      <type>BSplineBasis &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>a45b1b79ae876dff7fde1c9bedd4bcaa8</anchor>
      <arglist>(const BSplineBasis &amp;basis)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BSplineBasis</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>afb3c76e18d8c6b73b2376bae46c40405</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumControlPoints</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>a06cb8fccad38e62cc107c2a46bccb133</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDegree</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>a558477feb2bd808858dff1692e290964</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOpen</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>ab74a372d2fec3ae806cfb5fff8c79920</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUniform</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>af1a01a86c65806bc8ed100046dccba4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKnot</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>aab8c7baaf24a5bd50e5409390294db5f</anchor>
      <arglist>(int i, float fKnot)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getKnot</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>a9ac479b346d7fe984d85ab1ab0f25b4d</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getD0</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>aa89af20edc3504a748527138305fd155</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getD1</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>acc0b76f6498f7654b9c16c93caf7523d</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getD2</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>a4d748aa5a337c8ef71dee21e3e7f84b4</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getD3</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>aaaee681a79a7728ed6b0c3ae7ca105a6</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>a814ede35120f91917d64e122ffee3b93</anchor>
      <arglist>(float fTime, unsigned int uiOrder, int &amp;riMinIndex, int &amp;riMaxIndex) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>initialize</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>ae58ac4a67db4cce96980f5c536657129</anchor>
      <arglist>(int iNumCtrlPoints, int iDegree, bool bOpen)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>float **</type>
      <name>allocate</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>a062fc71fa17ca2e6d11053c94b56b22b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>a64bed2514832266c3091f157a89bbe96</anchor>
      <arglist>(float **aafArray)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getKey</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>a6af85ee4f603d1103ea296ba76225442</anchor>
      <arglist>(float &amp;rfTime) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mNumCtrlPoints</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>a4e32aee6127cc67c1cec201791d7a3df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mDegree</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>abaaac3384c528cb95fe273e4d1745ade</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float *</type>
      <name>mKnots</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>a150efb341f2f976ec02784bed763f760</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mOpen</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>aaccc9004645b5ea3e660b01f68cb3f03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mUniform</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>a71073c31ec2511ed04f5c7116cb613f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float **</type>
      <name>m_aafBD0</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>a913e761a4cba5306bc0d6ab5de405c16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float **</type>
      <name>m_aafBD1</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>a2f8371b746b368bfe5de764814d3613a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float **</type>
      <name>m_aafBD2</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>a597230869703bcbcae16076f28cd6690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float **</type>
      <name>m_aafBD3</name>
      <anchorfile>classcinder_1_1_b_spline_basis.html</anchorfile>
      <anchor>a83ba78ff86f8e6ca71a4e785fa71baa3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::BSpline</name>
    <filename>classcinder_1_1_b_spline.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>BSpline</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>a9b47d60f1cf5cfe0485b5ef309eba9cf</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;points, int degree, bool loop, bool open)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSpline</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>a90626b1d226ded5db8278f2c49266c98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSpline</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>aabea70da5598ab8db8ad3e2df8fbaf37</anchor>
      <arglist>(int numControlPoints, const T *controlPoints, int degree, bool loop, const float *knots)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BSpline</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>a08c4af17470d6ebdd328d08ed39a1868</anchor>
      <arglist>(const BSpline &amp;bspline)</arglist>
    </member>
    <member kind="function">
      <type>BSpline &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>a66b5c9077712b5c88dfdd53ada4288b2</anchor>
      <arglist>(const BSpline &amp;bspline)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BSpline</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>ae9fa5453fa5afd8def298c345f2028d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumControlPoints</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>a2bc3d7b03af688c97b7c221ac6946c06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDegree</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>a5c9c5b1cbd3343b97d5e5d318facf3cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumSpans</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>a3c9ea1c9488d80e201ee783a7910ab02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOpen</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>a7a53066dce619be61ea282003f13cf04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUniform</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>a3e8015c1fd64be9b14895cf0e9ce4770</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLoop</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>a4bb53def80240c7cd98e0a2f8d8bbf2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setControlPoint</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>a7a72c7d853b79b0d2fdc1ffa7d004410</anchor>
      <arglist>(int i, const T &amp;rkCtrl)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getControlPoint</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>ade54b0a595b012b243e7675fe993d93d</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKnot</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>ac512acb10ebe6a2a883cba41db657839</anchor>
      <arglist>(int i, float fKnot)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getKnot</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>a08c8eb0e88f87d7370b04e63bda57da4</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getPosition</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>af0a1bb2c83d2db8eca15c1dd0575f7e6</anchor>
      <arglist>(float t) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getDerivative</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>af6dd851f0d98c9bade07b19d7c66f8a8</anchor>
      <arglist>(float t) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getSecondDerivative</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>a071e7a774e6f6690c23ff1f4083da609</anchor>
      <arglist>(float t) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getThirdDerivative</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>a79b1557d7b5912015397fc4836c83423</anchor>
      <arglist>(float t) const </arglist>
    </member>
    <member kind="function">
      <type>T::TYPE</type>
      <name>getSpeed</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>a64cf0920673aaa74517517afe355929f</anchor>
      <arglist>(float t) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getLength</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>a91223948d7264fce4e65e49fa4b4aa7e</anchor>
      <arglist>(float fT0, float fT1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>a3432c12bc99625f7aab288a7632d1522</anchor>
      <arglist>(float t, T *position, T *firstDerivative=NULL, T *secondDerivative=NULL, T *thirdDerivative=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getTime</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>a011c2f4fe8d223ed9525e4594b9d7615</anchor>
      <arglist>(float length) const </arglist>
    </member>
    <member kind="function">
      <type>BSplineBasis &amp;</type>
      <name>getBasis</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>ad9c2815e9b254285f544dfd45d308630</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createControl</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>a5fc0c121cb3c0a1e9c87101c68417931</anchor>
      <arglist>(const T *akCtrlPoint)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mNumCtrlPoints</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>aeeeb33f555744b71bf80afd70d05fe0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>mCtrlPoints</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>a185513df827e2b241ac06c9e22d94a1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mLoop</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>a1dd0820c08227e3b118de94ef124df34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BSplineBasis</type>
      <name>mBasis</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>a2d1613202ead87e691f6030b004e7eca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mReplicate</name>
      <anchorfile>classcinder_1_1_b_spline.html</anchorfile>
      <anchor>af8f788981007c60382ccd249202592d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Buffer</name>
    <filename>classcinder_1_1_buffer.html</filename>
    <member kind="function">
      <type></type>
      <name>Buffer</name>
      <anchorfile>classcinder_1_1_buffer.html</anchorfile>
      <anchor>aa853cc3f439faa330b078fe057f6824c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Buffer</name>
      <anchorfile>classcinder_1_1_buffer.html</anchorfile>
      <anchor>a7ab24b71ff6dfd726af524850ae9391c</anchor>
      <arglist>(void *aBuffer, size_t aSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Buffer</name>
      <anchorfile>classcinder_1_1_buffer.html</anchorfile>
      <anchor>a1f37d5a245fd7eec0f6fe520b1b588f8</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Buffer</name>
      <anchorfile>classcinder_1_1_buffer.html</anchorfile>
      <anchor>ad35861bd5cad5c38c1409b67f3878fa5</anchor>
      <arglist>(std::shared_ptr&lt; class DataSource &gt; dataSource)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getAllocatedSize</name>
      <anchorfile>classcinder_1_1_buffer.html</anchorfile>
      <anchor>a601ace2e95991ec2c00021c7ec85b795</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getDataSize</name>
      <anchorfile>classcinder_1_1_buffer.html</anchorfile>
      <anchor>a286e6d627e8b07d323b8bd1787bb52dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDataSize</name>
      <anchorfile>classcinder_1_1_buffer.html</anchorfile>
      <anchor>a8b2f052bbc3040c8f7810e964d9ce4ce</anchor>
      <arglist>(size_t aSize)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getData</name>
      <anchorfile>classcinder_1_1_buffer.html</anchorfile>
      <anchor>ab6b693147de6e1e3454f6a4c0c6b6f47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>getData</name>
      <anchorfile>classcinder_1_1_buffer.html</anchorfile>
      <anchor>ad6075c67ff7b60b167e4e19e25e2f971</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; uint8_t &gt;</type>
      <name>convertToSharedPtr</name>
      <anchorfile>classcinder_1_1_buffer.html</anchorfile>
      <anchor>a4df0c39cd642266a74dc8bb217fce88a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classcinder_1_1_buffer.html</anchorfile>
      <anchor>ab57bedf7d496f00200e0f2b8f2a758aa</anchor>
      <arglist>(size_t newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>classcinder_1_1_buffer.html</anchorfile>
      <anchor>a1b067ca8751406bee75f9673aafc7ddd</anchor>
      <arglist>(const void *aData, size_t length)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classcinder_1_1_buffer.html</anchorfile>
      <anchor>a77cb040f1efccf22969a9b7f396a018f</anchor>
      <arglist>(std::shared_ptr&lt; class DataTarget &gt; dataTarget)</arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Obj &gt; Buffer::*</type>
      <name>unspecified_bool_type</name>
      <anchorfile>classcinder_1_1_buffer.html</anchorfile>
      <anchor>af501f270edb0010aa7b34264589da30e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unspecified_bool_type</name>
      <anchorfile>classcinder_1_1_buffer.html</anchorfile>
      <anchor>a97b00350ee5c80cc6760f14a1387cf15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classcinder_1_1_buffer.html</anchorfile>
      <anchor>a2316a6055d250b96aabd629a189d1348</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Camera</name>
    <filename>classcinder_1_1_camera.html</filename>
    <member kind="function">
      <type></type>
      <name>Camera</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a02af62773f797b2351d33a77af0810eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Camera</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a9f46f566edfabb4651d780069f4a46d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getEyePoint</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>acd62f0a57754c532f5a06bdc2b210642</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEyePoint</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>adc47d8722e9d820dd54d6f679ad1d4b2</anchor>
      <arglist>(const Vec3f &amp;aEyePoint)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getCenterOfInterest</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a3c22bd9fd15e9e8ee14a101022284606</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCenterOfInterest</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>ac3e66d50c6790fa331685bba5d202913</anchor>
      <arglist>(float aCenterOfInterest)</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getCenterOfInterestPoint</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a1ce43f75c96d4cccabdfe0a400d0016b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCenterOfInterestPoint</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a98a3690739cc48d206968ddf4d7c66a8</anchor>
      <arglist>(const Vec3f &amp;centerOfInterestPoint)</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getWorldUp</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a8579ca112ae5255166dd136ec77839a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWorldUp</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>ae31e963f95ff88ab93aa2ee433b482bf</anchor>
      <arglist>(const Vec3f &amp;aWorldUp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookAt</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>adc0022717918d76d87844c165047ade5</anchor>
      <arglist>(const Vec3f &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookAt</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a5476531d376377284a7ccdb007356b0c</anchor>
      <arglist>(const Vec3f &amp;aEyePoint, const Vec3f &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookAt</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a5f3f10ca159c4038a97d70dd966de71b</anchor>
      <arglist>(const Vec3f &amp;aEyePoint, const Vec3f &amp;target, const Vec3f &amp;aUp)</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getViewDirection</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>ac1f9c9ad6f45108c0236bfa03a042a1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewDirection</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a60645b23670dc2491907366f96775c8c</anchor>
      <arglist>(const Vec3f &amp;aViewDirection)</arglist>
    </member>
    <member kind="function">
      <type>Quatf</type>
      <name>getOrientation</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a3a756d2ee14092f081ba9893b23da577</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientation</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>aa55de0bd31d3837e0f221af8728b0282</anchor>
      <arglist>(const Quatf &amp;aOrientation)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFov</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>ab416d79bdc32399169084fd34906a076</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFov</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a0f38817af7fa2a89330510488fb7d5ce</anchor>
      <arglist>(float aFov)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAspectRatio</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a9f80dccd315f22ae0d0a28e4fdabad6b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAspectRatio</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>afae6ccd7828a27e08baf5e2ac822a2ba</anchor>
      <arglist>(float aAspectRatio)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getNearClip</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a4e07a6708c275d3f4b600f62b4011046</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearClip</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a885a753415d9d5cb6f7ec064bd437a10</anchor>
      <arglist>(float aNearClip)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFarClip</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a3f3194b5a19e7fa4a44782354f8feb70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFarClip</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a5df293291e2044c27c9eb88da455bbcf</anchor>
      <arglist>(float aFarClip)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getNearClipCoordinates</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a6af8b467acadc1baa5aa85252141d997</anchor>
      <arglist>(Vec3f *topLeft, Vec3f *topRight, Vec3f *bottomLeft, Vec3f *bottomRight) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFarClipCoordinates</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>ab0dfe03990aa428fa1db69e6a1068f35</anchor>
      <arglist>(Vec3f *topLeft, Vec3f *topRight, Vec3f *bottomLeft, Vec3f *bottomRight) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFrustum</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a4c0f22720b89a67413c5fbf0480e5680</anchor>
      <arglist>(float *left, float *top, float *right, float *bottom, float *near, float *far) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isPersp</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>ac8066abfc448d21408defdcc8093138f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix44f &amp;</type>
      <name>getProjectionMatrix</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a663b676f2bd6ee8400bb355054e814b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix44f &amp;</type>
      <name>getModelViewMatrix</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>ac8f81416a0e95eca20606034af8662a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix44f &amp;</type>
      <name>getInverseModelViewMatrix</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>ac275d8a2f47b32feb284db412babf9c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Ray</type>
      <name>generateRay</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a91d3ec3c99d71fe852a53f5dc13f95cf</anchor>
      <arglist>(float u, float v, float imagePlaneAspectRatio) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBillboardVectors</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a001ff21a5c0b36418037e23b2b3b83e5</anchor>
      <arglist>(Vec3f *right, Vec3f *up) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>worldToScreen</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a0807952fe486c6c8b00abb061a014ca5</anchor>
      <arglist>(const Vec3f &amp;worldCoord, float screenWidth, float screenHeight) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>worldToEye</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>abd7c04da6d76e54c8b813e4a44cc7081</anchor>
      <arglist>(const Vec3f &amp;worldCoord)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>worldToEyeDepth</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a97612947bbf79afdb5553c586aa37be9</anchor>
      <arglist>(const Vec3f &amp;worldCoord) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>worldToNdc</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>ae79ac245b628abe99ea5879add2326bd</anchor>
      <arglist>(const Vec3f &amp;worldCoord)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getScreenRadius</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a72f3bd3fc4bfeb792e7eda95dc09f9a8</anchor>
      <arglist>(const class Sphere &amp;sphere, float screenWidth, float screenHeight) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calcMatrices</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>afad8b8529217c51ebc6ea6ddd857714e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calcModelView</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a72c1a0f9865cd5a5ea6f09ca41b484aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calcInverseModelView</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a2aaab59335d9ce1bee5a80de8ddc755a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>calcProjection</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a93a2936ebecb811535decefd4d95a8ea</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>mEyePoint</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>aeb3e58099bff78fae8427107a0d948b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>mViewDirection</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>aab504e5e13848847eb36bd25e59f860d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Quatf</type>
      <name>mOrientation</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>ac5f474b8a40acda94e4b3f1a43ab7729</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mCenterOfInterest</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a0fce9415540f2684d785e57269de40c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>mWorldUp</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a2e55958b3427ec7df54a269c6d7f78b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mFov</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a860a0f098ac5bbd60f3373da29869556</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mAspectRatio</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a9b378ebdc2fbf51d6f84562da6fb3341</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mNearClip</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>aca6560b1bfa5aa3babcbbb1bf0369052</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mFarClip</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>ae6df8d7bd5ef22f865ccf187f382a4ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>mU</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>afcbffd4f7177bae58f3423ff4fae8d46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>mV</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a7827589b8d7426a9c77a5760b8e41412</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>mW</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a8a1a15058aa81b64ab656883152cbeff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix44f</type>
      <name>mProjectionMatrix</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>aa1abd7f0b026913b622721793df6a383</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix44f</type>
      <name>mInverseProjectionMatrix</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a09f70384185ffdcfd9481745bb73fa35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mProjectionCached</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a7b7f7d46e36af2748a774f015c4d0f03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix44f</type>
      <name>mModelViewMatrix</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a206ca4e8d36c727fddaf84b46c84585a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mModelViewCached</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a593b57169c1990e0a5c65568e685ce99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix44f</type>
      <name>mInverseModelViewMatrix</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>aa849740a3f36fc5f1b0e75b38d974557</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mInverseModelViewCached</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a5cfe94a65264f09133f74c6018577c15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mFrustumLeft</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a8018cf86501498498d0fd601b02b3b01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mFrustumRight</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a8884bdbddd2a0880d825ae72603d544c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mFrustumTop</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>abb07d8668b1d7d0754f734f383c1bd71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mFrustumBottom</name>
      <anchorfile>classcinder_1_1_camera.html</anchorfile>
      <anchor>a6d1050dad4e9133cebb28cb70eb28252</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::CameraPersp</name>
    <filename>classcinder_1_1_camera_persp.html</filename>
    <base>cinder::Camera</base>
    <member kind="function">
      <type></type>
      <name>CameraPersp</name>
      <anchorfile>classcinder_1_1_camera_persp.html</anchorfile>
      <anchor>a53c6b3b9af5ac9e36041fa660df5dde2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CameraPersp</name>
      <anchorfile>classcinder_1_1_camera_persp.html</anchorfile>
      <anchor>aa93a3e3fda20294256d741e4637dbceb</anchor>
      <arglist>(int pixelWidth, int pixelHeight, float fov)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CameraPersp</name>
      <anchorfile>classcinder_1_1_camera_persp.html</anchorfile>
      <anchor>aef6c2e23ad9356891ac7fbf11fae8f58</anchor>
      <arglist>(int pixelWidth, int pixelHeight, float fov, float nearPlane, float farPlane)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerspective</name>
      <anchorfile>classcinder_1_1_camera_persp.html</anchorfile>
      <anchor>a104755903a1eb219f1d8286949792702</anchor>
      <arglist>(float horizFovDegrees, float aspectRatio, float nearPlane, float farPlane)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLensShift</name>
      <anchorfile>classcinder_1_1_camera_persp.html</anchorfile>
      <anchor>a626f6b405391b96a12ea031e46163190</anchor>
      <arglist>(float *horizontal, float *vertical) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>getLensShift</name>
      <anchorfile>classcinder_1_1_camera_persp.html</anchorfile>
      <anchor>a1f63b53e58e2cfb6155048f53bcad0d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLensShift</name>
      <anchorfile>classcinder_1_1_camera_persp.html</anchorfile>
      <anchor>a0b331e32077e21f784389fcc64e0568c</anchor>
      <arglist>(float horizontal, float vertical)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLensShift</name>
      <anchorfile>classcinder_1_1_camera_persp.html</anchorfile>
      <anchor>a70c40f02fad4b4cba61b420e48ccd4aa</anchor>
      <arglist>(const Vec2f &amp;shift)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getLensShiftHorizontal</name>
      <anchorfile>classcinder_1_1_camera_persp.html</anchorfile>
      <anchor>a510a753e3b317f785b9492464345ab4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLensShiftHorizontal</name>
      <anchorfile>classcinder_1_1_camera_persp.html</anchorfile>
      <anchor>ac1c2f6692d2e26c9fff36eabe44c489d</anchor>
      <arglist>(float horizontal)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getLensShiftVertical</name>
      <anchorfile>classcinder_1_1_camera_persp.html</anchorfile>
      <anchor>af38435bd028dd82308c7aabe90e365dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLensShiftVertical</name>
      <anchorfile>classcinder_1_1_camera_persp.html</anchorfile>
      <anchor>af730765439d7a68724ed424201998552</anchor>
      <arglist>(float vertical)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPersp</name>
      <anchorfile>classcinder_1_1_camera_persp.html</anchorfile>
      <anchor>a0679f7927972c2e0ea7a726e4a785d3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CameraPersp</type>
      <name>getFrameSphere</name>
      <anchorfile>classcinder_1_1_camera_persp.html</anchorfile>
      <anchor>a0e48a4dcaf89f4f1287265fe640c6663</anchor>
      <arglist>(const class Sphere &amp;worldSpaceSphere, int maxIterations=20) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calcProjection</name>
      <anchorfile>classcinder_1_1_camera_persp.html</anchorfile>
      <anchor>ad637a85bb29a22a896cda532832bb84a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec2f</type>
      <name>mLensShift</name>
      <anchorfile>classcinder_1_1_camera_persp.html</anchorfile>
      <anchor>ae7eaff933e361b5fdbba84be7e7a4b95</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::CameraOrtho</name>
    <filename>classcinder_1_1_camera_ortho.html</filename>
    <base>cinder::Camera</base>
    <member kind="function">
      <type></type>
      <name>CameraOrtho</name>
      <anchorfile>classcinder_1_1_camera_ortho.html</anchorfile>
      <anchor>a36b49117c7e380faaad532d09153c8a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CameraOrtho</name>
      <anchorfile>classcinder_1_1_camera_ortho.html</anchorfile>
      <anchor>a6de4cbf68bfec8130985ced81061e52b</anchor>
      <arglist>(float left, float right, float bottom, float top, float nearPlane, float farPlane)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrtho</name>
      <anchorfile>classcinder_1_1_camera_ortho.html</anchorfile>
      <anchor>af9ad63fd46e6ee7e2ef3c216c71ebe8f</anchor>
      <arglist>(float left, float right, float bottom, float top, float nearPlane, float farPlane)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPersp</name>
      <anchorfile>classcinder_1_1_camera_ortho.html</anchorfile>
      <anchor>a61ef09a6096224fb8ebf108b0e05f3cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calcProjection</name>
      <anchorfile>classcinder_1_1_camera_ortho.html</anchorfile>
      <anchor>ae6aa4d1c70b9a78e7594084415a50e4f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::CameraStereo</name>
    <filename>classcinder_1_1_camera_stereo.html</filename>
    <base>cinder::CameraPersp</base>
    <member kind="function">
      <type></type>
      <name>CameraStereo</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>a282f476e5b57ecd85c50be16fa4c013e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CameraStereo</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>a24643be9e7eedd7ed7b99f4cf4c351f7</anchor>
      <arglist>(int pixelWidth, int pixelHeight, float fov)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CameraStereo</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>ac493841ccceda9403e83a84e69a9b372</anchor>
      <arglist>(int pixelWidth, int pixelHeight, float fov, float nearPlane, float farPlane)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getConvergence</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>a627bd8076d32118c28f6a233cf4de827</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConvergence</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>a53d8bda1c5b14c0e46e568d0f706ea72</anchor>
      <arglist>(float distance, bool adjustEyeSeparation=false)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getEyeSeparation</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>a0b9cf8e8c9e5ebba878d60bc15182bd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEyeSeparation</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>af62c04b7ad45825eecef3679e3923a38</anchor>
      <arglist>(float distance)</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getEyePointShifted</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>a6ca65f903d760f05adee4fce695d3fc2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableStereoLeft</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>a2b0aa67fe4ab34a395ef984505106de6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStereoLeftEnabled</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>a4392f8283b7d7c0a23f928415d0c55b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableStereoRight</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>a096eeceea77b3520d0f20cdfa5705211</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStereoRightEnabled</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>afc56f385a694807ab233b7277552f26a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableStereo</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>acf613235ed8f3e6ced21f8661fd63ce5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStereoEnabled</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>a21da691afa44aeafa146a984fbdb4617</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getNearClipCoordinates</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>a9c517fe30107f1b46a0f4417daa0c0ea</anchor>
      <arglist>(Vec3f *topLeft, Vec3f *topRight, Vec3f *bottomLeft, Vec3f *bottomRight) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getFarClipCoordinates</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>a1ad7cc9225c3b22ad7ecd6594172a3c6</anchor>
      <arglist>(Vec3f *topLeft, Vec3f *topRight, Vec3f *bottomLeft, Vec3f *bottomRight) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix44f &amp;</type>
      <name>getProjectionMatrix</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>a384ae69aeaabe1602a092cca267f2360</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix44f &amp;</type>
      <name>getModelViewMatrix</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>adc7d96ab5f85f5e8ae45b63c33ed415e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Matrix44f &amp;</type>
      <name>getInverseModelViewMatrix</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>ab8dc81835d6a079168d63ef646c1f3ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calcModelView</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>aac075b67ad497c4df3fc54c1b59a579e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calcInverseModelView</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>aff59545430a0b3d08bf68a0807da9073</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>calcProjection</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>a329eb7b918c735d8e52fb60a37e8dfc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix44f</type>
      <name>mProjectionMatrixLeft</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>a878433380a342e1d2ac81732de9b748b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix44f</type>
      <name>mInverseProjectionMatrixLeft</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>a6688c13044980c6582fc18d4b5df3932</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix44f</type>
      <name>mProjectionMatrixRight</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>a62d777d2022b6d56e98f550d749d12fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix44f</type>
      <name>mInverseProjectionMatrixRight</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>a9e0e35cb8657d03a2cf2dac6f5db5781</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix44f</type>
      <name>mModelViewMatrixLeft</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>ae029b976f80a90e51f2d68512ed74e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix44f</type>
      <name>mInverseModelViewMatrixLeft</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>a480ac106c65db266d09bb7b834619f8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix44f</type>
      <name>mModelViewMatrixRight</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>a5db51d06a9e568c28907c77511d58099</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix44f</type>
      <name>mInverseModelViewMatrixRight</name>
      <anchorfile>classcinder_1_1_camera_stereo.html</anchorfile>
      <anchor>a5ff7e58b191efbbe58f410588c66ade0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class" objc="yes">
    <name>cinder::Capture</name>
    <filename>classcinder_1_1_capture.html</filename>
    <class kind="class">cinder::Capture::Device</class>
    <class kind="struct">cinder::Capture::Obj</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Device &gt;</type>
      <name>DeviceRef</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>a3e55ac6740eb9c9fc14664fdf1980226</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>DeviceIdentifier</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>a060edc7ed3b2c2658df5d351bb4fc686</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>DeviceIdentifier</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>a1805b32dde3efc8154388812ef64b632</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Capture</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>aa8fd35d9851ee02ff61c19915e489c5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Capture</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>a633d997028a5db8d52d373a492b6218e</anchor>
      <arglist>(int32_t width, int32_t height, const DeviceRef device=DeviceRef())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Capture</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>ada55c1d706d162419f423dfe8eddcfb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>a293818c6c2f259c360b47a255c3b249a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>acae9db4052cba729ded2b1231e95d2e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCapturing</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>a91680e7410ebb76686c542887077f8b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkNewFrame</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>a491beb188ae89fe36d4b471d7f1bf5c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getWidth</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>aca1a49d564fd2e32de99ee5aca7bc2cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getHeight</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>a9f6a2ce0d47de91301e0c536b904b6e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getSize</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>a131dc0133ff9c572cfc9314b6f4bcbba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAspectRatio</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>aedcd50d63f2f2d7f35b7a41bedba1bb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>getBounds</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>aa56dcfb3c92d9b6c36aa5aed1c439e9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Surface8u</type>
      <name>getSurface</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>a31682c15ad0589baf02d5226e41b98c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Capture::DeviceRef</type>
      <name>getDevice</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>aed55e56fe1f7fb6bfd4f73486078c957</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CaptureRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>ad9cd5649a224c10c5289a1d97a1cb5af</anchor>
      <arglist>(int32_t width, int32_t height, const DeviceRef device=DeviceRef())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::vector&lt; DeviceRef &gt; &amp;</type>
      <name>getDevices</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>a09a2212d06303deb15aa42db0135366d</anchor>
      <arglist>(bool forceRefresh=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DeviceRef</type>
      <name>findDeviceByName</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>a66dfd42f0b4c958d3a178537f028b88d</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DeviceRef</type>
      <name>findDeviceByNameContains</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>a365ae35e941d9edcdf9a494fcc352934</anchor>
      <arglist>(const std::string &amp;nameFragment)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Obj &gt;</type>
      <name>mObj</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>a5dbc600a75645bff592663f3230b9b6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Obj &gt; Capture::*</type>
      <name>unspecified_bool_type</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>a24b40e24e1b80034b8f6c9d8f7b16a4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unspecified_bool_type</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>a98406ea79b398bb57250e66cfb98e07f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classcinder_1_1_capture.html</anchorfile>
      <anchor>a14c663e7b00a5a0d917ba276d961654b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class" objc="yes">
    <name>cinder::Capture::Device</name>
    <filename>classcinder_1_1_capture_1_1_device.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Device</name>
      <anchorfile>classcinder_1_1_capture_1_1_device.html</anchorfile>
      <anchor>a770f2e453ea01205a5d832f7c506fbcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classcinder_1_1_capture_1_1_device.html</anchorfile>
      <anchor>a7bff7147ca80f5d10fefba5f58108786</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>checkAvailable</name>
      <anchorfile>classcinder_1_1_capture_1_1_device.html</anchorfile>
      <anchor>ac747b4e8d31adf504384a762a1b7d313</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isConnected</name>
      <anchorfile>classcinder_1_1_capture_1_1_device.html</anchorfile>
      <anchor>a26d8e66820367b61f5510c7789bddebd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Capture::DeviceIdentifier</type>
      <name>getUniqueId</name>
      <anchorfile>classcinder_1_1_capture_1_1_device.html</anchorfile>
      <anchor>aa17b629403fa2fa4aefe54ab672df53e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>getNative</name>
      <anchorfile>classcinder_1_1_capture_1_1_device.html</anchorfile>
      <anchor>a153806dad72341e0d6311c2f508aa237</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isFrontFacing</name>
      <anchorfile>classcinder_1_1_capture_1_1_device.html</anchorfile>
      <anchor>a343e1a58d88285ab4635b10bfbace927</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Device</name>
      <anchorfile>classcinder_1_1_capture_1_1_device.html</anchorfile>
      <anchor>ae9d6a7130b2668f755c554be1a006d79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mName</name>
      <anchorfile>classcinder_1_1_capture_1_1_device.html</anchorfile>
      <anchor>af03a7d7577f027d0a5e41dce10415ed4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct" objc="yes">
    <name>cinder::Capture::Obj</name>
    <filename>structcinder_1_1_capture_1_1_obj.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>Obj</name>
      <anchorfile>structcinder_1_1_capture_1_1_obj.html</anchorfile>
      <anchor>ad0f73f5b3ab93dfb75b684771b3095a2</anchor>
      <arglist>(int32_t width, int32_t height, const Capture::DeviceRef device)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Obj</name>
      <anchorfile>structcinder_1_1_capture_1_1_obj.html</anchorfile>
      <anchor>adac06022c4b1483cf40cfe242321760d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CaptureImplQtKit *</type>
      <name>mImpl</name>
      <anchorfile>structcinder_1_1_capture_1_1_obj.html</anchorfile>
      <anchor>a3cd32617caa9f663cb9e42422102ab63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CaptureImplCocoaDummy *</type>
      <name>mImpl</name>
      <anchorfile>structcinder_1_1_capture_1_1_obj.html</anchorfile>
      <anchor>a82c4118601e87ea6df87165d13545f84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CaptureImplAvFoundation *</type>
      <name>mImpl</name>
      <anchorfile>structcinder_1_1_capture_1_1_obj.html</anchorfile>
      <anchor>a381ba975957cf8b4e5a271852a140f34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CaptureImplDirectShow *</type>
      <name>mImpl</name>
      <anchorfile>structcinder_1_1_capture_1_1_obj.html</anchorfile>
      <anchor>a97986e6245eecdd63f2ebd72195e8249</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class" objc="yes">
    <name>cinder::CaptureImplAvFoundationDevice</name>
    <filename>classcinder_1_1_capture_impl_av_foundation_device.html</filename>
    <base>cinder::Capture::Device</base>
    <member kind="function">
      <type></type>
      <name>CaptureImplAvFoundationDevice</name>
      <anchorfile>classcinder_1_1_capture_impl_av_foundation_device.html</anchorfile>
      <anchor>a9b82ca993d41f5a6427474ef54f55c49</anchor>
      <arglist>(AVCaptureDevice *device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CaptureImplAvFoundationDevice</name>
      <anchorfile>classcinder_1_1_capture_impl_av_foundation_device.html</anchorfile>
      <anchor>a35e57e4ddacfa5f15dd9728627c2ac28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkAvailable</name>
      <anchorfile>classcinder_1_1_capture_impl_av_foundation_device.html</anchorfile>
      <anchor>a0f9173890d3ce4b871f0fa6f751f7940</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classcinder_1_1_capture_impl_av_foundation_device.html</anchorfile>
      <anchor>afbc0cc374de413ecc60e7c9b94bfb3b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Capture::DeviceIdentifier</type>
      <name>getUniqueId</name>
      <anchorfile>classcinder_1_1_capture_impl_av_foundation_device.html</anchorfile>
      <anchor>a4135d82db2a6d9212b962ecce82a2885</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFrontFacing</name>
      <anchorfile>classcinder_1_1_capture_impl_av_foundation_device.html</anchorfile>
      <anchor>ae05e0f0e19913b05285a720ffa6f44fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getNative</name>
      <anchorfile>classcinder_1_1_capture_impl_av_foundation_device.html</anchorfile>
      <anchor>a1c0be4471ce1faf004017ae18ad9f4f4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class" objc="yes">
    <name>cinder::CaptureImplCocoaDummyDevice</name>
    <filename>classcinder_1_1_capture_impl_cocoa_dummy_device.html</filename>
    <base>cinder::Capture::Device</base>
    <member kind="function">
      <type></type>
      <name>CaptureImplCocoaDummyDevice</name>
      <anchorfile>classcinder_1_1_capture_impl_cocoa_dummy_device.html</anchorfile>
      <anchor>acd43cd4107d2cf9701bca6c3f2e6cf79</anchor>
      <arglist>(const std::string &amp;name, const Capture::DeviceIdentifier &amp;uniqueId, bool frontFacing)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkAvailable</name>
      <anchorfile>classcinder_1_1_capture_impl_cocoa_dummy_device.html</anchorfile>
      <anchor>a267ed10df9defa07f52b5bad989f92f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classcinder_1_1_capture_impl_cocoa_dummy_device.html</anchorfile>
      <anchor>a83e38c55bcaa8788f19f7166adb0d67c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Capture::DeviceIdentifier</type>
      <name>getUniqueId</name>
      <anchorfile>classcinder_1_1_capture_impl_cocoa_dummy_device.html</anchorfile>
      <anchor>a96b7048a444030d8ae8906f26a895f7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFrontFacing</name>
      <anchorfile>classcinder_1_1_capture_impl_cocoa_dummy_device.html</anchorfile>
      <anchor>a4a4c1e6ea9a7c1d838f98ab9e7c2c124</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getNative</name>
      <anchorfile>classcinder_1_1_capture_impl_cocoa_dummy_device.html</anchorfile>
      <anchor>a0ebd265cabd46cd327b81c6a54610687</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::CaptureImplDirectShow</name>
    <filename>classcinder_1_1_capture_impl_direct_show.html</filename>
    <class kind="class">cinder::CaptureImplDirectShow::Device</class>
    <member kind="function">
      <type></type>
      <name>CaptureImplDirectShow</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>a514860c36fa4ce0d640a1fd491ea53b8</anchor>
      <arglist>(int32_t width, int32_t height, const Capture::DeviceRef device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CaptureImplDirectShow</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>a1c2254f7c845fb71a47e4fa74b960166</anchor>
      <arglist>(int32_t width, int32_t height)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CaptureImplDirectShow</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>a37ff1e03d8de35d92b086a0e7cada3b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>afaa308d7a353e0ec776c7c7882273760</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>a33c3a592fcc661bf1aff210d7c29b279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCapturing</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>a32585de44014b55096f48d66b6efc601</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkNewFrame</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>a3cc4d397589ec8b1abae875552911010</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getWidth</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>a9828412ebf1e9e38f4d29c01f90afc41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getHeight</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>a9213edab6a6ad6a8a24a50f3ff4b829b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Surface8u</type>
      <name>getSurface</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>ab4905f831c12ed99f6b4f3519cbb14f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Capture::DeviceRef</type>
      <name>getDevice</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>a54344d5fef5c853e5d45a139d0950946</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::vector&lt; Capture::DeviceRef &gt; &amp;</type>
      <name>getDevices</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>a3cc4feb0e35f21361f724dbffc26ab1d</anchor>
      <arglist>(bool forceRefresh=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>af0c322279c4c7bd8e013ce9e003667f2</anchor>
      <arglist>(int32_t width, int32_t height, const Capture::Device &amp;device)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mDeviceID</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>affb4af173c0549992b28fbe933a5cdca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; class CaptureMgr &gt;</type>
      <name>mMgrPtr</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>a84019742a272f68ad3c1041163d7a0f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mIsCapturing</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>a0dc8fe5fd587205555c0f1a3f451fca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; class SurfaceCache &gt;</type>
      <name>mSurfaceCache</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>a2ed719659e79cf807be4dc3148aa7a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mWidth</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>a4d2d1cc1bb70f34ff5d5a3671b74da90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mHeight</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>a8cc69e3c287aa2dcc01f16362f8e2ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Surface8u</type>
      <name>mCurrentFrame</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>a63aab2eab1b913d9e00836e9d93afe42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Capture::DeviceRef</type>
      <name>mDevice</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>a832b7b8a95331b7da9a1c7403371d9f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static bool</type>
      <name>sDevicesEnumerated</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>a8058c456767c749b796989fb27d1223f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::vector&lt; Capture::DeviceRef &gt;</type>
      <name>sDevices</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show.html</anchorfile>
      <anchor>aab835fc4db1cf311043d303f777ee54f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::CaptureImplDirectShow::Device</name>
    <filename>classcinder_1_1_capture_impl_direct_show_1_1_device.html</filename>
    <base>cinder::Capture::Device</base>
    <member kind="function">
      <type>bool</type>
      <name>checkAvailable</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show_1_1_device.html</anchorfile>
      <anchor>aa3605b1fb6f760c6adf36e33bbc2e7a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show_1_1_device.html</anchorfile>
      <anchor>a8ca8001694e6c4099991c1c2ccbebbce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Capture::DeviceIdentifier</type>
      <name>getUniqueId</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show_1_1_device.html</anchorfile>
      <anchor>ab70f3fc8b1845de0d33a57619fbef51d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Device</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show_1_1_device.html</anchorfile>
      <anchor>a4bae5581c92553b6efac29f057ceb1a3</anchor>
      <arglist>(const std::string &amp;name, int uniqueId)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mUniqueId</name>
      <anchorfile>classcinder_1_1_capture_impl_direct_show_1_1_device.html</anchorfile>
      <anchor>a856a1d448d8ed6bf7ba23b3186af821a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class" objc="yes">
    <name>cinder::CaptureImplQtKitDevice</name>
    <filename>classcinder_1_1_capture_impl_qt_kit_device.html</filename>
    <base>cinder::Capture::Device</base>
    <member kind="function">
      <type></type>
      <name>CaptureImplQtKitDevice</name>
      <anchorfile>classcinder_1_1_capture_impl_qt_kit_device.html</anchorfile>
      <anchor>a192a1751b3a8e5df7093371a25449c10</anchor>
      <arglist>(QTCaptureDevice *device)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CaptureImplQtKitDevice</name>
      <anchorfile>classcinder_1_1_capture_impl_qt_kit_device.html</anchorfile>
      <anchor>aba15443047e05370d2830307f4624e1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkAvailable</name>
      <anchorfile>classcinder_1_1_capture_impl_qt_kit_device.html</anchorfile>
      <anchor>a44e1ec47bc420217054a0c608d659788</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classcinder_1_1_capture_impl_qt_kit_device.html</anchorfile>
      <anchor>aaf0ccfed98d7579bd8f329888210a285</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Capture::DeviceIdentifier</type>
      <name>getUniqueId</name>
      <anchorfile>classcinder_1_1_capture_impl_qt_kit_device.html</anchorfile>
      <anchor>a8fc01f48eb95dd502773a6dcb79feb79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getNative</name>
      <anchorfile>classcinder_1_1_capture_impl_qt_kit_device.html</anchorfile>
      <anchor>a26095c32c1acc688e310f925cce1fb18</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::ChannelT</name>
    <filename>classcinder_1_1_channel_t.html</filename>
    <templarg>T</templarg>
    <class kind="class">cinder::ChannelT::ConstIter</class>
    <class kind="class">cinder::ChannelT::Iter</class>
    <member kind="function">
      <type></type>
      <name>ChannelT</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>afd8608346e1ab48fe00f1e142f8fb97c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChannelT</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>a0f89c7395b62f2d7f10aca0d7ee1234a</anchor>
      <arglist>(int32_t width, int32_t height)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChannelT</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>a9db2ee9afad2d3048e071f6bcfe0425e</anchor>
      <arglist>(int32_t width, int32_t height, int32_t rowBytes, uint8_t increment, T *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChannelT</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>a4f1a842089f5ca57c2a86218104cadb8</anchor>
      <arglist>(ImageSourceRef imageSource)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ImageSourceRef</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>a2fa8758ab2ef1e69800aeb5155ed2ca8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ChannelT</type>
      <name>clone</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>aba6edbad5e41ddf4d745cce78640d230</anchor>
      <arglist>(bool copyPixels=true) const </arglist>
    </member>
    <member kind="function">
      <type>ChannelT</type>
      <name>clone</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>aa3febf748dd97eeb3ba755b34a4b64da</anchor>
      <arglist>(const Area &amp;area, bool copyPixels=true) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getWidth</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>ab03e08cf40192896d3ea36b7df21781a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getHeight</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>a652331bf591fb49dfef8fea296398a00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getSize</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>a1984c2737b5d71e90fe05bc87b857ab9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAspectRatio</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>a30e11a0b533df39f38b1ba98662ac510</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>getBounds</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>aa38b68f7e017dc8cb2099bc71e34e2a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getRowBytes</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>a9f8c0620f4a23c80e791f1274318c110</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getIncrement</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>acd9ddb5325dadb0f27013185483e49b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPlanar</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>aee9204c0214166b5dbcf687d2083430a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getData</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>ac7662186238dd10bf2b9f9f393d0294f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>getData</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>a76732666c067e9f2fefc18f0780de3bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getData</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>a694051f6f59cf30fb9af12c162561884</anchor>
      <arglist>(const Vec2i &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>getData</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>a7fb8eacbd8e4b5c01a22e943d1c7bd2a</anchor>
      <arglist>(const Vec2i &amp;offset) const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getData</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>a7c092e26e161b5926d971e214fe56a64</anchor>
      <arglist>(int32_t x, int32_t y)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>getData</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>a17b902eb1544a53316b975cfdf91c07d</anchor>
      <arglist>(int32_t x, int32_t y) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getValue</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>a15259a4525c0e68f938281cd0e6742fb</anchor>
      <arglist>(Vec2i pos) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>a8569866b9e85969267e21f8bdc0b081b</anchor>
      <arglist>(Vec2i pos, T v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>af06b806740c07cbb15b55a8edb15dc83</anchor>
      <arglist>(const ChannelT&lt; T &gt; &amp;srcChannel, const Area &amp;srcArea, const Vec2i &amp;relativeOffset=Vec2i::zero())</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>areaAverage</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>a19fa832c056927a3abe7e8a64521eee8</anchor>
      <arglist>(const Area &amp;area) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeallocator</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>af1a6f9ff7614c120e68cd6519df1ee36</anchor>
      <arglist>(void(*aDeallocatorFunc)(void *), void *aDeallocatorRefcon)</arglist>
    </member>
    <member kind="function">
      <type>Iter</type>
      <name>getIter</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>aef3ef67df3b3f06db3f005cf8b0e2b02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iter</type>
      <name>getIter</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>a2295c0f79bfa157714763944a0e8c338</anchor>
      <arglist>(const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>ConstIter</type>
      <name>getIter</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>a17d00cfa0f89bea0590527ccdb3cb1a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIter</type>
      <name>getIter</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>ab1ee47ec44377b4c5a3ce2452c028464</anchor>
      <arglist>(const Area &amp;area) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Obj &gt;</type>
      <name>mObj</name>
      <anchorfile>classcinder_1_1_channel_t.html</anchorfile>
      <anchor>ab095182fc79b17a5bea6026a7d569a76</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::ChannelT::ConstIter</name>
    <filename>classcinder_1_1_channel_t_1_1_const_iter.html</filename>
    <member kind="function">
      <type></type>
      <name>ConstIter</name>
      <anchorfile>classcinder_1_1_channel_t_1_1_const_iter.html</anchorfile>
      <anchor>a89cecce17e8f34d632aa84a1fe798259</anchor>
      <arglist>(const ChannelT&lt; T &gt; &amp;channelT, const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>v</name>
      <anchorfile>classcinder_1_1_channel_t_1_1_const_iter.html</anchorfile>
      <anchor>ae8b730532600116ace1b27cb7f14b767</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>v</name>
      <anchorfile>classcinder_1_1_channel_t_1_1_const_iter.html</anchorfile>
      <anchor>aba67bc0815c3580663162b8712cdc960</anchor>
      <arglist>(int32_t xOff, int32_t yOff) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>vClamped</name>
      <anchorfile>classcinder_1_1_channel_t_1_1_const_iter.html</anchorfile>
      <anchor>a71bbfa9bef1f74dc44b08279404c3602</anchor>
      <arglist>(int32_t xOff, int32_t yOff) const </arglist>
    </member>
    <member kind="function">
      <type>const int32_t</type>
      <name>x</name>
      <anchorfile>classcinder_1_1_channel_t_1_1_const_iter.html</anchorfile>
      <anchor>a2d1a7d56f013ea6b495e79c269a3d505</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const int32_t</type>
      <name>y</name>
      <anchorfile>classcinder_1_1_channel_t_1_1_const_iter.html</anchorfile>
      <anchor>aad2b0dba672c5e392dc49f072aa1fd49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getPos</name>
      <anchorfile>classcinder_1_1_channel_t_1_1_const_iter.html</anchorfile>
      <anchor>a8483630e2f6459508c139d8d2753c507</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pixel</name>
      <anchorfile>classcinder_1_1_channel_t_1_1_const_iter.html</anchorfile>
      <anchor>a0bbd2fa49584765b224160ebe04b4814</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>line</name>
      <anchorfile>classcinder_1_1_channel_t_1_1_const_iter.html</anchorfile>
      <anchor>a73252faaa22b358106b190b20040f2cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getWidth</name>
      <anchorfile>classcinder_1_1_channel_t_1_1_const_iter.html</anchorfile>
      <anchor>aeaebe6961b58f9cfbdea6075f7d99b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getHeight</name>
      <anchorfile>classcinder_1_1_channel_t_1_1_const_iter.html</anchorfile>
      <anchor>a58e4d2f2577911233df59357f9f683d5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::ChannelT::Iter</name>
    <filename>classcinder_1_1_channel_t_1_1_iter.html</filename>
    <member kind="function">
      <type></type>
      <name>Iter</name>
      <anchorfile>classcinder_1_1_channel_t_1_1_iter.html</anchorfile>
      <anchor>af8919a2a92eadeee6aebbac8af7a409d</anchor>
      <arglist>(ChannelT&lt; T &gt; &amp;channelT, const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>v</name>
      <anchorfile>classcinder_1_1_channel_t_1_1_iter.html</anchorfile>
      <anchor>a6646d54aac0be7cea89770ff555b67d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>v</name>
      <anchorfile>classcinder_1_1_channel_t_1_1_iter.html</anchorfile>
      <anchor>a3cf8b7472a21ff73fae6bb6caf3b0744</anchor>
      <arglist>(int32_t xOff, int32_t yOff) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>vClamped</name>
      <anchorfile>classcinder_1_1_channel_t_1_1_iter.html</anchorfile>
      <anchor>a04547ad0a115bc525d615b9e0cbb43b0</anchor>
      <arglist>(int32_t xOff, int32_t yOff) const </arglist>
    </member>
    <member kind="function">
      <type>const int32_t</type>
      <name>x</name>
      <anchorfile>classcinder_1_1_channel_t_1_1_iter.html</anchorfile>
      <anchor>aad1cf90cd3e16697f29937fd84ba47b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const int32_t</type>
      <name>y</name>
      <anchorfile>classcinder_1_1_channel_t_1_1_iter.html</anchorfile>
      <anchor>a5ffb94a2abe12849d5b8ee4b3fb61dc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getPos</name>
      <anchorfile>classcinder_1_1_channel_t_1_1_iter.html</anchorfile>
      <anchor>a337f523b45a7cec6d25ad5a540c1de57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pixel</name>
      <anchorfile>classcinder_1_1_channel_t_1_1_iter.html</anchorfile>
      <anchor>a0d339c0c44027752dd908d4f7f55d05b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>line</name>
      <anchorfile>classcinder_1_1_channel_t_1_1_iter.html</anchorfile>
      <anchor>a9ac9c65e493275a8b0224699602b169e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getWidth</name>
      <anchorfile>classcinder_1_1_channel_t_1_1_iter.html</anchorfile>
      <anchor>a5feceeeb6e2c79822498ade3fd696f92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getHeight</name>
      <anchorfile>classcinder_1_1_channel_t_1_1_iter.html</anchorfile>
      <anchor>acb72ed7c8c8fe7f5e7561dec85a9fac7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::CHANTRAIT</name>
    <filename>structcinder_1_1_c_h_a_n_t_r_a_i_t.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>cinder::CHANTRAIT&lt; uint8_t &gt;</name>
    <filename>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01uint8__t_01_4.html</filename>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>Sum</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01uint8__t_01_4.html</anchorfile>
      <anchor>a103b70fcd177c68ebd64998fd0647fa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>Accum</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01uint8__t_01_4.html</anchorfile>
      <anchor>aeb5c7ab2d1b2f9176cc877e08b27ef57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>SignedSum</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01uint8__t_01_4.html</anchorfile>
      <anchor>a20bd919dbcfd88a8d3ab0271aafc1ed2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint8_t</type>
      <name>max</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01uint8__t_01_4.html</anchorfile>
      <anchor>a952b09162f4b913ee80f44e70690c4ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint8_t</type>
      <name>convert</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01uint8__t_01_4.html</anchorfile>
      <anchor>abbbed6cffc557410edd76fcb4402832d</anchor>
      <arglist>(uint8_t v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint8_t</type>
      <name>convert</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01uint8__t_01_4.html</anchorfile>
      <anchor>ab7b08e3a6af3143c129232bf08d9fd08</anchor>
      <arglist>(uint16_t v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint8_t</type>
      <name>convert</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01uint8__t_01_4.html</anchorfile>
      <anchor>a23914960501f87ee3aba804a9e0ad76c</anchor>
      <arglist>(float v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint8_t</type>
      <name>grayscale</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01uint8__t_01_4.html</anchorfile>
      <anchor>ab581ccb5795ec7ebd02d2a8eec338991</anchor>
      <arglist>(uint8_t r, uint8_t g, uint8_t b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint8_t</type>
      <name>premultiply</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01uint8__t_01_4.html</anchorfile>
      <anchor>aa8b90bd6a1e3769077be518fcf1962f2</anchor>
      <arglist>(uint8_t c, uint8_t a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint8_t</type>
      <name>inverse</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01uint8__t_01_4.html</anchorfile>
      <anchor>a34e6e6562ace9ef8f63843445c3e8611</anchor>
      <arglist>(uint8_t c)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::CHANTRAIT&lt; uint16_t &gt;</name>
    <filename>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01uint16__t_01_4.html</filename>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>Sum</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a71a17ea13bbf15e499ede57d8feb7c5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>Accum</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a7a719fd1872f1683ca11b767754ed33c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>SignedSum</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a249868b77d9f0c8da0dba19869db6cd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16_t</type>
      <name>max</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a16681d3150d7da0d5293e8d005ffd1e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16_t</type>
      <name>convert</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a355d4a207b7976076779ca6fab09cc4d</anchor>
      <arglist>(uint8_t v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16_t</type>
      <name>convert</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a221c6264fb05742dfe52b46f8cf0ec75</anchor>
      <arglist>(uint16_t v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16_t</type>
      <name>convert</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a58b8f7fc157c64e33c0aabc646d1b48c</anchor>
      <arglist>(float v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint16_t</type>
      <name>grayscale</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a4508e1904d96791c733b8ce3005d22b7</anchor>
      <arglist>(uint16_t r, uint16_t g, uint16_t b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::CHANTRAIT&lt; float &gt;</name>
    <filename>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01float_01_4.html</filename>
    <member kind="typedef">
      <type>float</type>
      <name>Sum</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01float_01_4.html</anchorfile>
      <anchor>af989741ef7ef395b7f543be4a68239b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>Accum</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01float_01_4.html</anchorfile>
      <anchor>a925158aa328206363ecf0c614503dc61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>SignedSum</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01float_01_4.html</anchorfile>
      <anchor>a1e32b82a7fed5223c2ceb83feff289fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>max</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01float_01_4.html</anchorfile>
      <anchor>acd2a09c2920f84a5ba7d1e6544f9e0c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>convert</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01float_01_4.html</anchorfile>
      <anchor>af94fa55299686a303ea10770c479a0c7</anchor>
      <arglist>(uint8_t v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>convert</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01float_01_4.html</anchorfile>
      <anchor>ae2d6015d1f0077cb2b361ca4e93cfa9e</anchor>
      <arglist>(uint16_t v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>convert</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01float_01_4.html</anchorfile>
      <anchor>a9fbd00ce5bd525cfafc09e7eb0cd4ec2</anchor>
      <arglist>(float v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>grayscale</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01float_01_4.html</anchorfile>
      <anchor>aa025707fdf280e2a80bbc6bf01039551</anchor>
      <arglist>(float r, float g, float b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>premultiply</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01float_01_4.html</anchorfile>
      <anchor>a74d090391debb12c3b756bc06bfd374b</anchor>
      <arglist>(float c, float a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>inverse</name>
      <anchorfile>structcinder_1_1_c_h_a_n_t_r_a_i_t_3_01float_01_4.html</anchorfile>
      <anchor>a7ab43061ea4a4323c3a9b3248bba1c67</anchor>
      <arglist>(float c)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::math</name>
    <filename>structcinder_1_1math.html</filename>
    <templarg>T</templarg>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>acos</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>a52081448a64c9e336956c6e8281589b7</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>asin</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>ad19a3431cf905eab0a3691f198cf2f44</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>atan</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>a6d335cec005e46fe565b313f382a3c1b</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>atan2</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>a008de2f45939d5f50b2d3958e8f91fdf</anchor>
      <arglist>(T y, T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>cos</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>a1a70aa0c92effa8a7e4eaed2007037dd</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>sin</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>ab74708550f6863000f7c7fa98bfc5435</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>tan</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>a40f0cf42f28fc92f00ee7e52f23d2410</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>cosh</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>a18aef1e25131244816825116c95ffcfe</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>sinh</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>ac9bdeddf65b5734eb0878ea95a76b9f8</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>tanh</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>ab1b525576ad2ac15dac07beb97b52055</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>exp</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>af9c48e6f55f8c99d8e4927275550fbd1</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>log</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>ac7abf33868f36323aa3f0f25e7c66232</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>log10</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>ad8ef6e7d015f6b88549ee43e29e57574</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>modf</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>a2a776a4bb0a0290158e9c29640e90072</anchor>
      <arglist>(T x, T *iptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>pow</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>a0db6f90b918e560918746a89d31ee108</anchor>
      <arglist>(T x, T y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>sqrt</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>ab72c018c4a8f022471e33fad4d7c69f7</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>cbrt</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>a4d1645bcdc818b990e4b2fcd5687e21d</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>cbrt</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>a4d1645bcdc818b990e4b2fcd5687e21d</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>ceil</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>a97b7c8aabe85f2717a1db2788dbb571e</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>abs</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>a5f0718dbfa0e4dc3a75a124d29a49701</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>floor</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>af23b56a578463abdcb400b0c7e0261ed</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>fmod</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>ae4cf8074976ccb4d211e12845f63aa13</anchor>
      <arglist>(T x, T y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>hypot</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>a3d199acf3f6005111273734ce3adda7d</anchor>
      <arglist>(T x, T y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>signum</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>a2869573207fa41a4d99edb29c8ffa09f</anchor>
      <arglist>(T x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>min</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>ae31446d10efa52e1ca443fc6462b7341</anchor>
      <arglist>(T x, T y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>max</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>a52b934a5e204691e3cde384364add83c</anchor>
      <arglist>(T x, T y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>clamp</name>
      <anchorfile>structcinder_1_1math.html</anchorfile>
      <anchor>a10f489ec195dadc333ee83795bc9fe8b</anchor>
      <arglist>(T x, T min=0, T max=1)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::math&lt; float &gt;</name>
    <filename>structcinder_1_1math_3_01float_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>acos</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>a337b7c268f7ccbbbe03546522553939c</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>asin</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>a5290fe2ea001bd4fbb5260351bafbdfa</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>atan</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>a539f4e6b2ccf9f378b6f5415c719654f</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>atan2</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>a9465892b5ba6dcd47f38824850cf3285</anchor>
      <arglist>(float y, float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>cos</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>a218e0e5a99c9f4feacbc27c1ed3c43ae</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>sin</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>a46fba23ef9f7388055ed58f558b1c94a</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>tan</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>ac0ec5261b4dcc5026607f79b280b8a8e</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>cosh</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>a11051fc56ccee6791ee290a146119c55</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>sinh</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>a161eb5ab0d66e50e0bb669cd7fbae971</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>tanh</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>ada5f5b59b5818acfa1a5a06ccf83a543</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>exp</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>a36ca36f64e07e753f71bb13f63a34053</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>log</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>aa48939c2bd6754a13b0c240e7010b337</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>log10</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>aee32be9ce1d4c7782eac55c9d7defdb8</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>modf</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>a69d74cad9e02429a382fa8ef8b657e59</anchor>
      <arglist>(float x, float *y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>pow</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>abaf88f258325ae9d556313d684b0f278</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>sqrt</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>ae8c3ff916cf5109f7164b271317cf292</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>cbrt</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>a2700e36ade285ac5614ab54eb05c8992</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>cbrt</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>a2700e36ade285ac5614ab54eb05c8992</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>ceil</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>a668ece07bf0fe16a14fa5b1519970d3a</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>abs</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>a5632e5a381857b937e2556d342ef3991</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>floor</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>a987dfb0a44b220c64766545e90a95b6e</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>fmod</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>a8e4b91811a86178c72bf2694e63d6d63</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>hypot</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>acb6a5e47286c26067b5b031223ff0635</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>hypot</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>acb6a5e47286c26067b5b031223ff0635</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>signum</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>a78d2ca38685fdff96216bc4d2b96ecd8</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>min</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>abbb7ef0bddcbc5ee09f44d3903a18a1d</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>max</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>a4b1d369db7cda39efd8d73e21b6cfbd8</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>clamp</name>
      <anchorfile>structcinder_1_1math_3_01float_01_4.html</anchorfile>
      <anchor>afbdd28b813f6fdfde6e42bfead587995</anchor>
      <arglist>(float x, float min=0, float max=1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Clipboard</name>
    <filename>classcinder_1_1_clipboard.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasString</name>
      <anchorfile>classcinder_1_1_clipboard.html</anchorfile>
      <anchor>a1386d34c09f8a1eba4bb5bf93b0f7c47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasImage</name>
      <anchorfile>classcinder_1_1_clipboard.html</anchorfile>
      <anchor>a791e6d9249c48beda03237b405303065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getString</name>
      <anchorfile>classcinder_1_1_clipboard.html</anchorfile>
      <anchor>a15b515c5ecad6871d904635d29c10734</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageSourceRef</type>
      <name>getImage</name>
      <anchorfile>classcinder_1_1_clipboard.html</anchorfile>
      <anchor>a47626a9b93cadc9463728b25f00a97da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setString</name>
      <anchorfile>classcinder_1_1_clipboard.html</anchorfile>
      <anchor>a9a327404cb4fbec6eccb2f6a59ae93ce</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setImage</name>
      <anchorfile>classcinder_1_1_clipboard.html</anchorfile>
      <anchor>a8d6e5c6aab9d5dcc4647819058d63fd5</anchor>
      <arglist>(ImageSourceRef image, ImageTarget::Options options=ImageTarget::Options())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::ColorT</name>
    <filename>classcinder_1_1_color_t.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ColorT</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a87d143f605f7482a7c97f2be9f5addb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColorT</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>aa162c69a2aeb385ecf78a251ddfa84dc</anchor>
      <arglist>(T aR, T aG, T aB)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColorT</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a366d276c9b612337e149d8f2d9d303f4</anchor>
      <arglist>(const ColorT&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColorT</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a26c7628110b2f7eb5a51cb88d0aef353</anchor>
      <arglist>(ColorModel cm, const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColorT</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a62f9d28e6bb919dfa2556eed1927dd81</anchor>
      <arglist>(ColorModel cm, float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColorT</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a4f3f19302215399151b563221af85db0</anchor>
      <arglist>(const ColorT&lt; FromT &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a17a37344688e923ba667c9cbad395c68</anchor>
      <arglist>(T ar, T ag, T ab)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>afa353467ec5124a1715572ee03c59454</anchor>
      <arglist>(const ColorT&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a75f425b0dc386cba49b3efbd64be7f2e</anchor>
      <arglist>(ColorModel cm, const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>ColorT&lt; T &gt;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a4309135a740de0de7c76110ec647de4c</anchor>
      <arglist>(const ColorT&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ColorT&lt; T &gt;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a82533e3a1bfd8197f76762a4b638ff15</anchor>
      <arglist>(const ColorT&lt; FromT &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>get</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a595831a2ca6393bf9c31d27cc16a4061</anchor>
      <arglist>(ColorModel cm) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a33ef421aebfd2fd4cabfc30a415f8139</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a7f47e4e788e88b2cabad654205e65922</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>ptr</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a238bcdeab094770305989d34b7f7ddd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColorT&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a4c8666743d161c725dfbc754b76432ec</anchor>
      <arglist>(const ColorT&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>ColorT&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>af003fec220c9dfe1bee6da08991df1ca</anchor>
      <arglist>(const ColorT&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>ColorT&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>add58c6081d69d1e54b1b5f46a75c570b</anchor>
      <arglist>(const ColorT&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>ColorT&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a24950f64a55127c84dcaccdf6e2d54d2</anchor>
      <arglist>(const ColorT&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const ColorT&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a38742484ecee9cfb074802ef6537c1a2</anchor>
      <arglist>(const ColorT&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const ColorT&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>ace738c6b65fc0f7c446d01526203be39</anchor>
      <arglist>(const ColorT&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const ColorT&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a51a09b7935cf84c46f003a982cbe98c2</anchor>
      <arglist>(const ColorT&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const ColorT&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a1d7bef2e929ff61b378606436b726859</anchor>
      <arglist>(const ColorT&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ColorT&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>af40baf983d3f50ca5f9a400773fae9c7</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>ColorT&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a5effb6b1bf98c650a6bc67d1a1b75d17</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>ColorT&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a64219fc44a540e4a2ce2663a784bc73d</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>ColorT&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a9293c1ce9e0b84178660d7784964d3a9</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const ColorT&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>aeaf8058d249d1c9d4beaca50175bfa60</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>const ColorT&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>acf4534c05f86da1b5d661d7fd4969f97</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>const ColorT&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>ad76badc023ba512e5e1f5622dfb465b6</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>const ColorT&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a197082d70a56c58f118b0ea2f091f4fd</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>aae5647acc6f540ae3a6f560e74b3833e</anchor>
      <arglist>(const ColorT&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a9ac5eed7b3f8325cf79d29171fb99138</anchor>
      <arglist>(const ColorT&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>CHANTRAIT&lt; T &gt;::Accum</type>
      <name>dot</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>aa0cdecc35341d8b413721f8c936e5121</anchor>
      <arglist>(const ColorT&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>distance</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>ad2e99da65b10605e6402cc9a2e496f75</anchor>
      <arglist>(const ColorT&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>CHANTRAIT&lt; T &gt;::Accum</type>
      <name>distanceSquared</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a7fc3e77120c0d1ba29d09cae778e7f69</anchor>
      <arglist>(const ColorT&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>length</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a94855a2488c543fd11b933c515d62dad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CHANTRAIT&lt; T &gt;::Accum</type>
      <name>lengthSquared</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a9f5abfac80b560d00891f58e2b74159d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a48fb85c4b17a4b05e711d3c1a30d9e3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ColorT&lt; T &gt;</type>
      <name>lerp</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a80cd826a62104723732c5cb66175379e</anchor>
      <arglist>(float fact, const ColorT&lt; T &gt; &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>ab6fc111ca9d4bf84873e4dea77fbf2b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T *</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>afad3fdf590a50861533b67beba202103</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ColorT&lt; uint8_t &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a02a3b70679fc91338ee246e0b7cd8ffb</anchor>
      <arglist>(const ColorT&lt; uint8_t &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const ColorT&lt; uint8_t &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a70fb977167a50bd6a2cd7e1f0eecded3</anchor>
      <arglist>(uint8_t rhs)</arglist>
    </member>
    <member kind="function">
      <type>ColorT&lt; uint8_t &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a3147947700c690f531342954a563fc6b</anchor>
      <arglist>(const ColorT&lt; uint8_t &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>ColorT&lt; uint8_t &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>ad114719ac23253979514d805f9f95241</anchor>
      <arglist>(uint8_t rhs) const</arglist>
    </member>
    <member kind="function">
      <type>const ColorT&lt; uint8_t &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>afdb4999b7a6597469eb7aefee6120570</anchor>
      <arglist>(const ColorT&lt; uint8_t &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const ColorT&lt; uint8_t &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>ae811de218da8a7aa06372401c468c512</anchor>
      <arglist>(uint8_t rhs)</arglist>
    </member>
    <member kind="function">
      <type>ColorT&lt; uint8_t &gt;</type>
      <name>operator/</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a4d3b13b624cf538cb66afea589759889</anchor>
      <arglist>(const ColorT&lt; uint8_t &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>ColorT&lt; uint8_t &gt;</type>
      <name>operator/</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a943454c377941c85e39ae6ea20386ff8</anchor>
      <arglist>(uint8_t rhs) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ColorT&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>aad35a8ddff343f8aa74060a184fb23a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ColorT&lt; T &gt;</type>
      <name>black</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a949ec64b920431e363984fd78eaf5f9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ColorT&lt; T &gt;</type>
      <name>white</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>ad74addbe9cf02ba1d6c8587bde11a5a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ColorT&lt; T &gt;</type>
      <name>gray</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a5677f05fc01027307d41767e16fca67a</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ColorT&lt; T &gt;</type>
      <name>hex</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>afa59bcfb4583a808e9e3411fa1f52f5e</anchor>
      <arglist>(uint32_t hexValue)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>a5706b42137227f49aac7495429530148</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>ad951dd0e239940f392f9b5a04fc2b0cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>b</name>
      <anchorfile>classcinder_1_1_color_t.html</anchorfile>
      <anchor>aeef12168b40bb7061ac70c57a3e186e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::ColorAT</name>
    <filename>classcinder_1_1_color_a_t.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>ColorAT</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>af31f3d98783e640e941f542fbb063a3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColorAT</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>abb957f78caa9d31f4717156b01ebdde3</anchor>
      <arglist>(T aR, T aG, T aB, T aA=CHANTRAIT&lt; T &gt;::convert(1.0f))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColorAT</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>ab0461be8356d03feffa3c205d6cf1a1a</anchor>
      <arglist>(const ColorAT&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColorAT</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a2ab0bb12e5ebeb8e781808bfeed4b01a</anchor>
      <arglist>(const ColorT&lt; T &gt; &amp;col, T aA=CHANTRAIT&lt; T &gt;::convert(1.0f))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColorAT</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a49c0261f44b487c15592e7d1771bfd1f</anchor>
      <arglist>(ColorModel cm, float c1, float c2, float c3, float aA=CHANTRAIT&lt; T &gt;::convert(1.0f))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColorAT</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a674c3fc36d38af019f27e27f6e0c896f</anchor>
      <arglist>(const ColorT&lt; FromT &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColorAT</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>aa5ba4114deda81dafc910e8a53ad38e1</anchor>
      <arglist>(const ColorAT&lt; FromT &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>af913f002556c0909e8f59d98a3d9ee74</anchor>
      <arglist>(T ar, T ag, T ab, T aa)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a567046bc3803d83d0cb11110f511cccc</anchor>
      <arglist>(const ColorAT&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ColorAT&lt; T &gt;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>ad91f0651206c532c8739c3d53e99931c</anchor>
      <arglist>(const ColorAT&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ColorAT&lt; T &gt;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a6f63bebae9e02b6519fcee18efdd5815</anchor>
      <arglist>(const ColorAT&lt; FromT &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a44e8e9008aee1e24e836e9cf34a13cbb</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>abcd582f778b12bd892970469901a4a0d</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>ptr</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a47a5a3145e51735691d52c7b6f50885e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColorAT&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a15aee73665c5e14cca91cf591cf76bd2</anchor>
      <arglist>(const ColorAT&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>ColorAT&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>aca22e5ee9b2143099054db85497321ba</anchor>
      <arglist>(const ColorAT&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>ColorAT&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a056f98587a25dd8559050222128e88da</anchor>
      <arglist>(const ColorAT&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>ColorAT&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a6d9e27f2fe9951bfc661b7530741f5de</anchor>
      <arglist>(const ColorAT&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const ColorAT&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a39d3e801e4987484eddbb764f126df06</anchor>
      <arglist>(const ColorAT&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const ColorAT&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>afdde1fc7576d617c19f9a4e7b72bdc7a</anchor>
      <arglist>(const ColorAT&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const ColorAT&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a27fb1a7f50415cb5aae452447491e84b</anchor>
      <arglist>(const ColorAT&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const ColorAT&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>adcc91e5a5036f0e54c6ac8f51d36b3c3</anchor>
      <arglist>(const ColorAT&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ColorAT&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a16b23c9dfc85982d5689a29a17b51d3d</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>ColorAT&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a503d2d41714420a7a01c77df583e5aa0</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>ColorAT&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>ad634cab349d2321d2ad4465a181bee5f</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>ColorAT&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a300ce4eb6988e6cb27f8bb309ea22835</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const ColorAT&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a15c461b9d37019ef6c1fc7b6e2884aab</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>const ColorAT&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a776bea39be479dc47a91e8bf278656e8</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>const ColorAT&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a0cbf0b50193a30a06c3ee5e3452aa2aa</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>const ColorAT&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a44a4f3f81af2ef44e8b11ef348a6837b</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>acd712a730c849fbea21ac2a002e9f774</anchor>
      <arglist>(const ColorAT&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a6cee91301bb5f50c63355f3ba4f754a4</anchor>
      <arglist>(const ColorAT&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>length</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a7b54e804204f68979e1280a3bc4f453a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>acd77b3480afd30cbc797599d0d7a59c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ColorAT&lt; T &gt;</type>
      <name>premultiplied</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>ac84e2717957618635f1341b878ff6728</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CHANTRAIT&lt; T &gt;::Accum</type>
      <name>lengthSquared</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a4f2b735a4f9a4fc188278dce629f4eb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColorAT&lt; T &gt;</type>
      <name>lerp</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a8094f4b795c84bef4c39d876e4749570</anchor>
      <arglist>(T fact, const ColorAT&lt; T &gt; &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>aca006c301f9e31ed4755cdff80e0e25e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T *</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>ad4601278f3b89c54974961d694b931e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ColorT&lt; T &gt;</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a944cc94182a5363c3386990bb60e4a62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ColorAT&lt; uint8_t &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a0c48469262403906c8c19147d8655c5f</anchor>
      <arglist>(const ColorAT&lt; uint8_t &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const ColorAT&lt; uint8_t &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>aaf8d2dd0924815bb97de72cca35cff08</anchor>
      <arglist>(uint8_t rhs)</arglist>
    </member>
    <member kind="function">
      <type>ColorAT&lt; uint8_t &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a33976420c99886da6f1e717639f5ec82</anchor>
      <arglist>(const ColorAT&lt; uint8_t &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>ColorAT&lt; uint8_t &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a70f69ac8afb218fe7874f432f6a583d5</anchor>
      <arglist>(uint8_t rhs) const</arglist>
    </member>
    <member kind="function">
      <type>const ColorAT&lt; uint8_t &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a45ffc8736cb64080898d2127e044a960</anchor>
      <arglist>(const ColorAT&lt; uint8_t &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const ColorAT&lt; uint8_t &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>abe8524d7537406fa9dd370b834d14656</anchor>
      <arglist>(uint8_t rhs)</arglist>
    </member>
    <member kind="function">
      <type>ColorAT&lt; uint8_t &gt;</type>
      <name>operator/</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a959b5934cc2ac62f147dd3baef845ab9</anchor>
      <arglist>(const ColorAT&lt; uint8_t &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>ColorAT&lt; uint8_t &gt;</type>
      <name>operator/</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a2eb019b89041e60b5a60250bff0e5b66</anchor>
      <arglist>(uint8_t rhs) const</arglist>
    </member>
    <member kind="function">
      <type>ColorAT&lt; uint8_t &gt;</type>
      <name>lerp</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>ac0f399595490af43556846006235f420</anchor>
      <arglist>(uint8_t fact, const ColorAT&lt; uint8_t &gt; &amp;d) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ColorAT&lt; T &gt;</type>
      <name>zero</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>ac71ad1a21ba6795a638503ef96049bbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ColorAT&lt; T &gt;</type>
      <name>black</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>ab0ff9b9a3491280f207823656f07b071</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ColorAT&lt; T &gt;</type>
      <name>white</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>af8898061e326e42e0f8d0b9fa714384f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ColorAT&lt; T &gt;</type>
      <name>gray</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a7abcfe4f2cff635aa0027e01f4ae2d75</anchor>
      <arglist>(T value, T alpha=CHANTRAIT&lt; T &gt;::max())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ColorAT&lt; T &gt;</type>
      <name>hex</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a811d251d05a059236017955abb1ada42</anchor>
      <arglist>(uint32_t hexValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ColorAT&lt; T &gt;</type>
      <name>hexA</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>ad5103b010cb64386b1ceec88cf872749</anchor>
      <arglist>(uint32_t hexValue)</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>r</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>aaa21c915f35cb07af8d8a91c461f9fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>g</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>abc88530f26818f6ea6dd50ad98516bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>b</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>a989e689eb9914ed79852acbd95c73900</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>a</name>
      <anchorfile>classcinder_1_1_color_a_t.html</anchorfile>
      <anchor>aa62dfb99a65aeb83f569520a980cc60f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::ConcurrentCircularBuffer</name>
    <filename>classcinder_1_1_concurrent_circular_buffer.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>boost::circular_buffer&lt; T &gt;</type>
      <name>container_type</name>
      <anchorfile>classcinder_1_1_concurrent_circular_buffer.html</anchorfile>
      <anchor>a208adbe948090fa71b8db1e50e6675a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>container_type::size_type</type>
      <name>size_type</name>
      <anchorfile>classcinder_1_1_concurrent_circular_buffer.html</anchorfile>
      <anchor>aba525cda35b810603d817e13383284d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>container_type::value_type</type>
      <name>value_type</name>
      <anchorfile>classcinder_1_1_concurrent_circular_buffer.html</anchorfile>
      <anchor>a940ebd3267518460c52e033e820ca2f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::call_traits&lt; value_type &gt;::param_type</type>
      <name>param_type</name>
      <anchorfile>classcinder_1_1_concurrent_circular_buffer.html</anchorfile>
      <anchor>add37eb927c58efae07bbedb746f2197a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentCircularBuffer</name>
      <anchorfile>classcinder_1_1_concurrent_circular_buffer.html</anchorfile>
      <anchor>a085f906daf3fd8f4af9ac973a1cd4fbc</anchor>
      <arglist>(size_type capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushFront</name>
      <anchorfile>classcinder_1_1_concurrent_circular_buffer.html</anchorfile>
      <anchor>aedb6d2dd8df0041d85f68b8d47e82487</anchor>
      <arglist>(param_type item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popBack</name>
      <anchorfile>classcinder_1_1_concurrent_circular_buffer.html</anchorfile>
      <anchor>a0bf64bdea4ac575155c31f68e84771f3</anchor>
      <arglist>(value_type *pItem)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryPushFront</name>
      <anchorfile>classcinder_1_1_concurrent_circular_buffer.html</anchorfile>
      <anchor>ae9e3e647c92eab6220d0aea54c270e16</anchor>
      <arglist>(param_type item)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryPopBack</name>
      <anchorfile>classcinder_1_1_concurrent_circular_buffer.html</anchorfile>
      <anchor>a86988788f14cb21dcb167558f3cd7ad3</anchor>
      <arglist>(value_type *pItem)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNotEmpty</name>
      <anchorfile>classcinder_1_1_concurrent_circular_buffer.html</anchorfile>
      <anchor>a2340fc928cfa8abd0793c5eedcb35618</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNotFull</name>
      <anchorfile>classcinder_1_1_concurrent_circular_buffer.html</anchorfile>
      <anchor>af27d562370cff49735dfea6285f3278e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cancel</name>
      <anchorfile>classcinder_1_1_concurrent_circular_buffer.html</anchorfile>
      <anchor>a991e71ff819589f96c613b1caabede16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classcinder_1_1_concurrent_circular_buffer.html</anchorfile>
      <anchor>afe4ea8acf4889155cd7eb33ee6a346af</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::DataSource</name>
    <filename>classcinder_1_1_data_source.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isFilePath</name>
      <anchorfile>classcinder_1_1_data_source.html</anchorfile>
      <anchor>a861b0f8418c009d1b6544b98c102d26d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isUrl</name>
      <anchorfile>classcinder_1_1_data_source.html</anchorfile>
      <anchor>a3bbc2a4bd93fb8fd0d7d012be5af66d1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>const fs::path &amp;</type>
      <name>getFilePath</name>
      <anchorfile>classcinder_1_1_data_source.html</anchorfile>
      <anchor>a8fadb7f6b50624281531c9823e13290c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Url &amp;</type>
      <name>getUrl</name>
      <anchorfile>classcinder_1_1_data_source.html</anchorfile>
      <anchor>abcf4fbd5882b65a58065d0699fc1bb22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getFilePathHint</name>
      <anchorfile>classcinder_1_1_data_source.html</anchorfile>
      <anchor>a0545d1ba7b3c41d2cc1b1444428e063a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Buffer &amp;</type>
      <name>getBuffer</name>
      <anchorfile>classcinder_1_1_data_source.html</anchorfile>
      <anchor>a52d654680faccad75528ffdce82e3ccd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IStreamRef</type>
      <name>createStream</name>
      <anchorfile>classcinder_1_1_data_source.html</anchorfile>
      <anchor>a333e1c3519d3c25ab17b8e2bb6791b4d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DataSource</name>
      <anchorfile>classcinder_1_1_data_source.html</anchorfile>
      <anchor>ae6038bf40403d256c21d8f0c3a7c2be5</anchor>
      <arglist>(const fs::path &amp;aFilePath, const Url &amp;aUrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~DataSource</name>
      <anchorfile>classcinder_1_1_data_source.html</anchorfile>
      <anchor>a81b159638d99831096c20b75eb20013f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>createBuffer</name>
      <anchorfile>classcinder_1_1_data_source.html</anchorfile>
      <anchor>a6a05684d4203e3336682369fd73e9980</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setFilePathHint</name>
      <anchorfile>classcinder_1_1_data_source.html</anchorfile>
      <anchor>aa61163b5c579a654783b2b16b9e0d0f4</anchor>
      <arglist>(const std::string &amp;aFilePathHint)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Buffer</type>
      <name>mBuffer</name>
      <anchorfile>classcinder_1_1_data_source.html</anchorfile>
      <anchor>a3d1b9d5c86120915a1ed75288246e3f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fs::path</type>
      <name>mFilePath</name>
      <anchorfile>classcinder_1_1_data_source.html</anchorfile>
      <anchor>a13009b3152e5a7152039ca0b7544a507</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mFilePathHint</name>
      <anchorfile>classcinder_1_1_data_source.html</anchorfile>
      <anchor>a825ef2fb89c7ae1c5c342190264eb0b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Url</type>
      <name>mUrl</name>
      <anchorfile>classcinder_1_1_data_source.html</anchorfile>
      <anchor>a216cceec187839df9b0217429d5a8495</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::DataSourcePath</name>
    <filename>classcinder_1_1_data_source_path.html</filename>
    <base>cinder::DataSource</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFilePath</name>
      <anchorfile>classcinder_1_1_data_source_path.html</anchorfile>
      <anchor>a8408e558e9a844398f8229d2f27b8be7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isUrl</name>
      <anchorfile>classcinder_1_1_data_source_path.html</anchorfile>
      <anchor>aec715ffe2d5379e2962281d943557b86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IStreamRef</type>
      <name>createStream</name>
      <anchorfile>classcinder_1_1_data_source_path.html</anchorfile>
      <anchor>aa885b5374b7481b2027053c578a47fdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataSourcePathRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1_data_source_path.html</anchorfile>
      <anchor>a0fe56d7010f92ec6eaddee55b3716b6a</anchor>
      <arglist>(const fs::path &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DataSourcePath</name>
      <anchorfile>classcinder_1_1_data_source_path.html</anchorfile>
      <anchor>a437d8029f3a9d921959813f78ddc9c9a</anchor>
      <arglist>(const fs::path &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>createBuffer</name>
      <anchorfile>classcinder_1_1_data_source_path.html</anchorfile>
      <anchor>ab0d24d542c7dceaa471dff7863e9a2c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IStreamFileRef</type>
      <name>mStream</name>
      <anchorfile>classcinder_1_1_data_source_path.html</anchorfile>
      <anchor>a021f29a3afe543d2fb22485595d59155</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::DataSourceUrl</name>
    <filename>classcinder_1_1_data_source_url.html</filename>
    <base>cinder::DataSource</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFilePath</name>
      <anchorfile>classcinder_1_1_data_source_url.html</anchorfile>
      <anchor>a63a38402d2281ed363fcf57c1af33ea4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isUrl</name>
      <anchorfile>classcinder_1_1_data_source_url.html</anchorfile>
      <anchor>a5c6eadbe7f37d6d2ce3c66b12ade2236</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IStreamRef</type>
      <name>createStream</name>
      <anchorfile>classcinder_1_1_data_source_url.html</anchorfile>
      <anchor>a8a3d20579894d72cdbd20e302b63c0c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const UrlOptions &amp;</type>
      <name>getOptions</name>
      <anchorfile>classcinder_1_1_data_source_url.html</anchorfile>
      <anchor>a4736f3395bd50a4b4cfb6a5f6d91ad9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataSourceUrlRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1_data_source_url.html</anchorfile>
      <anchor>a6d9629a7c24bd84d37d355e2fcf268bf</anchor>
      <arglist>(const Url &amp;Url, const UrlOptions &amp;options=UrlOptions())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DataSourceUrl</name>
      <anchorfile>classcinder_1_1_data_source_url.html</anchorfile>
      <anchor>a3fae02c4bb76ff4e63b92c3e764c722f</anchor>
      <arglist>(const Url &amp;Url, const UrlOptions &amp;options)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>createBuffer</name>
      <anchorfile>classcinder_1_1_data_source_url.html</anchorfile>
      <anchor>a88ec5aaca93ada06db434ee5d62d7e07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UrlOptions</type>
      <name>mOptions</name>
      <anchorfile>classcinder_1_1_data_source_url.html</anchorfile>
      <anchor>a6b126ff905329987f249af7784b37086</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IStreamUrlRef</type>
      <name>mStream</name>
      <anchorfile>classcinder_1_1_data_source_url.html</anchorfile>
      <anchor>a9ebf4b9057260730a8bc16907508d051</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::DataSourceBuffer</name>
    <filename>classcinder_1_1_data_source_buffer.html</filename>
    <base>cinder::DataSource</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFilePath</name>
      <anchorfile>classcinder_1_1_data_source_buffer.html</anchorfile>
      <anchor>a9600410a8ba4972d960bbff18184c34a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isUrl</name>
      <anchorfile>classcinder_1_1_data_source_buffer.html</anchorfile>
      <anchor>a2ddf72831ba2f0f4aa82e0ce53c537fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IStreamRef</type>
      <name>createStream</name>
      <anchorfile>classcinder_1_1_data_source_buffer.html</anchorfile>
      <anchor>a35d717f1800aff3ebb12cddd4f49879f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataSourceBufferRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1_data_source_buffer.html</anchorfile>
      <anchor>a46055881e1c5ad0d8155e8c19f8db52e</anchor>
      <arglist>(Buffer buffer, const std::string &amp;filePathHint=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DataSourceBuffer</name>
      <anchorfile>classcinder_1_1_data_source_buffer.html</anchorfile>
      <anchor>a59fa932c4ceb3c61febf3ecf621f1df4</anchor>
      <arglist>(Buffer aBuffer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>createBuffer</name>
      <anchorfile>classcinder_1_1_data_source_buffer.html</anchorfile>
      <anchor>aaf05931603fbc909805c5133159ef50f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IStreamMemRef</type>
      <name>mStream</name>
      <anchorfile>classcinder_1_1_data_source_buffer.html</anchorfile>
      <anchor>ad7830a89969878103049234c55a26ae8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::DataTarget</name>
    <filename>classcinder_1_1_data_target.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>providesFilePath</name>
      <anchorfile>classcinder_1_1_data_target.html</anchorfile>
      <anchor>ac886965d957db57f0736ad99a8c35c29</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>providesUrl</name>
      <anchorfile>classcinder_1_1_data_target.html</anchorfile>
      <anchor>ad8a03583b3514c9f0518ec9bcd0be2cf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>const fs::path &amp;</type>
      <name>getFilePath</name>
      <anchorfile>classcinder_1_1_data_target.html</anchorfile>
      <anchor>a6efe99b0e2fd2a0455fc59ef02009e59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Url &amp;</type>
      <name>getUrl</name>
      <anchorfile>classcinder_1_1_data_target.html</anchorfile>
      <anchor>a70a62210cf00fdd2bfe2fc57590a641c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getFilePathHint</name>
      <anchorfile>classcinder_1_1_data_target.html</anchorfile>
      <anchor>ad57e8622c1bd41e75813dcb7b8ebc7d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual OStreamRef</type>
      <name>getStream</name>
      <anchorfile>classcinder_1_1_data_target.html</anchorfile>
      <anchor>adeb2a4772177e5c47df357ab583f89c4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DataTarget</name>
      <anchorfile>classcinder_1_1_data_target.html</anchorfile>
      <anchor>ab79dd3cffdd76ca1056f9f276e3ec5bc</anchor>
      <arglist>(const fs::path &amp;aFilePath, const Url &amp;aUrl)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~DataTarget</name>
      <anchorfile>classcinder_1_1_data_target.html</anchorfile>
      <anchor>a287a3a364709af288391b523e08f13d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setFilePathHint</name>
      <anchorfile>classcinder_1_1_data_target.html</anchorfile>
      <anchor>a1295a814bd9ef0345f0d09c8858441c8</anchor>
      <arglist>(const std::string &amp;aFilePathHint)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Buffer</type>
      <name>mBuffer</name>
      <anchorfile>classcinder_1_1_data_target.html</anchorfile>
      <anchor>a45695f24acce08dd6441b86c7e79740c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fs::path</type>
      <name>mFilePath</name>
      <anchorfile>classcinder_1_1_data_target.html</anchorfile>
      <anchor>a2f298787cf9436579a7df260c7dfcdb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mFilePathHint</name>
      <anchorfile>classcinder_1_1_data_target.html</anchorfile>
      <anchor>a6457d9fb111991cc088175da53f411c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Url</type>
      <name>mUrl</name>
      <anchorfile>classcinder_1_1_data_target.html</anchorfile>
      <anchor>ae2170a245bb70ec594b0a07904c2ddad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::DataTargetPath</name>
    <filename>classcinder_1_1_data_target_path.html</filename>
    <base>cinder::DataTarget</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>providesFilePath</name>
      <anchorfile>classcinder_1_1_data_target_path.html</anchorfile>
      <anchor>a810b16a298e4a501dae82c881e80ed61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>providesUrl</name>
      <anchorfile>classcinder_1_1_data_target_path.html</anchorfile>
      <anchor>ad1c6e772f05f0f51ab2d6068bc8b8005</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OStreamRef</type>
      <name>getStream</name>
      <anchorfile>classcinder_1_1_data_target_path.html</anchorfile>
      <anchor>ae54909a2a99c79b0150d8b99c692eebd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataTargetPathRef</type>
      <name>createRef</name>
      <anchorfile>classcinder_1_1_data_target_path.html</anchorfile>
      <anchor>a30041de4c2ef114ca2654df740c9d940</anchor>
      <arglist>(const fs::path &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DataTargetPath</name>
      <anchorfile>classcinder_1_1_data_target_path.html</anchorfile>
      <anchor>a151cc5efcd35165e5876c3e78cdaf3a0</anchor>
      <arglist>(const fs::path &amp;path)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OStreamFileRef</type>
      <name>mStream</name>
      <anchorfile>classcinder_1_1_data_target_path.html</anchorfile>
      <anchor>ae1e55cee68bd4f77c2e45b28ca631c4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::DataTargetStream</name>
    <filename>classcinder_1_1_data_target_stream.html</filename>
    <base>cinder::DataTarget</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>providesFilePath</name>
      <anchorfile>classcinder_1_1_data_target_stream.html</anchorfile>
      <anchor>a3612e3738e184e399f71e64c63523116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>providesUrl</name>
      <anchorfile>classcinder_1_1_data_target_stream.html</anchorfile>
      <anchor>ae81e684684fd8daf73c3dab1fad7054e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual OStreamRef</type>
      <name>getStream</name>
      <anchorfile>classcinder_1_1_data_target_stream.html</anchorfile>
      <anchor>a573026d2e10fdea2f6c4f1bdeb283f3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataTargetStreamRef</type>
      <name>createRef</name>
      <anchorfile>classcinder_1_1_data_target_stream.html</anchorfile>
      <anchor>a8721ee1e06fe082aa9ca884aac90c4aa</anchor>
      <arglist>(OStreamRef stream)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DataTargetStream</name>
      <anchorfile>classcinder_1_1_data_target_stream.html</anchorfile>
      <anchor>aea3a4bea7f1f1492ec82cd9fb8983538</anchor>
      <arglist>(OStreamRef stream)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OStreamRef</type>
      <name>mStream</name>
      <anchorfile>classcinder_1_1_data_target_stream.html</anchorfile>
      <anchor>a1d98abbafd7a502eae761d366b06a016</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class" objc="yes">
    <name>cinder::Display</name>
    <filename>classcinder_1_1_display.html</filename>
    <member kind="function">
      <type></type>
      <name>~Display</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>a5c8400deeeb4a380c5c2d116ec3d84dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWidth</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>a72b021646a225c68bb9a39eb84847a0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHeight</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>aec9a159d447387445991dc39e0788f5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getSize</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>a631a17954e93e1ea362327974e954a2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAspectRatio</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>a3b37026784d3e9e2c0dc57947ffa312e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>getBounds</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>a644bdbe0f26956f0c162c8ee1e1cc921</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getSystemCoordinate</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>a9df15e95ba669f56b848cd59a169cb21</anchor>
      <arglist>(const Vec2i &amp;displayRelativeCoordinate) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBitsPerPixel</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>a5553ce97d239e2c009b10104fba90e5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getContentScale</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>a667ec56f68a4b74e0262ce3d0ef1c6d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>a2370147668734d6ae3b2f153c84f4569</anchor>
      <arglist>(const Vec2i &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <type>NSScreen *</type>
      <name>getNsScreen</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>a97733b4c107675b0fed69c3ae3e7785b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CGDirectDisplayID</type>
      <name>getCgDirectDisplayId</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>af5a532282aa2f75431880051049ccc44</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UIScreen *</type>
      <name>getUiScreen</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>af678b2cbba47d8b17dd000d23d61cf7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Vec2i &gt; &amp;</type>
      <name>getSupportedResolutions</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>a61dac0ba58a8be3faedd836f38ea0d2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResolution</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>a8bf23776ea76c7d8c97434e3d34e6c72</anchor>
      <arglist>(const Vec2i &amp;resolution)</arglist>
    </member>
    <member kind="function">
      <type>signals::signal&lt; void()&gt; &amp;</type>
      <name>getSignalDisplaysChanged</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>ae2c8d2196be5b780f3cc14267e3a5ddb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>connectDisplaysChanged</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>aed6047121b63e00bc33ca84ca37c616d</anchor>
      <arglist>(T fn, Y *inst)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DisplayRef</type>
      <name>getMainDisplay</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>a22fa1b0ed0243c9f3882f0a87de9a593</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::vector&lt; DisplayRef &gt; &amp;</type>
      <name>getDisplays</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>a14ca6dba12e4dcae0cc469d861100688</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DisplayRef</type>
      <name>getDisplayForPoint</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>a6b6b3903eabd38d6ba60f9d37a5d4b70</anchor>
      <arglist>(const Vec2i &amp;pt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Area</type>
      <name>getSpanningArea</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>a8bd91212e5d2d8d1bbf8db7f3904ce5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DisplayRef</type>
      <name>findFromCgDirectDisplayId</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>ac3dbeb312cd994c9d3ede01df8c8a1a5</anchor>
      <arglist>(CGDirectDisplayID displayID)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DisplayRef</type>
      <name>findFromNsScreen</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>a93c96a99df4956a49cbb9788713ff53e</anchor>
      <arglist>(NSScreen *nsScreen)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DisplayRef</type>
      <name>findFromHmonitor</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>af009beba3e61c9c5e490902ea3c736a8</anchor>
      <arglist>(HMONITOR hMonitor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BOOL CALLBACK</type>
      <name>enumMonitorProc</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>ad3906fa65c6964eb5615f97e414b194c</anchor>
      <arglist>(HMONITOR hMonitor, HDC hdc, LPRECT rect, LPARAM lParam)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classcinder_1_1_display.html</anchorfile>
      <anchor>a1c1c4f067d3b71ccdecc94d4a8fbd2bb</anchor>
      <arglist>(std::ostream &amp;o, const Display &amp;display)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseNone</name>
    <filename>structcinder_1_1_ease_none.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_none.html</anchorfile>
      <anchor>ad3f68ea9764019c89fb693d22cdf004d</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseInQuad</name>
    <filename>structcinder_1_1_ease_in_quad.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_in_quad.html</anchorfile>
      <anchor>a111ab622a47396f1460897e22c828025</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseOutQuad</name>
    <filename>structcinder_1_1_ease_out_quad.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_out_quad.html</anchorfile>
      <anchor>a6fea3709b56031614b5f2dfc825c4b42</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseInOutQuad</name>
    <filename>structcinder_1_1_ease_in_out_quad.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_in_out_quad.html</anchorfile>
      <anchor>ad4df582d31a1e1702d01d46fecdd3891</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseOutInQuad</name>
    <filename>structcinder_1_1_ease_out_in_quad.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_out_in_quad.html</anchorfile>
      <anchor>a1ef5a844010130157cb6aa49a87c4c15</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseInCubic</name>
    <filename>structcinder_1_1_ease_in_cubic.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_in_cubic.html</anchorfile>
      <anchor>a4a47f7e4e6586eb490b5feec438fdc4e</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseOutCubic</name>
    <filename>structcinder_1_1_ease_out_cubic.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_out_cubic.html</anchorfile>
      <anchor>a4ef13670554d4091531644af09a6ddf0</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseInOutCubic</name>
    <filename>structcinder_1_1_ease_in_out_cubic.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_in_out_cubic.html</anchorfile>
      <anchor>a0c607a279a77b68e3e699a1f8a1b0073</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseOutInCubic</name>
    <filename>structcinder_1_1_ease_out_in_cubic.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_out_in_cubic.html</anchorfile>
      <anchor>a93549d85ecf2caf8313cc2d36f798ed0</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseInQuart</name>
    <filename>structcinder_1_1_ease_in_quart.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_in_quart.html</anchorfile>
      <anchor>ac7f6cb3e47ae6dc66492b1ad3fc16b83</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseOutQuart</name>
    <filename>structcinder_1_1_ease_out_quart.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_out_quart.html</anchorfile>
      <anchor>aa268c36a9f8db91bd5e3492214e6baf9</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseInOutQuart</name>
    <filename>structcinder_1_1_ease_in_out_quart.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_in_out_quart.html</anchorfile>
      <anchor>a7897e7d3e19a896f728ce2936b3e44d2</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseOutInQuart</name>
    <filename>structcinder_1_1_ease_out_in_quart.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_out_in_quart.html</anchorfile>
      <anchor>aeacbaea1c1443d75e800e874bd6bd0ab</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseInQuint</name>
    <filename>structcinder_1_1_ease_in_quint.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_in_quint.html</anchorfile>
      <anchor>a6bf5097c0810f68f96df8880ba89fbe6</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseOutQuint</name>
    <filename>structcinder_1_1_ease_out_quint.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_out_quint.html</anchorfile>
      <anchor>a68c31f6f8a0657de48692b874fd519b4</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseInOutQuint</name>
    <filename>structcinder_1_1_ease_in_out_quint.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_in_out_quint.html</anchorfile>
      <anchor>a4bd1795a01a003823db9f21629a19a8a</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseOutInQuint</name>
    <filename>structcinder_1_1_ease_out_in_quint.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_out_in_quint.html</anchorfile>
      <anchor>afde686c64c6cf7883a9c43ff9e90065e</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseInSine</name>
    <filename>structcinder_1_1_ease_in_sine.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_in_sine.html</anchorfile>
      <anchor>aa16e013d4f5e086df511747532a0fce3</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseOutSine</name>
    <filename>structcinder_1_1_ease_out_sine.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_out_sine.html</anchorfile>
      <anchor>aa11ac5ccefdfca838ebf3c47fcf3a9ef</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseInOutSine</name>
    <filename>structcinder_1_1_ease_in_out_sine.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_in_out_sine.html</anchorfile>
      <anchor>a2c0179645efb52382a9f3b328720cc86</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseOutInSine</name>
    <filename>structcinder_1_1_ease_out_in_sine.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_out_in_sine.html</anchorfile>
      <anchor>a5e315823686e42820178e1a0426fa05a</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseInExpo</name>
    <filename>structcinder_1_1_ease_in_expo.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_in_expo.html</anchorfile>
      <anchor>aec9f9cc1b3dcb35b6e5ecb879b235792</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseOutExpo</name>
    <filename>structcinder_1_1_ease_out_expo.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_out_expo.html</anchorfile>
      <anchor>adb48b03b49c888dc22cfab99c6646cbc</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseInOutExpo</name>
    <filename>structcinder_1_1_ease_in_out_expo.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_in_out_expo.html</anchorfile>
      <anchor>a9fe6dd5162a3d306fc8f8603333b4db7</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseOutInExpo</name>
    <filename>structcinder_1_1_ease_out_in_expo.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_out_in_expo.html</anchorfile>
      <anchor>a3b0c47ac26d4cc9988625f015198feac</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseInCirc</name>
    <filename>structcinder_1_1_ease_in_circ.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_in_circ.html</anchorfile>
      <anchor>a50710a2decf4aa92934433601f66de20</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseOutCirc</name>
    <filename>structcinder_1_1_ease_out_circ.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_out_circ.html</anchorfile>
      <anchor>a9b3d4bb48a9dd6ca05bf2090f2cbab15</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseInOutCirc</name>
    <filename>structcinder_1_1_ease_in_out_circ.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_in_out_circ.html</anchorfile>
      <anchor>a8f002c2a286f1e45a002ddbd7e8ba8f0</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseOutInCirc</name>
    <filename>structcinder_1_1_ease_out_in_circ.html</filename>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_out_in_circ.html</anchorfile>
      <anchor>a118fc1b589177cf8458fd72e8271c93b</anchor>
      <arglist>(float t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseInBounce</name>
    <filename>structcinder_1_1_ease_in_bounce.html</filename>
    <member kind="function">
      <type></type>
      <name>EaseInBounce</name>
      <anchorfile>structcinder_1_1_ease_in_bounce.html</anchorfile>
      <anchor>a17212b1b5c5d2d8d6c1c85301c6f3767</anchor>
      <arglist>(float a=1.70158f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_in_bounce.html</anchorfile>
      <anchor>a76212f71d905cb5fc9fac5632a6d345c</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mA</name>
      <anchorfile>structcinder_1_1_ease_in_bounce.html</anchorfile>
      <anchor>a9c866d3923cdb6e9a0cae92d874dbddb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseOutBounce</name>
    <filename>structcinder_1_1_ease_out_bounce.html</filename>
    <member kind="function">
      <type></type>
      <name>EaseOutBounce</name>
      <anchorfile>structcinder_1_1_ease_out_bounce.html</anchorfile>
      <anchor>ad996ad3826d643d5829450960d60961b</anchor>
      <arglist>(float a=1.70158f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_out_bounce.html</anchorfile>
      <anchor>acc8f589465b065090fe484b09b4f9285</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mA</name>
      <anchorfile>structcinder_1_1_ease_out_bounce.html</anchorfile>
      <anchor>a9e2d59f0690e229d8b8f0e4aea33f7a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseInOutBounce</name>
    <filename>structcinder_1_1_ease_in_out_bounce.html</filename>
    <member kind="function">
      <type></type>
      <name>EaseInOutBounce</name>
      <anchorfile>structcinder_1_1_ease_in_out_bounce.html</anchorfile>
      <anchor>ae58b5b295fa5504b74019832161a93db</anchor>
      <arglist>(float a=1.70158f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_in_out_bounce.html</anchorfile>
      <anchor>ad56754259a4f61a681cea84c636d216d</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mA</name>
      <anchorfile>structcinder_1_1_ease_in_out_bounce.html</anchorfile>
      <anchor>a5177c1c146614eb636ceae6757709f0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseOutInBounce</name>
    <filename>structcinder_1_1_ease_out_in_bounce.html</filename>
    <member kind="function">
      <type></type>
      <name>EaseOutInBounce</name>
      <anchorfile>structcinder_1_1_ease_out_in_bounce.html</anchorfile>
      <anchor>a1cc7859ef016c5238dcc753a15b5eb61</anchor>
      <arglist>(float a=1.70158f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_out_in_bounce.html</anchorfile>
      <anchor>a8480f952721c6422c41bf077531c5974</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mA</name>
      <anchorfile>structcinder_1_1_ease_out_in_bounce.html</anchorfile>
      <anchor>a4be5d55192d274f793914a8d3dc4e449</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseInBack</name>
    <filename>structcinder_1_1_ease_in_back.html</filename>
    <member kind="function">
      <type></type>
      <name>EaseInBack</name>
      <anchorfile>structcinder_1_1_ease_in_back.html</anchorfile>
      <anchor>a1ab26baeb9b23fcad9ee7cdb038ae333</anchor>
      <arglist>(float s=1.70158f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_in_back.html</anchorfile>
      <anchor>ab2b5d2ae66ba3ab9c91875b787dc1baf</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mS</name>
      <anchorfile>structcinder_1_1_ease_in_back.html</anchorfile>
      <anchor>aba4b9feac516d172f528e577a21a8468</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseOutBack</name>
    <filename>structcinder_1_1_ease_out_back.html</filename>
    <member kind="function">
      <type></type>
      <name>EaseOutBack</name>
      <anchorfile>structcinder_1_1_ease_out_back.html</anchorfile>
      <anchor>a46a2f5d3f1db649efcf92082bab35ed9</anchor>
      <arglist>(float s=1.70158f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_out_back.html</anchorfile>
      <anchor>a47a786b856c2f729916f2038e371cc57</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mS</name>
      <anchorfile>structcinder_1_1_ease_out_back.html</anchorfile>
      <anchor>a6bf57d5c7125370a534ea5ac710278b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseInOutBack</name>
    <filename>structcinder_1_1_ease_in_out_back.html</filename>
    <member kind="function">
      <type></type>
      <name>EaseInOutBack</name>
      <anchorfile>structcinder_1_1_ease_in_out_back.html</anchorfile>
      <anchor>ae616678df9219c2ef48f4305cd928fb4</anchor>
      <arglist>(float s=1.70158f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_in_out_back.html</anchorfile>
      <anchor>ac1efc043e213000a57dbd24675b4dfd7</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mS</name>
      <anchorfile>structcinder_1_1_ease_in_out_back.html</anchorfile>
      <anchor>abda1c29c53d87c1df174fab9a70c51b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseOutInBack</name>
    <filename>structcinder_1_1_ease_out_in_back.html</filename>
    <member kind="function">
      <type></type>
      <name>EaseOutInBack</name>
      <anchorfile>structcinder_1_1_ease_out_in_back.html</anchorfile>
      <anchor>a8fd5cc02aaa5607262c615ba26c253f1</anchor>
      <arglist>(float s=1.70158f)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_out_in_back.html</anchorfile>
      <anchor>a43a1509191501798905a0f13273c5004</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mS</name>
      <anchorfile>structcinder_1_1_ease_out_in_back.html</anchorfile>
      <anchor>afe8547288d9d9a47dc721f3c2f1735bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseInElastic</name>
    <filename>structcinder_1_1_ease_in_elastic.html</filename>
    <member kind="function">
      <type></type>
      <name>EaseInElastic</name>
      <anchorfile>structcinder_1_1_ease_in_elastic.html</anchorfile>
      <anchor>ac3b11f8bd604e6c0254819d1d472c885</anchor>
      <arglist>(float amplitude, float period)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_in_elastic.html</anchorfile>
      <anchor>aca5756cceb5cf395d49952268092dc03</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mA</name>
      <anchorfile>structcinder_1_1_ease_in_elastic.html</anchorfile>
      <anchor>adf494699048c93fece3e4b14c9b757ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mP</name>
      <anchorfile>structcinder_1_1_ease_in_elastic.html</anchorfile>
      <anchor>ae318cac078ed8d74c0c94398ce83bcf3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseOutElastic</name>
    <filename>structcinder_1_1_ease_out_elastic.html</filename>
    <member kind="function">
      <type></type>
      <name>EaseOutElastic</name>
      <anchorfile>structcinder_1_1_ease_out_elastic.html</anchorfile>
      <anchor>a0aabd6cb4eb57fed15549bb88477f362</anchor>
      <arglist>(float amplitude, float period)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_out_elastic.html</anchorfile>
      <anchor>a3c953b6dbb89dd087153c47c8b38e57d</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mA</name>
      <anchorfile>structcinder_1_1_ease_out_elastic.html</anchorfile>
      <anchor>a74ce5469da2a9864cfbd09c04fb30f14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mP</name>
      <anchorfile>structcinder_1_1_ease_out_elastic.html</anchorfile>
      <anchor>a3c0a1ed9759ec1f9368f3dace627f9c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseInOutElastic</name>
    <filename>structcinder_1_1_ease_in_out_elastic.html</filename>
    <member kind="function">
      <type></type>
      <name>EaseInOutElastic</name>
      <anchorfile>structcinder_1_1_ease_in_out_elastic.html</anchorfile>
      <anchor>a12677906a6d364009494470380631886</anchor>
      <arglist>(float amplitude, float period)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_in_out_elastic.html</anchorfile>
      <anchor>a01010537a18a436e344dec044a204a95</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mA</name>
      <anchorfile>structcinder_1_1_ease_in_out_elastic.html</anchorfile>
      <anchor>af5f342dade7f91d6ad98c6edaa355021</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mP</name>
      <anchorfile>structcinder_1_1_ease_in_out_elastic.html</anchorfile>
      <anchor>a11b6504c8bd9f65a0370124ad780caf1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseOutInElastic</name>
    <filename>structcinder_1_1_ease_out_in_elastic.html</filename>
    <member kind="function">
      <type></type>
      <name>EaseOutInElastic</name>
      <anchorfile>structcinder_1_1_ease_out_in_elastic.html</anchorfile>
      <anchor>afc4e1e591b9625b50bddd5305f091343</anchor>
      <arglist>(float amplitude, float period)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_out_in_elastic.html</anchorfile>
      <anchor>a8c41974125a7f6237fd4c27c1fbb4ef6</anchor>
      <arglist>(float t)</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mA</name>
      <anchorfile>structcinder_1_1_ease_out_in_elastic.html</anchorfile>
      <anchor>afce3e5cb0f31f39861c01e4924ee1841</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mP</name>
      <anchorfile>structcinder_1_1_ease_out_in_elastic.html</anchorfile>
      <anchor>a36be6fb051759f19d66791957311ba4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseInAtan</name>
    <filename>structcinder_1_1_ease_in_atan.html</filename>
    <member kind="function">
      <type></type>
      <name>EaseInAtan</name>
      <anchorfile>structcinder_1_1_ease_in_atan.html</anchorfile>
      <anchor>a19cc4fd03385864e4f0fa6aecb379c32</anchor>
      <arglist>(float a=15)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_in_atan.html</anchorfile>
      <anchor>a0af85acdb4bb290f484abcdca4203aaf</anchor>
      <arglist>(float t) const </arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mA</name>
      <anchorfile>structcinder_1_1_ease_in_atan.html</anchorfile>
      <anchor>a77c0f967a586600b40c9ed9a991f9ee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mInvM</name>
      <anchorfile>structcinder_1_1_ease_in_atan.html</anchorfile>
      <anchor>a5fc8730a65bc29b82919ef78a736f513</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseOutAtan</name>
    <filename>structcinder_1_1_ease_out_atan.html</filename>
    <member kind="function">
      <type></type>
      <name>EaseOutAtan</name>
      <anchorfile>structcinder_1_1_ease_out_atan.html</anchorfile>
      <anchor>a1790ba15b812a51ce4a9f50550be4df6</anchor>
      <arglist>(float a=15)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_out_atan.html</anchorfile>
      <anchor>a08608f190f020af1be00745db7ea0691</anchor>
      <arglist>(float t) const </arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mA</name>
      <anchorfile>structcinder_1_1_ease_out_atan.html</anchorfile>
      <anchor>a4cb6af010461e6bcdab38bb02f0f6efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mInvM</name>
      <anchorfile>structcinder_1_1_ease_out_atan.html</anchorfile>
      <anchor>a37ef603ec7f6de22d4f39a6a5872196c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::EaseInOutAtan</name>
    <filename>structcinder_1_1_ease_in_out_atan.html</filename>
    <member kind="function">
      <type></type>
      <name>EaseInOutAtan</name>
      <anchorfile>structcinder_1_1_ease_in_out_atan.html</anchorfile>
      <anchor>ad3eca8c0e138aa998c6648946853b84d</anchor>
      <arglist>(float a=15)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_ease_in_out_atan.html</anchorfile>
      <anchor>a0ecdc281b32f0a20592dad5ebb6a5d9f</anchor>
      <arglist>(float t) const </arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mA</name>
      <anchorfile>structcinder_1_1_ease_in_out_atan.html</anchorfile>
      <anchor>a78f3265490be477505a83ec66bc7aa95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mInv2M</name>
      <anchorfile>structcinder_1_1_ease_in_out_atan.html</anchorfile>
      <anchor>a7b1f7b2d38035c9483f5855ba6a975de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Exception</name>
    <filename>classcinder_1_1_exception.html</filename>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>classcinder_1_1_exception.html</anchorfile>
      <anchor>a62d9cd39cc031b39f0bf8424b25e4915</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Exception</name>
      <anchorfile>classcinder_1_1_exception.html</anchorfile>
      <anchor>a14fc0c0c27588e00effccc9f7238c2b4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::FilterBase</name>
    <filename>classcinder_1_1_filter_base.html</filename>
    <member kind="function">
      <type></type>
      <name>FilterBase</name>
      <anchorfile>classcinder_1_1_filter_base.html</anchorfile>
      <anchor>adcdf7d49230c452ce28ff81fd8023ba8</anchor>
      <arglist>(float aSupport)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FilterBase</name>
      <anchorfile>classcinder_1_1_filter_base.html</anchorfile>
      <anchor>ad0a69ede319301d0347c0a4bf14eb90c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getSupport</name>
      <anchorfile>classcinder_1_1_filter_base.html</anchorfile>
      <anchor>aef7cf025f1df51b76ccd8f751c76f6cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSupport</name>
      <anchorfile>classcinder_1_1_filter_base.html</anchorfile>
      <anchor>acda0a2b6dc4d54d7ad77628bb06dbf40</anchor>
      <arglist>(float aSupport)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>operator()</name>
      <anchorfile>classcinder_1_1_filter_base.html</anchorfile>
      <anchor>a0232dda073288186fbf8b170c8bac96b</anchor>
      <arglist>(float x) const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mSupport</name>
      <anchorfile>classcinder_1_1_filter_base.html</anchorfile>
      <anchor>ac7e3aa53f880e7f4ca0934cb9f803129</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::FilterBox</name>
    <filename>classcinder_1_1_filter_box.html</filename>
    <base>cinder::FilterBase</base>
    <member kind="function">
      <type></type>
      <name>FilterBox</name>
      <anchorfile>classcinder_1_1_filter_box.html</anchorfile>
      <anchor>a81bebe0774959697008efcbec2112d84</anchor>
      <arglist>(float aSupport=0.5f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>operator()</name>
      <anchorfile>classcinder_1_1_filter_box.html</anchorfile>
      <anchor>a74c15cf9d117c42443cc7ca89bc20b3a</anchor>
      <arglist>(float x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::FilterTriangle</name>
    <filename>classcinder_1_1_filter_triangle.html</filename>
    <base>cinder::FilterBase</base>
    <member kind="function">
      <type></type>
      <name>FilterTriangle</name>
      <anchorfile>classcinder_1_1_filter_triangle.html</anchorfile>
      <anchor>aef9c6185d689d1310804ca9c24315c62</anchor>
      <arglist>(float aSupport=1.0f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>operator()</name>
      <anchorfile>classcinder_1_1_filter_triangle.html</anchorfile>
      <anchor>ab7740333fa35510489627f62edf1065c</anchor>
      <arglist>(float x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::FilterQuadratic</name>
    <filename>classcinder_1_1_filter_quadratic.html</filename>
    <base>cinder::FilterBase</base>
    <member kind="function">
      <type></type>
      <name>FilterQuadratic</name>
      <anchorfile>classcinder_1_1_filter_quadratic.html</anchorfile>
      <anchor>ae7fa28f1aff77b812c25c73af87254a7</anchor>
      <arglist>(float aSupport=1.5f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>operator()</name>
      <anchorfile>classcinder_1_1_filter_quadratic.html</anchorfile>
      <anchor>a59ce89f5a7458c76d5ec15083b8cf5f8</anchor>
      <arglist>(float x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::FilterCubic</name>
    <filename>classcinder_1_1_filter_cubic.html</filename>
    <base>cinder::FilterBase</base>
    <member kind="function">
      <type></type>
      <name>FilterCubic</name>
      <anchorfile>classcinder_1_1_filter_cubic.html</anchorfile>
      <anchor>a9d7845342c0b3972b12ec67221988696</anchor>
      <arglist>(float aSupport=2.0f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>operator()</name>
      <anchorfile>classcinder_1_1_filter_cubic.html</anchorfile>
      <anchor>aad0780cdd9a139f9896f993e9d0ef6e1</anchor>
      <arglist>(float x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::FilterCatmullRom</name>
    <filename>classcinder_1_1_filter_catmull_rom.html</filename>
    <base>cinder::FilterBase</base>
    <member kind="function">
      <type></type>
      <name>FilterCatmullRom</name>
      <anchorfile>classcinder_1_1_filter_catmull_rom.html</anchorfile>
      <anchor>ad7cba2900640b68507d591b6b3485fc6</anchor>
      <arglist>(float aSupport=2.0f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>operator()</name>
      <anchorfile>classcinder_1_1_filter_catmull_rom.html</anchorfile>
      <anchor>afe816fd955c01f8e974d90cef0ca5cbc</anchor>
      <arglist>(float x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::FilterMitchell</name>
    <filename>classcinder_1_1_filter_mitchell.html</filename>
    <base>cinder::FilterBase</base>
    <member kind="function">
      <type></type>
      <name>FilterMitchell</name>
      <anchorfile>classcinder_1_1_filter_mitchell.html</anchorfile>
      <anchor>a46ea6473935ab2d131f3de44ae0ab143</anchor>
      <arglist>(float aSupport=2.0f, float b=0.3333333333f, float c=0.3333333333f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>operator()</name>
      <anchorfile>classcinder_1_1_filter_mitchell.html</anchorfile>
      <anchor>a1ab99c57fa0a832f949126f502d8e670</anchor>
      <arglist>(float x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::FilterSincBlackman</name>
    <filename>classcinder_1_1_filter_sinc_blackman.html</filename>
    <base>cinder::FilterBase</base>
    <member kind="function">
      <type></type>
      <name>FilterSincBlackman</name>
      <anchorfile>classcinder_1_1_filter_sinc_blackman.html</anchorfile>
      <anchor>a3b78c25224e2b061d97e784f3031005f</anchor>
      <arglist>(float aSupport=4.0f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>operator()</name>
      <anchorfile>classcinder_1_1_filter_sinc_blackman.html</anchorfile>
      <anchor>a06faaff48d7c7535e2ffb1e8f276b67d</anchor>
      <arglist>(float x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::FilterGaussian</name>
    <filename>classcinder_1_1_filter_gaussian.html</filename>
    <base>cinder::FilterBase</base>
    <member kind="function">
      <type></type>
      <name>FilterGaussian</name>
      <anchorfile>classcinder_1_1_filter_gaussian.html</anchorfile>
      <anchor>a163708cda1e521828e7d399836e031ad</anchor>
      <arglist>(float aSupport=1.25f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>operator()</name>
      <anchorfile>classcinder_1_1_filter_gaussian.html</anchorfile>
      <anchor>a5557d3f37856c3348b15a1d64d06ed3c</anchor>
      <arglist>(float x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::FilterBesselBlackman</name>
    <filename>classcinder_1_1_filter_bessel_blackman.html</filename>
    <base>cinder::FilterBase</base>
    <member kind="function">
      <type></type>
      <name>FilterBesselBlackman</name>
      <anchorfile>classcinder_1_1_filter_bessel_blackman.html</anchorfile>
      <anchor>a7972db32b09e95550d149d2eebb4930a</anchor>
      <arglist>(float aSupport=3.2383f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>operator()</name>
      <anchorfile>classcinder_1_1_filter_bessel_blackman.html</anchorfile>
      <anchor>a903a3d7711e4689da08f701c26dbe58c</anchor>
      <arglist>(float x) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Font</name>
    <filename>classcinder_1_1_font.html</filename>
    <member kind="typedef">
      <type>uint16_t</type>
      <name>Glyph</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>a0b4d7f083fa757170c7e4d51f50d2b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Font</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>a150a84125122d33ca7e1be5cf6ba6c16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Font</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>a2830b3f57637c836382d5a454a0655af</anchor>
      <arglist>(const std::string &amp;aName, float size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Font</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>a23b266078273b90431e5e34ec7afef11</anchor>
      <arglist>(DataSourceRef dataSource, float size)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>a76a123330d1552bf3a450bb4744943f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getFullName</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>ae33b9eb547df63d73724b6d2693156bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getSize</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>a5c55050654201aae97b490ff12f41697</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getLeading</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>a08ed27dd62e3392ed272eceefcf6efe3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAscent</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>a95d9ca5b68bc945d30429b1c77aaf15f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDescent</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>a8c5bae24d9dfeae9c1acde5c3f5e942d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumGlyphs</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>aa7e950adf260575620fa40081f6f38fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Glyph</type>
      <name>getGlyphIndex</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>a0132529f2c72a088e4ca9bee04e7db42</anchor>
      <arglist>(size_t idx) const </arglist>
    </member>
    <member kind="function">
      <type>Glyph</type>
      <name>getGlyphChar</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>a0264fce4c32cc7083c3cbd593973ca24</anchor>
      <arglist>(char utf8Char) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Glyph &gt;</type>
      <name>getGlyphs</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>a57f24c75f796ad6caf7628d83ebf4e4e</anchor>
      <arglist>(const std::string &amp;utf8String) const </arglist>
    </member>
    <member kind="function">
      <type>Shape2d</type>
      <name>getGlyphShape</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>a6541ec155f96f4222a49604ffbcc530e</anchor>
      <arglist>(Glyph glyphIndex) const </arglist>
    </member>
    <member kind="function">
      <type>Rectf</type>
      <name>getGlyphBoundingBox</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>ac299860e0fe5f75d12b09ec2d8aa967c</anchor>
      <arglist>(Glyph glyph) const </arglist>
    </member>
    <member kind="function">
      <type>CGFontRef</type>
      <name>getCgFontRef</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>a7d3a4e9c2e9645bca5af39d4894bfb6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CTFontRef</type>
      <name>getCtFontRef</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>ac52f0807c21105f43b6c410e1900a7ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::LOGFONT</type>
      <name>getLogfont</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>aceb3ca5d99fc86d43257b8c4bfa47246</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>::HFONT</type>
      <name>getHfont</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>a8d61c2fda5f7a275291620108b844a5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Gdiplus::Font *</type>
      <name>getGdiplusFont</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>a1eadd5873fd464ad5d7f7c5f7d8a6e7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::vector&lt; std::string &gt; &amp;</type>
      <name>getNames</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>a2d37eda2070d4e0578f6bf4aa54d6447</anchor>
      <arglist>(bool forceRefresh=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Font</type>
      <name>getDefault</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>a7b5f9b856f65bd7154b9ca1f54059fa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HDC</type>
      <name>getGlobalDc</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>afde781b9a3e455f05df9e343a6a6887d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Obj &gt; Font::*</type>
      <name>unspecified_bool_type</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>a7a599e23892e6dd3294154a097d17514</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unspecified_bool_type</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>a60f2007da2c98c6c1aff737ca329ced7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classcinder_1_1_font.html</anchorfile>
      <anchor>a67ce9ea40c43a5591be931ea70fc3f61</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::FontInvalidNameExc</name>
    <filename>classcinder_1_1_font_invalid_name_exc.html</filename>
    <base>cinder::Exception</base>
    <member kind="function">
      <type></type>
      <name>FontInvalidNameExc</name>
      <anchorfile>classcinder_1_1_font_invalid_name_exc.html</anchorfile>
      <anchor>a0f1e62b8a86e7bf88e81a4716d1d9083</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FontInvalidNameExc</name>
      <anchorfile>classcinder_1_1_font_invalid_name_exc.html</anchorfile>
      <anchor>acac79af12848ab50a07f114d0375b09a</anchor>
      <arglist>(const std::string &amp;fontName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classcinder_1_1_font_invalid_name_exc.html</anchorfile>
      <anchor>a4aa3f2b7d6efe6c87288732b00a4a1fc</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::FontGlyphFailureExc</name>
    <filename>classcinder_1_1_font_glyph_failure_exc.html</filename>
    <base>cinder::Exception</base>
  </compound>
  <compound kind="class">
    <name>cinder::Frustum</name>
    <filename>classcinder_1_1_frustum.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <type>@</type>
      <name>NEAR</name>
      <anchorfile>classcinder_1_1_frustum.html</anchorfile>
      <anchor>ad8ff56247721ba43248b5aa60c758ea4a21a10cc93f9dcab1cdc3dbd9508b7a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FAR</name>
      <anchorfile>classcinder_1_1_frustum.html</anchorfile>
      <anchor>ad8ff56247721ba43248b5aa60c758ea4af02524ff36a7d7d3023f6b66ceb63088</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LEFT</name>
      <anchorfile>classcinder_1_1_frustum.html</anchorfile>
      <anchor>ad8ff56247721ba43248b5aa60c758ea4a16f4a549a89cc07b9d85f21c3802a33a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RIGHT</name>
      <anchorfile>classcinder_1_1_frustum.html</anchorfile>
      <anchor>ad8ff56247721ba43248b5aa60c758ea4a5e011ff3a68e649d4d6323eed29c41b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TOP</name>
      <anchorfile>classcinder_1_1_frustum.html</anchorfile>
      <anchor>ad8ff56247721ba43248b5aa60c758ea4aaa6ad384b646dd56260f23ae67125624</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BOTTOM</name>
      <anchorfile>classcinder_1_1_frustum.html</anchorfile>
      <anchor>ad8ff56247721ba43248b5aa60c758ea4a7e494ddc87c1b68db6f2f54c211a8cb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Frustum</name>
      <anchorfile>classcinder_1_1_frustum.html</anchorfile>
      <anchor>a7f033304244a83bb412c0ebdba7a8903</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Frustum</name>
      <anchorfile>classcinder_1_1_frustum.html</anchorfile>
      <anchor>aebf38c2563bc1c7ed9a80e519ff01f2d</anchor>
      <arglist>(const Camera &amp;cam)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_frustum.html</anchorfile>
      <anchor>a3907ec1a0159f0146990e19821442f7e</anchor>
      <arglist>(const Camera &amp;cam)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_frustum.html</anchorfile>
      <anchor>a333cefaece4b203ee1a2d17506926464</anchor>
      <arglist>(const Camera &amp;cam, const Vec3&lt; T &gt; &amp;ntl, const Vec3&lt; T &gt; &amp;ntr, const Vec3&lt; T &gt; &amp;nbl, const Vec3&lt; T &gt; &amp;nbr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classcinder_1_1_frustum.html</anchorfile>
      <anchor>a0486fa743269c9809ab30769dc5b9bf8</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;loc) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classcinder_1_1_frustum.html</anchorfile>
      <anchor>a592b8083df673f689066c881f8472b49</anchor>
      <arglist>(const Sphere &amp;sphere) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classcinder_1_1_frustum.html</anchorfile>
      <anchor>a2cfe26d04b95d679697314b1fc35eff9</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;center, T radius) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classcinder_1_1_frustum.html</anchorfile>
      <anchor>a53abf194343e2f308338ea1028a94336</anchor>
      <arglist>(const AxisAlignedBox3f &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classcinder_1_1_frustum.html</anchorfile>
      <anchor>a220884fb3e75cc9b7df3637834ea8c33</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;center, const Vec3&lt; T &gt; &amp;size) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classcinder_1_1_frustum.html</anchorfile>
      <anchor>a17eed98ee9c737493d181c0083228fca</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;loc) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classcinder_1_1_frustum.html</anchorfile>
      <anchor>a8dbc62cc04f4c52125e2840de66fe908</anchor>
      <arglist>(const Sphere &amp;sphere) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classcinder_1_1_frustum.html</anchorfile>
      <anchor>a766121decb51c963d2f8954e5959fe96</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;center, T radius) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classcinder_1_1_frustum.html</anchorfile>
      <anchor>ac07b46a7eca67317edf757b4df08f1a1</anchor>
      <arglist>(const AxisAlignedBox3f &amp;box) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classcinder_1_1_frustum.html</anchorfile>
      <anchor>ab35690784e05e8f534ee3e071ec23fff</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;center, const Vec3&lt; T &gt; &amp;size) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Plane&lt; T &gt;</type>
      <name>mFrustumPlanes</name>
      <anchorfile>classcinder_1_1_frustum.html</anchorfile>
      <anchor>a324639f96b4c3ac76735d8d733a43852</anchor>
      <arglist>[6]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::CallbackMgr</name>
    <filename>classcinder_1_1_callback_mgr.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::vector&lt; std::pair&lt; CallbackId, std::function&lt; SIG &gt; &gt; &gt;</type>
      <name>collection</name>
      <anchorfile>classcinder_1_1_callback_mgr.html</anchorfile>
      <anchor>a8402b8fffe43ab157d197de1bea46a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>collection::iterator</type>
      <name>iterator</name>
      <anchorfile>classcinder_1_1_callback_mgr.html</anchorfile>
      <anchor>a441809c7678cc2c1af3dac24251eb09f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CallbackId</type>
      <name>registerCb</name>
      <anchorfile>classcinder_1_1_callback_mgr.html</anchorfile>
      <anchor>abd9d5d52a15d9942349a88a3142b974a</anchor>
      <arglist>(std::function&lt; SIG &gt; cb)</arglist>
    </member>
    <member kind="function">
      <type>CallbackId</type>
      <name>registerCb</name>
      <anchorfile>classcinder_1_1_callback_mgr.html</anchorfile>
      <anchor>ac62aca0bea9b1271c424b7ccd7ea9ea4</anchor>
      <arglist>(iterator position, std::function&lt; SIG &gt; cb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classcinder_1_1_callback_mgr.html</anchorfile>
      <anchor>a9e9b0217cba9e8a9dc7f26e0489ae64e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classcinder_1_1_callback_mgr.html</anchorfile>
      <anchor>a683c545bee5624554e192deb6db68ec8</anchor>
      <arglist>(A1 a1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classcinder_1_1_callback_mgr.html</anchorfile>
      <anchor>aaa7585752fd3f43e6a46fde9580dda9a</anchor>
      <arglist>(A1 a1, A2 a2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classcinder_1_1_callback_mgr.html</anchorfile>
      <anchor>a54a6aac32f91897f6d01b3a4214a1a55</anchor>
      <arglist>(A1 a1, A2 a2, A3 a3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classcinder_1_1_callback_mgr.html</anchorfile>
      <anchor>a9f2e2a992c8a943c592bf58ba8d82243</anchor>
      <arglist>(A1 a1, A2 a2, A3 a3, A4 a4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>call</name>
      <anchorfile>classcinder_1_1_callback_mgr.html</anchorfile>
      <anchor>a240f4d09f969611198406c97064503e8</anchor>
      <arglist>(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unregisterCb</name>
      <anchorfile>classcinder_1_1_callback_mgr.html</anchorfile>
      <anchor>a782b10496030784023b0ea0547b1207f</anchor>
      <arglist>(CallbackId cbId)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classcinder_1_1_callback_mgr.html</anchorfile>
      <anchor>ad0f215644a58a9e47f3c3b814eb5f74d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classcinder_1_1_callback_mgr.html</anchorfile>
      <anchor>a26474bf669ba64265449006cb6a07c38</anchor>
      <arglist>(CallbackId cbId)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classcinder_1_1_callback_mgr.html</anchorfile>
      <anchor>a49d925e55d444530a11a19d89609f0ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classcinder_1_1_callback_mgr.html</anchorfile>
      <anchor>acbc30ff7801180ba3dcaeb724d0c4944</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>collection &amp;</type>
      <name>getCallbacks</name>
      <anchorfile>classcinder_1_1_callback_mgr.html</anchorfile>
      <anchor>a84d8dbd5c5da8055b10e46552eb7a4ea</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::ImageIo</name>
    <filename>classcinder_1_1_image_io.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>ColorModel</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a595827bf6f9e0fc8b19222e1b60b2d47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CM_RGB</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a595827bf6f9e0fc8b19222e1b60b2d47a303c3c188fdf927cf8d2c44f06c6df7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CM_GRAY</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a595827bf6f9e0fc8b19222e1b60b2d47a838f09342db2cd919cf2761af577f0d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CM_UNKNOWN</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a595827bf6f9e0fc8b19222e1b60b2d47abed9d3f38192667e323462f42c8c23fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DataType</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a1a8e9988ecd36e59185b7e178eb2ad6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UINT8</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a1a8e9988ecd36e59185b7e178eb2ad6aa037137100145813301a3faafe805a779</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UINT16</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a1a8e9988ecd36e59185b7e178eb2ad6aa1dda9a631852a04063f0ab2a4b1a27fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FLOAT32</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a1a8e9988ecd36e59185b7e178eb2ad6aa62b33ced1e0189ac19ce6fdcc2906d41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DATA_UNKNOWN</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a1a8e9988ecd36e59185b7e178eb2ad6aa2c354d41a4424d9a59811d9b4a704487</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ChannelType</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a6e599a76b9ba16532a7a51b5874737d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHAN_RGB_R</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a6e599a76b9ba16532a7a51b5874737d5ab41a82d1e298b5c236f61b59a73abfeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHAN_RGB_G</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a6e599a76b9ba16532a7a51b5874737d5a0e2bd3d0aab9667d3cc5f4536910a40a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHAN_RGB_B</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a6e599a76b9ba16532a7a51b5874737d5acbfe98edcdd0c4124ad5cdb9402afa2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHAN_GRAY</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a6e599a76b9ba16532a7a51b5874737d5ac8f82fed9c3c9e58fceaf0a400ab45d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHAN_ALPHA</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a6e599a76b9ba16532a7a51b5874737d5a8684f764acc868427c1acaccb52e245a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHAN_MASK</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a6e599a76b9ba16532a7a51b5874737d5a5f3abc1c730fdeab47a3490803f9a3ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHAN_LAB_L</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a6e599a76b9ba16532a7a51b5874737d5aa89333f103f2ef3706c46aeafa6a4a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHAN_LAB_A</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a6e599a76b9ba16532a7a51b5874737d5a64147711793b11ab51612b1f1cabc078</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHAN_LAB_B</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a6e599a76b9ba16532a7a51b5874737d5adde88f7d43492f2f650ce17ebad087b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHAN_YUV_Y</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a6e599a76b9ba16532a7a51b5874737d5a237e3e0806450b648af12206a6f12f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHAN_YUV_U</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a6e599a76b9ba16532a7a51b5874737d5aa02d119a6c4b2c532ccb9752037ceb64</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHAN_YUV_V</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a6e599a76b9ba16532a7a51b5874737d5aadd8bb5db6a28d1efd91d3bc96c3a95e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHAN_CMYK_C</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a6e599a76b9ba16532a7a51b5874737d5abb8e81771d017ed8d47832ec601325f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHAN_CMYK_M</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a6e599a76b9ba16532a7a51b5874737d5af652c98dac1892eaad91a5073b9a6d0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHAN_CMYK_Y</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a6e599a76b9ba16532a7a51b5874737d5a5c7f376bec946fa828af118e87419333</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHAN_CMYK_K</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a6e599a76b9ba16532a7a51b5874737d5a217c5ae577b193e2a040935b846ba80d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHAN_UNKNOWN</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a6e599a76b9ba16532a7a51b5874737d5af2d2da9351474fafb50a8fbf0d166598</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ChannelOrder</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>ac966ad999fe016609c9bd0af61a3de41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RGBA</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>ac966ad999fe016609c9bd0af61a3de41ae8586c46558c0e6e5f2060a73ef5310e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BGRA</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>ac966ad999fe016609c9bd0af61a3de41ad7c95ce27f4daba90c00e31c519cef06</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ARGB</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>ac966ad999fe016609c9bd0af61a3de41a4ea1dea527dedbff88981ddfbb98c11c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ABGR</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>ac966ad999fe016609c9bd0af61a3de41a27baa38aecf3eb5042cbbbdcf4ad88c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RGBX</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>ac966ad999fe016609c9bd0af61a3de41a3b32389160959c1755a6823e75887b30</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BGRX</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>ac966ad999fe016609c9bd0af61a3de41aa355d78dd2e6a12e5b2f23fd3424b7ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>XRGB</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>ac966ad999fe016609c9bd0af61a3de41a4fbf62a4f068c2ee66ed2d2df08fc554</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>XBGR</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>ac966ad999fe016609c9bd0af61a3de41a65f396da060b62727f51c5a7f49c7d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RGB</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>ac966ad999fe016609c9bd0af61a3de41a5f6b32b1f6d5aff6946bc4804c5ada6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BGR</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>ac966ad999fe016609c9bd0af61a3de41ad07c1a19d964faec047ccac50e68b5a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Y</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>ac966ad999fe016609c9bd0af61a3de41a14f704f8c2804bbbd5622993abb202e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>YA</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>ac966ad999fe016609c9bd0af61a3de41af703757c2fcc1945961230e46a0b9e87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CUSTOM</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>ac966ad999fe016609c9bd0af61a3de41a20f453e2e29dee3912eaed4f40ddff35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum cinder::ImageIo::ColorModel</type>
      <name>ColorModel</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a71b890dc83bb1d7d98b8d2f4354aef4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum cinder::ImageIo::DataType</type>
      <name>DataType</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a5ccc138fee944428dcd87234f3269e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum cinder::ImageIo::ChannelType</type>
      <name>ChannelType</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a77d2e4c298f334ccd10d87c04f5e769a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum cinder::ImageIo::ChannelOrder</type>
      <name>ChannelOrder</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a4948aa0bfddeab7c37f75d5551986725</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getWidth</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>af37fdfa48ff893168074a0377a6e5c28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getHeight</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a8448a243be098d9593da9444198af3d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColorModel</type>
      <name>getColorModel</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a8124fa840dfee61a2f18d46de7ca530e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataType</type>
      <name>getDataType</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a4f71f49891103b1fd2edf5a061532166</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ChannelOrder</type>
      <name>getChannelOrder</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a745a0013c9dc98bda72bca38dad1fd91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAlpha</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a2cc02efec75d10dbeb3bdb204723d1ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>translateRgbColorModelToOffsets</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>ac1abcc1792c9ddb0291d770ac8facfa7</anchor>
      <arglist>(ChannelOrder channelOrder, int8_t *red, int8_t *green, int8_t *blue, int8_t *alpha, int8_t *inc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>translateGrayColorModelToOffsets</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>acb7a28059ca6f5b021b478737ac45b0d</anchor>
      <arglist>(ChannelOrder channelOrder, int8_t *gray, int8_t *alpha, int8_t *inc)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>channelOrderHasAlpha</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a4c857c30945e1fa422abf3e5fb082a17</anchor>
      <arglist>(ChannelOrder channelOrder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int8_t</type>
      <name>channelOrderNumChannels</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a2224d452e2da11f345d3a57010afa48f</anchor>
      <arglist>(ChannelOrder channelOrder)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint8_t</type>
      <name>dataTypeBytes</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a24e3a92a8036fb357147247df3a77924</anchor>
      <arglist>(DataType dataType)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; std::string &gt;</type>
      <name>getLoadExtensions</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a747688432b02e629c211eb7baf5d4951</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; std::string &gt;</type>
      <name>getWriteExtensions</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a567137d1fe02920de749cd5b7479de34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageIo</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a601d8dea72ed65cfdc2bcc076fe63188</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a62fc1d23b68b95116677d72d6a10a232</anchor>
      <arglist>(int32_t width, int32_t height)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setColorModel</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a911f29f30f35eadcd68d90158a793dec</anchor>
      <arglist>(ColorModel colorModel)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDataType</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a133c284e2564911a96267863ebb485a6</anchor>
      <arglist>(DataType aDataType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setChannelOrder</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>ae15721c773d2aaf00ecb22e12963892b</anchor>
      <arglist>(ChannelOrder aChannelOrder)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mWidth</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a84e0a5d7f04c1bd37198a2804ab5fdb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mHeight</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a8136229c1404a243da87f601136f11c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ColorModel</type>
      <name>mColorModel</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a38d3ea5cff8b751da1e57d5aff832dce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataType</type>
      <name>mDataType</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a38bb869546f9d5a6aafb58905d2f9014</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChannelOrder</type>
      <name>mChannelOrder</name>
      <anchorfile>classcinder_1_1_image_io.html</anchorfile>
      <anchor>a4c6bad47a55912599668f8ae577b2d25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::ImageSource</name>
    <filename>classcinder_1_1_image_source.html</filename>
    <base>cinder::ImageIo</base>
    <class kind="class">cinder::ImageSource::Options</class>
    <member kind="typedef">
      <type>void(ImageSource::*</type>
      <name>RowFunc</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>ace9b5247debc16356b7a4051870ee008</anchor>
      <arglist>)(ImageTargetRef, int32_t, const void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageSource</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>ad6416656e8dc2a364050172fd99274f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageSource</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a5b5ce9037769e9f608ec97f27da1f646</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getPixelAspectRatio</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>aa0a58770f0f525f81ba7c2761ff444df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPremultiplied</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a368dbe83473ae2dd405395f8dfc7f4b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>load</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a5d3869d802a7460f30381e2160436e97</anchor>
      <arglist>(ImageTargetRef target)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setPixelAspectRatio</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a1e7d0bca3eddd1933fd3105f96791474</anchor>
      <arglist>(float pixelAspectRatio)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setPremultiplied</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a91c447e7b6a7ae539a862e0f7085ecf2</anchor>
      <arglist>(bool premult=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setCustomPixelInc</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a8cab3ff71b5cb772c59286f0a2e57608</anchor>
      <arglist>(int8_t customPixelInc)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RowFunc</type>
      <name>setupRowFunc</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a71b5e3e0acb4f8df168abfc251c848d2</anchor>
      <arglist>(ImageTargetRef target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupRowFuncRgbSource</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a67f4dd2c18962801a060b85cb18fe092</anchor>
      <arglist>(ImageTargetRef target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupRowFuncGraySource</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>aa69fc41b25ea1f317800e37da9d3eef3</anchor>
      <arglist>(ImageTargetRef target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RowFunc</type>
      <name>setupRowFuncForTypesAndTargetColorModel</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a77f85bff33fdd259abee4f49b0497e9a</anchor>
      <arglist>(ImageTargetRef target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RowFunc</type>
      <name>setupRowFuncForTypes</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a97e9e0d8187355da7b0a3f344046c906</anchor>
      <arglist>(ImageTargetRef target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>RowFunc</type>
      <name>setupRowFuncForSourceType</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>ade437f342f0902877a3d04d426b34f94</anchor>
      <arglist>(ImageTargetRef target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>rowFuncSourceRgb</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a47a5fefd5db2a17f31fd0d9841d4352f</anchor>
      <arglist>(ImageTargetRef target, int32_t row, const void *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>rowFuncSourceGray</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>ad7cdaa8db432531f0a180e05f01cd2f9</anchor>
      <arglist>(ImageTargetRef target, int32_t row, const void *data)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mPixelAspectRatio</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a95044334e94b8e5c8a41d6f1dfc7d43b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mIsPremultiplied</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a3036a7d2a87e18406f459a416e0bdad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int8_t</type>
      <name>mCustomPixelInc</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a0e5ff3c0babc6738ed716b7903328200</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int8_t</type>
      <name>mRowFuncSourceRed</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a891bed71f866adacb2f7cdbc7d78dd0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int8_t</type>
      <name>mRowFuncSourceGreen</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a27bb6e530e90b97af2c9646f79740b7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int8_t</type>
      <name>mRowFuncSourceBlue</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a483d6d52629f642bd15de597c66ada5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int8_t</type>
      <name>mRowFuncSourceAlpha</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>aed214896165c72ffde34f5e8b44e2390</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int8_t</type>
      <name>mRowFuncTargetRed</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a7e607fcdd371283806e6c42ff44ed984</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int8_t</type>
      <name>mRowFuncTargetGreen</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a31143477b3beef6eaa807e080cbe28a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int8_t</type>
      <name>mRowFuncTargetBlue</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a31e188065bb93a9113ff808ef3a81776</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int8_t</type>
      <name>mRowFuncTargetAlpha</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>aace306cf54ecf8f6f23c6a0914caec2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int8_t</type>
      <name>mRowFuncSourceGray</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a89a13003a9cf75d6fc7cf2d05fef0907</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int8_t</type>
      <name>mRowFuncTargetGray</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a4955c34b0e7f60760c2bcf3c45f11649</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int8_t</type>
      <name>mRowFuncSourceInc</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>a2c98ada73436f096d7a9ed9ab2a6af0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int8_t</type>
      <name>mRowFuncTargetInc</name>
      <anchorfile>classcinder_1_1_image_source.html</anchorfile>
      <anchor>aa4b2e787833f5bf1775fd300e7ebb0dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::ImageSource::Options</name>
    <filename>classcinder_1_1_image_source_1_1_options.html</filename>
    <member kind="function">
      <type></type>
      <name>Options</name>
      <anchorfile>classcinder_1_1_image_source_1_1_options.html</anchorfile>
      <anchor>a87864f863cf2512a61c6b6162b4eede4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Options &amp;</type>
      <name>index</name>
      <anchorfile>classcinder_1_1_image_source_1_1_options.html</anchorfile>
      <anchor>afc64b70197bea4e82a9ee635254af266</anchor>
      <arglist>(int32_t aIndex)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getIndex</name>
      <anchorfile>classcinder_1_1_image_source_1_1_options.html</anchorfile>
      <anchor>a5d5ba43f6b45eb0a52b409c23d892ab5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mIndex</name>
      <anchorfile>classcinder_1_1_image_source_1_1_options.html</anchorfile>
      <anchor>abd2b070759e14be32cfaa8504d5c1ca0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::ImageTarget</name>
    <filename>classcinder_1_1_image_target.html</filename>
    <base>cinder::ImageIo</base>
    <class kind="class">cinder::ImageTarget::Options</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ImageTarget</name>
      <anchorfile>classcinder_1_1_image_target.html</anchorfile>
      <anchor>aa229387e83afeecee32dc34c46ff231f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>getRowPointer</name>
      <anchorfile>classcinder_1_1_image_target.html</anchorfile>
      <anchor>a6fb56ac2d7aca2c2455ef24c23e8dd38</anchor>
      <arglist>(int32_t row)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRow</name>
      <anchorfile>classcinder_1_1_image_target.html</anchorfile>
      <anchor>ae3019d4cd4cdb3cbd014d8ccf3d8a7eb</anchor>
      <arglist>(int32_t row, const void *data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalize</name>
      <anchorfile>classcinder_1_1_image_target.html</anchorfile>
      <anchor>a51ff4b5e1b4e47e64471fe14107f27e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageTarget</name>
      <anchorfile>classcinder_1_1_image_target.html</anchorfile>
      <anchor>a280e1d44aa05471ed2349b5b1568b5bb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::ImageTarget::Options</name>
    <filename>classcinder_1_1_image_target_1_1_options.html</filename>
    <member kind="function">
      <type></type>
      <name>Options</name>
      <anchorfile>classcinder_1_1_image_target_1_1_options.html</anchorfile>
      <anchor>aa52398585e1a34aa4e8cac34cc2eafc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Options &amp;</type>
      <name>quality</name>
      <anchorfile>classcinder_1_1_image_target_1_1_options.html</anchorfile>
      <anchor>a591cefdba75359414856239c50478a6c</anchor>
      <arglist>(float quality)</arglist>
    </member>
    <member kind="function">
      <type>Options &amp;</type>
      <name>colorModel</name>
      <anchorfile>classcinder_1_1_image_target_1_1_options.html</anchorfile>
      <anchor>ae420ded8229f3ea7abfa928d0ee1c154</anchor>
      <arglist>(ImageIo::ColorModel cm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColorModelDefault</name>
      <anchorfile>classcinder_1_1_image_target_1_1_options.html</anchorfile>
      <anchor>a55a38d8945affc1b75b3029c8f8ba14b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getQuality</name>
      <anchorfile>classcinder_1_1_image_target_1_1_options.html</anchorfile>
      <anchor>a8c59cdf6145f6a41e6b565b75fed0a87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isColorModelDefault</name>
      <anchorfile>classcinder_1_1_image_target_1_1_options.html</anchorfile>
      <anchor>a3607832634c2082ebea2f6c33508295a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ImageIo::ColorModel</type>
      <name>getColorModel</name>
      <anchorfile>classcinder_1_1_image_target_1_1_options.html</anchorfile>
      <anchor>af6751ec01cf27a8dc5e9032aff7b46da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mQuality</name>
      <anchorfile>classcinder_1_1_image_target_1_1_options.html</anchorfile>
      <anchor>aecaf7f99684cf2788e6f9738c9926272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mColorModelDefault</name>
      <anchorfile>classcinder_1_1_image_target_1_1_options.html</anchorfile>
      <anchor>a3513e680968c81c681032875a326ec18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ImageIo::ColorModel</type>
      <name>mColorModel</name>
      <anchorfile>classcinder_1_1_image_target_1_1_options.html</anchorfile>
      <anchor>a4fd42fcd800909eba6e9daac6bcad7f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::ImageIoException</name>
    <filename>classcinder_1_1_image_io_exception.html</filename>
    <base>cinder::Exception</base>
  </compound>
  <compound kind="class">
    <name>cinder::ImageIoExceptionFailedLoad</name>
    <filename>classcinder_1_1_image_io_exception_failed_load.html</filename>
    <base>cinder::ImageIoException</base>
  </compound>
  <compound kind="class">
    <name>cinder::ImageIoExceptionFailedWrite</name>
    <filename>classcinder_1_1_image_io_exception_failed_write.html</filename>
    <base>cinder::ImageIoException</base>
  </compound>
  <compound kind="class">
    <name>cinder::ImageIoExceptionUnknownExtension</name>
    <filename>classcinder_1_1_image_io_exception_unknown_extension.html</filename>
    <base>cinder::ImageIoException</base>
  </compound>
  <compound kind="class">
    <name>cinder::ImageIoExceptionIllegalColorModel</name>
    <filename>classcinder_1_1_image_io_exception_illegal_color_model.html</filename>
    <base>cinder::ImageIoException</base>
  </compound>
  <compound kind="class">
    <name>cinder::ImageIoExceptionIllegalDataType</name>
    <filename>classcinder_1_1_image_io_exception_illegal_data_type.html</filename>
    <base>cinder::ImageIoException</base>
  </compound>
  <compound kind="class">
    <name>cinder::ImageIoExceptionIllegalChannelOrder</name>
    <filename>classcinder_1_1_image_io_exception_illegal_channel_order.html</filename>
    <base>cinder::ImageIoException</base>
  </compound>
  <compound kind="struct">
    <name>cinder::ImageIoRegistrar</name>
    <filename>structcinder_1_1_image_io_registrar.html</filename>
    <member kind="typedef">
      <type>ImageSourceRef(*</type>
      <name>SourceCreationFunc</name>
      <anchorfile>structcinder_1_1_image_io_registrar.html</anchorfile>
      <anchor>ab943719616ac9de29f47d97998933f54</anchor>
      <arglist>)(DataSourceRef, ImageSource::Options options)</arglist>
    </member>
    <member kind="typedef">
      <type>ImageTargetRef(*</type>
      <name>TargetCreationFunc</name>
      <anchorfile>structcinder_1_1_image_io_registrar.html</anchorfile>
      <anchor>a3a5594015324a5eab9f3500267ed13b8</anchor>
      <arglist>)(DataTargetRef, ImageSourceRef, ImageTarget::Options options, const std::string &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageSourceRef</type>
      <name>createSource</name>
      <anchorfile>structcinder_1_1_image_io_registrar.html</anchorfile>
      <anchor>aac0872844c9cb1edfba82a90b490073c</anchor>
      <arglist>(DataSourceRef dataSource, ImageSource::Options options, std::string extension)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageTargetRef</type>
      <name>createTarget</name>
      <anchorfile>structcinder_1_1_image_io_registrar.html</anchorfile>
      <anchor>a5e0dae9a5adca01b3a84e7ba6a055eff</anchor>
      <arglist>(DataTargetRef dataTarget, ImageSourceRef imageSource, ImageTarget::Options options, std::string extension)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerSourceType</name>
      <anchorfile>structcinder_1_1_image_io_registrar.html</anchorfile>
      <anchor>ac3ef3317f85d0a1491f01557fd60ccc3</anchor>
      <arglist>(std::string extension, SourceCreationFunc func, int32_t priority=2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerSourceGeneric</name>
      <anchorfile>structcinder_1_1_image_io_registrar.html</anchorfile>
      <anchor>ac982040ee7d5cfcf597011bde73338a4</anchor>
      <arglist>(SourceCreationFunc func, int32_t priority=2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerTargetType</name>
      <anchorfile>structcinder_1_1_image_io_registrar.html</anchorfile>
      <anchor>a0c2f83f7b16e6fd913dcc42f8ca72a14</anchor>
      <arglist>(std::string extension, TargetCreationFunc func, int32_t priority, const std::string &amp;extensionData)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ImageIo</name>
      <anchorfile>structcinder_1_1_image_io_registrar.html</anchorfile>
      <anchor>a7643e00c703b8b13bd4372226a400d7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::ImageIoRegistrant</name>
    <filename>structcinder_1_1_image_io_registrant.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ImageIoRegistrant</name>
      <anchorfile>structcinder_1_1_image_io_registrant.html</anchorfile>
      <anchor>a15503128d241dd9efc866639627f0394</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::ImageSourceFileQuartz</name>
    <filename>classcinder_1_1_image_source_file_quartz.html</filename>
    <member kind="function">
      <type>CFDictionaryRef</type>
      <name>getQuartzProperties</name>
      <anchorfile>classcinder_1_1_image_source_file_quartz.html</anchorfile>
      <anchor>a3f05e973fadfcf1a52b44d5ec2af030b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CFDictionaryRef</type>
      <name>getQuartzIndexProperties</name>
      <anchorfile>classcinder_1_1_image_source_file_quartz.html</anchorfile>
      <anchor>a610914a4db4b84543dc07fca809ece03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageSourceRef</type>
      <name>createRef</name>
      <anchorfile>classcinder_1_1_image_source_file_quartz.html</anchorfile>
      <anchor>a86b9543ea9366e59476489261c6ce206</anchor>
      <arglist>(DataSourceRef dataSourceRef, ImageSource::Options options)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageSourceFileQuartzRef</type>
      <name>createFileQuartzRef</name>
      <anchorfile>classcinder_1_1_image_source_file_quartz.html</anchorfile>
      <anchor>a5c9e9e5bd792721d9b139a53c3aa8573</anchor>
      <arglist>(DataSourceRef dataSourceRef, ImageSource::Options options)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerSelf</name>
      <anchorfile>classcinder_1_1_image_source_file_quartz.html</anchorfile>
      <anchor>a27644d4393c3eb639f2dc26bceee1243</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageSourceFileQuartz</name>
      <anchorfile>classcinder_1_1_image_source_file_quartz.html</anchorfile>
      <anchor>aba3c6355e12747109f40a0f2a124a93b</anchor>
      <arglist>(CGImageRef imageRef, ImageSource::Options options, std::shared_ptr&lt; const struct __CFDictionary &gt; imageProperties, std::shared_ptr&lt; const struct __CFDictionary &gt; imageIndexProps)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; const struct __CFDictionary &gt;</type>
      <name>mImageProperties</name>
      <anchorfile>classcinder_1_1_image_source_file_quartz.html</anchorfile>
      <anchor>acb97aa8ee39b4f20246a4a66388b6e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; const struct __CFDictionary &gt;</type>
      <name>mImageIndexProperties</name>
      <anchorfile>classcinder_1_1_image_source_file_quartz.html</anchorfile>
      <anchor>a1a9a0363668ffefec5823a3bab1f388b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::ImageSourceFileWic</name>
    <filename>classcinder_1_1_image_source_file_wic.html</filename>
    <base>cinder::ImageSource</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>load</name>
      <anchorfile>classcinder_1_1_image_source_file_wic.html</anchorfile>
      <anchor>a8ba5d70820775e96bb760e69f2a1f0b9</anchor>
      <arglist>(ImageTargetRef target)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageSourceRef</type>
      <name>createRef</name>
      <anchorfile>classcinder_1_1_image_source_file_wic.html</anchorfile>
      <anchor>a6e94e600d9177fa5e0d72dfd041446d2</anchor>
      <arglist>(DataSourceRef dataSourceRef, ImageSource::Options options=ImageSource::Options())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageSourceFileWicRef</type>
      <name>createFileWicRef</name>
      <anchorfile>classcinder_1_1_image_source_file_wic.html</anchorfile>
      <anchor>a8662f4aa50852d7eafafa75d9744095c</anchor>
      <arglist>(DataSourceRef dataSourceRef, ImageSource::Options options=ImageSource::Options())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerSelf</name>
      <anchorfile>classcinder_1_1_image_source_file_wic.html</anchorfile>
      <anchor>a5133e6a2d7ca3fb6ad9ae9c9e1b48abb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageSourceFileWic</name>
      <anchorfile>classcinder_1_1_image_source_file_wic.html</anchorfile>
      <anchor>ada42d4429b0d77ab012c283f55e35297</anchor>
      <arglist>(DataSourceRef dataSourceRef, ImageSource::Options options)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>processFormat</name>
      <anchorfile>classcinder_1_1_image_source_file_wic.html</anchorfile>
      <anchor>aac743c687d14e652487eb481d0c60474</anchor>
      <arglist>(const ::GUID &amp;guid,::GUID *convertGUID)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; uint8_t &gt;</type>
      <name>mData</name>
      <anchorfile>classcinder_1_1_image_source_file_wic.html</anchorfile>
      <anchor>a965de8bea922bc715ab2ea524e370b59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mRowBytes</name>
      <anchorfile>classcinder_1_1_image_source_file_wic.html</anchorfile>
      <anchor>a698a352f88185e9f2c94492cc7be9dda</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::ImageSourcePng</name>
    <filename>classcinder_1_1_image_source_png.html</filename>
    <base>cinder::ImageSource</base>
    <member kind="function">
      <type></type>
      <name>~ImageSourcePng</name>
      <anchorfile>classcinder_1_1_image_source_png.html</anchorfile>
      <anchor>a1ab9376e82eba6c27f58daf2324ffa10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>load</name>
      <anchorfile>classcinder_1_1_image_source_png.html</anchorfile>
      <anchor>a26286a43acf922d3fb4c2f486e424a00</anchor>
      <arglist>(ImageTargetRef target)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageSourcePngRef</type>
      <name>createRef</name>
      <anchorfile>classcinder_1_1_image_source_png.html</anchorfile>
      <anchor>a8ff0bfe08889181064dc31b4c1436cfa</anchor>
      <arglist>(DataSourceRef dataSourceRef, ImageSource::Options options=ImageSource::Options())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageSourceRef</type>
      <name>createSourceRef</name>
      <anchorfile>classcinder_1_1_image_source_png.html</anchorfile>
      <anchor>a1482b3ad6b97e30648d1ef4d17b99067</anchor>
      <arglist>(DataSourceRef dataSourceRef, ImageSource::Options options=ImageSource::Options())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerSelf</name>
      <anchorfile>classcinder_1_1_image_source_png.html</anchorfile>
      <anchor>a3b9cc84e180e3211b28d95e385971483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageSourcePng</name>
      <anchorfile>classcinder_1_1_image_source_png.html</anchorfile>
      <anchor>aec1f7a680ecc0fc0bef1dafc3e4ebd36</anchor>
      <arglist>(DataSourceRef dataSourceRef, ImageSource::Options options)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>loadHeader</name>
      <anchorfile>classcinder_1_1_image_source_png.html</anchorfile>
      <anchor>a3a1f7ae69db726000858a92ce46c5151</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; ci_png_info &gt;</type>
      <name>mCiInfoPtr</name>
      <anchorfile>classcinder_1_1_image_source_png.html</anchorfile>
      <anchor>a152568893b6c3258424631832158cde6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>png_struct_def *</type>
      <name>mPngPtr</name>
      <anchorfile>classcinder_1_1_image_source_png.html</anchorfile>
      <anchor>a40c71da64de572f9d554a6e72d4239be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>png_info_struct *</type>
      <name>mInfoPtr</name>
      <anchorfile>classcinder_1_1_image_source_png.html</anchorfile>
      <anchor>a065e5aa67e2134c1449214987e3de0e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::ImageTargetFileQuartz</name>
    <filename>classcinder_1_1_image_target_file_quartz.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalize</name>
      <anchorfile>classcinder_1_1_image_target_file_quartz.html</anchorfile>
      <anchor>a158ba4cce952e756fe5055cc0b4490f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageTargetRef</type>
      <name>createRef</name>
      <anchorfile>classcinder_1_1_image_target_file_quartz.html</anchorfile>
      <anchor>a9b96a19dd261daf100de466b887c2167</anchor>
      <arglist>(DataTargetRef dataTarget, ImageSourceRef imageSource, ImageTarget::Options options, const std::string &amp;extensionData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerSelf</name>
      <anchorfile>classcinder_1_1_image_target_file_quartz.html</anchorfile>
      <anchor>a9e042379d25358dd76ba817761942580</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageTargetFileQuartz</name>
      <anchorfile>classcinder_1_1_image_target_file_quartz.html</anchorfile>
      <anchor>ace6988b526e72b751af53639c154c2e1</anchor>
      <arglist>(DataTargetRef dataTarget, ImageSourceRef imageSource, ImageTarget::Options options, const std::string &amp;extensionData)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupImageDestOptions</name>
      <anchorfile>classcinder_1_1_image_target_file_quartz.html</anchorfile>
      <anchor>a0187bbef057bcc11ceef3375bf496ace</anchor>
      <arglist>(ImageTarget::Options options)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::CGImageDestinationRef</type>
      <name>mImageDest</name>
      <anchorfile>classcinder_1_1_image_target_file_quartz.html</anchorfile>
      <anchor>a1a8bcf41aeb80ec42715b5c2f82efe83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; __CFDictionary &gt;</type>
      <name>mImageDestOptions</name>
      <anchorfile>classcinder_1_1_image_target_file_quartz.html</anchorfile>
      <anchor>a88220add0924ba3483c5cb3056800432</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; uint8_t &gt;</type>
      <name>mData</name>
      <anchorfile>classcinder_1_1_image_target_file_quartz.html</anchorfile>
      <anchor>ac6811da116645603476d6c6d163688d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::ImageTargetFileWic</name>
    <filename>classcinder_1_1_image_target_file_wic.html</filename>
    <base>cinder::ImageTarget</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>getRowPointer</name>
      <anchorfile>classcinder_1_1_image_target_file_wic.html</anchorfile>
      <anchor>a33318d0ef156a0caa209a4b83baff206</anchor>
      <arglist>(int32_t row)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalize</name>
      <anchorfile>classcinder_1_1_image_target_file_wic.html</anchorfile>
      <anchor>a8a9cc4bca72f3f2e06b6ccbe07520103</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageTargetRef</type>
      <name>createRef</name>
      <anchorfile>classcinder_1_1_image_target_file_wic.html</anchorfile>
      <anchor>ab0b95cabe35f94d53faec1feea60491a</anchor>
      <arglist>(DataTargetRef dataTarget, ImageSourceRef imageSource, ImageTarget::Options options, const std::string &amp;extensionData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerSelf</name>
      <anchorfile>classcinder_1_1_image_target_file_wic.html</anchorfile>
      <anchor>ac51ab28534331124c19aa403ce5aad4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageTargetFileWic</name>
      <anchorfile>classcinder_1_1_image_target_file_wic.html</anchorfile>
      <anchor>aa5df0e15c914b421a3e1d9147996c312</anchor>
      <arglist>(DataTargetRef dataTarget, ImageSourceRef imageSource, ImageTarget::Options options, const std::string &amp;extensionData)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupPixelFormat</name>
      <anchorfile>classcinder_1_1_image_target_file_wic.html</anchorfile>
      <anchor>acc4ed2b904c427607868d7faf710d79d</anchor>
      <arglist>(const GUID &amp;guid)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; uint8_t &gt;</type>
      <name>mData</name>
      <anchorfile>classcinder_1_1_image_target_file_wic.html</anchorfile>
      <anchor>aa638e0e35042dda6bc40523d8ccae220</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mRowBytes</name>
      <anchorfile>classcinder_1_1_image_target_file_wic.html</anchorfile>
      <anchor>ae94f44ee6b2d315afdb9f8f5babc7f22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataTargetRef</type>
      <name>mDataTarget</name>
      <anchorfile>classcinder_1_1_image_target_file_wic.html</anchorfile>
      <anchor>a60b87b085088af772dbd8c4472e18c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const GUID *</type>
      <name>mCodecGUID</name>
      <anchorfile>classcinder_1_1_image_target_file_wic.html</anchorfile>
      <anchor>afdaf1f6a10cfdcda766b1b444a527501</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; IWICBitmapEncoder &gt;</type>
      <name>mEncoder</name>
      <anchorfile>classcinder_1_1_image_target_file_wic.html</anchorfile>
      <anchor>a73ab1353d33ccdec766abfb8cd680258</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; IWICBitmapFrameEncode &gt;</type>
      <name>mBitmapFrame</name>
      <anchorfile>classcinder_1_1_image_target_file_wic.html</anchorfile>
      <anchor>ab2fc380ac7a11587c57eed4bad8341d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::JsonTree</name>
    <filename>classcinder_1_1_json_tree.html</filename>
    <class kind="class">cinder::JsonTree::ExcChildNotFound</class>
    <class kind="class">cinder::JsonTree::Exception</class>
    <class kind="class">cinder::JsonTree::ExcJsonParserError</class>
    <class kind="class">cinder::JsonTree::ExcNonConvertible</class>
    <class kind="class">cinder::JsonTree::ParseOptions</class>
    <class kind="class">cinder::JsonTree::WriteOptions</class>
    <member kind="function">
      <type></type>
      <name>JsonTree</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a1e90b6abb3b13727a95b6318b5118b90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JsonTree</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a490e3af9b3e6ab7937880484b90e6efb</anchor>
      <arglist>(const JsonTree &amp;jsonTree)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JsonTree</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>ad83b56c01bedf933b7653d0b9a069df0</anchor>
      <arglist>(DataSourceRef dataSource, ParseOptions parseOptions=ParseOptions())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JsonTree</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>afbdc1b4c85cd843fd2871f23c8701c21</anchor>
      <arglist>(const std::string &amp;jsonString, ParseOptions parseOptions=ParseOptions())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JsonTree</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a0104cb6667ae88602396dc6b227d1a13</anchor>
      <arglist>(const std::string &amp;key, bool value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JsonTree</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>ae0c047613329caaebe56b9826eb2bb7a</anchor>
      <arglist>(const std::string &amp;key, double value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JsonTree</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>afc618ec648e506c6df01673b3b715b49</anchor>
      <arglist>(const std::string &amp;key, float value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JsonTree</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a8ee085733e88f77cb0b6b7fa94da4d3f</anchor>
      <arglist>(const std::string &amp;key, int value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JsonTree</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>ad3fb00e2e068e3c2347a56d910fd522d</anchor>
      <arglist>(const std::string &amp;key, const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JsonTree</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a998db42c5f267e9a64004052a647e2c6</anchor>
      <arglist>(const std::string &amp;key, const char *value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JsonTree</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a2676d3f7651764b0cf2eb940316fd06f</anchor>
      <arglist>(const std::string &amp;key, uint32_t value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JsonTree</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a4ec061f8227434514436ca53f5c54fba</anchor>
      <arglist>(const std::string &amp;key, int64_t value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JsonTree</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a46e15e11ecdd0d8adb1bc777612f2fd2</anchor>
      <arglist>(const std::string &amp;key, uint64_t value)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serialize</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a93b840a919e5876fa2b05d31483f195d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iter</type>
      <name>begin</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a71134232924fe4a294dc4dbbb78a2165</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIter</type>
      <name>begin</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a53ac8319ce20a2ee6361414436377f58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iter</type>
      <name>end</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a046d4f200d5e667b9149a896324af938</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIter</type>
      <name>end</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>ae5884f421b4742ed55bfb0f0a8c8f970</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>JsonTree &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a83953fbd20a2ffb761102f8e42649b81</anchor>
      <arglist>(const JsonTree &amp;jsonTree)</arglist>
    </member>
    <member kind="function">
      <type>JsonTree &amp;</type>
      <name>operator[]</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>add6619271fc65ed30a28d57620d36ea7</anchor>
      <arglist>(const std::string &amp;relativePath)</arglist>
    </member>
    <member kind="function">
      <type>const JsonTree &amp;</type>
      <name>operator[]</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a3dc28363656567ba5d71e4cb15f82cb2</anchor>
      <arglist>(const std::string &amp;relativePath) const </arglist>
    </member>
    <member kind="function">
      <type>JsonTree &amp;</type>
      <name>operator[]</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>aff3966d713b7c3b08920e60093b92c0a</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const JsonTree &amp;</type>
      <name>operator[]</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>af208217dd25c2779e6397b08e6641a4d</anchor>
      <arglist>(size_t index) const </arglist>
    </member>
    <member kind="function">
      <type>JsonTree &amp;</type>
      <name>getChild</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>ae526da4642aa9588e4d919ac5e0d8b91</anchor>
      <arglist>(const std::string &amp;relativePath, bool caseSensitive=false, char separator= &apos;.&apos;)</arglist>
    </member>
    <member kind="function">
      <type>const JsonTree &amp;</type>
      <name>getChild</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a22d4546611f6b583f82c09d66e4f6d1b</anchor>
      <arglist>(const std::string &amp;relativePath, bool caseSensitive=false, char separator= &apos;.&apos;) const </arglist>
    </member>
    <member kind="function">
      <type>JsonTree &amp;</type>
      <name>getChild</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a0bf813cc82197bf05d08c0128312f5ab</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const JsonTree &amp;</type>
      <name>getChild</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>ab705a8a48b84db3779bcc31697d19b0a</anchor>
      <arglist>(size_t index) const </arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>getChildren</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a2e85cbd039f938ee5c2a234cc1f69519</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasChild</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>abc4e75fcac62f52517eac2f964e9703b</anchor>
      <arglist>(const std::string &amp;relativePath, bool caseSensitive=false, char separator= &apos;.&apos;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasChildren</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>aaa77638ca78b49594733df608cbd9ed5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>JsonTree &amp;</type>
      <name>getParent</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a47f76270cf7ecb391c5dcd21e407ef8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const JsonTree &amp;</type>
      <name>getParent</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a910cd1f8cf78e89bf0ba702f643c24ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasParent</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a1ac0c30e1e9032a099bb5c16c56b4ab1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>abf9566b5cfcd259b97e4376ca31ac79b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushBack</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a54bb90f703831839cfd01e73b1027bf0</anchor>
      <arglist>(const JsonTree &amp;newChild)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChild</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a8b431c842288c54c92d1771b086dc212</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>Iter</type>
      <name>removeChild</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a60ff3bb008b2b98ff63d6cf6100c1b75</anchor>
      <arglist>(Iter pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceChild</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a201a0e2afc80d53588dc40cee883c3e9</anchor>
      <arglist>(size_t index, const JsonTree &amp;newChild)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceChild</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a28cd86fce94f59b9835f2432dbe37b78</anchor>
      <arglist>(Iter pos, const JsonTree &amp;newChild)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>aaba1f449503fc5a5b91f2402deb8c0a3</anchor>
      <arglist>(const fs::path &amp;path, WriteOptions writeOptions=WriteOptions())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a0956ab9d9ce647fec7da1fa5b651849e</anchor>
      <arglist>(DataTargetRef target, WriteOptions writeOptions=WriteOptions())</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getKey</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a172467420d90d56f31bca2af9270633e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPath</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a6fa18d6dae09e98bbe278094c1ea8184</anchor>
      <arglist>(char separator= &apos;.&apos;) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getValue</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a1621dc43ad863f9d132af231973ea681</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getValue</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>ad8415c0062e286da2d4eaea4c0aa21dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JsonTree</type>
      <name>makeArray</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a9b15eb2ecaec45050a4523d26c98f27d</anchor>
      <arglist>(const std::string &amp;key=&quot;&quot;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static JsonTree</type>
      <name>makeObject</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>ad57b6d1186eb1a711b5ec855c245d21a</anchor>
      <arglist>(const std::string &amp;key=&quot;&quot;)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classcinder_1_1_json_tree.html</anchorfile>
      <anchor>a675176dc7a63becd03f176089359308b</anchor>
      <arglist>(std::ostream &amp;out, const JsonTree &amp;json)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::JsonTree::ExcChildNotFound</name>
    <filename>classcinder_1_1_json_tree_1_1_exc_child_not_found.html</filename>
    <base>cinder::JsonTree::Exception</base>
    <member kind="function">
      <type></type>
      <name>ExcChildNotFound</name>
      <anchorfile>classcinder_1_1_json_tree_1_1_exc_child_not_found.html</anchorfile>
      <anchor>a1915c26ddd7e9d9a38aee5ab33b3b98e</anchor>
      <arglist>(const JsonTree &amp;node, const std::string &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classcinder_1_1_json_tree_1_1_exc_child_not_found.html</anchorfile>
      <anchor>acecbc3f5c3c832bca3db7d993e293421</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::JsonTree::Exception</name>
    <filename>classcinder_1_1_json_tree_1_1_exception.html</filename>
    <base>cinder::Exception</base>
  </compound>
  <compound kind="class">
    <name>cinder::JsonTree::ExcJsonParserError</name>
    <filename>classcinder_1_1_json_tree_1_1_exc_json_parser_error.html</filename>
    <base>cinder::JsonTree::Exception</base>
    <member kind="function">
      <type></type>
      <name>ExcJsonParserError</name>
      <anchorfile>classcinder_1_1_json_tree_1_1_exc_json_parser_error.html</anchorfile>
      <anchor>a7e53dc60508250947b51dd8f7a17c4eb</anchor>
      <arglist>(const std::string &amp;errorMessage)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classcinder_1_1_json_tree_1_1_exc_json_parser_error.html</anchorfile>
      <anchor>af8e1908109b916e00d8cd7a006be75d3</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::JsonTree::ExcNonConvertible</name>
    <filename>classcinder_1_1_json_tree_1_1_exc_non_convertible.html</filename>
    <base>cinder::JsonTree::Exception</base>
    <member kind="function">
      <type></type>
      <name>ExcNonConvertible</name>
      <anchorfile>classcinder_1_1_json_tree_1_1_exc_non_convertible.html</anchorfile>
      <anchor>a1b79e81173e75b9f60a9d185d1aa823a</anchor>
      <arglist>(const JsonTree &amp;node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classcinder_1_1_json_tree_1_1_exc_non_convertible.html</anchorfile>
      <anchor>a4e66e26ddc7905e9a11cce2b217e8931</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::JsonTree::ParseOptions</name>
    <filename>classcinder_1_1_json_tree_1_1_parse_options.html</filename>
    <member kind="function">
      <type></type>
      <name>ParseOptions</name>
      <anchorfile>classcinder_1_1_json_tree_1_1_parse_options.html</anchorfile>
      <anchor>a4c16ef9e987233b0063c8c9a8cab2579</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParseOptions &amp;</type>
      <name>ignoreErrors</name>
      <anchorfile>classcinder_1_1_json_tree_1_1_parse_options.html</anchorfile>
      <anchor>abdfad08656897a29ff8126a8c84a466b</anchor>
      <arglist>(bool ignore=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIgnoreErrors</name>
      <anchorfile>classcinder_1_1_json_tree_1_1_parse_options.html</anchorfile>
      <anchor>afcf4fd8b318fc020f24115e2b96166ec</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::JsonTree::WriteOptions</name>
    <filename>classcinder_1_1_json_tree_1_1_write_options.html</filename>
    <member kind="function">
      <type></type>
      <name>WriteOptions</name>
      <anchorfile>classcinder_1_1_json_tree_1_1_write_options.html</anchorfile>
      <anchor>a8f5f41e54855bed5cc879f69b733be9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>WriteOptions &amp;</type>
      <name>createDocument</name>
      <anchorfile>classcinder_1_1_json_tree_1_1_write_options.html</anchorfile>
      <anchor>a9fde377ed7c748a0cd2fd7ffdf66e8ec</anchor>
      <arglist>(bool createDocument=true)</arglist>
    </member>
    <member kind="function">
      <type>WriteOptions &amp;</type>
      <name>indented</name>
      <anchorfile>classcinder_1_1_json_tree_1_1_write_options.html</anchorfile>
      <anchor>a656e1e83042e118908edf075d219bee2</anchor>
      <arglist>(bool indent=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getCreateDocument</name>
      <anchorfile>classcinder_1_1_json_tree_1_1_write_options.html</anchorfile>
      <anchor>a12a4c967d5f26aa1a6fd1e08e6c75c55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIndented</name>
      <anchorfile>classcinder_1_1_json_tree_1_1_write_options.html</anchorfile>
      <anchor>ac0e793fbbccb6ea05b94c306eb5d4c11</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::KdNode</name>
    <filename>structcinder_1_1_kd_node.html</filename>
    <templarg>K</templarg>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structcinder_1_1_kd_node.html</anchorfile>
      <anchor>a49ce0a7580e3c9144eee300bab0879a4</anchor>
      <arglist>(float p, uint32_t a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initLeaf</name>
      <anchorfile>structcinder_1_1_kd_node.html</anchorfile>
      <anchor>a1d8571887a8a4125d610d885dee50a9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>splitPos</name>
      <anchorfile>structcinder_1_1_kd_node.html</anchorfile>
      <anchor>ac04d585c623ab618ea0f622586d04c88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>splitAxis</name>
      <anchorfile>structcinder_1_1_kd_node.html</anchorfile>
      <anchor>aae9eb7fbe26cd7d15a9ea915744ab1f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>hasLeftChild</name>
      <anchorfile>structcinder_1_1_kd_node.html</anchorfile>
      <anchor>a56cc5f124384b75859904cebab174273</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>rightChild</name>
      <anchorfile>structcinder_1_1_kd_node.html</anchorfile>
      <anchor>a03da41dcfbdf14a69d2d108337d474b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::NullLookupProc</name>
    <filename>structcinder_1_1_null_lookup_proc.html</filename>
    <member kind="function">
      <type>void</type>
      <name>process</name>
      <anchorfile>structcinder_1_1_null_lookup_proc.html</anchorfile>
      <anchor>ad2b1c5b51cd916239e5150d808b8bf97</anchor>
      <arglist>(uint32_t id, float distSqrd, float &amp;maxDistSqrd)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::KdTree</name>
    <filename>classcinder_1_1_kd_tree.html</filename>
    <templarg></templarg>
    <templarg>K</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::pair&lt; const NodeData *, uint32_t &gt;</type>
      <name>NodeDataIndex</name>
      <anchorfile>classcinder_1_1_kd_tree.html</anchorfile>
      <anchor>ae55740419793e4a7dec15c6bf6187f64</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KdTree</name>
      <anchorfile>classcinder_1_1_kd_tree.html</anchorfile>
      <anchor>a2003b3e96e620a4ed22f38ea1a0e2850</anchor>
      <arglist>(const NodeDataVector &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KdTree</name>
      <anchorfile>classcinder_1_1_kd_tree.html</anchorfile>
      <anchor>a93413416cec46b6b4a17ed14d41e0706</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classcinder_1_1_kd_tree.html</anchorfile>
      <anchor>adbc09be2da9acc60d22d79360604a433</anchor>
      <arglist>(const NodeDataVector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KdTree</name>
      <anchorfile>classcinder_1_1_kd_tree.html</anchorfile>
      <anchor>a29b21faa91be20005ba9fcc54cea0b25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recursiveBuild</name>
      <anchorfile>classcinder_1_1_kd_tree.html</anchorfile>
      <anchor>a6ddec42204371699d790f61acd762e3f</anchor>
      <arglist>(uint32_t nodeNum, uint32_t start, uint32_t end, std::vector&lt; NodeDataIndex &gt; &amp;buildNodes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookup</name>
      <anchorfile>classcinder_1_1_kd_tree.html</anchorfile>
      <anchor>aa2e02afa9063692f46c91e6e23c1b6b4</anchor>
      <arglist>(const NodeData &amp;p, const LookupProc &amp;process, float maxDist) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findNearest</name>
      <anchorfile>classcinder_1_1_kd_tree.html</anchorfile>
      <anchor>aab3bdf0ef36242b441bfa98630aa207f</anchor>
      <arglist>(float p[K], float result[K], uint32_t *resultIndex) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::NodeDataVectorTraits</name>
    <filename>structcinder_1_1_node_data_vector_traits.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>getSize</name>
      <anchorfile>structcinder_1_1_node_data_vector_traits.html</anchorfile>
      <anchor>a120cf6ae3f2e0d392a0244a4e70c9641</anchor>
      <arglist>(const NDV &amp;ndv)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::NodeDataTraits</name>
    <filename>structcinder_1_1_node_data_traits.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getAxis</name>
      <anchorfile>structcinder_1_1_node_data_traits.html</anchorfile>
      <anchor>aec914dfbd2b9215ea3dee6c71a5665e8</anchor>
      <arglist>(const NodeData &amp;data, int axis)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getAxis0</name>
      <anchorfile>structcinder_1_1_node_data_traits.html</anchorfile>
      <anchor>a468c1b55d71c0a199b9162e7f1e99cc1</anchor>
      <arglist>(const NodeData &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getAxis1</name>
      <anchorfile>structcinder_1_1_node_data_traits.html</anchorfile>
      <anchor>a286e05dab0c2ed968ef86c8cde836ba2</anchor>
      <arglist>(const NodeData &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getAxis2</name>
      <anchorfile>structcinder_1_1_node_data_traits.html</anchorfile>
      <anchor>a546173a456ce62bf38afc4378e4e2cdc</anchor>
      <arglist>(const NodeData &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>distanceSquared</name>
      <anchorfile>structcinder_1_1_node_data_traits.html</anchorfile>
      <anchor>a7e5f850497d9f1ffd2d941fe27af97f9</anchor>
      <arglist>(const NodeData &amp;data, float k[3])</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::NodeDataTraits&lt; Vec2f &gt;</name>
    <filename>structcinder_1_1_node_data_traits_3_01_vec2f_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getAxis</name>
      <anchorfile>structcinder_1_1_node_data_traits_3_01_vec2f_01_4.html</anchorfile>
      <anchor>a5c31b8b2aa2bd4c010dabb9f5eb7efb0</anchor>
      <arglist>(const Vec2f &amp;data, int axis)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getAxis0</name>
      <anchorfile>structcinder_1_1_node_data_traits_3_01_vec2f_01_4.html</anchorfile>
      <anchor>aa6328197eed29512083cd0dadd5b4ee3</anchor>
      <arglist>(const Vec2f &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getAxis1</name>
      <anchorfile>structcinder_1_1_node_data_traits_3_01_vec2f_01_4.html</anchorfile>
      <anchor>a3f432f3361114f4e1cf7272b7f2cdbbe</anchor>
      <arglist>(const Vec2f &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>distanceSquared</name>
      <anchorfile>structcinder_1_1_node_data_traits_3_01_vec2f_01_4.html</anchorfile>
      <anchor>ad32464aae8ce5d42eed8adb2369a2d09</anchor>
      <arglist>(const Vec2f &amp;data, float k[2])</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::CompareNode</name>
    <filename>structcinder_1_1_compare_node.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>CompareNode</name>
      <anchorfile>structcinder_1_1_compare_node.html</anchorfile>
      <anchor>a9dae5c69c1d90589786c7a5e868f110b</anchor>
      <arglist>(int a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1_compare_node.html</anchorfile>
      <anchor>abccd46dfb8de43a01a6ae929074b6580</anchor>
      <arglist>(const std::pair&lt; const NodeData *, uint32_t &gt; &amp;d1, const std::pair&lt; const NodeData *, uint32_t &gt; &amp;d2) const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>axis</name>
      <anchorfile>structcinder_1_1_compare_node.html</anchorfile>
      <anchor>af8e8b393a6d093513f392a8c8858c6ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Matrix22</name>
    <filename>classcinder_1_1_matrix22.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>TYPE</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a002b0311b7aaafca9f1237c2e8279cf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>ab8eda381605faf303cb2032544c31afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix22</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a8e2d989e07228444ae552c508b002cab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix22</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>af0596349f153319a50e9f5d1a685ab03</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix22</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a8c2f176ee98e0aa98157ef20c9acec81</anchor>
      <arglist>(const T *dt, bool srcIsRowMajor=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix22</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a2df10b1a5fdf89cfe9afe41346f58eb3</anchor>
      <arglist>(T d0, T d1, T d2, T d3, bool srcIsRowMajor=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix22</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a86523830c4ab7adc1f2813d700b9c769</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;vx, const Vec2&lt; T &gt; &amp;vy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix22</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a241af0aff105bcfe5653ccad6c7bd4ca</anchor>
      <arglist>(const Matrix22&lt; FromT &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix22</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a098500ceeeaa748d64e21711e49db8f9</anchor>
      <arglist>(const Matrix22&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a6964482e90162df2d6d4790f0eadd75a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T *</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>ab0211bf245af4a26a800dcb1dbe68ed4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix22&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a6a8976c2cedc87c4110c7b0197b95759</anchor>
      <arglist>(const Matrix22&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix22&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a8311d5055115f67440df8cb52440f010</anchor>
      <arglist>(const T &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix22&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a3f694faab144e03421211e3a21599abf</anchor>
      <arglist>(const Matrix22&lt; FromT &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalCompare</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a3e624adfe99cad4e0c230f04f54f9af3</anchor>
      <arglist>(const Matrix22&lt; T &gt; &amp;rhs, T epsilon) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a19b4637a7c37288a44bc47b09a3dc5d8</anchor>
      <arglist>(const Matrix22&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a527f5852385065cc30aee23b2646fe14</anchor>
      <arglist>(const Matrix22&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix22&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>ac9c7f76c80e32f08fba228dd98946edb</anchor>
      <arglist>(const Matrix22&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix22&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>aab80b4a2bc380390d37e39fe49269e32</anchor>
      <arglist>(const Matrix22&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix22&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a1006ecff46b0dc9e6e7df87c8993a849</anchor>
      <arglist>(const Matrix22&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix22&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a0a327c371b63e66b56d59eacf18fdb9d</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function">
      <type>Matrix22&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>ac054fd73a4b57e97408e7424e06253d3</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function">
      <type>Matrix22&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>ac24158b504244ddc93f6d99d19343183</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function">
      <type>Matrix22&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a9cf1d0966dba6b87a1c36de8c020d23d</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function">
      <type>const Matrix22&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a4cee84af54767c0e0fc8ce2f651aee28</anchor>
      <arglist>(const Matrix22&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix22&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a507ac87127241bfb3428ed7422f512db</anchor>
      <arglist>(const Matrix22&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix22&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>ab2a163f8a4fb9126f3b3e21b3205e616</anchor>
      <arglist>(const Matrix22&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>ad4fd98aedef0df30008b74eff826b00b</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix22&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>ad292e1b092e1ed3e1bbc2d15a11f85f3</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix22&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a4ab4c4efaa0642cc825f3d7717a8a2f2</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix22&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a9b3a6a3b2ab5dc7e51bb555b9af86607</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix22&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a5072e47a8b36855c732b7e7ec08933a7</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>at</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>aaf0187fe096a62b4d35584e462aefe17</anchor>
      <arglist>(int row, int col)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>at</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a4e741a3ee64a86929022457980f7d3d0</anchor>
      <arglist>(int row, int col) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a2c43a7322e3576c2ad1002246d5e90f3</anchor>
      <arglist>(const T *dt, bool srcIsRowMajor=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a5f89e96d5dae0a540f8019129893533a</anchor>
      <arglist>(T d0, T d1, T d2, T d3, bool srcIsRowMajor=false)</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>getColumn</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a347ef07f98cc711afadf826689a4ee99</anchor>
      <arglist>(int col) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumn</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>acebaf889f67e6e3e21d53eca7fda4c76</anchor>
      <arglist>(int col, const Vec2&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>getRow</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a190c0a6315389bb9c14a0e7772cad049</anchor>
      <arglist>(int row) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRow</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>ab85cbc0518461f880b56df61692f4980</anchor>
      <arglist>(int row, const Vec2&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getColumns</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a571eb6569bb27256e61ffcc0d834530c</anchor>
      <arglist>(Vec2&lt; T &gt; *c0, Vec2&lt; T &gt; *c1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumns</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>afb80ce79f5576fc32646c95564a4d438</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;c0, const Vec2&lt; T &gt; &amp;c1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRows</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>ac8c10db704f255bdb1f2b9f93dec216f</anchor>
      <arglist>(Vec2&lt; T &gt; *r0, Vec2&lt; T &gt; *r1) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRows</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a2e16f55e38d89e3bff56d12868c3ec54</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;r0, const Vec2&lt; T &gt; &amp;r1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToNull</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>ac9f75e6f8fa973bd101501c596c26645</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToIdentity</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>aa7edd316864b0dd577d88e9038ae036e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>determinant</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>aa86c5b51d6cdba8fc1440768f68fefb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>trace</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>aa6fb646dca38ebf19fe802c350b7f154</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix22&lt; T &gt;</type>
      <name>diagonal</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a48cb25ffd60645035bec5aebf1331a4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix22&lt; T &gt;</type>
      <name>lowerTriangular</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>ab76246c2ad231fd50f632ec2f30e9ad6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix22&lt; T &gt;</type>
      <name>upperTriangular</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>adf57636eba09205817e946d4eae5082c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transpose</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>ae97b374ce8681bec8f264275f9879856</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix22&lt; T &gt;</type>
      <name>transposed</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a89ffc30d3526da3e430c6b86f3f91a59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>ad30eae148e14b95efb084c0d3d561050</anchor>
      <arglist>(T epsilon=EPSILON)</arglist>
    </member>
    <member kind="function">
      <type>Matrix22&lt; T &gt;</type>
      <name>inverted</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a343a96c6d1ad2e306094ae73c914f313</anchor>
      <arglist>(T epsilon=EPSILON) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>preMultiply</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a464ec5bd65369b192ff1a2a0f14f4390</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>postMultiply</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>afc89d3d23120ede27a6c92c2ddf9fa6a</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>transformVec</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a6d6585c12bc9227c6af830cfb2d98c0e</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a11e4dfa33975713a8e0c183f28e6ab4c</anchor>
      <arglist>(T radians)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a0fcfc5daead23c0931ab860dbe7fe30b</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a60aea1954f2b5ca5bc9788fedf628e86</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Matrix22&lt; T &gt;</type>
      <name>invertTransform</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a9af7f6c7ed71ccf1da14efb5b0591511</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix22&lt; T &gt;</type>
      <name>identity</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>ada8c5915d5e3254ce1c5d3daff6935ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix22&lt; T &gt;</type>
      <name>one</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a8322e54583df5af3d485ba87ec7a8b1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix22&lt; T &gt;</type>
      <name>zero</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>ac8733dab1226b8df3fd2f6caaa0a956d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix22&lt; T &gt;</type>
      <name>createRotation</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>ab953afe3ec067ba16bdeaf46d658cf53</anchor>
      <arglist>(T radians)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix22&lt; T &gt;</type>
      <name>createScale</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>adb79e51f8a5753be058c7100aa9fe436</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix22&lt; T &gt;</type>
      <name>createScale</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a3fbb5c78c24f525aa441f308874e5e4c</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>DIM</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>ad5849011f37ae03d5db21a15a5a37342</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>DIM_SQ</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a138b857ef540f8bbb2c6546401dcb61b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>MEM_LEN</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a6704cb0431eff25ae0b11cde2043f27c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classcinder_1_1_matrix22.html</anchorfile>
      <anchor>a3390d9581182660ed1734b15873c17f9</anchor>
      <arglist>(std::ostream &amp;lhs, const Matrix22&lt; T &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Matrix33</name>
    <filename>classcinder_1_1_matrix33.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>TYPE</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>ad8ef64751cd2d14cf581b8eee7ba507e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a98306f4b0d7dc5ff7124cf532ceb671e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix33</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a367f9b0d5d1e50a0dfe87865dc8b1303</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix33</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a9f964a8a6131ede86e38c702c28a0b95</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix33</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a82658b77b97232ae091707ac23ea78fd</anchor>
      <arglist>(const T *dt, bool srcIsRowMajor=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix33</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a83ff95f17e66e315860432f9aace7192</anchor>
      <arglist>(T d0, T d1, T d2, T d3, T d4, T d5, T d6, T d7, T d8, bool srcIsRowMajor=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix33</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a0f546156086c9013bb4d77705b18099c</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;vx, const Vec3&lt; T &gt; &amp;vy, const Vec3&lt; T &gt; &amp;vz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix33</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>aace82421dea95c6746b0b97477271101</anchor>
      <arglist>(const Matrix33&lt; FromT &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix33</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>ac79bb0e8d3950714b114ce2ab57deebb</anchor>
      <arglist>(const Matrix22&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix33</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a558894447d1571fd29256f9eadfa3efa</anchor>
      <arglist>(const Matrix33&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>afc9bf8fcbdbf389dd9aeb15884202a64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T *</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>aace84bf3f19de1c65e3a0eecc2cf2a94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix33&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a77255a5d115bafb88dac1b4d71b32518</anchor>
      <arglist>(const Matrix33&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix33&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>ad327f3ede0f34e114e284ec45d5603a5</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix33&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a03b1a4564e81d3a3a276fa571836c23d</anchor>
      <arglist>(const Matrix33&lt; FromT &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix33&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a81de4aca3895279d6685e66b8effe7ed</anchor>
      <arglist>(const Matrix22&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalCompare</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a8d78aac87a4f629be34605180093ca44</anchor>
      <arglist>(const Matrix33&lt; T &gt; &amp;rhs, T epsilon) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a7b6abbf28f4efe60331c9dc52a463282</anchor>
      <arglist>(const Matrix33&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a78747eaa8fd91daacf5c863b6f2e4b23</anchor>
      <arglist>(const Matrix33&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix33&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>ad1db4b9f11bc0bc3fedc679722498761</anchor>
      <arglist>(const Matrix33&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix33&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a7a62ef85570b7f64c1409a360aade742</anchor>
      <arglist>(const Matrix33&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix33&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>ac3c89b2614f8d8671cb89227f293ffca</anchor>
      <arglist>(const Matrix33&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix33&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a15c2eb5277bd670a3bdc63cedc37f87f</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function">
      <type>Matrix33&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a57edc6429f1cd4ee9f8098a26c1e47c2</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function">
      <type>Matrix33&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>adaf77e8b5b75c839858ea4a77e2b4df9</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function">
      <type>Matrix33&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a00759796f5df8168511a642495926abd</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function">
      <type>const Matrix33&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>ad00bbf9643ec62bd8d2992384181b098</anchor>
      <arglist>(const Matrix33&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix33&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>ac1a969b467bd45dbc964445d2fad4329</anchor>
      <arglist>(const Matrix33&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix33&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a07582f6552bba9772d6ad15263e22b46</anchor>
      <arglist>(const Matrix33&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a12d49569587567c6f3d43b486743e64b</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix33&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a8ce3c17f9aad9042a81f058a382bb2fd</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix33&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>ad7e1d15a652fc368bed5776e666655ea</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix33&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>afdba3c00573142791d9ab47bf7e66f10</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix33&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a54b94a6e4bee0f666ba2ad0ea9e35f81</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>at</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>aa74a5a3872072b1c89670eb4b70b475a</anchor>
      <arglist>(int row, int col)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>at</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a81e373b1def39ae6ca22341657210317</anchor>
      <arglist>(int row, int col) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>acef784606fbd26f4d30027b049fc1bfe</anchor>
      <arglist>(const T *dt, bool srcIsRowMajor=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a1602f0a62e1f2669df08cfd95d2792aa</anchor>
      <arglist>(T d0, T d1, T d2, T d3, T d4, T d5, T d6, T d7, T d8, bool srcIsRowMajor=false)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>getColumn</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>afc1e16a9a6a78fcd87c852cfeea7e07e</anchor>
      <arglist>(int col) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumn</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a1c3dd3bcb5e6108d077a3d0df955a928</anchor>
      <arglist>(int col, const Vec3&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>getRow</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a347199f800f3ce313d70aa9581c71b00</anchor>
      <arglist>(int row) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRow</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>ac55ad0e04c47e47269b31341d0270795</anchor>
      <arglist>(int row, const Vec3&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getColumns</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>ac97b077d862c99c5345d60fad9c8b122</anchor>
      <arglist>(Vec3&lt; T &gt; *c0, Vec3&lt; T &gt; *c1, Vec3&lt; T &gt; *c2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumns</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a85e7c5ceaedbb4fc1ea26f029f97fc94</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;c0, const Vec3&lt; T &gt; &amp;c1, const Vec3&lt; T &gt; &amp;c2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRows</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a2a8669980f69399b7deff32065c138d5</anchor>
      <arglist>(Vec3&lt; T &gt; *r0, Vec3&lt; T &gt; *r1, Vec3&lt; T &gt; *r2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRows</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a49507fc089703d18a83a5cdb90f62606</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;r0, const Vec3&lt; T &gt; &amp;r1, const Vec3&lt; T &gt; &amp;r2)</arglist>
    </member>
    <member kind="function">
      <type>Matrix22&lt; T &gt;</type>
      <name>subMatrix22</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a185ea1b6e490d2754105c9a1580df03b</anchor>
      <arglist>(int row, int col) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToNull</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>af96b5ea35d4d57f713ec20427fee8a6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToIdentity</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>ab6f194a790a1753768baa24f8b8402c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>determinant</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>af002aedeb6ed34bde653458325515f74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>trace</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>add2f2d5420eeb7eb153ca0dd23340e4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix33&lt; T &gt;</type>
      <name>diagonal</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>acf0b6ae56c992aa94dbb6e912901e888</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix33&lt; T &gt;</type>
      <name>lowerTriangular</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a29078e6bb3be8ccaa77b9c51e893dce7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix33&lt; T &gt;</type>
      <name>upperTriangular</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a309442d1c968d577df97dcfad3ca84ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transpose</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a0bb0401fdc26a02c60491cf04d439ba6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix33&lt; T &gt;</type>
      <name>transposed</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>abd7bd3f73760fb632d006e46d46a2166</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a90efb0640fa89c4bc68f11374dacaafc</anchor>
      <arglist>(T epsilon=EPSILON)</arglist>
    </member>
    <member kind="function">
      <type>Matrix33&lt; T &gt;</type>
      <name>inverted</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a5c72e5dd8387d271f66c2cf5f1d5faf1</anchor>
      <arglist>(T epsilon=EPSILON) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>preMultiply</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a229c8a4d774ceda5b2c8a50d3ef84077</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>postMultiply</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a8e0ac6a56c32893003cf8fa665466049</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>transformVec</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a946f6e66469a222916d05d6f12895838</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a08b6ae77fe900b0cb34f76c1017971d6</anchor>
      <arglist>(const VecT&lt; T &gt; &amp;axis, T radians)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a5596914c9070132172c21995fb9b79fd</anchor>
      <arglist>(const VecT&lt; T &gt; &amp;eulerRadians)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a0b20635ca7c2e5519edfdca8bcec83bd</anchor>
      <arglist>(const VecT&lt; T &gt; &amp;from, const VecT&lt; T &gt; &amp;to, const VecT&lt; T &gt; &amp;worldUp)</arglist>
    </member>
    <member kind="function">
      <type>Matrix33&lt; T &gt;</type>
      <name>invertTransform</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a8204a2239e825878332a71b3b831d343</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix33&lt; T &gt;</type>
      <name>identity</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>ace14bb2583bebe116e73a463b2bc52c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix33&lt; T &gt;</type>
      <name>one</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a3fd847c0ed79cd48270dda81fa810457</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix33&lt; T &gt;</type>
      <name>zero</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a2eb3043cf4d2b5fdb297934cba41ee0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix33&lt; T &gt;</type>
      <name>createRotation</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>aaf755c4f42125c87d2d6529fc1c817b6</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;axis, T radians)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix33&lt; T &gt;</type>
      <name>createRotation</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>ab10fc9f328044cacfc3e94a220bc1f9c</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;from, const Vec3&lt; T &gt; &amp;to, const Vec3&lt; T &gt; &amp;worldUp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix33&lt; T &gt;</type>
      <name>createRotation</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>ab4ed790dcca2065ae1ee321b20281462</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;eulerRadians)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix33&lt; T &gt;</type>
      <name>createScale</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a5cdf08ee2b524e7ee4f6137cc3304b3b</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix33&lt; T &gt;</type>
      <name>createScale</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a52de74b10d1f27d555d9a3604fb66f0b</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix33&lt; T &gt;</type>
      <name>createScale</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a84ab09539309a9af41aee2c20a2ef599</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix33&lt; T &gt;</type>
      <name>alignZAxisWithTarget</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>af298eca74c15173e13fbd6afc734dbb4</anchor>
      <arglist>(Vec3&lt; T &gt; targetDir, Vec3&lt; T &gt; upDir)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>DIM</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>afd57a72fc4f8242a14c92803bd8bfc82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>DIM_SQ</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a040231b90a1aa99777e9e886e36d3984</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>MEM_LEN</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>aabf5bccf7f39c2342f6511e923067735</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classcinder_1_1_matrix33.html</anchorfile>
      <anchor>a8d8223760d59534635654c05fbef85b2</anchor>
      <arglist>(std::ostream &amp;lhs, const Matrix33&lt; T &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Matrix44</name>
    <filename>classcinder_1_1_matrix44.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>TYPE</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a05117b2870ec91948319db91c23cad3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a545bc8d0353a45d0917781223c89eca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix44</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>af3bbcf8641b13a6b2f7bceb0fe12c138</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix44</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ab1ee39e7d6b7428f732b5fea1a692612</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix44</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a4dbcc8bf6c0c4d5fe390a0e633f9c12d</anchor>
      <arglist>(const T *dt, bool srcIsRowMajor=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix44</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a809bf477302221d904ff5fdad3b53044</anchor>
      <arglist>(T d0, T d1, T d2, T d3, T d4, T d5, T d6, T d7, T d8, T d9, T d10, T d11, T d12, T d13, T d14, T d15, bool srcIsRowMajor=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix44</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a6588f93a4b921afac23673dd4c9d23c7</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;vx, const Vec3&lt; T &gt; &amp;vy, const Vec3&lt; T &gt; &amp;vz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix44</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ac65add28cff0d4cfdb4240eb22d523e0</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;vx, const Vec4&lt; T &gt; &amp;vy, const Vec4&lt; T &gt; &amp;vz, const Vec4&lt; T &gt; &amp;vw=Vec4&lt; T &gt;(0, 0, 0, 1))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix44</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a7a6e724176f58cb4f8480d267822c8c5</anchor>
      <arglist>(const Matrix44&lt; FromT &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix44</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a5b79569a02d6d83291b3def764aaaa1f</anchor>
      <arglist>(const Matrix22&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix44</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a43dbcaa84cc430c2cefcf717c55c6fd7</anchor>
      <arglist>(const MatrixAffine2&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix44</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ad4a5023671e3c91290e2d1bfa96062e2</anchor>
      <arglist>(const Matrix33&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix44</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>aa3263670f9ed8004ca7a5ed515a6fc96</anchor>
      <arglist>(const Matrix44&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T *</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a7c3835deb14341ab4e1ab0bd4d7fdd87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T *</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ae6f57d462c71448d025982fa2668099e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a8965d8367d3a6cbe2409f1be49706271</anchor>
      <arglist>(const Matrix44&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a21e4f49caf948099b77aa1feb408e434</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>addf05f7331eb56baf6b523900a9dee13</anchor>
      <arglist>(const Matrix44&lt; FromT &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ad8ec9474af4bc6987b8522bc9c1adb86</anchor>
      <arglist>(const Matrix22&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ab00aee5c29edf389c2971e84d335e72d</anchor>
      <arglist>(const MatrixAffine2&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a98be6ed0464b511d5cb22ece5d3f7388</anchor>
      <arglist>(const Matrix33&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalCompare</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>aa42b3b3bd8319880622c80f6bc8becdd</anchor>
      <arglist>(const Matrix44&lt; T &gt; &amp;rhs, T epsilon) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a499557bf08a33ec8521177b3515d236f</anchor>
      <arglist>(const Matrix44&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>af6d59958088ede0edc6de53e079dbe6f</anchor>
      <arglist>(const Matrix44&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ac5f82d70e84069777094faf132eb5174</anchor>
      <arglist>(const Matrix44&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a50bdb989076de2586aeec07c87d9d25b</anchor>
      <arglist>(const Matrix44&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a0383551b80a166665bf916ce46e8995d</anchor>
      <arglist>(const Matrix44&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ad01df5ba570040053d2ccb5a305fdb75</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a9ddcf230a05b2cbc9c733c76acb8a6dd</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a24db2a32dbdca3af669f453e8675a3f3</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>aba96c33e8121cdd3e82f9c69e4e15ba1</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>const Matrix44&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a0a1bd1b001dc2ede0c9332515dafed5e</anchor>
      <arglist>(const Matrix44&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix44&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>abd05688b19487989e84b47610c6bcf09</anchor>
      <arglist>(const Matrix44&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix44&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a8d9c3c1cfdc7a2c7c0377cc178677e94</anchor>
      <arglist>(const Matrix44&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a51fd78ff916c849c5f8bc1b1cc17bdd4</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec4&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a933d0a06181b5e39959a0cfda3afab27</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix44&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a6920704cd3c5e04069ad1179543b121d</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix44&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a98b86427e98c076822f64f9e91baea2c</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix44&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a345a6d4e9637eb3ad51b247634165b6d</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Matrix44&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a02d56815fc25b0e894f23e3316ad69e2</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>at</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a8aa31490d839c83fb605b00e043b85d1</anchor>
      <arglist>(int row, int col)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>at</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>aba50a4236b8e15fad5b676350aa3f24e</anchor>
      <arglist>(int row, int col) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a124652260be00cdfae3d70a1af694932</anchor>
      <arglist>(const T *dt, bool srcIsRowMajor=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ae70707f15a0dc6b79092b252e2980f4e</anchor>
      <arglist>(T d0, T d1, T d2, T d3, T d4, T d5, T d6, T d7, T d8, T d9, T d10, T d11, T d12, T d13, T d14, T d15, bool srcIsRowMajor=false)</arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>getColumn</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ac7045d1fe6c1ceb8e4babca88f91b6c0</anchor>
      <arglist>(int col) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumn</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>afe0308905bbb82a68f02698a459a1c02</anchor>
      <arglist>(int col, const Vec4&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>getRow</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a3443b361a5ae2ecfb2bf1693e63174c5</anchor>
      <arglist>(int row) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRow</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a7b1aa428814756bcce3c868382a9c9f1</anchor>
      <arglist>(int row, const Vec4&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getColumns</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>afaed54f5da2824edee6ed1d5f28f80f1</anchor>
      <arglist>(Vec4&lt; T &gt; *c0, Vec4&lt; T &gt; *c1, Vec4&lt; T &gt; *c2, Vec4&lt; T &gt; *c3) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumns</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a4026c22262e4b4df8c839182c6ccb7d6</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;c0, const Vec4&lt; T &gt; &amp;c1, const Vec4&lt; T &gt; &amp;c2, const Vec4&lt; T &gt; &amp;c3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRows</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a76c0b764c31ac4653f1669b5c882d700</anchor>
      <arglist>(Vec4&lt; T &gt; *r0, Vec4&lt; T &gt; *r1, Vec4&lt; T &gt; *r2, Vec4&lt; T &gt; *r3) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRows</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>af316a3371a4fb62fd13849f72d05e719</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;r0, const Vec4&lt; T &gt; &amp;r1, const Vec4&lt; T &gt; &amp;r2, const Vec4&lt; T &gt; &amp;r3)</arglist>
    </member>
    <member kind="function">
      <type>Matrix22&lt; T &gt;</type>
      <name>subMatrix22</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a4e7966eb71db0c339daebaceda78f3a0</anchor>
      <arglist>(int row, int col) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix33&lt; T &gt;</type>
      <name>subMatrix33</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ae980fd0f42207b8ddd29d20da7f3b645</anchor>
      <arglist>(int row, int col) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToNull</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a0eda8083ba37ab18f1c121f729efa557</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToIdentity</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ac8a1f0d2e49ea53eb0bce15655b892d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>determinant</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a64e84de75e3475bdc1b47c0344955157</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>trace</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a5ee56051fb7b20bdcf52ab1ad776f53a</anchor>
      <arglist>(bool fullTrace=false) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt;</type>
      <name>diagonal</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ab5937a49ccb77f2132b14e63b7c85eea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt;</type>
      <name>lowerTriangular</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a7924efd7c98d24a8f3c9d51267cd4adf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt;</type>
      <name>upperTriangular</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a09dc3fba1af12cc4b136c091eec8f2c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transpose</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ad25c91a4f78531dd61b4b22f419c57c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt;</type>
      <name>transposed</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a03175ef6a2ce55d4fd74e8803c6e3799</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a90383bd194d118292d306bc5cd81dc27</anchor>
      <arglist>(T epsilon=EPSILON)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt;</type>
      <name>inverted</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a898fe7a8843e331435884f9bc8718bf9</anchor>
      <arglist>(T epsilon=EPSILON) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>preMultiply</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ad0dfb3ee196ccd4dfe54f5d2b87b6fac</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>preMultiply</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>aee3e4646e09c807516cc000c2f5ad67d</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>postMultiply</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ad2673663b8e8ea48158a3cb757b2ba2f</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>postMultiply</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a7f5edd1348fede08ef99aa316b3d45af</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>affineInvert</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>afe2108bcbb1e3ea56f3a264cc58e1239</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt;</type>
      <name>affineInverted</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ae33235a0854c0071affb7d1fc40a82b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orthonormalInvert</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a7b05140657af92a10462c3b936c9c79b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt;</type>
      <name>orthonormalInverted</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a71db3b001ae6fd707ffd1973e257cb6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>transformPoint</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ad4f06ba31c56be5e91431cb16578f337</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>transformPointAffine</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a574b34063979912b362f4e75b2e75217</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>transformVec</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ad91d0db13f50592c9ffaa30cbd2a6c16</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>transformVec</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a98940a37e50f922b2523326a28a2204d</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>getTranslate</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a18c277437777a9cd545143ba644bd650</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTranslate</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ade92e4588464d0a3c9802d56dcdfbb54</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTranslate</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a4d1653ecc3b6f2add5de2b540d9f4102</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a2a76974ba814cf0e8a04be7db44f1259</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a7d88734f1dbf0d898a7fbbe0161ed112</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a1121e1320efdf253f254598dbeaf7b80</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;axis, T radians)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a03e89014cf5445c21344792c5227798a</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;axis, T radians)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ac324d7b2528ee90866dbc31719b86cf6</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;eulerRadians)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a7a31a0ed7de2fd4c6db76aa8f4cd792d</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;eulerRadians)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a3be1ba97b05ab9ac906ae3348e9b272f</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;from, const Vec3&lt; T &gt; &amp;to, const Vec3&lt; T &gt; &amp;worldUp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ac7a93acf3e9dc28d4213d8cf496220da</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;from, const Vec4&lt; T &gt; &amp;to, const Vec4&lt; T &gt; &amp;worldUp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a340ebe525f103d0a29529f1de5e3154e</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>af106ed800905e7f6f5b59733aaacd64b</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>adefcd8f35b01a10cd83fecbb3be8fc55</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a232be190755be9cb04a9e7b9cc85df34</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt;</type>
      <name>invertTransform</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>afdfaa8623871904d2e2cf9a22da3ffa8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix44&lt; T &gt;</type>
      <name>identity</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>aaae840f760246d0d3080523ff63160b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix44&lt; T &gt;</type>
      <name>one</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a81fe64b509c5d70cd39ee2e39a2d98ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix44&lt; T &gt;</type>
      <name>zero</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ae38254d786b0f8e974191f30bbf2f7e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix44&lt; T &gt;</type>
      <name>createTranslation</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ac45c7213b989030e5161a2a3ba07ed48</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;v, T w=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix44&lt; T &gt;</type>
      <name>createTranslation</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>aa1ec531e3d661d3aeae8f7eaaa57ebb9</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix44&lt; T &gt;</type>
      <name>createRotation</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a9ba77c06ff5fb1d32f07465df6101873</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;axis, T radians)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix44&lt; T &gt;</type>
      <name>createRotation</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a5e4069a803daf2b27de674b25aab5d2e</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;axis, T radians)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix44&lt; T &gt;</type>
      <name>createRotation</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>afc1da87b9c75e405dab7409ecb073dd6</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;from, const Vec3&lt; T &gt; &amp;to, const Vec3&lt; T &gt; &amp;worldUp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix44&lt; T &gt;</type>
      <name>createRotation</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>ad7dcd2c5c24aa611ae8fe4c575447dfb</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;from, const Vec4&lt; T &gt; &amp;to, const Vec4&lt; T &gt; &amp;worldUp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix44&lt; T &gt;</type>
      <name>createRotation</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a4f58968d59bfde63f600cf92dda1278d</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;eulerRadians)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix44&lt; T &gt;</type>
      <name>createRotation</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a09767f50e8be5a031d219b701f352bfc</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;eulerRadians)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix44&lt; T &gt;</type>
      <name>createRotationOnb</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>abb198d32e0368b1d877b17d751a0cc3f</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;u, const Vec3&lt; T &gt; &amp;v, const Vec3&lt; T &gt; &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix44&lt; T &gt;</type>
      <name>createRotationOnb</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a6f9a9f65c9f4e0ceb603fc169e57d3bd</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;u, const Vec4&lt; T &gt; &amp;v, const Vec4&lt; T &gt; &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix44&lt; T &gt;</type>
      <name>createScale</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a808f1c95188b4ecff15ba3b6fb4fc531</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix44&lt; T &gt;</type>
      <name>createScale</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>afcf4136e21a32f4ced2486eaccbac5da</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix44&lt; T &gt;</type>
      <name>createScale</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a91c84511b754c2848598deec73f928ed</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix44&lt; T &gt;</type>
      <name>createScale</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a4ccba916147cac940c21cc104cca8245</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix44&lt; T &gt;</type>
      <name>alignZAxisWithTarget</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>aa28c0718d408dc7bb271bd51e058df5a</anchor>
      <arglist>(Vec3&lt; T &gt; targetDir, Vec3&lt; T &gt; upDir)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix44&lt; T &gt;</type>
      <name>alignZAxisWithTarget</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a3e82a48826db5df8c4a43da2287004e8</anchor>
      <arglist>(Vec4&lt; T &gt; targetDir, Vec4&lt; T &gt; upDir)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>DIM</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a2dc93aecf0fd5506b016cac730bc01e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>DIM_SQ</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a6c7068a67eb0a3b29ffd5e3f8c50dbdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>MEM_LEN</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a13a53503e5012288007f688a33506340</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classcinder_1_1_matrix44.html</anchorfile>
      <anchor>a607d1643eb10935e97701be76f7f594f</anchor>
      <arglist>(std::ostream &amp;lhs, const Matrix44&lt; T &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::MatrixAffine2</name>
    <filename>classcinder_1_1_matrix_affine2.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>TYPE</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a87bee721dbc7e5b517d108ab69aaea8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>ad51c74832130625a7ab96d09f00e8b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixAffine2</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>aedaa1bce93da6d43d5f428f01b7b9abc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixAffine2</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>af0f0e3c84eebae84f4397b7a8f3c9cee</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixAffine2</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>afaf472b75a1bb9dd0a2347c097914bf7</anchor>
      <arglist>(const T *dt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixAffine2</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a9f23aaa37ba62ad574bb1c6f6228a055</anchor>
      <arglist>(T d0, T d1, T d2, T d3, T d4, T d5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixAffine2</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>aee6a6c13a6146c636260d2a048c228e3</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;vx, const Vec2&lt; T &gt; &amp;vy, const Vec2&lt; T &gt; &amp;vz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixAffine2</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a2fdd863f39cf9af8ca7c664c4edfc934</anchor>
      <arglist>(const MatrixAffine2&lt; FromT &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixAffine2</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>afcdd813687df307dcc3a8d7dbf5ff914</anchor>
      <arglist>(const MatrixAffine2&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>MatrixAffine2&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a8c8eeb1cfd165642413978ed4960eee3</anchor>
      <arglist>(const MatrixAffine2&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>MatrixAffine2&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a6e30b44b7be4a888ea70ef10ad4ca7cc</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>MatrixAffine2&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>ae50215713be2b3a27ebe042cbf3e3290</anchor>
      <arglist>(const MatrixAffine2&lt; FromT &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalCompare</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a99564347442cbdce22b20bf8c01eefe2</anchor>
      <arglist>(const MatrixAffine2&lt; T &gt; &amp;rhs, T epsilon) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a45a64a1bdd458030b22c3eb400cc3aa6</anchor>
      <arglist>(const MatrixAffine2&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>ac2dbdbfe97edf0d01a3ecfe9a1b3c11b</anchor>
      <arglist>(const MatrixAffine2&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixAffine2&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a18065e35caa840105360cf071dfb7405</anchor>
      <arglist>(const MatrixAffine2&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>MatrixAffine2&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a208fc59adb9be13b870f8a0285b8ea26</anchor>
      <arglist>(const MatrixAffine2&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>MatrixAffine2&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a302f8a10d13684c86efd7e85898c50ff</anchor>
      <arglist>(const MatrixAffine2&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>MatrixAffine2&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a606da90c15923a61389047747933928a</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function">
      <type>MatrixAffine2&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>aadde7d8c9db8f23a2022c48caa4781a0</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function">
      <type>MatrixAffine2&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a873c98b26dee5ff956c52e78930c3a3e</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function">
      <type>MatrixAffine2&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a4d8b83a5ceead9a9733d9ed9779d2312</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixAffine2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>afb5991b907caf37df3efef0310d6b9ae</anchor>
      <arglist>(const MatrixAffine2&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixAffine2&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>ad48cb1223472674b5fba9b5d0e54c504</anchor>
      <arglist>(const MatrixAffine2&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixAffine2&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a5a8accd4569fbf358874abd4a6ce8116</anchor>
      <arglist>(const MatrixAffine2&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>transformPoint</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a976a80ac84d00a475a3abec10daf865c</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>ae490da3978cc4fb9db52b13d03f33b6f</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>transformVec</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a5d845756b72e4bb46ab87b1bdb5815df</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixAffine2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a1971e280e8dc484528e5caba1461daa2</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixAffine2&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a66ab6428ae653a333297104478e2ea3e</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixAffine2&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a481e27a4b66bbb4c9f6a1ee64a26fc10</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const MatrixAffine2&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a0119cff6fc26262d2e74489ac302050d</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>at</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a4508364fe45b305bf23b174f2c0746d3</anchor>
      <arglist>(int row, int col)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>at</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>ad3274c63df6f965f5e57ad8d505b8c24</anchor>
      <arglist>(int row, int col) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a61d1ebe76566f2c0e89ac030ca74e0ae</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a6d723a80be3ebd4d1e4e1b5e6ab74243</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a04ef4839d0b0a2468ce3bcf69a02f46a</anchor>
      <arglist>(const T *dt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a6b8a46d13b43dd33b0852fd9e2976395</anchor>
      <arglist>(T d0, T d1, T d2, T d3, T d4, T d5)</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>getColumn</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a52d32bf18901c60425e339b879d2ab5b</anchor>
      <arglist>(int col) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumn</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a70570cb2e864b820fb63388973fadc55</anchor>
      <arglist>(int col, const Vec2&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>getRow</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a1931c612b56c59e4c3a9999e9fb8ac9f</anchor>
      <arglist>(int row) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRow</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a8b29c8285cb5152d1850b8656f9155a2</anchor>
      <arglist>(int row, const Vec3&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getColumns</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>aa3d36aac961941661384b98821d8d519</anchor>
      <arglist>(Vec2&lt; T &gt; *c0, Vec2&lt; T &gt; *c1, Vec2&lt; T &gt; *c2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColumns</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a507a56d59f9a96f1c1bb800c3793f042</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;c0, const Vec2&lt; T &gt; &amp;c1, const Vec2&lt; T &gt; &amp;c2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getRows</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a4c330cc19efe34a39e09a6223de09e2d</anchor>
      <arglist>(Vec3&lt; T &gt; *r0, Vec3&lt; T &gt; *r1, Vec3&lt; T &gt; *r2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRows</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a31efc879cfbb8623ef359b6996bb4592</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;r0, const Vec3&lt; T &gt; &amp;r1, const Vec3&lt; T &gt; &amp;r2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToNull</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>aa87a4d7fe36c9ccacd249b5cd460e5a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setToIdentity</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>aba196b1fa670446b02ebb85cfd1babec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSingular</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a25e79bd8db299dede9dbef7314af7858</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>ae8f9b5bafba2ee6d4d35a033145c5deb</anchor>
      <arglist>(T epsilon=EPSILON)</arglist>
    </member>
    <member kind="function">
      <type>MatrixAffine2&lt; T &gt;</type>
      <name>invertCopy</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a002baed3512ba4ca4837d454ccd0bc5a</anchor>
      <arglist>(T epsilon=EPSILON) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a62949099ce6634daffea1966a7bfaa82</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>MatrixAffine2</type>
      <name>translateCopy</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>ab37e4c6026075b641a507336475bf2ba</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a7d7712c17ef991fe00aea78b23d84d83</anchor>
      <arglist>(T radians)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>aa8a86d32b5f7a1e0dce80e361dc96ef8</anchor>
      <arglist>(T radians, const Vec2&lt; T &gt; &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>MatrixAffine2</type>
      <name>rotateCopy</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a7dda2385ac443be087338e5dec446a73</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixAffine2</type>
      <name>rotateCopy</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>ace79297400d12dacd5d017665956d15e</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;v, const Vec2&lt; T &gt; &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a0ebde8a67c500635ed5ce3af1b1c780a</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a7578246b11e3b295b2f4d6cde6ce5f33</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>MatrixAffine2</type>
      <name>scaleCopy</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>ad00cb988b898eae085aab2188db4a0a3</anchor>
      <arglist>(T s) const </arglist>
    </member>
    <member kind="function">
      <type>MatrixAffine2</type>
      <name>scaleCopy</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>af08ab4b853824fb236d5def20e5f019f</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MatrixAffine2&lt; T &gt;</type>
      <name>identity</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>aaae4216e34b88f71c108331aeb207229</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MatrixAffine2&lt; T &gt;</type>
      <name>one</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a63e390c64d19af6e93b8afa11bfb8864</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MatrixAffine2&lt; T &gt;</type>
      <name>zero</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a3898a0316d0d0813a627a543fff93c74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MatrixAffine2&lt; T &gt;</type>
      <name>makeTranslate</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a9c3a6d3459da9e57fa3ea094c90062cf</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MatrixAffine2&lt; T &gt;</type>
      <name>makeRotate</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a6133cd86c77cad7be545cf92435f4d12</anchor>
      <arglist>(T radians)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MatrixAffine2&lt; T &gt;</type>
      <name>makeRotate</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a15f2d99fd5046b2ec2e601b256dca684</anchor>
      <arglist>(T radians, const Vec2&lt; T &gt; &amp;pt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MatrixAffine2&lt; T &gt;</type>
      <name>makeScale</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>abda7ccc3e2158da6cabdde847aa63fd0</anchor>
      <arglist>(T s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MatrixAffine2&lt; T &gt;</type>
      <name>makeScale</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>af355edba09635d4d5a18579ebf508778</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MatrixAffine2&lt; T &gt;</type>
      <name>makeSkewX</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a727fe193a60ca7cb122a81b0f384b816</anchor>
      <arglist>(T radians)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MatrixAffine2&lt; T &gt;</type>
      <name>makeSkewY</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>accec309951a2fa282c6ea554d319a2ae</anchor>
      <arglist>(T radians)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>MEM_LEN</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a327236b35a9694e298ff3fc3c83244d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classcinder_1_1_matrix_affine2.html</anchorfile>
      <anchor>a720dfb129d49cc173c2518db1bbefc93</anchor>
      <arglist>(std::ostream &amp;lhs, const MatrixAffine2&lt; T &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::MayaCamUI</name>
    <filename>classcinder_1_1_maya_cam_u_i.html</filename>
    <member kind="function">
      <type></type>
      <name>MayaCamUI</name>
      <anchorfile>classcinder_1_1_maya_cam_u_i.html</anchorfile>
      <anchor>aaeccfa358a41ab76aa54533b64d2c89d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MayaCamUI</name>
      <anchorfile>classcinder_1_1_maya_cam_u_i.html</anchorfile>
      <anchor>a7fc0d2523dd7f6eb6c7208b417666d48</anchor>
      <arglist>(const CameraPersp &amp;aInitialCam)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDown</name>
      <anchorfile>classcinder_1_1_maya_cam_u_i.html</anchorfile>
      <anchor>ae4811367efc29e0cb8258cfc1def4ff5</anchor>
      <arglist>(const Vec2i &amp;mousePos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mouseDrag</name>
      <anchorfile>classcinder_1_1_maya_cam_u_i.html</anchorfile>
      <anchor>ae53333051f2a475ef6f6e8286268e932</anchor>
      <arglist>(const Vec2i &amp;mousePos, bool leftDown, bool middleDown, bool rightDown)</arglist>
    </member>
    <member kind="function">
      <type>const CameraPersp &amp;</type>
      <name>getCamera</name>
      <anchorfile>classcinder_1_1_maya_cam_u_i.html</anchorfile>
      <anchor>ae6657148e95c39a0cf690c5fe61ea73d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentCam</name>
      <anchorfile>classcinder_1_1_maya_cam_u_i.html</anchorfile>
      <anchor>aee1991aab94c5256ba46e901a20a0e43</anchor>
      <arglist>(const CameraPersp &amp;aCurrentCam)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::SurfaceConstraintsGdiPlus</name>
    <filename>classcinder_1_1_surface_constraints_gdi_plus.html</filename>
    <base>cinder::SurfaceConstraints</base>
  </compound>
  <compound kind="class">
    <name>cinder::ObjLoader</name>
    <filename>classcinder_1_1_obj_loader.html</filename>
    <class kind="struct">cinder::ObjLoader::Face</class>
    <class kind="struct">cinder::ObjLoader::Group</class>
    <class kind="struct">cinder::ObjLoader::Material</class>
    <member kind="function">
      <type></type>
      <name>ObjLoader</name>
      <anchorfile>classcinder_1_1_obj_loader.html</anchorfile>
      <anchor>a3a1e99173da79bee8e3d334c82185a0f</anchor>
      <arglist>(std::shared_ptr&lt; IStream &gt; aStream, bool includeUVs=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjLoader</name>
      <anchorfile>classcinder_1_1_obj_loader.html</anchorfile>
      <anchor>a17c04029e6e2e833a73c104ca151647c</anchor>
      <arglist>(DataSourceRef dataSource, bool includeUVs=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjLoader</name>
      <anchorfile>classcinder_1_1_obj_loader.html</anchorfile>
      <anchor>a427dae026fc09dcf3a664c43e0139f17</anchor>
      <arglist>(DataSourceRef dataSource, DataSourceRef materialSource, bool includeUVs=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ObjLoader</name>
      <anchorfile>classcinder_1_1_obj_loader.html</anchorfile>
      <anchor>aa0875fd5f141c231908c120eb263f35e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classcinder_1_1_obj_loader.html</anchorfile>
      <anchor>a6609927c1934880030642ef4604d540e</anchor>
      <arglist>(TriMesh *destTriMesh, boost::tribool loadNormals=boost::logic::indeterminate, boost::tribool loadTexCoords=boost::logic::indeterminate, bool optimizeVertices=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classcinder_1_1_obj_loader.html</anchorfile>
      <anchor>ae0323bd77b0388f4012a66751d137cbd</anchor>
      <arglist>(size_t groupIndex, TriMesh *destTriMesh, boost::tribool loadNormals=boost::logic::indeterminate, boost::tribool loadTexCoords=boost::logic::indeterminate, bool optimizeVertices=true)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumGroups</name>
      <anchorfile>classcinder_1_1_obj_loader.html</anchorfile>
      <anchor>ac8cb85259e03d616910491d7b010e1c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Group &gt; &amp;</type>
      <name>getGroups</name>
      <anchorfile>classcinder_1_1_obj_loader.html</anchorfile>
      <anchor>a28662696939a5adcf05182105fe4c571</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>write</name>
      <anchorfile>classcinder_1_1_obj_loader.html</anchorfile>
      <anchor>aa17c4ac8d21af875d0f0569b522d2b74</anchor>
      <arglist>(DataTargetRef dataTarget, const TriMesh &amp;mesh, bool writeNormals=true, bool writeUVs=true)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::ObjLoader::Face</name>
    <filename>structcinder_1_1_obj_loader_1_1_face.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>mNumVertices</name>
      <anchorfile>structcinder_1_1_obj_loader_1_1_face.html</anchorfile>
      <anchor>aa2a050f15f6b8f614b2e8e0ccc472d0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>mVertexIndices</name>
      <anchorfile>structcinder_1_1_obj_loader_1_1_face.html</anchorfile>
      <anchor>a77742d01401b1db39a0e10d356662b55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>mTexCoordIndices</name>
      <anchorfile>structcinder_1_1_obj_loader_1_1_face.html</anchorfile>
      <anchor>a29a10200f9b23337fb7ec68e1dc6c575</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>mNormalIndices</name>
      <anchorfile>structcinder_1_1_obj_loader_1_1_face.html</anchorfile>
      <anchor>a744d12fd68f166b75bfbae6951229a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Material *</type>
      <name>mMaterial</name>
      <anchorfile>structcinder_1_1_obj_loader_1_1_face.html</anchorfile>
      <anchor>a33d464990fb20815d1c47c3c07f44e6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::ObjLoader::Group</name>
    <filename>structcinder_1_1_obj_loader_1_1_group.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>mName</name>
      <anchorfile>structcinder_1_1_obj_loader_1_1_group.html</anchorfile>
      <anchor>af6490103707c581021b5bbe83d7ccbf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mBaseVertexOffset</name>
      <anchorfile>structcinder_1_1_obj_loader_1_1_group.html</anchorfile>
      <anchor>a3ad931da8fdf203a9cc3340f8db1c018</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mBaseTexCoordOffset</name>
      <anchorfile>structcinder_1_1_obj_loader_1_1_group.html</anchorfile>
      <anchor>a3aa0103774ad3819ef1844e67c00379b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mBaseNormalOffset</name>
      <anchorfile>structcinder_1_1_obj_loader_1_1_group.html</anchorfile>
      <anchor>a07f04f44a97cbbe5afe9c6dc10841065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Face &gt;</type>
      <name>mFaces</name>
      <anchorfile>structcinder_1_1_obj_loader_1_1_group.html</anchorfile>
      <anchor>ab598c3ca8a1ba1635920730278a9814a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mHasTexCoords</name>
      <anchorfile>structcinder_1_1_obj_loader_1_1_group.html</anchorfile>
      <anchor>a0f4c975f72d9884c3461088754c0ac88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mHasNormals</name>
      <anchorfile>structcinder_1_1_obj_loader_1_1_group.html</anchorfile>
      <anchor>ad046635e51af33df9341089c9ab85bc6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::ObjLoader::Material</name>
    <filename>structcinder_1_1_obj_loader_1_1_material.html</filename>
    <member kind="function">
      <type></type>
      <name>Material</name>
      <anchorfile>structcinder_1_1_obj_loader_1_1_material.html</anchorfile>
      <anchor>a287e818cb27377066345e92bb8167eeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Material</name>
      <anchorfile>structcinder_1_1_obj_loader_1_1_material.html</anchorfile>
      <anchor>ae8e4575da47692345d1fc61a88bb5d4b</anchor>
      <arglist>(const Material &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>mName</name>
      <anchorfile>structcinder_1_1_obj_loader_1_1_material.html</anchorfile>
      <anchor>affbf4da0a2cdc200c68115975342d2a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>Ka</name>
      <anchorfile>structcinder_1_1_obj_loader_1_1_material.html</anchorfile>
      <anchor>abc8fa65a3e67068ba9ca79769d7abfdd</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>Kd</name>
      <anchorfile>structcinder_1_1_obj_loader_1_1_material.html</anchorfile>
      <anchor>ad59ab68f1cbd0c1979c6924165410489</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Path2d</name>
    <filename>classcinder_1_1_path2d.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>SegmentType</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a13587c232ca9cb5e8c0385b5f7f6af4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MOVETO</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a13587c232ca9cb5e8c0385b5f7f6af4ca20547492826cf1c7ab9888b2512434f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LINETO</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a13587c232ca9cb5e8c0385b5f7f6af4caa66b84ae981f243265d213fa61b12020</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>QUADTO</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a13587c232ca9cb5e8c0385b5f7f6af4caee76e6ffa09f17ea829bdaaf77c4ef4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CUBICTO</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a13587c232ca9cb5e8c0385b5f7f6af4caaa1e91973b66e747552c9f9ac42de317</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CLOSE</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a13587c232ca9cb5e8c0385b5f7f6af4caf5c4c988045a694e1660ba54ff626fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Path2d</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>af38f8625104bd858ffb828ad0a80dd4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Path2d</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>aee64b0d819bda9ce9f1142fd43a32263</anchor>
      <arglist>(const BSpline&lt; Vec2f &gt; &amp;spline, float subdivisionStep=0.01f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveTo</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a265a7fc1db2d32c34a3971a8a24b406c</anchor>
      <arglist>(const Vec2f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveTo</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a34fb9a4ce075c213cd58ae8b5dbc839c</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lineTo</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>acc2b005ef616af3fdbfde9d790005f20</anchor>
      <arglist>(const Vec2f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lineTo</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>acbecb842d8912a9a49a5132a5d4417a0</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quadTo</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a0d1ba24afe427b879cf866f06270673c</anchor>
      <arglist>(const Vec2f &amp;p1, const Vec2f &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quadTo</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a23750799388e008eafb61f7691a7dfed</anchor>
      <arglist>(float x1, float y1, float x2, float y2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>curveTo</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a2fef128b7e347cfde2c5749a1d55d0d9</anchor>
      <arglist>(const Vec2f &amp;p1, const Vec2f &amp;p2, const Vec2f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>curveTo</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a7b6a7d39d3bcd0ff85d4e8985593e531</anchor>
      <arglist>(float x1, float y1, float x2, float y2, float x3, float y3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arc</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a9d617319ac595d7276474268cc4f3f9b</anchor>
      <arglist>(const Vec2f &amp;center, float radius, float startRadians, float endRadians, bool forward=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arc</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a02d6dbbde722f86aca3b7c10a5a0ed51</anchor>
      <arglist>(float centerX, float centerY, float radius, float startRadians, float endRadians, bool forward=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arcTo</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a397045198fe452b387feb3b817203a26</anchor>
      <arglist>(const Vec2f &amp;p, const Vec2f &amp;t, float radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arcTo</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>ad1e16945788322bf4a66532d7c9e4fb9</anchor>
      <arglist>(float x, float y, float tanX, float tanY, float radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a99675b5bcbb981709563969662c81839</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClosed</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a7276fe50682f94af94664d5def18304a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a72216b7b7adbb0ace38119dd72f77d76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a1151fc464a42cb1daaa63a5c8f67d29e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a84084bd18b797095803a0385f8b77cb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumSegments</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a794248aac83221f6e851406a4df46963</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumPoints</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a80833b78055862f5750627f221c4c13c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>getPosition</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>adc5ab8423f39da31fcfd2ef3a62ef2ea</anchor>
      <arglist>(float t) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>getSegmentPosition</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>ac818a2e615d62ef42ec16470bd5f6637</anchor>
      <arglist>(size_t segment, float t) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Vec2f &gt;</type>
      <name>subdivide</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a8c6582abb9aac438b8b8d45d2e3141fc</anchor>
      <arglist>(float approximationScale=1.0f) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a43eaa849471862cb53314ad14fd97f4f</anchor>
      <arglist>(const Vec2f &amp;amount, Vec2f scaleCenter=Vec2f::zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>ad41899cc98dc369f1823beeb5d93571f</anchor>
      <arglist>(const MatrixAffine2f &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Path2d</type>
      <name>transformCopy</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a05ab84c0282e08fd728c9c726016f894</anchor>
      <arglist>(const MatrixAffine2f &amp;matrix) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Vec2f &gt; &amp;</type>
      <name>getPoints</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a13929953b6b018e7bf0ec63b8a5681af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Vec2f &gt; &amp;</type>
      <name>getPoints</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a751f62ac388e8ef652e15fdf1348b8e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Vec2f &amp;</type>
      <name>getPoint</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>af282a5764013df159f60466ba44a1e6f</anchor>
      <arglist>(size_t point) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2f &amp;</type>
      <name>getPoint</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>aaaa8a090336f038ae2d083592743dc6c</anchor>
      <arglist>(size_t point)</arglist>
    </member>
    <member kind="function">
      <type>const Vec2f &amp;</type>
      <name>getCurrentPoint</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a8561f842b89fa871a8543f583f95c888</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoint</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a4bbf0ea9201d6018c11d8b3d53755914</anchor>
      <arglist>(size_t index, const Vec2f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>SegmentType</type>
      <name>getSegmentType</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a2a698ba938b67552ea4c8a8376073376</anchor>
      <arglist>(size_t segment) const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; SegmentType &gt; &amp;</type>
      <name>getSegments</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a72223fbdf8709886ec8b82b2859760c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; SegmentType &gt; &amp;</type>
      <name>getSegments</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>abcd5b90c9b036a7dad5884b47d3d544e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSegment</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a078f4782aca18e56841d236e7c9db726</anchor>
      <arglist>(size_t segment)</arglist>
    </member>
    <member kind="function">
      <type>Rectf</type>
      <name>calcBoundingBox</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a9ebf9eb0a3f86bb7db1b9f7149900c88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rectf</type>
      <name>calcPreciseBoundingBox</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>ac7f58efed8123ce1824b5de37273778c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a22e46b2d895566f9ac8383b6f81b965d</anchor>
      <arglist>(const Vec2f &amp;pt) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>calcQuadraticBezierMonotoneRegions</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a0c23e57d034f99b0f1e8737944cc021a</anchor>
      <arglist>(const Vec2f p[3], float resultT[2])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec2f</type>
      <name>calcQuadraticBezierPos</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a82148948f42cb2c84d7a8d73322f30d6</anchor>
      <arglist>(const Vec2f p[3], float t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>calcCubicBezierMonotoneRegions</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>acc3b7eac65fa8e175068fe137b483f5d</anchor>
      <arglist>(const Vec2f p[4], float resultT[4])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec2f</type>
      <name>calcCubicBezierPos</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>ab8ea30e7c0e2543c198082f64d928d92</anchor>
      <arglist>(const Vec2f p[4], float t)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>sSegmentTypePointCounts</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a6b50d60ec6dc46ba2a2b4825f682c8f7</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Shape2d</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>a40fd6d4704ac5e56765c91dd3091a8b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classcinder_1_1_path2d.html</anchorfile>
      <anchor>afb20aba4715f52c159341d0c4bf94330</anchor>
      <arglist>(std::ostream &amp;out, const Path2d &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Path2dExc</name>
    <filename>classcinder_1_1_path2d_exc.html</filename>
    <base>cinder::Exception</base>
  </compound>
  <compound kind="class">
    <name>cinder::Perlin</name>
    <filename>classcinder_1_1_perlin.html</filename>
    <member kind="function">
      <type></type>
      <name>Perlin</name>
      <anchorfile>classcinder_1_1_perlin.html</anchorfile>
      <anchor>af825467e464e26238b4a2ebff2e0551f</anchor>
      <arglist>(uint8_t aOctaves=4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Perlin</name>
      <anchorfile>classcinder_1_1_perlin.html</anchorfile>
      <anchor>a9bab77949a50aaa63ac86049dfac1dc2</anchor>
      <arglist>(uint8_t aOctaves, int32_t aSeed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSeed</name>
      <anchorfile>classcinder_1_1_perlin.html</anchorfile>
      <anchor>afb23ee6d50151b3e50b33c2bdb81142c</anchor>
      <arglist>(int32_t aSeed)</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getOctaves</name>
      <anchorfile>classcinder_1_1_perlin.html</anchorfile>
      <anchor>a5832c7b1f8b3b6075031f8543eaabb19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOctaves</name>
      <anchorfile>classcinder_1_1_perlin.html</anchorfile>
      <anchor>a4f944b9a74c84241085a6b920b95fbe8</anchor>
      <arglist>(uint8_t aOctaves)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fBm</name>
      <anchorfile>classcinder_1_1_perlin.html</anchorfile>
      <anchor>a366c306744e4bc10169900a221ba70c4</anchor>
      <arglist>(float v) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fBm</name>
      <anchorfile>classcinder_1_1_perlin.html</anchorfile>
      <anchor>a8691e62e625d6394254d902601cda18b</anchor>
      <arglist>(const Vec2f &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fBm</name>
      <anchorfile>classcinder_1_1_perlin.html</anchorfile>
      <anchor>a367793603e8c7770098a1f10b45c91d4</anchor>
      <arglist>(float x, float y) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fBm</name>
      <anchorfile>classcinder_1_1_perlin.html</anchorfile>
      <anchor>add957bd5108377d2a1733d9973a49182</anchor>
      <arglist>(const Vec3f &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>fBm</name>
      <anchorfile>classcinder_1_1_perlin.html</anchorfile>
      <anchor>a71d0d0b0c0af3306b3b7a7d6be3449ed</anchor>
      <arglist>(float x, float y, float z) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>dfBm</name>
      <anchorfile>classcinder_1_1_perlin.html</anchorfile>
      <anchor>a614801e14b2f4c3c52afd0524aca047a</anchor>
      <arglist>(const Vec2f &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>dfBm</name>
      <anchorfile>classcinder_1_1_perlin.html</anchorfile>
      <anchor>af778066d1bfeca9ab4e1c225b6254708</anchor>
      <arglist>(float x, float y) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>dfBm</name>
      <anchorfile>classcinder_1_1_perlin.html</anchorfile>
      <anchor>ae7134b004651aa4398943ee1569d093c</anchor>
      <arglist>(const Vec3f &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>dfBm</name>
      <anchorfile>classcinder_1_1_perlin.html</anchorfile>
      <anchor>a190f84e05abef74a5b70b6be484ffa5b</anchor>
      <arglist>(float x, float y, float z) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>noise</name>
      <anchorfile>classcinder_1_1_perlin.html</anchorfile>
      <anchor>ab399327e14768bf5b9ac0c3de6d794fc</anchor>
      <arglist>(float x) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>noise</name>
      <anchorfile>classcinder_1_1_perlin.html</anchorfile>
      <anchor>aa5d28882ddf5bfe69b6c7ec837114620</anchor>
      <arglist>(float x, float y) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>noise</name>
      <anchorfile>classcinder_1_1_perlin.html</anchorfile>
      <anchor>aa3234721fc94329f34e56ea851cc9857</anchor>
      <arglist>(float x, float y, float z) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>dnoise</name>
      <anchorfile>classcinder_1_1_perlin.html</anchorfile>
      <anchor>a9024e6cf4ad5c1de8ab366734a001bdb</anchor>
      <arglist>(float x, float y) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>dnoise</name>
      <anchorfile>classcinder_1_1_perlin.html</anchorfile>
      <anchor>a907fa60befd06ec795697c9335b4dea3</anchor>
      <arglist>(float x, float y, float z) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Plane</name>
    <filename>classcinder_1_1_plane.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>classcinder_1_1_plane.html</anchorfile>
      <anchor>aa74645b01aedb10fbdb77fe4a7e88427</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>classcinder_1_1_plane.html</anchorfile>
      <anchor>aea5b052d5de12886d62bd08aff119e45</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;v1, const Vec3&lt; T &gt; &amp;v2, const Vec3&lt; T &gt; &amp;v3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>classcinder_1_1_plane.html</anchorfile>
      <anchor>a688af52f4b373fef4b8e75b9318ecd67</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;point, const Vec3&lt; T &gt; &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Plane</name>
      <anchorfile>classcinder_1_1_plane.html</anchorfile>
      <anchor>af27eb5b194519484205ed8e0dfa240d0</anchor>
      <arglist>(T a, T b, T c, T d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_plane.html</anchorfile>
      <anchor>a4eeadd4fe34a59fe2c3c9dabcc63e729</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;v1, const Vec3&lt; T &gt; &amp;v2, const Vec3&lt; T &gt; &amp;v3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_plane.html</anchorfile>
      <anchor>a2cd115e16a34916bbdecccac0b544b91</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;point, const Vec3&lt; T &gt; &amp;normal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_plane.html</anchorfile>
      <anchor>a941333f97eeac2579362fcf47bad84e9</anchor>
      <arglist>(T a, T b, T c, T d)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>getPoint</name>
      <anchorfile>classcinder_1_1_plane.html</anchorfile>
      <anchor>a930c6fbf3f7be2a562d2daacfa81c67d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3&lt; T &gt; &amp;</type>
      <name>getNormal</name>
      <anchorfile>classcinder_1_1_plane.html</anchorfile>
      <anchor>a9ca2bac429637e20b15aa37979e50b78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getDistance</name>
      <anchorfile>classcinder_1_1_plane.html</anchorfile>
      <anchor>a4c6efdc2bf95180033345e0aca243608</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>distance</name>
      <anchorfile>classcinder_1_1_plane.html</anchorfile>
      <anchor>a165c92fdc26603c752ed6c04419571f9</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>reflectPoint</name>
      <anchorfile>classcinder_1_1_plane.html</anchorfile>
      <anchor>a618a5272ad1ebc46cb1eac99cc9a089f</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>reflectVector</name>
      <anchorfile>classcinder_1_1_plane.html</anchorfile>
      <anchor>a28fc8aa429ac2c022dea84123b829131</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;v) const </arglist>
    </member>
    <member kind="variable">
      <type>Vec3&lt; T &gt;</type>
      <name>mNormal</name>
      <anchorfile>classcinder_1_1_plane.html</anchorfile>
      <anchor>aab6803a014c08bcadaf0f35c60b4cd30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>mDistance</name>
      <anchorfile>classcinder_1_1_plane.html</anchorfile>
      <anchor>a444a39c65b753cafef38347cc4defe07</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::PlaneExc</name>
    <filename>classcinder_1_1_plane_exc.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classcinder_1_1_plane_exc.html</anchorfile>
      <anchor>a416fd92d904d89ea9815872944fa703b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::PolyLine</name>
    <filename>classcinder_1_1_poly_line.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>a16ecaac8033e925ba47d0a9a3cbac241</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T &gt;::iterator</type>
      <name>iterator</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>a714fcc6bacbdb69b0b73265d7bf13cb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolyLine</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>a7ad0af8f9d528f7e9d938a9c1a82bed5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolyLine</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>aa4febd8a220e960f4e7ff59d11ec412b</anchor>
      <arglist>(const std::vector&lt; T &gt; &amp;aPoints)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; T &gt; &amp;</type>
      <name>getPoints</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>af2fe724a6c92a05624475279e6c0fbb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; T &gt; &amp;</type>
      <name>getPoints</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>a15387272507eb566ab1d602b595b152a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>a93918ae5c9d967cfbc31dd1758346402</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>a27b79cb69639e96e97b65f08f3b12df5</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>a8b6d40b166575656b8348bcaffd82360</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>a481cc1ef3aeb403fc9d0eb079e6baf4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>a4bc4854268d1271f835f361fc1502a9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>abd8d81e8b88c4b1357bbcbb3646f0f20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClosed</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>a199335888416e09af6b6f04274900cbe</anchor>
      <arglist>(bool aClosed=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClosed</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>a501153bb6703157abc4bf532841743f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getPosition</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>a01c032fbfcab4e8ace78f7307c3bb5bc</anchor>
      <arglist>(float t) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getDerivative</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>acfea72b578d3a6f8cba55ff95dc96b48</anchor>
      <arglist>(float t) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>a1211d012a7a67d1e78fc9dfa2ec49c83</anchor>
      <arglist>(const T &amp;scaleFactor, T scaleCenter=T::zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>offset</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>a58e5f513cb997fa0f4b9870544937762</anchor>
      <arglist>(const T &amp;offsetBy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>ad46fb478ca1ed28eff3df0b1848acd12</anchor>
      <arglist>(const Vec2f &amp;pt) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; PolyLine &gt;</type>
      <name>calcUnion</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>a3efdbd69537a787b8a071c53ceccc45c</anchor>
      <arglist>(const std::vector&lt; PolyLine &gt; &amp;a, std::vector&lt; PolyLine &gt; &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; PolyLine &gt;</type>
      <name>calcIntersection</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>ada56bfe86a5c45f6cffc0b478212d4e6</anchor>
      <arglist>(const std::vector&lt; PolyLine &gt; &amp;a, std::vector&lt; PolyLine &gt; &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; PolyLine &gt;</type>
      <name>calcXor</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>a268070ddb66e1a3b6839addf803af3ec</anchor>
      <arglist>(const std::vector&lt; PolyLine &gt; &amp;a, std::vector&lt; PolyLine &gt; &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; PolyLine &gt;</type>
      <name>calcDifference</name>
      <anchorfile>classcinder_1_1_poly_line.html</anchorfile>
      <anchor>abde4b1238f7d0cac62c703f038b65dc6</anchor>
      <arglist>(const std::vector&lt; PolyLine &gt; &amp;a, std::vector&lt; PolyLine &gt; &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::QUATCONV</name>
    <filename>structcinder_1_1_q_u_a_t_c_o_n_v.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T::TYPE</type>
      <name>F</name>
      <anchorfile>structcinder_1_1_q_u_a_t_c_o_n_v.html</anchorfile>
      <anchor>ae356a31dd0e86c12b1042e9ab5e4f295</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static F</type>
      <name>getW</name>
      <anchorfile>structcinder_1_1_q_u_a_t_c_o_n_v.html</anchorfile>
      <anchor>a6b26e66020845204204f2f523a197c0c</anchor>
      <arglist>(const Y &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static F</type>
      <name>getX</name>
      <anchorfile>structcinder_1_1_q_u_a_t_c_o_n_v.html</anchorfile>
      <anchor>ae637dcd7f16785b785cf2df9feaf452a</anchor>
      <arglist>(const Y &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static F</type>
      <name>getY</name>
      <anchorfile>structcinder_1_1_q_u_a_t_c_o_n_v.html</anchorfile>
      <anchor>a161a5f244ff52088a68a0c37cf4e01db</anchor>
      <arglist>(const Y &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static F</type>
      <name>getZ</name>
      <anchorfile>structcinder_1_1_q_u_a_t_c_o_n_v.html</anchorfile>
      <anchor>a3616d6d45d6d6d8f91f9e681ea85bba9</anchor>
      <arglist>(const Y &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Quaternion</name>
    <filename>classcinder_1_1_quaternion.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>TYPE</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>ad62edd045ae9eb51c029fbdc7bca81b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a1ec72e75a224015d07cad65170bd77a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a6ba7cef405bde4bc871c809957bbfae9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>af4716e42e4f5329b5ce021057db105bd</anchor>
      <arglist>(const Quaternion&lt; FromT &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a5f798dd4b06ddb48ad218dd2b6756ed3</anchor>
      <arglist>(T aW, T x, T y, T z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a983f0a2a24d0d6cf4931adf618b63a28</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;axis, T radians)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>ae7fac6ed5fad1811552c1370a6ca2960</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;from, const Vec3&lt; T &gt; &amp;to)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a8f1fe7ef7acac40ceeefe76bb551d67d</anchor>
      <arglist>(T xRotation, T yRotation, T zRotation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a9829881743b9d5c04f5a30dfe36a0009</anchor>
      <arglist>(const Matrix33&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>afef102602b6d49dd835042b9b4ca959c</anchor>
      <arglist>(const Matrix44&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a338920cb0a69b7d3ef5ff73934a46c62</anchor>
      <arglist>(const Y &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>getAxis</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>aa746542aae6f7549f6ccf7210c880c61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getAngle</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>ae92a166f5b47ce8897d597008d53ffdc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getPitch</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>ac521ec78976e3b081262e0247a2a8017</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getYaw</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a878a0699cfe2f636199528128aac4ced</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getRoll</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a6e7871ce5bc6e7fc160f49230c673d71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>ad9aa89029382490f162f23c4e4875fab</anchor>
      <arglist>(const Quaternion&lt; T &gt; &amp;quat) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a1b2fd851554255df73c11cfeb8afc071</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lengthSquared</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>aef8f610fdab962be8229d3ab70149846</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; T &gt;</type>
      <name>inverse</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>ab7329f379f83458653cc0cb67a2c25ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a02666bba8e1a569e8e0603255edad68c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; T &gt;</type>
      <name>normalized</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>ae8321a260b782e5605e153667c523d45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; T &gt;</type>
      <name>log</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>ac9d43961371a5c3be27482c1fd090908</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; T &gt;</type>
      <name>exp</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a9dd8b284d61115ab48316c0bc91e6020</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; T &gt;</type>
      <name>inverted</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>ab6b4fe4262fea74f528a08c47fdb5b49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a7e43238bc22fe3c703768a0f4bb1bedf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>ab5abd69352eb87abe92f712ae193bea1</anchor>
      <arglist>(T aW, T x, T y, T z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a8f21c3c2e2e3db481699f960148035b7</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;from, const Vec3&lt; T &gt; &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a8f21c3c2e2e3db481699f960148035b7</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;from, const Vec3&lt; T &gt; &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a152636adbd78d6acebe42c3bc3752d44</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;axis, T radians)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>af72fa42138fcf2a49ab9d3ddb7d531f3</anchor>
      <arglist>(T xRotation, T yRotation, T zRotation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAxisAngle</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>afc2b183fae25282ab4ecd94329f330e4</anchor>
      <arglist>(Vec3&lt; T &gt; *axis, T *radians) const </arglist>
    </member>
    <member kind="function">
      <type>Matrix33&lt; T &gt;</type>
      <name>toMatrix33</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>ae1f1ecb01bffcaba55e23b93b9817973</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix44&lt; T &gt;</type>
      <name>toMatrix44</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a75d4d691080020373ec292a083c519e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Matrix44&lt; T &gt;</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>ab452e50627f7f5d09ad4c5aa1b283098</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; T &gt;</type>
      <name>lerp</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>aa26bd5f757eb4ec09e68600a423076f2</anchor>
      <arglist>(T t, const Quaternion&lt; T &gt; &amp;end) const </arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; T &gt;</type>
      <name>slerpShortestUnenforced</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a319bc4a42cde521f3b13e6af88bf6481</anchor>
      <arglist>(T t, const Quaternion&lt; T &gt; &amp;end) const </arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; T &gt;</type>
      <name>slerp</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a62a81f89ab09fc3f6a2dbbecd3ac3f34</anchor>
      <arglist>(T t, const Quaternion&lt; T &gt; &amp;end) const </arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; T &gt;</type>
      <name>squadShortestEnforced</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>ad50bdcf0a52c19587f96e77bee37b577</anchor>
      <arglist>(T t, const Quaternion&lt; T &gt; &amp;qa, const Quaternion&lt; T &gt; &amp;qb, const Quaternion&lt; T &gt; &amp;q2) const </arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; T &gt;</type>
      <name>squad</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a10a7ff04a099de6bf54a6a52761b9ddb</anchor>
      <arglist>(T t, const Quaternion&lt; T &gt; &amp;qa, const Quaternion&lt; T &gt; &amp;qb, const Quaternion&lt; T &gt; &amp;q2) const </arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; T &gt;</type>
      <name>spline</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a07a100ebe5818f80452612fe5ec0692e</anchor>
      <arglist>(T t, const Quaternion&lt; T &gt; &amp;q1, const Quaternion&lt; T &gt; &amp;q2, const Quaternion&lt; T &gt; &amp;q3) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a00e9246fc1a3bfb77c6bbbe5c8a9607c</anchor>
      <arglist>(const Matrix33&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a278ecd957230f72f122b5f957bb11a0a</anchor>
      <arglist>(const Matrix44&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>ad89f60bffc131cdc7a435a85e96379ba</anchor>
      <arglist>(const Quaternion&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a18b0ca0a4686324fc25037a1a230e063</anchor>
      <arglist>(const Quaternion&lt; FromT &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const Quaternion&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>aa72d4d259f24b0c19347d96ec12756cd</anchor>
      <arglist>(const Quaternion&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Quaternion&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a3a749a2f90af3a8dae0858c5d7aff22f</anchor>
      <arglist>(const Quaternion&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Quaternion&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>ae542dc2faeceea1efe9d36c4cfc38964</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a4e60cfb3d53e0cfb60bf3fb5f6aa5dc7</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;vec) const </arglist>
    </member>
    <member kind="function">
      <type>const Quaternion&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>aad27e20f500fac18b72b69d875dea395</anchor>
      <arglist>(const Quaternion&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>ab94d3c2c3e6b4dfde22a49127636e38a</anchor>
      <arglist>(const Quaternion&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>acf6801da0fdd899fd2cd1a63a6399b93</anchor>
      <arglist>(const Quaternion&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a2bd616151a18af5c20f503152f2dea67</anchor>
      <arglist>(const Quaternion&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a36132a1e099899da9a0818c4a1b8e0fa</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a5f461066f0ceb63027c0cb064973d0e4</anchor>
      <arglist>(const Quaternion&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>ae7e5ff21199a266da99f14f0e62777b1</anchor>
      <arglist>(const Quaternion&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a9b99a700317b7846e1cc8709012db69d</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a2fc7eb13b7350f1b18b7934d01c22d89</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setRotationInternal</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>ab603107998df10d5749d2536648717af</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;f0, const Vec3&lt; T &gt; &amp;t0, Quaternion&lt; T &gt; &amp;q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Quaternion&lt; T &gt;</type>
      <name>identity</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a65ae2e7c464c737f03ce6b280ad6a22e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Vec3&lt; T &gt;</type>
      <name>v</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a98e9e184b0d00472e1b338d9697fda1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>w</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>adb814935bfb92eda5c6445cdb35295cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classcinder_1_1_quaternion.html</anchorfile>
      <anchor>a871c9e237d4b87d722a3e6495f377c23</anchor>
      <arglist>(std::ostream &amp;oss, const Quaternion&lt; T &gt; &amp;q)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Rand</name>
    <filename>classcinder_1_1_rand.html</filename>
    <member kind="function">
      <type></type>
      <name>Rand</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>a8a001026662dcf3dbbd5bbc64a262536</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rand</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>ad4a2f778da5dc6a1b51542d13e9ad675</anchor>
      <arglist>(unsigned long seed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>ace933f6e5bbf96f2eb11f4e9a86cbd60</anchor>
      <arglist>(unsigned long seedValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextBool</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>ad599888375ede759dd4329d0e36fdace</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>nextInt</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>a5b026dd6322a135fe3941f38b8286e07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>nextUint</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>a7490afc9579985887587920866af27be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>nextInt</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>acf76ea51a523318ded185901cfe1b972</anchor>
      <arglist>(int32_t v)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>nextUint</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>a1430c4134666aa27fef24008251b56b1</anchor>
      <arglist>(uint32_t v)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>nextInt</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>a7a1623c1d3a1df8e2026652324e0c450</anchor>
      <arglist>(int32_t a, int32_t b)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>nextFloat</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>a0169932d88dcda8551d4eefbb73c6a40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>nextFloat</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>a9b582f1bb450af360f6f913d491c8499</anchor>
      <arglist>(float v)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>nextFloat</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>a4b6b805c7f110c19ac28eba6f56eff8a</anchor>
      <arglist>(float a, float b)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>posNegFloat</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>a1161a9525f8c28c1921cc2d7fdd136b4</anchor>
      <arglist>(float a, float b)</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>nextVec3f</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>a7a442800d36d980acad6277984007f7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>nextVec2f</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>af317d3d9d45ecddcdaec67712a9bc002</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>nextGaussian</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>a71c187d60aa66bdd339aa6194ca1ba41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>randomize</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>a4c6109679549fbf208a61ec0d979db94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>randSeed</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>a7db6cadfd192f53d6d44b02362507e8f</anchor>
      <arglist>(unsigned long seedValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>randBool</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>aad2ff45149bbb4332e68815c13f24693</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>randInt</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>abbe777551e2a50c6bd53fa47573b66a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>randUint</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>a4d3f9b0c05c33b86f3e3ea1b085851b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>randInt</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>ab11c6cb8e2420d5d3f252a0f30e1f046</anchor>
      <arglist>(int32_t v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint32_t</type>
      <name>randUint</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>a807cabd97aab5ec6118344d49c47646e</anchor>
      <arglist>(uint32_t v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>randInt</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>acf91198ea620394e27f07866fde23774</anchor>
      <arglist>(int32_t a, int32_t b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>randFloat</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>afa1591494c900f189462fdc719701b4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>randFloat</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>a016b09f478e579478f0d7d2252a36a1c</anchor>
      <arglist>(float v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>randFloat</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>ae1610b457bf575ab76898cbaa377b20c</anchor>
      <arglist>(float a, float b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>randPosNegFloat</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>a182b7d3195fe1b3ed6473607f0a041ec</anchor>
      <arglist>(float a, float b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3f</type>
      <name>randVec3f</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>a2533f9a1485c1ce72a256fcbd5a30cb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec2f</type>
      <name>randVec2f</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>a10e60aec66171f90b8f5d1ef50c31511</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>randGaussian</name>
      <anchorfile>classcinder_1_1_rand.html</anchorfile>
      <anchor>a88a2bd8eab53d0dbeed8e5f0634773eb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Ray</name>
    <filename>classcinder_1_1_ray.html</filename>
    <member kind="function">
      <type></type>
      <name>Ray</name>
      <anchorfile>classcinder_1_1_ray.html</anchorfile>
      <anchor>a9aad861a0ad1d0adbc4ce09487e66828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ray</name>
      <anchorfile>classcinder_1_1_ray.html</anchorfile>
      <anchor>a6374298492ae0e0f5226a143837e574f</anchor>
      <arglist>(const Vec3f &amp;aOrigin, const Vec3f &amp;aDirection)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classcinder_1_1_ray.html</anchorfile>
      <anchor>a34209399e28e078c5dcf31e992fe7c79</anchor>
      <arglist>(const Vec3f &amp;aOrigin)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classcinder_1_1_ray.html</anchorfile>
      <anchor>a32deb27f01d15db7d1e706525f48cdec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirection</name>
      <anchorfile>classcinder_1_1_ray.html</anchorfile>
      <anchor>a1986d205b5bdd751dfc5de71b114fcc6</anchor>
      <arglist>(const Vec3f &amp;aDirection)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getDirection</name>
      <anchorfile>classcinder_1_1_ray.html</anchorfile>
      <anchor>ade28b4ce04422ab75864c29cd5993dbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getInverseDirection</name>
      <anchorfile>classcinder_1_1_ray.html</anchorfile>
      <anchor>ac0423e6db30511528471e66a78589195</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getSignX</name>
      <anchorfile>classcinder_1_1_ray.html</anchorfile>
      <anchor>a76d51de678acebf27934eb400fad1f08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getSignY</name>
      <anchorfile>classcinder_1_1_ray.html</anchorfile>
      <anchor>af6647e9de22e6aad6b47aeda87218843</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getSignZ</name>
      <anchorfile>classcinder_1_1_ray.html</anchorfile>
      <anchor>a40c7ca7ac6b3090916c1337ff4a6933f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>calcPosition</name>
      <anchorfile>classcinder_1_1_ray.html</anchorfile>
      <anchor>a05037567a19a1df66025ff5b1b78e2e2</anchor>
      <arglist>(float t) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>calcTriangleIntersection</name>
      <anchorfile>classcinder_1_1_ray.html</anchorfile>
      <anchor>a5e3048d15df7e39aba14fb843cf5675e</anchor>
      <arglist>(const Vec3f &amp;vert0, const Vec3f &amp;vert1, const Vec3f &amp;vert2, float *result) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>calcPlaneIntersection</name>
      <anchorfile>classcinder_1_1_ray.html</anchorfile>
      <anchor>a259bc4e9abd289507cfa457b782fd7b4</anchor>
      <arglist>(const Vec3f &amp;origin, const Vec3f &amp;normal, float *result) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>mOrigin</name>
      <anchorfile>classcinder_1_1_ray.html</anchorfile>
      <anchor>ab7fc8f2fd7a68dc86a2227258c369646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>mDirection</name>
      <anchorfile>classcinder_1_1_ray.html</anchorfile>
      <anchor>a5b5536a3d3165048787259df85fa9a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>mSignX</name>
      <anchorfile>classcinder_1_1_ray.html</anchorfile>
      <anchor>a546d33f44bd67f5d0697ee2f183f43ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>mSignY</name>
      <anchorfile>classcinder_1_1_ray.html</anchorfile>
      <anchor>a47164538aaf1959951377b72e9d41536</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>mSignZ</name>
      <anchorfile>classcinder_1_1_ray.html</anchorfile>
      <anchor>a10047e0274eb1b938b3c14511715c3ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>mInvDirection</name>
      <anchorfile>classcinder_1_1_ray.html</anchorfile>
      <anchor>ae74fffe744a42a18c579d4fdc9707444</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::RectMapping</name>
    <filename>classcinder_1_1_rect_mapping.html</filename>
    <member kind="function">
      <type></type>
      <name>RectMapping</name>
      <anchorfile>classcinder_1_1_rect_mapping.html</anchorfile>
      <anchor>a9783d7b19ef3c71fb9fb748755110d6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectMapping</name>
      <anchorfile>classcinder_1_1_rect_mapping.html</anchorfile>
      <anchor>a2aa0bc6873e4875f71892542e5fd8fef</anchor>
      <arglist>(const Rectf &amp;aSrcRect, const Rectf &amp;aDstRect)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectMapping</name>
      <anchorfile>classcinder_1_1_rect_mapping.html</anchorfile>
      <anchor>a8f2ea8185040c6199ad999b28a0fc129</anchor>
      <arglist>(const Rectf &amp;aSrcRect, const Rectf &amp;aDstRect, bool preserveSrcAspect)</arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>map</name>
      <anchorfile>classcinder_1_1_rect_mapping.html</anchorfile>
      <anchor>a476467705df4ec4d99a43ec03330ff8e</anchor>
      <arglist>(const Vec2f &amp;srcPoint) const </arglist>
    </member>
    <member kind="function">
      <type>Rectf</type>
      <name>map</name>
      <anchorfile>classcinder_1_1_rect_mapping.html</anchorfile>
      <anchor>a8b3cecf3ad95cd48d008501c61ed0952</anchor>
      <arglist>(const Rectf &amp;srcRect) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Serial</name>
    <filename>classcinder_1_1_serial.html</filename>
    <class kind="class">cinder::Serial::Device</class>
    <class kind="struct">cinder::Serial::Obj</class>
    <member kind="function">
      <type></type>
      <name>Serial</name>
      <anchorfile>classcinder_1_1_serial.html</anchorfile>
      <anchor>aec1d9ac6a4899be7f93d2998e310c3d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Serial</name>
      <anchorfile>classcinder_1_1_serial.html</anchorfile>
      <anchor>afaa8b23a9d90a163824d7000d0ea3400</anchor>
      <arglist>(const Serial::Device &amp;device, int baudRate)</arglist>
    </member>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>getDevice</name>
      <anchorfile>classcinder_1_1_serial.html</anchorfile>
      <anchor>a06832d8c663cc92c97f158840976dcfb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readBytes</name>
      <anchorfile>classcinder_1_1_serial.html</anchorfile>
      <anchor>a2032efe49e7a020124bc91c9ecef7460</anchor>
      <arglist>(void *data, size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>readAvailableBytes</name>
      <anchorfile>classcinder_1_1_serial.html</anchorfile>
      <anchor>a44fc3bbb30d7ecafab9fdec1a20a7fc2</anchor>
      <arglist>(void *data, size_t maximumBytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeBytes</name>
      <anchorfile>classcinder_1_1_serial.html</anchorfile>
      <anchor>a9719a984e8c5824952c30c6c14356d92</anchor>
      <arglist>(const void *data, size_t numBytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeByte</name>
      <anchorfile>classcinder_1_1_serial.html</anchorfile>
      <anchor>a1cf2fa1e2828ebc06c0f2b37f5c551fa</anchor>
      <arglist>(uint8_t data)</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>readByte</name>
      <anchorfile>classcinder_1_1_serial.html</anchorfile>
      <anchor>ad14945ebab023274fc1f9ee3e3e4a0af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>readChar</name>
      <anchorfile>classcinder_1_1_serial.html</anchorfile>
      <anchor>a7e48e0de9445d830a9f730ee693530b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>readStringUntil</name>
      <anchorfile>classcinder_1_1_serial.html</anchorfile>
      <anchor>a1b059a7e9fe7333ffdf0c137073c2bbf</anchor>
      <arglist>(char token, size_t maxLength=0, double timeoutSeconds=-1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeString</name>
      <anchorfile>classcinder_1_1_serial.html</anchorfile>
      <anchor>a6499dfff671b20a8daec4b62634591a6</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>classcinder_1_1_serial.html</anchorfile>
      <anchor>a6cbc0994763873864aafd4bdd5ef7a5a</anchor>
      <arglist>(bool input=true, bool output=true)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumBytesAvailable</name>
      <anchorfile>classcinder_1_1_serial.html</anchorfile>
      <anchor>a0de95b3c6e6902005f6be3adfa7b7bbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::vector&lt; Serial::Device &gt; &amp;</type>
      <name>getDevices</name>
      <anchorfile>classcinder_1_1_serial.html</anchorfile>
      <anchor>ace915522c2e5fbab1299f5f836a4ea89</anchor>
      <arglist>(bool forceRefresh=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Serial::Device</type>
      <name>findDeviceByName</name>
      <anchorfile>classcinder_1_1_serial.html</anchorfile>
      <anchor>a51b045cd5ca07b4f45d32ddb07b1034c</anchor>
      <arglist>(const std::string &amp;name, bool forceRefresh=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Serial::Device</type>
      <name>findDeviceByNameContains</name>
      <anchorfile>classcinder_1_1_serial.html</anchorfile>
      <anchor>ae17c0f2c9ce0a038c75c2697d974fde0</anchor>
      <arglist>(const std::string &amp;searchString, bool forceRefresh=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Obj &gt;</type>
      <name>mObj</name>
      <anchorfile>classcinder_1_1_serial.html</anchorfile>
      <anchor>ac6a4b5edd7262b327b4b4d41967ffd09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Serial::Device</name>
    <filename>classcinder_1_1_serial_1_1_device.html</filename>
    <member kind="function">
      <type></type>
      <name>Device</name>
      <anchorfile>classcinder_1_1_serial_1_1_device.html</anchorfile>
      <anchor>afab54d20cd1bdf82d5286ed33faa9063</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Device</name>
      <anchorfile>classcinder_1_1_serial_1_1_device.html</anchorfile>
      <anchor>a7500da02db63509a9eb93d4c60781da1</anchor>
      <arglist>(const std::string &amp;nameAndPath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Device</name>
      <anchorfile>classcinder_1_1_serial_1_1_device.html</anchorfile>
      <anchor>afd1692433c88d0f544523c99269d7cc2</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classcinder_1_1_serial_1_1_device.html</anchorfile>
      <anchor>aebd08d3fbe33bebb23f371f491d9313c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPath</name>
      <anchorfile>classcinder_1_1_serial_1_1_device.html</anchorfile>
      <anchor>a60ee477578511c86837c033053701b0d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::Serial::Obj</name>
    <filename>structcinder_1_1_serial_1_1_obj.html</filename>
    <member kind="function">
      <type></type>
      <name>Obj</name>
      <anchorfile>structcinder_1_1_serial_1_1_obj.html</anchorfile>
      <anchor>a13b3b5b689cb935e0d53978b3671617c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Obj</name>
      <anchorfile>structcinder_1_1_serial_1_1_obj.html</anchorfile>
      <anchor>aa1949664e813556f37f959fa09258f46</anchor>
      <arglist>(const Serial::Device &amp;device, int baudRate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Obj</name>
      <anchorfile>structcinder_1_1_serial_1_1_obj.html</anchorfile>
      <anchor>a0f77b2b44a36b27e67aa95586b205444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Device</type>
      <name>mDevice</name>
      <anchorfile>structcinder_1_1_serial_1_1_obj.html</anchorfile>
      <anchor>a49201041c923476fec4ffd4284e1bfad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::HANDLE</type>
      <name>mDeviceHandle</name>
      <anchorfile>structcinder_1_1_serial_1_1_obj.html</anchorfile>
      <anchor>a8252c5134043596dd96bede711d91b5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::COMMTIMEOUTS</type>
      <name>mSavedTimeouts</name>
      <anchorfile>structcinder_1_1_serial_1_1_obj.html</anchorfile>
      <anchor>a453b2381d94e4fcf0f9460b6e9e1e3c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mFd</name>
      <anchorfile>structcinder_1_1_serial_1_1_obj.html</anchorfile>
      <anchor>a00aa7e4a753dd251de8a7a2ea3ab9c85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>::termios</type>
      <name>mSavedOptions</name>
      <anchorfile>structcinder_1_1_serial_1_1_obj.html</anchorfile>
      <anchor>ac62e3e9787ad40ffba90bd287c463ad2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::SerialExc</name>
    <filename>classcinder_1_1_serial_exc.html</filename>
    <base>cinder::Exception</base>
  </compound>
  <compound kind="class">
    <name>cinder::SerialExcOpenFailed</name>
    <filename>classcinder_1_1_serial_exc_open_failed.html</filename>
    <base>cinder::SerialExc</base>
  </compound>
  <compound kind="class">
    <name>cinder::SerialExcDeviceEnumerationFailed</name>
    <filename>classcinder_1_1_serial_exc_device_enumeration_failed.html</filename>
    <base>cinder::SerialExc</base>
  </compound>
  <compound kind="class">
    <name>cinder::SerialExcReadFailure</name>
    <filename>classcinder_1_1_serial_exc_read_failure.html</filename>
    <base>cinder::SerialExc</base>
  </compound>
  <compound kind="class">
    <name>cinder::SerialExcWriteFailure</name>
    <filename>classcinder_1_1_serial_exc_write_failure.html</filename>
    <base>cinder::SerialExc</base>
  </compound>
  <compound kind="class">
    <name>cinder::SerialTimeoutExc</name>
    <filename>classcinder_1_1_serial_timeout_exc.html</filename>
    <base>cinder::SerialExc</base>
  </compound>
  <compound kind="class">
    <name>cinder::Shape2d</name>
    <filename>classcinder_1_1_shape2d.html</filename>
    <member kind="function">
      <type>void</type>
      <name>moveTo</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>ac99b703f9b008aa0184c2d0ab2fc3c33</anchor>
      <arglist>(const Vec2f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveTo</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>a895294b0286036b8cd8ef5869c6b2acc</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lineTo</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>a7ca0e16233e14ad3ed2e88a541230956</anchor>
      <arglist>(const Vec2f &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lineTo</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>a132fbe7a7e68c29c1f48b4c39afec2bd</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quadTo</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>a8b080c8593a7eef287e02cc3604dee73</anchor>
      <arglist>(const Vec2f &amp;p1, const Vec2f &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quadTo</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>ae11e4560f4e3792c836a3af591025954</anchor>
      <arglist>(float x1, float y1, float x2, float y2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>curveTo</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>aed7fa2a0412e411841dfddce7967adfd</anchor>
      <arglist>(const Vec2f &amp;p1, const Vec2f &amp;p2, const Vec2f &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>curveTo</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>accfe6dd45eb4e7fe66981c31153e7770</anchor>
      <arglist>(float x1, float y1, float x2, float y2, float x3, float y3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arc</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>a43eeb813f40e03ae0c6e40de4ce058ea</anchor>
      <arglist>(const Vec2f &amp;center, float radius, float startRadians, float endRadians, bool forward=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arc</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>a59bc68193d7c1731ef42f0227d8525b6</anchor>
      <arglist>(float centerX, float centerY, float radius, float startRadians, float endRadians, bool forward=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arcTo</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>a76b6b79a755e0b785a674b4f7aadd533</anchor>
      <arglist>(const Vec2f &amp;p, const Vec2f &amp;t, float radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>arcTo</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>a173ef068d2eed70bec95db512b47876e</anchor>
      <arglist>(float x, float y, float tanX, float tanY, float radius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>a81f8951a3f13802ae0385d79964f1f64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>a6e8aa4f3bc1a097a3df9271f7e96d249</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>a3e0bc1f6bb2e8d68a2f3062bcd8fd131</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumContours</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>aed5bfbb1ef818b84dfd37119ab74906f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Path2d &amp;</type>
      <name>getContour</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>ae36d6748478b88c975f1f6b844f42ad8</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <type>Path2d &amp;</type>
      <name>getContour</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>ae49ed9e895f143de95db8364508486af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Path2d &gt; &amp;</type>
      <name>getContours</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>a898816a5696841bfca22ec51b98ea597</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Path2d &gt; &amp;</type>
      <name>getContours</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>a39976e8bebf0c419c95f5d44d6a0fe24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Vec2f &amp;</type>
      <name>getCurrentPoint</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>acd143b3edfe7d0c232a9c18fc40668c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>af7d30c36aadc536a638b2c6d1e59298b</anchor>
      <arglist>(const Shape2d &amp;shape)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendContour</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>a422c85288a38dfe36967110f0f553ba6</anchor>
      <arglist>(const Path2d &amp;contour)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeContour</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>a524d98a260cb8bc44d599184226422ff</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>a643d58736c4de5bbb17fc16f09079ec0</anchor>
      <arglist>(const Vec2f &amp;amount, Vec2f scaleCenter=Vec2f::zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>a9ab1e45d27582ef4f599c3dd2bcd816d</anchor>
      <arglist>(const MatrixAffine2f &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Shape2d</type>
      <name>transformCopy</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>af1f82a068d30f327968b92226b7ab705</anchor>
      <arglist>(const MatrixAffine2f &amp;matrix) const </arglist>
    </member>
    <member kind="function">
      <type>Rectf</type>
      <name>calcBoundingBox</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>a095cfddfae6abd4d8418a5894f9315e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rectf</type>
      <name>calcPreciseBoundingBox</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>a3cdee7103e5162dfa3cb7770ef0113c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>a6e00a7fc47df1fbbbbdc8328399d6f5b</anchor>
      <arglist>(const Vec2f &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterate</name>
      <anchorfile>classcinder_1_1_shape2d.html</anchorfile>
      <anchor>a19e5fdadc2da10d879bb2299bbd56609</anchor>
      <arglist>(IT &amp;it)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Sphere</name>
    <filename>classcinder_1_1_sphere.html</filename>
    <member kind="function">
      <type></type>
      <name>Sphere</name>
      <anchorfile>classcinder_1_1_sphere.html</anchorfile>
      <anchor>af019b0fa9706438f6e18876f89a7e881</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sphere</name>
      <anchorfile>classcinder_1_1_sphere.html</anchorfile>
      <anchor>a5662d35ad7c9ebfdc076c215358aea44</anchor>
      <arglist>(const Vec3f &amp;aCenter, float aRadius)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRadius</name>
      <anchorfile>classcinder_1_1_sphere.html</anchorfile>
      <anchor>a065fa0fbf9f014e172eb0535649d71d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadius</name>
      <anchorfile>classcinder_1_1_sphere.html</anchorfile>
      <anchor>a4e9e81591c1dd0bd4e640e4926a5a162</anchor>
      <arglist>(float radius)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3f &amp;</type>
      <name>getCenter</name>
      <anchorfile>classcinder_1_1_sphere.html</anchorfile>
      <anchor>a808cb6e76dfdbd28f9330b9d339ec072</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const void</type>
      <name>setCenter</name>
      <anchorfile>classcinder_1_1_sphere.html</anchorfile>
      <anchor>a0acb317365be2ed6db7885d6095a7131</anchor>
      <arglist>(const Vec3f &amp;center)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classcinder_1_1_sphere.html</anchorfile>
      <anchor>a68c2d135ad56713f888c75f927b9051d</anchor>
      <arglist>(const Ray &amp;ray)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>intersect</name>
      <anchorfile>classcinder_1_1_sphere.html</anchorfile>
      <anchor>a2d3680252df0ad9bde25428a7ac46fea</anchor>
      <arglist>(const Ray &amp;ray, float *intersection)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Sphere</type>
      <name>calculateBoundingSphere</name>
      <anchorfile>classcinder_1_1_sphere.html</anchorfile>
      <anchor>a597049abe69a3878a4ebe15233b2f8c1</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;points)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>mCenter</name>
      <anchorfile>classcinder_1_1_sphere.html</anchorfile>
      <anchor>a471dded9aed42eccf184481bf427e8be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mRadius</name>
      <anchorfile>classcinder_1_1_sphere.html</anchorfile>
      <anchor>a4e4bfdf3ce5add5c8cb485b9b9781988</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::StreamBase</name>
    <filename>classcinder_1_1_stream_base.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Endianness</name>
      <anchorfile>classcinder_1_1_stream_base.html</anchorfile>
      <anchor>a8ebcdcb52449fc942ba8eef4ad0ea4ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>STREAM_BIG_ENDIAN</name>
      <anchorfile>classcinder_1_1_stream_base.html</anchorfile>
      <anchor>a8ebcdcb52449fc942ba8eef4ad0ea4ffaef6a34218562ef819aaf52c06748fc3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>STREAM_LITTLE_ENDIAN</name>
      <anchorfile>classcinder_1_1_stream_base.html</anchorfile>
      <anchor>a8ebcdcb52449fc942ba8eef4ad0ea4ffa7607bb3de7c15701c6df0f64ae0e6c7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~StreamBase</name>
      <anchorfile>classcinder_1_1_stream_base.html</anchorfile>
      <anchor>a437979461cb6677a4c991decc6299238</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const fs::path &amp;</type>
      <name>getFileName</name>
      <anchorfile>classcinder_1_1_stream_base.html</anchorfile>
      <anchor>a36a20cbb093f16093cd45d7dfb2156ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFileName</name>
      <anchorfile>classcinder_1_1_stream_base.html</anchorfile>
      <anchor>a1aac7b0806df7b8e48d98257cd0ae124</anchor>
      <arglist>(const fs::path &amp;aFileName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDeleteOnDestroy</name>
      <anchorfile>classcinder_1_1_stream_base.html</anchorfile>
      <anchor>a9d7ad66b39908c529a3c9577642f4634</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeleteOnDestroy</name>
      <anchorfile>classcinder_1_1_stream_base.html</anchorfile>
      <anchor>a26d2339ac74a94d3afeb6c07a7856590</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual off_t</type>
      <name>tell</name>
      <anchorfile>classcinder_1_1_stream_base.html</anchorfile>
      <anchor>a4cb4b4f844c7d88f70f500055b11c7f3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>seekAbsolute</name>
      <anchorfile>classcinder_1_1_stream_base.html</anchorfile>
      <anchor>a667d77583433def40556e989bb459749</anchor>
      <arglist>(off_t absoluteOffset)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>seekRelative</name>
      <anchorfile>classcinder_1_1_stream_base.html</anchorfile>
      <anchor>a7611eed439e619699d55849beec802b2</anchor>
      <arglist>(off_t relativeOffset)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uint8_t</type>
      <name>getNativeEndianness</name>
      <anchorfile>classcinder_1_1_stream_base.html</anchorfile>
      <anchor>a7a7cd3028fb556678526507406c2bd28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>return</type>
      <name>STREAM_BIG_ENDIAN</name>
      <anchorfile>classcinder_1_1_stream_base.html</anchorfile>
      <anchor>a218bc0d9def9b5060dc70f1e739a29e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StreamBase</name>
      <anchorfile>classcinder_1_1_stream_base.html</anchorfile>
      <anchor>a956f19b6a4b1174917b54cd615a0bfdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fs::path</type>
      <name>mFileName</name>
      <anchorfile>classcinder_1_1_stream_base.html</anchorfile>
      <anchor>ac7dcbf5f8508af5de7102e103c06fdee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mDeleteOnDestroy</name>
      <anchorfile>classcinder_1_1_stream_base.html</anchorfile>
      <anchor>a61b4a2efaf094472d67849da838d8dd9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::OStream</name>
    <filename>classcinder_1_1_o_stream.html</filename>
    <base virtualness="virtual">cinder::StreamBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OStream</name>
      <anchorfile>classcinder_1_1_o_stream.html</anchorfile>
      <anchor>aa2dba0c8ea0195b1679d5fe151606bbf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classcinder_1_1_o_stream.html</anchorfile>
      <anchor>ab48e17d33320cebb3395cf25732b6eba</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classcinder_1_1_o_stream.html</anchorfile>
      <anchor>a08debcad2298cfdffd262db8c7baf5d5</anchor>
      <arglist>(const fs::path &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classcinder_1_1_o_stream.html</anchorfile>
      <anchor>ad632c47a379bf500e00f1da1f9b0c470</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeEndian</name>
      <anchorfile>classcinder_1_1_o_stream.html</anchorfile>
      <anchor>a56b572ce7f7d07cacd5e3cba02103ccf</anchor>
      <arglist>(T t, uint8_t endian)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeBig</name>
      <anchorfile>classcinder_1_1_o_stream.html</anchorfile>
      <anchor>a8b23ec6ad55777cbcf7857e6d7649d5d</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeLittle</name>
      <anchorfile>classcinder_1_1_o_stream.html</anchorfile>
      <anchor>a9a9a7211236b6e0d997bc121d09eae98</anchor>
      <arglist>(T t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classcinder_1_1_o_stream.html</anchorfile>
      <anchor>a5ac65785815cf051a73447892dd8cc3d</anchor>
      <arglist>(const Buffer &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeData</name>
      <anchorfile>classcinder_1_1_o_stream.html</anchorfile>
      <anchor>a7e145e8af89804a9d9742ab90a4e53b7</anchor>
      <arglist>(const void *src, size_t size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OStream</name>
      <anchorfile>classcinder_1_1_o_stream.html</anchorfile>
      <anchor>aed9d9e74ddb167a844c34a300ef99b19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>IOWrite</name>
      <anchorfile>classcinder_1_1_o_stream.html</anchorfile>
      <anchor>a01526200f6221fefa619a57a7e123825</anchor>
      <arglist>(const void *t, size_t size)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::IStream</name>
    <filename>classcinder_1_1_i_stream.html</filename>
    <base virtualness="virtual">cinder::StreamBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IStream</name>
      <anchorfile>classcinder_1_1_i_stream.html</anchorfile>
      <anchor>afc975df4b1d2b93547d82b5fc8683af5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classcinder_1_1_i_stream.html</anchorfile>
      <anchor>a6ede0ea48421b4972ceeb7691cc37ad0</anchor>
      <arglist>(T *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readEndian</name>
      <anchorfile>classcinder_1_1_i_stream.html</anchorfile>
      <anchor>a52cb5887d46fff25236811b629349d16</anchor>
      <arglist>(T *t, uint8_t endian)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readBig</name>
      <anchorfile>classcinder_1_1_i_stream.html</anchorfile>
      <anchor>a532a92fb8bdb8b05b6172866a77f41e0</anchor>
      <arglist>(T *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readLittle</name>
      <anchorfile>classcinder_1_1_i_stream.html</anchorfile>
      <anchor>ab08247fd132c656a0776171d29b5333e</anchor>
      <arglist>(T *t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classcinder_1_1_i_stream.html</anchorfile>
      <anchor>aee90c54f971c4a8bd0624f75cd8b8a24</anchor>
      <arglist>(std::string *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classcinder_1_1_i_stream.html</anchorfile>
      <anchor>a0a5d58326d999054a49ae59481ed50b4</anchor>
      <arglist>(fs::path *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFixedString</name>
      <anchorfile>classcinder_1_1_i_stream.html</anchorfile>
      <anchor>af435ef3c8d2cc01cc6f5a5a7d7b72c12</anchor>
      <arglist>(char *t, size_t maxSize, bool nullTerminate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readFixedString</name>
      <anchorfile>classcinder_1_1_i_stream.html</anchorfile>
      <anchor>a5422ec11282749dd236447fafe919878</anchor>
      <arglist>(std::string *t, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>readLine</name>
      <anchorfile>classcinder_1_1_i_stream.html</anchorfile>
      <anchor>aef72b1d653eb2fe2b8f4ab66aff2071c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readData</name>
      <anchorfile>classcinder_1_1_i_stream.html</anchorfile>
      <anchor>a3d6f783b4e41a20a755a14d9bdb91aba</anchor>
      <arglist>(void *dest, size_t size)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>readDataAvailable</name>
      <anchorfile>classcinder_1_1_i_stream.html</anchorfile>
      <anchor>a70dec650876b8d6e329ff2617bca5874</anchor>
      <arglist>(void *dest, size_t maxSize)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual off_t</type>
      <name>size</name>
      <anchorfile>classcinder_1_1_i_stream.html</anchorfile>
      <anchor>a3334bb1884d79e0c362eae3950043508</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isEof</name>
      <anchorfile>classcinder_1_1_i_stream.html</anchorfile>
      <anchor>ad3e374733ce84f5eb06f3dfdd0e231d1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IStream</name>
      <anchorfile>classcinder_1_1_i_stream.html</anchorfile>
      <anchor>ad2c13e970d08e276ff7b6d98daa1da87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>IORead</name>
      <anchorfile>classcinder_1_1_i_stream.html</anchorfile>
      <anchor>a88fc3a6d33099f21255d17287d340f5e</anchor>
      <arglist>(void *t, size_t size)=0</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>MINIMUM_BUFFER_SIZE</name>
      <anchorfile>classcinder_1_1_i_stream.html</anchorfile>
      <anchor>ad8f6defbbc52eb5617577fcad8ce9ca1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::IoStream</name>
    <filename>classcinder_1_1_io_stream.html</filename>
    <base>cinder::IStream</base>
    <base>cinder::OStream</base>
    <member kind="function">
      <type></type>
      <name>IoStream</name>
      <anchorfile>classcinder_1_1_io_stream.html</anchorfile>
      <anchor>aacb0ad8796b841693625f1ea8fe106a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IoStream</name>
      <anchorfile>classcinder_1_1_io_stream.html</anchorfile>
      <anchor>ad7c79e47be781ba093d0b4da6b9a335e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::IStreamFile</name>
    <filename>classcinder_1_1_i_stream_file.html</filename>
    <base>cinder::IStream</base>
    <member kind="function">
      <type></type>
      <name>~IStreamFile</name>
      <anchorfile>classcinder_1_1_i_stream_file.html</anchorfile>
      <anchor>aaade28d05d886753b8f8c6302e09b1bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>readDataAvailable</name>
      <anchorfile>classcinder_1_1_i_stream_file.html</anchorfile>
      <anchor>ac5ddac8dbd5f6d1957e233f3736581b6</anchor>
      <arglist>(void *dest, size_t maxSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seekAbsolute</name>
      <anchorfile>classcinder_1_1_i_stream_file.html</anchorfile>
      <anchor>ac31723b62c4dc71a2ab8d426a28aca32</anchor>
      <arglist>(off_t absoluteOffset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seekRelative</name>
      <anchorfile>classcinder_1_1_i_stream_file.html</anchorfile>
      <anchor>ae66d89105840d5e27088bcb281cae6b1</anchor>
      <arglist>(off_t relativeOffset)</arglist>
    </member>
    <member kind="function">
      <type>off_t</type>
      <name>tell</name>
      <anchorfile>classcinder_1_1_i_stream_file.html</anchorfile>
      <anchor>a8f7da42b52ea6333e53dc0b3ad5e5e78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>off_t</type>
      <name>size</name>
      <anchorfile>classcinder_1_1_i_stream_file.html</anchorfile>
      <anchor>a0ecbf13668b1cde8d26a6b6d8ef056f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEof</name>
      <anchorfile>classcinder_1_1_i_stream_file.html</anchorfile>
      <anchor>a06cb0f170f8fc12ac24fa6c3c51c3a51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FILE *</type>
      <name>getFILE</name>
      <anchorfile>classcinder_1_1_i_stream_file.html</anchorfile>
      <anchor>a287ce9d87e6a7c3a872efe1695cd2b8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IStreamFileRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1_i_stream_file.html</anchorfile>
      <anchor>ad76eae0f9dd6b9c906c57271df03b6d5</anchor>
      <arglist>(FILE *file, bool ownsFile=true, int32_t defaultBufferSize=2048)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IStreamFile</name>
      <anchorfile>classcinder_1_1_i_stream_file.html</anchorfile>
      <anchor>a3ca483f5fa65978f02286f3af853ef33</anchor>
      <arglist>(FILE *aFile, bool aOwnsFile=true, int32_t aDefaultBufferSize=2048)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>IORead</name>
      <anchorfile>classcinder_1_1_i_stream_file.html</anchorfile>
      <anchor>a0fe349cd0b3841ee1950f9b271c44196</anchor>
      <arglist>(void *t, size_t size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>readDataImpl</name>
      <anchorfile>classcinder_1_1_i_stream_file.html</anchorfile>
      <anchor>a4374b2b1ef775a6bd4d2b60701392a8e</anchor>
      <arglist>(void *dest, size_t maxSize)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FILE *</type>
      <name>mFile</name>
      <anchorfile>classcinder_1_1_i_stream_file.html</anchorfile>
      <anchor>aaf22c1cc5de65b2d66cfb67bdaf269ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mOwnsFile</name>
      <anchorfile>classcinder_1_1_i_stream_file.html</anchorfile>
      <anchor>abc2e8dad9810f00d5ae639ebf76b8783</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>mBufferSize</name>
      <anchorfile>classcinder_1_1_i_stream_file.html</anchorfile>
      <anchor>a9e7adb132eca853e9858299366b8913b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>mDefaultBufferSize</name>
      <anchorfile>classcinder_1_1_i_stream_file.html</anchorfile>
      <anchor>ac55cd480a1eb7e93837b45c3a6eb2e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; uint8_t &gt;</type>
      <name>mBuffer</name>
      <anchorfile>classcinder_1_1_i_stream_file.html</anchorfile>
      <anchor>a3aae8f6f14e511ed16dc05f69e1dfb78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>off_t</type>
      <name>mBufferOffset</name>
      <anchorfile>classcinder_1_1_i_stream_file.html</anchorfile>
      <anchor>a23d3f74e98e257dbcea9d9fe03ebf057</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>off_t</type>
      <name>mBufferFileOffset</name>
      <anchorfile>classcinder_1_1_i_stream_file.html</anchorfile>
      <anchor>a27a746a3a3011df644d3145766f81bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>off_t</type>
      <name>mSize</name>
      <anchorfile>classcinder_1_1_i_stream_file.html</anchorfile>
      <anchor>a3632bc24c3bd2e54e032497cae232b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mSizeCached</name>
      <anchorfile>classcinder_1_1_i_stream_file.html</anchorfile>
      <anchor>a2a93372ffb497b30ac3614ecaccdad10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::OStreamFile</name>
    <filename>classcinder_1_1_o_stream_file.html</filename>
    <base>cinder::OStream</base>
    <member kind="function">
      <type></type>
      <name>~OStreamFile</name>
      <anchorfile>classcinder_1_1_o_stream_file.html</anchorfile>
      <anchor>aa4dd378645e4599c12766dfddcff4037</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual off_t</type>
      <name>tell</name>
      <anchorfile>classcinder_1_1_o_stream_file.html</anchorfile>
      <anchor>aecb72b01a1b4a471c97ef2b815dd6911</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>seekAbsolute</name>
      <anchorfile>classcinder_1_1_o_stream_file.html</anchorfile>
      <anchor>afc91255bc691af5c526c4d37bd9ba56f</anchor>
      <arglist>(off_t absoluteOffset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>seekRelative</name>
      <anchorfile>classcinder_1_1_o_stream_file.html</anchorfile>
      <anchor>aa5676e5bb0b2755d234b74a57c01f61b</anchor>
      <arglist>(off_t relativeOffset)</arglist>
    </member>
    <member kind="function">
      <type>FILE *</type>
      <name>getFILE</name>
      <anchorfile>classcinder_1_1_o_stream_file.html</anchorfile>
      <anchor>a984ed6b91f51fd83bd73f8f9be986adf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OStreamFileRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1_o_stream_file.html</anchorfile>
      <anchor>aaf770f4a10cf5cc7871d0f6c6aa82f74</anchor>
      <arglist>(FILE *file, bool ownsFile=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OStreamFile</name>
      <anchorfile>classcinder_1_1_o_stream_file.html</anchorfile>
      <anchor>a4f594b70f2930f2d33ec7f70565c29ea</anchor>
      <arglist>(FILE *aFile, bool aOwnsFile=true)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>IOWrite</name>
      <anchorfile>classcinder_1_1_o_stream_file.html</anchorfile>
      <anchor>a7d99b290e00f6adec838dd930ed32aa5</anchor>
      <arglist>(const void *t, size_t size)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FILE *</type>
      <name>mFile</name>
      <anchorfile>classcinder_1_1_o_stream_file.html</anchorfile>
      <anchor>af870d36bf8ec18dff89e4a1cb071ab30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mOwnsFile</name>
      <anchorfile>classcinder_1_1_o_stream_file.html</anchorfile>
      <anchor>a4d3f822f890a37ca97876d9efab1b15b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::IoStreamFile</name>
    <filename>classcinder_1_1_io_stream_file.html</filename>
    <base>cinder::IoStream</base>
    <member kind="function">
      <type></type>
      <name>~IoStreamFile</name>
      <anchorfile>classcinder_1_1_io_stream_file.html</anchorfile>
      <anchor>a99dcac378365d38d3e2e05529f9e27aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>readDataAvailable</name>
      <anchorfile>classcinder_1_1_io_stream_file.html</anchorfile>
      <anchor>a21da02db3587820494c0c71eba348791</anchor>
      <arglist>(void *dest, size_t maxSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seekAbsolute</name>
      <anchorfile>classcinder_1_1_io_stream_file.html</anchorfile>
      <anchor>a6d292520efc362057d66c29d76ef5206</anchor>
      <arglist>(off_t absoluteOffset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seekRelative</name>
      <anchorfile>classcinder_1_1_io_stream_file.html</anchorfile>
      <anchor>abe6a404d27269b4451c98369eee2e55a</anchor>
      <arglist>(off_t relativeOffset)</arglist>
    </member>
    <member kind="function">
      <type>off_t</type>
      <name>tell</name>
      <anchorfile>classcinder_1_1_io_stream_file.html</anchorfile>
      <anchor>a4eed441152be684528c7d1dd673ffa8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>off_t</type>
      <name>size</name>
      <anchorfile>classcinder_1_1_io_stream_file.html</anchorfile>
      <anchor>a5a2eef3410c2ffa136940746a761d55c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEof</name>
      <anchorfile>classcinder_1_1_io_stream_file.html</anchorfile>
      <anchor>a236faf499cbe1a68702c9fb400587bae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FILE *</type>
      <name>getFILE</name>
      <anchorfile>classcinder_1_1_io_stream_file.html</anchorfile>
      <anchor>a5bb4d65fc25011d5050ca2f4beca046a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IoStreamFileRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1_io_stream_file.html</anchorfile>
      <anchor>a89ef6b12fc963eaf886c2cd82f41d9b7</anchor>
      <arglist>(FILE *file, bool ownsFile=true, int32_t defaultBufferSize=2048)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IoStreamFile</name>
      <anchorfile>classcinder_1_1_io_stream_file.html</anchorfile>
      <anchor>a80f4d9d5d8ff26b52a56d215b4f05ad2</anchor>
      <arglist>(FILE *aFile, bool aOwnsFile=true, int32_t aDefaultBufferSize=2048)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>IORead</name>
      <anchorfile>classcinder_1_1_io_stream_file.html</anchorfile>
      <anchor>af4b783a1c4da8b16927e452485526269</anchor>
      <arglist>(void *t, size_t size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>readDataImpl</name>
      <anchorfile>classcinder_1_1_io_stream_file.html</anchorfile>
      <anchor>aab5e19d69dadc82f05b4c657100e5a14</anchor>
      <arglist>(void *dest, size_t maxSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>IOWrite</name>
      <anchorfile>classcinder_1_1_io_stream_file.html</anchorfile>
      <anchor>a213a582bdb026f7a351a1958b1d4335d</anchor>
      <arglist>(const void *t, size_t size)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FILE *</type>
      <name>mFile</name>
      <anchorfile>classcinder_1_1_io_stream_file.html</anchorfile>
      <anchor>aa561bb48988f904354807db1f13fea2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mOwnsFile</name>
      <anchorfile>classcinder_1_1_io_stream_file.html</anchorfile>
      <anchor>a78bfcc665e79231e81e3dc83e6858ce8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mBufferSize</name>
      <anchorfile>classcinder_1_1_io_stream_file.html</anchorfile>
      <anchor>a0fae015284c11af163d6c84d561babaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mDefaultBufferSize</name>
      <anchorfile>classcinder_1_1_io_stream_file.html</anchorfile>
      <anchor>a01f491bf654824df1894fe0d07caa9a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; uint8_t &gt;</type>
      <name>mBuffer</name>
      <anchorfile>classcinder_1_1_io_stream_file.html</anchorfile>
      <anchor>aa12e7030aa5060a7626a106d72cd3448</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>off_t</type>
      <name>mBufferOffset</name>
      <anchorfile>classcinder_1_1_io_stream_file.html</anchorfile>
      <anchor>a7423067d8affe6599150edd40c3b5a02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>off_t</type>
      <name>mBufferFileOffset</name>
      <anchorfile>classcinder_1_1_io_stream_file.html</anchorfile>
      <anchor>ab9bbec635d240728612975496a811051</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>off_t</type>
      <name>mSize</name>
      <anchorfile>classcinder_1_1_io_stream_file.html</anchorfile>
      <anchor>a9283ab16a44d8cd7cfe444468cc78861</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mSizeCached</name>
      <anchorfile>classcinder_1_1_io_stream_file.html</anchorfile>
      <anchor>a474c3e016302845089b94b4529cacda0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::IStreamMem</name>
    <filename>classcinder_1_1_i_stream_mem.html</filename>
    <base>cinder::IStream</base>
    <member kind="function">
      <type></type>
      <name>~IStreamMem</name>
      <anchorfile>classcinder_1_1_i_stream_mem.html</anchorfile>
      <anchor>adc0fec8cd56ff90f4ef7d7aaf6b4c346</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>readDataAvailable</name>
      <anchorfile>classcinder_1_1_i_stream_mem.html</anchorfile>
      <anchor>a060cd554d77636b54b93eb3a2597fddd</anchor>
      <arglist>(void *dest, size_t maxSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seekAbsolute</name>
      <anchorfile>classcinder_1_1_i_stream_mem.html</anchorfile>
      <anchor>a2df28709daf0f2191409ee2c53bb7a87</anchor>
      <arglist>(off_t absoluteOffset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seekRelative</name>
      <anchorfile>classcinder_1_1_i_stream_mem.html</anchorfile>
      <anchor>af5079e301bebfc0b6189a648ec3528d8</anchor>
      <arglist>(off_t relativeOffset)</arglist>
    </member>
    <member kind="function">
      <type>off_t</type>
      <name>tell</name>
      <anchorfile>classcinder_1_1_i_stream_mem.html</anchorfile>
      <anchor>ae0c94fddb6461d405191a95c000a3da9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>off_t</type>
      <name>size</name>
      <anchorfile>classcinder_1_1_i_stream_mem.html</anchorfile>
      <anchor>a73d79b1a7d2c13c948a3e3a3a3aaeafd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEof</name>
      <anchorfile>classcinder_1_1_i_stream_mem.html</anchorfile>
      <anchor>a720a739e57ef95da471f11566abb445b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>getData</name>
      <anchorfile>classcinder_1_1_i_stream_mem.html</anchorfile>
      <anchor>a75516c10b88d5bfc323105937f853092</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IStreamMemRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1_i_stream_mem.html</anchorfile>
      <anchor>aec400f4441e102fc1ab6842a2661be1e</anchor>
      <arglist>(const void *data, size_t size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IStreamMem</name>
      <anchorfile>classcinder_1_1_i_stream_mem.html</anchorfile>
      <anchor>ad902cdf4911c8329826e7ff01e3f9ced</anchor>
      <arglist>(const void *aData, size_t aDataSize)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>IORead</name>
      <anchorfile>classcinder_1_1_i_stream_mem.html</anchorfile>
      <anchor>ad825ad099e9806a033ebfa833d29839f</anchor>
      <arglist>(void *t, size_t size)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const uint8_t *</type>
      <name>mData</name>
      <anchorfile>classcinder_1_1_i_stream_mem.html</anchorfile>
      <anchor>a58803f53c4a86cdc2f4fd73f70074d0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>mDataSize</name>
      <anchorfile>classcinder_1_1_i_stream_mem.html</anchorfile>
      <anchor>a0eb41689aa14b27ec2a3b03cf5d14626</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>mOffset</name>
      <anchorfile>classcinder_1_1_i_stream_mem.html</anchorfile>
      <anchor>a72e3af8ed5fc48b3628ae76bb2eed1d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::OStreamMem</name>
    <filename>classcinder_1_1_o_stream_mem.html</filename>
    <base>cinder::OStream</base>
    <member kind="function">
      <type></type>
      <name>~OStreamMem</name>
      <anchorfile>classcinder_1_1_o_stream_mem.html</anchorfile>
      <anchor>a26398e6045bd09280ca275520d1ed082</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual off_t</type>
      <name>tell</name>
      <anchorfile>classcinder_1_1_o_stream_mem.html</anchorfile>
      <anchor>a33cd8270cd095c24d4945de9694fcbfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>seekAbsolute</name>
      <anchorfile>classcinder_1_1_o_stream_mem.html</anchorfile>
      <anchor>ac843356367a8bf78f5bdb1814612dcbb</anchor>
      <arglist>(off_t absoluteOffset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>seekRelative</name>
      <anchorfile>classcinder_1_1_o_stream_mem.html</anchorfile>
      <anchor>a87222f82dfe137116432047acd4e9572</anchor>
      <arglist>(off_t relativeOffset)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getBuffer</name>
      <anchorfile>classcinder_1_1_o_stream_mem.html</anchorfile>
      <anchor>a66ae53c029b153b51447247712a63074</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OStreamMemRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1_o_stream_mem.html</anchorfile>
      <anchor>acf02dfee724c1de215038af846a6f74d</anchor>
      <arglist>(size_t bufferSizeHint=4096)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OStreamMem</name>
      <anchorfile>classcinder_1_1_o_stream_mem.html</anchorfile>
      <anchor>a58290cc97fbc8785e90ed8cd0a1a563d</anchor>
      <arglist>(size_t bufferSizeHint)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>IOWrite</name>
      <anchorfile>classcinder_1_1_o_stream_mem.html</anchorfile>
      <anchor>a8a2418c4b794b63bb844c200a7a47e4b</anchor>
      <arglist>(const void *t, size_t size)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>mBuffer</name>
      <anchorfile>classcinder_1_1_o_stream_mem.html</anchorfile>
      <anchor>a5468b6c1b34156b872fed27109b8cc47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>mDataSize</name>
      <anchorfile>classcinder_1_1_o_stream_mem.html</anchorfile>
      <anchor>a7eb8e60ee76e1b5bb35bd2f414712525</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>mOffset</name>
      <anchorfile>classcinder_1_1_o_stream_mem.html</anchorfile>
      <anchor>a331d39edc47502b9588e07f36cc3248c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::IStreamStateRestore</name>
    <filename>classcinder_1_1_i_stream_state_restore.html</filename>
    <member kind="function">
      <type></type>
      <name>IStreamStateRestore</name>
      <anchorfile>classcinder_1_1_i_stream_state_restore.html</anchorfile>
      <anchor>a4d604d7933725c0276c8daa6ce4c4719</anchor>
      <arglist>(IStream &amp;aStream)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IStreamStateRestore</name>
      <anchorfile>classcinder_1_1_i_stream_state_restore.html</anchorfile>
      <anchor>a4532701905305d2c26b71c54313fd8fd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::StreamExc</name>
    <filename>classcinder_1_1_stream_exc.html</filename>
    <base>cinder::Exception</base>
  </compound>
  <compound kind="class">
    <name>cinder::StreamExcOutOfMemory</name>
    <filename>classcinder_1_1_stream_exc_out_of_memory.html</filename>
    <base>cinder::StreamExc</base>
  </compound>
  <compound kind="class">
    <name>cinder::cinder_stream_source</name>
    <filename>classcinder_1_1cinder__stream__source.html</filename>
    <member kind="typedef">
      <type>char</type>
      <name>char_type</name>
      <anchorfile>classcinder_1_1cinder__stream__source.html</anchorfile>
      <anchor>a93e2628d58d7187987eea362597f25c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iostreams::source_tag</type>
      <name>category</name>
      <anchorfile>classcinder_1_1cinder__stream__source.html</anchorfile>
      <anchor>a9fd7be86244e73ff6c7137c911544b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cinder_stream_source</name>
      <anchorfile>classcinder_1_1cinder__stream__source.html</anchorfile>
      <anchor>ac9f95fba2fcd4965d0ddff4b121306d2</anchor>
      <arglist>(cinder::IStreamRef aStream)</arglist>
    </member>
    <member kind="function">
      <type>std::streamsize</type>
      <name>read</name>
      <anchorfile>classcinder_1_1cinder__stream__source.html</anchorfile>
      <anchor>a3018cba02d85c55f678becc0699fdb31</anchor>
      <arglist>(char *s, std::streamsize n)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IStreamRef</type>
      <name>mStream</name>
      <anchorfile>classcinder_1_1cinder__stream__source.html</anchorfile>
      <anchor>a64e0435c43486d7f1b74ca1b853e22f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::cinder_stream_sink</name>
    <filename>classcinder_1_1cinder__stream__sink.html</filename>
    <member kind="typedef">
      <type>char</type>
      <name>char_type</name>
      <anchorfile>classcinder_1_1cinder__stream__sink.html</anchorfile>
      <anchor>a29be1bbbf85b5fe7ab25b9659ec2041a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iostreams::sink_tag</type>
      <name>category</name>
      <anchorfile>classcinder_1_1cinder__stream__sink.html</anchorfile>
      <anchor>ad3a960bb4fa085b1cdf9bb98ec0a43fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cinder_stream_sink</name>
      <anchorfile>classcinder_1_1cinder__stream__sink.html</anchorfile>
      <anchor>a69201dd7a7b6fac193b4eb9a50962194</anchor>
      <arglist>(OStreamRef aStream)</arglist>
    </member>
    <member kind="function">
      <type>std::streamsize</type>
      <name>write</name>
      <anchorfile>classcinder_1_1cinder__stream__sink.html</anchorfile>
      <anchor>abdf850a3164e54f4e21291b842de7419</anchor>
      <arglist>(const char *s, std::streamsize n)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OStreamRef</type>
      <name>mStream</name>
      <anchorfile>classcinder_1_1cinder__stream__sink.html</anchorfile>
      <anchor>a1e278b2cd87562a9cab72a0dbb4d4bd0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::cinder_stream_bidirectional_device</name>
    <filename>classcinder_1_1cinder__stream__bidirectional__device.html</filename>
    <member kind="typedef">
      <type>char</type>
      <name>char_type</name>
      <anchorfile>classcinder_1_1cinder__stream__bidirectional__device.html</anchorfile>
      <anchor>a55e9a55bf59fe1b4dc580b87a5b382b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iostreams::seekable_device_tag</type>
      <name>category</name>
      <anchorfile>classcinder_1_1cinder__stream__bidirectional__device.html</anchorfile>
      <anchor>aa24cce899289ae007e1baa501ebe6c6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cinder_stream_bidirectional_device</name>
      <anchorfile>classcinder_1_1cinder__stream__bidirectional__device.html</anchorfile>
      <anchor>aff28948f70977e1ed1a8de7610d7f2c1</anchor>
      <arglist>(cinder::IoStreamRef aStream)</arglist>
    </member>
    <member kind="function">
      <type>std::streamsize</type>
      <name>read</name>
      <anchorfile>classcinder_1_1cinder__stream__bidirectional__device.html</anchorfile>
      <anchor>a38af97af5c48902c657c4ea16bb2ac37</anchor>
      <arglist>(char *s, std::streamsize n)</arglist>
    </member>
    <member kind="function">
      <type>std::streamsize</type>
      <name>write</name>
      <anchorfile>classcinder_1_1cinder__stream__bidirectional__device.html</anchorfile>
      <anchor>a2d72a861b6f4f13e0d23296f96d1d469</anchor>
      <arglist>(const char *s, std::streamsize n)</arglist>
    </member>
    <member kind="function">
      <type>boost::iostreams::stream_offset</type>
      <name>seek</name>
      <anchorfile>classcinder_1_1cinder__stream__bidirectional__device.html</anchorfile>
      <anchor>ae539d60309adadb9be1e33b3deeb7f5a</anchor>
      <arglist>(boost::iostreams::stream_offset off, std::ios_base::seekdir way)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IoStreamRef</type>
      <name>mStream</name>
      <anchorfile>classcinder_1_1cinder__stream__bidirectional__device.html</anchorfile>
      <anchor>a27faed3b733db1180fb3e8c9ffc81c4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::SurfaceChannelOrder</name>
    <filename>classcinder_1_1_surface_channel_order.html</filename>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHAN_RED</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>abcf392dd65de9d9714de3cb54f9089beafd6ba5a43df6faa96435532d63edabb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHAN_GREEN</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>abcf392dd65de9d9714de3cb54f9089bea7a5a05f7836c95cb85395d06bf25ac35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHAN_BLUE</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>abcf392dd65de9d9714de3cb54f9089bead61230b234c079b1c38bf416b8c1f436</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHAN_ALPHA</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>abcf392dd65de9d9714de3cb54f9089bea6dc70a16372b0a30158841ed23729eb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INVALID</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>abcf392dd65de9d9714de3cb54f9089beae72ecc43e9d7c20bfeb89665268eaa3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RGBA</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>a1f2ceb8a4a60f77a1069a49600c8a211a1e0c40a9fb478b3df7b02d84aff189ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BGRA</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>a1f2ceb8a4a60f77a1069a49600c8a211a963397acf16774889e13379dc802c320</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ARGB</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>a1f2ceb8a4a60f77a1069a49600c8a211ae428c8120a56839ef9fefed2a528bb17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ABGR</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>a1f2ceb8a4a60f77a1069a49600c8a211afb903e81d88bf8cfc5e23fbb138303c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RGBX</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>a1f2ceb8a4a60f77a1069a49600c8a211adc68f1790660fda3aa2b566c0690d5fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BGRX</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>a1f2ceb8a4a60f77a1069a49600c8a211a3af7f2b7c13470e83836a5acf9024999</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>XRGB</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>a1f2ceb8a4a60f77a1069a49600c8a211a8c21f3eca040bac11f76176e6ccdd824</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>XBGR</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>a1f2ceb8a4a60f77a1069a49600c8a211a48ffa28dfb80d01cf63f647aaf699900</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RGB</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>a1f2ceb8a4a60f77a1069a49600c8a211a325552d060190dd38f06b4584ac838b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>BGR</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>a1f2ceb8a4a60f77a1069a49600c8a211a41706cdbb84a94d293e8bc6a2f6311ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UNSPECIFIED</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>a1f2ceb8a4a60f77a1069a49600c8a211a5ab01894183ce51b9c6ef707828fdd4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceChannelOrder</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>ae070410c4c287d9929ca03ff9772a4d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceChannelOrder</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>ae36a076eff4b31a58e8705260a9c95b4</anchor>
      <arglist>(int aCode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceChannelOrder</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>a7ea9633e2b4a5b3002a129134df395b4</anchor>
      <arglist>(const SurfaceChannelOrder &amp;aOrder)</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getRedOffset</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>aa4472ecfd09c04c9ba5bb21e0850073f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getGreenOffset</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>a43af6af578e1d7e6e6793e59eaec905b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getBlueOffset</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>a59d85201a0460af3e8ff682be5cdad5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getAlphaOffset</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>ac0a11d3131731595e3e93545cf3fe544</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAlpha</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>a0e407903a5f6db8a912096ae38c30ceb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getPixelInc</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>a0dc7917c9cde54f9fd958f3a887b1f7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCode</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>a2718d0dd8a7c4ec5bcb9c00837f0d761</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>a82ea82f0b7c402208ded454942afb8c0</anchor>
      <arglist>(const SurfaceChannelOrder &amp;sco) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getImageIoChannelOrder</name>
      <anchorfile>classcinder_1_1_surface_channel_order.html</anchorfile>
      <anchor>a8ca3fbd92ec23a9a9c7906407a5ba32e</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::SurfaceConstraints</name>
    <filename>classcinder_1_1_surface_constraints.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SurfaceConstraints</name>
      <anchorfile>classcinder_1_1_surface_constraints.html</anchorfile>
      <anchor>a94ae2271ff62f76a915cef74b2e561d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SurfaceChannelOrder</type>
      <name>getChannelOrder</name>
      <anchorfile>classcinder_1_1_surface_constraints.html</anchorfile>
      <anchor>a5caa15eb7a8fabd23bfc59a28ff788f9</anchor>
      <arglist>(bool alpha) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getRowBytes</name>
      <anchorfile>classcinder_1_1_surface_constraints.html</anchorfile>
      <anchor>a662ea540dd51e102633789365b3a2896</anchor>
      <arglist>(int requestedWidth, const SurfaceChannelOrder &amp;sco, int elementSize) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::SurfaceConstraintsDefault</name>
    <filename>classcinder_1_1_surface_constraints_default.html</filename>
    <base>cinder::SurfaceConstraints</base>
  </compound>
  <compound kind="class">
    <name>cinder::SurfaceT</name>
    <filename>classcinder_1_1_surface_t.html</filename>
    <templarg>T</templarg>
    <class kind="class">cinder::SurfaceT::ConstIter</class>
    <class kind="class">cinder::SurfaceT::Iter</class>
    <member kind="function">
      <type></type>
      <name>SurfaceT</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a785e8c6fabbdbaeb65712e4858833479</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceT</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a34bcd91acdf1111d5da624a21e67f99a</anchor>
      <arglist>(int32_t width, int32_t height, bool alpha, SurfaceChannelOrder channelOrder=SurfaceChannelOrder::UNSPECIFIED)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceT</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a7f8eb913b83effb58ee15badd198dcd0</anchor>
      <arglist>(int32_t width, int32_t height, bool alpha, const SurfaceConstraints &amp;constraints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceT</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>ac9004fd8b1e0c500e02fcdfbdbe571ed</anchor>
      <arglist>(T *data, int32_t width, int32_t height, int32_t rowBytes, SurfaceChannelOrder channelOrder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceT</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a55e994d9c8a799dd4a4540d6650f7ecb</anchor>
      <arglist>(ImageSourceRef imageSource, const SurfaceConstraints &amp;constraints=SurfaceConstraintsDefault(), boost::tribool alpha=boost::logic::indeterminate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ImageSourceRef</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a79defcf8e73b0526f26af3be914f78be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ImageTargetRef</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a32a1e5d14987a74b858969eb5ee81c42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getWidth</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a1b8928d870737daf9f59fdfb83fa51e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getHeight</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>abbb727cb106dc1b4b537991ccd1a218d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getSize</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a240bf5253a4cfffa06a4ea6e07002331</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAspectRatio</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a24266e8d1474dc9f817183745c844791</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>getBounds</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>ab5c7c63efe35fc8c4c97531b4d20884e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAlpha</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a82124f1cf056043b85248eacf472e225</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPremultiplied</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a73e75b813f8af6255e3de692086abdd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setPremultiplied</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>af3cf7e047bb742b97186cfca3a131cb3</anchor>
      <arglist>(bool premult=true) const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getRowBytes</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a81a5f9c0c1768c751f3096d1fe83ab11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getPixelInc</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a550c975403a6f65c15348a6c87ac338b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SurfaceT</type>
      <name>clone</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a29d86f9b1875c30ac38dfb6447245049</anchor>
      <arglist>(bool copyPixels=true) const </arglist>
    </member>
    <member kind="function">
      <type>SurfaceT</type>
      <name>clone</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a1c2e20f388b53fb6868c5ba393f0ecfe</anchor>
      <arglist>(const Area &amp;area, bool copyPixels=true) const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getData</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a87dd5a31c22eab567c6d6be938518cd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>getData</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>ab91cd98ff60c2a42f80c6e35fdbf9840</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getData</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a42de94fd28f7d2cd9466a3e5818cb97b</anchor>
      <arglist>(const Vec2i &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>getData</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a36448ec39df80e5479cbc19a9b39d10d</anchor>
      <arglist>(const Vec2i &amp;offset) const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getDataRed</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>aecb65f9b84984d2401784d0eeb49a016</anchor>
      <arglist>(const Vec2i &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>getDataRed</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a71c2e4bc4a0716733baa09cd71d98688</anchor>
      <arglist>(const Vec2i &amp;offset) const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getDataGreen</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>af06838ab7980d61a3e38c7d81c70cb1a</anchor>
      <arglist>(const Vec2i &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>getDataGreen</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a6ca0ac9cef34420506c50b0a4721187e</anchor>
      <arglist>(const Vec2i &amp;offset) const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getDataBlue</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>abc96e9623b2cf02a2b6e271dd39de862</anchor>
      <arglist>(const Vec2i &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>getDataBlue</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a60614c57a4e35717999c322e562a8777</anchor>
      <arglist>(const Vec2i &amp;offset) const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getDataAlpha</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>add41dcdc946d694e77a205a3f655d40d</anchor>
      <arglist>(const Vec2i &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>getDataAlpha</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>ac40094fa0fa5d0448c41fbaabb67ba15</anchor>
      <arglist>(const Vec2i &amp;offset) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeallocator</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>ae1252ffdf7852caccfd03b23df157467</anchor>
      <arglist>(void(*aDeallocatorFunc)(void *), void *aDeallocatorRefcon)</arglist>
    </member>
    <member kind="function">
      <type>const SurfaceChannelOrder &amp;</type>
      <name>getChannelOrder</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>af12c7558fadb5a922d1d086c884bd10c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getRedOffset</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a93e1f09b8d4d98fad12977d4fffb0cf7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getGreenOffset</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a2c390c3d39809c34fcbc653788d0b1e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getBlueOffset</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a95ef6f9eaf2d5ea76a850497842a21a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>getAlphaOffset</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a072f2b80c7aca558f6cdb0997c1797a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChannelOrder</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>aaf07eae37706817ca0885d306b5cd0e1</anchor>
      <arglist>(const SurfaceChannelOrder &amp;aChannelOrder)</arglist>
    </member>
    <member kind="function">
      <type>ChannelT&lt; T &gt; &amp;</type>
      <name>getChannel</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>ae9e3a626f08cc734005b91ad63eed1f0</anchor>
      <arglist>(uint8_t channelIndex)</arglist>
    </member>
    <member kind="function">
      <type>const ChannelT&lt; T &gt; &amp;</type>
      <name>getChannel</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>aa7e5e6da1ae553cae5d1485c2e66237a</anchor>
      <arglist>(uint8_t channelIndex) const </arglist>
    </member>
    <member kind="function">
      <type>ChannelT&lt; T &gt; &amp;</type>
      <name>getChannelRed</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>ad18dfcdd556a475d3141cdba45602eec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ChannelT&lt; T &gt; &amp;</type>
      <name>getChannelGreen</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a958b48daeefd05e0ff2c7c33e9c21aca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ChannelT&lt; T &gt; &amp;</type>
      <name>getChannelBlue</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>ae36bbf0e559edbca50c03e4d44790ae0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ChannelT&lt; T &gt; &amp;</type>
      <name>getChannelAlpha</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a822adcec9d90e990d7a4d8d6b79d8485</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ChannelT&lt; T &gt; &amp;</type>
      <name>getChannelRed</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>af91d2903ff37e2b85ccd8786c6483d15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ChannelT&lt; T &gt; &amp;</type>
      <name>getChannelGreen</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a64a64d6c6418df75127d5f585a9b9e2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ChannelT&lt; T &gt; &amp;</type>
      <name>getChannelBlue</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a498f923a3235754d916b07ac3b9ca938</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ChannelT&lt; T &gt; &amp;</type>
      <name>getChannelAlpha</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>ab432240ffbc3c0c5906e25d4ea96f674</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColorAT&lt; T &gt;</type>
      <name>getPixel</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a862e892ced2cea8d422683ab82915012</anchor>
      <arglist>(Vec2i pos) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPixel</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>abeef32100150e5748551c074b433f6ab</anchor>
      <arglist>(Vec2i pos, const ColorT&lt; T &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPixel</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a65b0c7a1d4ef7e749ec068df95fd9b42</anchor>
      <arglist>(Vec2i pos, const ColorAT&lt; T &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyFrom</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a73dda39e47f015905cc43471e7e426d3</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;srcSurface, const Area &amp;srcArea, const Vec2i &amp;relativeOffset=Vec2i::zero())</arglist>
    </member>
    <member kind="function">
      <type>ColorT&lt; T &gt;</type>
      <name>areaAverage</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a11c5d89e1bcdf1c0e70d36adc6bb6bc6</anchor>
      <arglist>(const Area &amp;area) const </arglist>
    </member>
    <member kind="function">
      <type>Iter</type>
      <name>getIter</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a2d33a9fdbb5242e13e27c0dfc7fe7c33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iter</type>
      <name>getIter</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a8ed96afb9b9a7deb59e48e694dc2d3b1</anchor>
      <arglist>(const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>ConstIter</type>
      <name>getIter</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>a9e3c36d49617eb6c833177e1dc940cce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIter</type>
      <name>getIter</name>
      <anchorfile>classcinder_1_1_surface_t.html</anchorfile>
      <anchor>adf005ed5921c23587fcdc470a9fe063b</anchor>
      <arglist>(const Area &amp;area) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::SurfaceT::ConstIter</name>
    <filename>classcinder_1_1_surface_t_1_1_const_iter.html</filename>
    <member kind="function">
      <type></type>
      <name>ConstIter</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_const_iter.html</anchorfile>
      <anchor>a0d9675f7b0a6d4d4f07d083c19f9aa90</anchor>
      <arglist>(const Iter &amp;iter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIter</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_const_iter.html</anchorfile>
      <anchor>ae6df10e74df74a3f58dfa98ee6e69b0a</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;SurfaceT, const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>r</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_const_iter.html</anchorfile>
      <anchor>ad73f3a32ef6c16e6d5732f2cca15070a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>g</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_const_iter.html</anchorfile>
      <anchor>a154ae04b896afe97047f6f7d32e7015c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>b</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_const_iter.html</anchorfile>
      <anchor>aa7dd65cb5b5556676e5e183e102dfeaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>a</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_const_iter.html</anchorfile>
      <anchor>ac8c395cc6732663b8999c006af503754</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>r</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_const_iter.html</anchorfile>
      <anchor>ac14f41ad742b6385e251d667eb8849c3</anchor>
      <arglist>(int32_t xOff, int32_t yOff) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>g</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_const_iter.html</anchorfile>
      <anchor>ad5b54ff0cf5504ee6d30b612632721b0</anchor>
      <arglist>(int32_t xOff, int32_t yOff) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>b</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_const_iter.html</anchorfile>
      <anchor>a91dd873e24bcdb4971219ac560812045</anchor>
      <arglist>(int32_t xOff, int32_t yOff) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>a</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_const_iter.html</anchorfile>
      <anchor>a3684ef0a0160434cd9a68b64c023b5d9</anchor>
      <arglist>(int32_t xOff, int32_t yOff) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>rClamped</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_const_iter.html</anchorfile>
      <anchor>ac13fce2589fc8c341c0cb70b9c10521e</anchor>
      <arglist>(int32_t xOff, int32_t yOff) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>gClamped</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_const_iter.html</anchorfile>
      <anchor>a9ab981455df7763699dc05bd52ffaacf</anchor>
      <arglist>(int32_t xOff, int32_t yOff) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>bClamped</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_const_iter.html</anchorfile>
      <anchor>ac1f9d0f78ee69866c108a78fc079cd4b</anchor>
      <arglist>(int32_t xOff, int32_t yOff) const </arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>aClamped</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_const_iter.html</anchorfile>
      <anchor>a8cbc2dd659fa0036d57a814a95593bb5</anchor>
      <arglist>(int32_t xOff, int32_t yOff) const </arglist>
    </member>
    <member kind="function">
      <type>const int32_t</type>
      <name>x</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_const_iter.html</anchorfile>
      <anchor>a497cf8a253c96ede28906ed5ef764da9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const int32_t</type>
      <name>y</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_const_iter.html</anchorfile>
      <anchor>a03dcbfa5b664aaca8e6eea390dfa1388</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getPos</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_const_iter.html</anchorfile>
      <anchor>ac658d626a6c058700677593054b5be6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pixel</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_const_iter.html</anchorfile>
      <anchor>a5f4f0ee92c7874c615b6e82a4127c1bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>line</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_const_iter.html</anchorfile>
      <anchor>aeb45cf9fb756d3fe627395cf613e8fb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getWidth</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_const_iter.html</anchorfile>
      <anchor>af45a4494247c5eded96eff2e388c2112</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getHeight</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_const_iter.html</anchorfile>
      <anchor>a5cffc5dbdb2ef079ec0bc506943acdfe</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::SurfaceT::Iter</name>
    <filename>classcinder_1_1_surface_t_1_1_iter.html</filename>
    <member kind="function">
      <type></type>
      <name>Iter</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_iter.html</anchorfile>
      <anchor>af3942113db45f5d8a3d3df370d7212a8</anchor>
      <arglist>(SurfaceT&lt; T &gt; &amp;SurfaceT, const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>r</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_iter.html</anchorfile>
      <anchor>aa78c1edb138d18eb0920c300c85f9b41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>g</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_iter.html</anchorfile>
      <anchor>a08226b88c883505472a2bcd63fc68b1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>b</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_iter.html</anchorfile>
      <anchor>aa3c488554ddb7ce58452dc6490e8b4c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>a</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_iter.html</anchorfile>
      <anchor>aa52cce049be78f2f0153ee0be2a661c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>r</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_iter.html</anchorfile>
      <anchor>ade5534d0787283c8d4a8467e08746b93</anchor>
      <arglist>(int32_t xOff, int32_t yOff) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>g</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_iter.html</anchorfile>
      <anchor>a4a4ba916bfbc0cfb26950ad2fcef99e1</anchor>
      <arglist>(int32_t xOff, int32_t yOff) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>b</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_iter.html</anchorfile>
      <anchor>a247fd8b8175da8e5d818d809014e4aa4</anchor>
      <arglist>(int32_t xOff, int32_t yOff) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>a</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_iter.html</anchorfile>
      <anchor>a5bbfaa815b9b9bea384923211b184eda</anchor>
      <arglist>(int32_t xOff, int32_t yOff) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>rClamped</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_iter.html</anchorfile>
      <anchor>a603b0b02f8681a62927ea6577d0a0a99</anchor>
      <arglist>(int32_t xOff, int32_t yOff) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>gClamped</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_iter.html</anchorfile>
      <anchor>aba9e3917ff840323554e3e0a0ed6dcc4</anchor>
      <arglist>(int32_t xOff, int32_t yOff) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>bClamped</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_iter.html</anchorfile>
      <anchor>aa6a29d197c74f7b6e28afec587ea817d</anchor>
      <arglist>(int32_t xOff, int32_t yOff) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>aClamped</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_iter.html</anchorfile>
      <anchor>acc408c1bc942cf78054a725221bffb2a</anchor>
      <arglist>(int32_t xOff, int32_t yOff) const </arglist>
    </member>
    <member kind="function">
      <type>const int32_t</type>
      <name>x</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_iter.html</anchorfile>
      <anchor>a4142a1f8abb3e812ba5444957815022b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const int32_t</type>
      <name>y</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_iter.html</anchorfile>
      <anchor>ae1a58e8d98ef63c4f5131844494d37f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getPos</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_iter.html</anchorfile>
      <anchor>a63f1caa17c4b474749f28762c2e6eb7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pixel</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_iter.html</anchorfile>
      <anchor>ab33eb94a8faf12609993486bb4b32f58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>line</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_iter.html</anchorfile>
      <anchor>a3bd56277eb0c8c7c099ee94e6bf24fb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getWidth</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_iter.html</anchorfile>
      <anchor>ac3ee2871d02a40ef4d69a57d459a9fa9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getHeight</name>
      <anchorfile>classcinder_1_1_surface_t_1_1_iter.html</anchorfile>
      <anchor>a41531ff71c5644f8165115b09f9f10db</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::SurfaceExc</name>
    <filename>classcinder_1_1_surface_exc.html</filename>
  </compound>
  <compound kind="class">
    <name>cinder::SurfaceConstraintsExc</name>
    <filename>classcinder_1_1_surface_constraints_exc.html</filename>
    <base>cinder::SurfaceExc</base>
  </compound>
  <compound kind="class">
    <name>cinder::SvgRendererGl</name>
    <filename>classcinder_1_1_svg_renderer_gl.html</filename>
    <base>cinder::svg::Renderer</base>
    <member kind="function">
      <type></type>
      <name>SvgRendererGl</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a640355b5bdfe52cb54fcc59d65719248</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SvgRendererGl</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a89e88f00e9c0ba120d1ffc58fb96e248</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushGroup</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>af1dc877134e78bf445c6c5835614d022</anchor>
      <arglist>(const svg::Group &amp;group, float opacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawPath</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a70d6127820045bfbe539bdc3b3c2051b</anchor>
      <arglist>(const svg::Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawPolygon</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>ad4dd2aa89fd32be4c2e726ecff363d8b</anchor>
      <arglist>(const svg::Polygon &amp;polygon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawPolyline</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a4b36b97aca20592516590ba8a8eac83d</anchor>
      <arglist>(const svg::Polyline &amp;polyline)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>aa56dd3bc1eca66c56995a0deb8183383</anchor>
      <arglist>(const svg::Line &amp;line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRect</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a61bc11452ac22331472e1704a2d9d805</anchor>
      <arglist>(const svg::Rect &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawCircle</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>ac3cdd122371aed7902bdc67ff398f93d</anchor>
      <arglist>(const svg::Circle &amp;circle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawEllipse</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a17740acad8def194edc42e91ea78d86b</anchor>
      <arglist>(const svg::Ellipse &amp;ellipse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawImage</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a81a3c5f749434b51e27a489aa066995a</anchor>
      <arglist>(const Surface8u &amp;surface, const Rectf &amp;drawRect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTextSpan</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a17490464dba0a3ac14bb3cb6db480cb2</anchor>
      <arglist>(const svg::TextSpan &amp;span)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popGroup</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a80491e6e29bc4b0f1e42ee95241cccc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushMatrix</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a9d58db6302c5853eb085b17471bf6ab5</anchor>
      <arglist>(const MatrixAffine2f &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popMatrix</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a151f8ec4099b9f1f27fee8848841bc6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushFill</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>aef5975470955c4e83e3826dbbfbfa3f5</anchor>
      <arglist>(const svg::Paint &amp;paint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popFill</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>ac12c2387e8746420f055c8b70b266185</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushStroke</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>aa310b9a439ed17e2341b34578b7a5628</anchor>
      <arglist>(const svg::Paint &amp;paint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popStroke</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a90faf8e76d8664233eaf545d6ecb0595</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushFillOpacity</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a61165073aa14b8a50c4e9c2e1a12aee2</anchor>
      <arglist>(float opacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popFillOpacity</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>ad3d7123d454ad7966cd6c591d15f2cc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushStrokeOpacity</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a403237d6a0d9eefa2cb6e7d8b07db1a6</anchor>
      <arglist>(float opacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popStrokeOpacity</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a56ef897b0f414a2e14ad6d16a9fdc30e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ColorA</type>
      <name>getCurFillColor</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a27cf5ef50331fc4fbb3539b5d1b99bf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ColorA</type>
      <name>getCurStrokeColor</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a0032d7edde8eea4ee4ff1d7dc91f7e08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushStrokeWidth</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a5366414972f9d82e14e545827a53e498</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popStrokeWidth</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a57e0de842fac43a8135f3284b3be8379</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushFillRule</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a37a913e9b13f423e1bd7caa2872eb024</anchor>
      <arglist>(svg::FillRule rule)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popFillRule</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>aaffb7fb860dbc862a380cb6995cd3753</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisitor</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>ad9ad44a8ba604d811b6fc37e00029177</anchor>
      <arglist>(const std::function&lt; bool(const Node &amp;, svg::Style *)&gt; &amp;visitor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawImage</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>aa260b4eaf8b18ea644dd2e1a27d03569</anchor>
      <arglist>(const svg::Image &amp;image)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pushStyle</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a79ed5d7a3a50f49de531629caf836731</anchor>
      <arglist>(const svg::Style &amp;style)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>popStyle</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a54ca0d810330571075f9b4807296d447</anchor>
      <arglist>(const svg::Style &amp;style)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pushFill</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a4d5a2bf55ccec681d4a6456d4e8c1bf9</anchor>
      <arglist>(const class Paint &amp;paint)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pushStroke</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a8c635188acc4bfaa7eba8fcc4a962bb2</anchor>
      <arglist>(const class Paint &amp;paint)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pushLineCap</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>af89d424da3b8530cd2042324a99ca5ee</anchor>
      <arglist>(LineCap lineCap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>popLineCap</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>af2e281f3d37b7fd43fadf636523471db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pushLineJoin</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a493d800e0aad36d02cebaacc17b31d9f</anchor>
      <arglist>(LineJoin lineJoin)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>popLineJoin</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a996dc19196f16e1a4c2f3f97f5522a54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pushTextPen</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>ade2eed8d1f84250a173720a14642ee31</anchor>
      <arglist>(const Vec2f &amp;penPos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>popTextPen</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a6251775a5eaeae22a22e02761971eff3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pushTextRotation</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a6001cc4eabcc00dd16430604c1e3ff87</anchor>
      <arglist>(float rotation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>popTextRotation</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a6354df994e31c583af95a54b6d05b996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>visit</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a97e0211621fff546c367e1e8334df653</anchor>
      <arglist>(const Node &amp;node, svg::Style *style) const </arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; svg::Paint &gt;</type>
      <name>mFillStack</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a4b592c70a91ead4cf7dbed1ea8805766</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; svg::Paint &gt;</type>
      <name>mStrokeStack</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a590a92446a8d8881b78efaff6d196022</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; float &gt;</type>
      <name>mFillOpacityStack</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a920ed7a0cdf7708980cdc85ebe7e1e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; float &gt;</type>
      <name>mStrokeOpacityStack</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a0d833ac27e90211efd3dd6b591ac9512</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; float &gt;</type>
      <name>mStrokeWidthStack</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a7a9c31b7c46b3422955ab39cb16d8a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; svg::FillRule &gt;</type>
      <name>mFillRuleStack</name>
      <anchorfile>classcinder_1_1_svg_renderer_gl.html</anchorfile>
      <anchor>a52ec321231c9338263f9e6108faf931b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; std::function&lt; bool(const Node &amp;, svg::Style *)&gt; &gt;</type>
      <name>mVisitor</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a06e87b45ddcda3780b9bd730943138ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::System</name>
    <filename>classcinder_1_1_system.html</filename>
    <class kind="class">cinder::System::NetworkAdapter</class>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasSse2</name>
      <anchorfile>classcinder_1_1_system.html</anchorfile>
      <anchor>a5e78bbd395c2d24ea366004d193b1b18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasSse3</name>
      <anchorfile>classcinder_1_1_system.html</anchorfile>
      <anchor>aced33463db81de63213c4459b4b4eb80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasSse4_1</name>
      <anchorfile>classcinder_1_1_system.html</anchorfile>
      <anchor>a5ea1c2c03827a718b0ce255a76faff71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasSse4_2</name>
      <anchorfile>classcinder_1_1_system.html</anchorfile>
      <anchor>ac1617ff0f98fd0c4bdd6eedd8cdc4db6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasX86_64</name>
      <anchorfile>classcinder_1_1_system.html</anchorfile>
      <anchor>ad90a0ebdb3d522d79197f01301381782</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumCpus</name>
      <anchorfile>classcinder_1_1_system.html</anchorfile>
      <anchor>aedb4bee48c6c81cc0240f82d50db7360</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumCores</name>
      <anchorfile>classcinder_1_1_system.html</anchorfile>
      <anchor>afee82415be2273b0637133f85c1abffd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getOsMajorVersion</name>
      <anchorfile>classcinder_1_1_system.html</anchorfile>
      <anchor>a725e50890c43a5f277ae2904f6561241</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getOsMinorVersion</name>
      <anchorfile>classcinder_1_1_system.html</anchorfile>
      <anchor>a0bf772af88596554a84bf02bb316131f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getOsBugFixVersion</name>
      <anchorfile>classcinder_1_1_system.html</anchorfile>
      <anchor>af083984e00131c8000a07246c5fc65ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasMultiTouch</name>
      <anchorfile>classcinder_1_1_system.html</anchorfile>
      <anchor>a97cc7353bf626683017077bc5b037df9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int32_t</type>
      <name>getMaxMultiTouchPoints</name>
      <anchorfile>classcinder_1_1_system.html</anchorfile>
      <anchor>a54b721205c9cd3d1852cc7f2bbf5d6bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isDeviceIphone</name>
      <anchorfile>classcinder_1_1_system.html</anchorfile>
      <anchor>a989b1b7bed994255fe54f7121934a705</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isDeviceIpad</name>
      <anchorfile>classcinder_1_1_system.html</anchorfile>
      <anchor>a0841e573e4c8812c5325e37c83827020</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; NetworkAdapter &gt;</type>
      <name>getNetworkAdapters</name>
      <anchorfile>classcinder_1_1_system.html</anchorfile>
      <anchor>a1ec509dbca6c1eae1b6ecfe7374824a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getIpAddress</name>
      <anchorfile>classcinder_1_1_system.html</anchorfile>
      <anchor>a61bdab441fa700c40be7781be8e18a05</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::System::NetworkAdapter</name>
    <filename>classcinder_1_1_system_1_1_network_adapter.html</filename>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classcinder_1_1_system_1_1_network_adapter.html</anchorfile>
      <anchor>a07858a1431bfeb42f50e2646e5b09b55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getIpAddress</name>
      <anchorfile>classcinder_1_1_system_1_1_network_adapter.html</anchorfile>
      <anchor>a7b4a2a7229603a90f3315d2d2acf1594</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NetworkAdapter</name>
      <anchorfile>classcinder_1_1_system_1_1_network_adapter.html</anchorfile>
      <anchor>a2ec0a97d5e8423fa997b4cab9721e991</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;ip)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::SystemExc</name>
    <filename>classcinder_1_1_system_exc.html</filename>
  </compound>
  <compound kind="class">
    <name>cinder::SystemExcFailedQuery</name>
    <filename>classcinder_1_1_system_exc_failed_query.html</filename>
    <base>cinder::SystemExc</base>
  </compound>
  <compound kind="class">
    <name>cinder::TextLayout</name>
    <filename>classcinder_1_1_text_layout.html</filename>
    <member kind="function">
      <type></type>
      <name>TextLayout</name>
      <anchorfile>classcinder_1_1_text_layout.html</anchorfile>
      <anchor>a3961190203ff01aea236c2e63b18fa46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classcinder_1_1_text_layout.html</anchorfile>
      <anchor>acda4f3f33de8f7cb82a3fe50199cb307</anchor>
      <arglist>(const Color &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classcinder_1_1_text_layout.html</anchorfile>
      <anchor>a4a6549afc78933810cff978fcd0db5cb</anchor>
      <arglist>(const ColorA &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLine</name>
      <anchorfile>classcinder_1_1_text_layout.html</anchorfile>
      <anchor>aa3b9cc6998ef01e2a058fe2e0530fec8</anchor>
      <arglist>(const std::string &amp;line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCenteredLine</name>
      <anchorfile>classcinder_1_1_text_layout.html</anchorfile>
      <anchor>ab883c9454e845f1afce85a405b74280c</anchor>
      <arglist>(const std::string &amp;line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRightLine</name>
      <anchorfile>classcinder_1_1_text_layout.html</anchorfile>
      <anchor>a3a6d87600d73133e4e1fd8e856fb3acb</anchor>
      <arglist>(const std::string &amp;line)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>append</name>
      <anchorfile>classcinder_1_1_text_layout.html</anchorfile>
      <anchor>ab94ea1bb9cd40041c2a57c5e445d8446</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classcinder_1_1_text_layout.html</anchorfile>
      <anchor>ac5162e9da685b9aca86290e8acbc4f2d</anchor>
      <arglist>(const Font &amp;font)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColor</name>
      <anchorfile>classcinder_1_1_text_layout.html</anchorfile>
      <anchor>a6eb0524a1e04d6f6e80532f7b1b02eeb</anchor>
      <arglist>(const Color &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColor</name>
      <anchorfile>classcinder_1_1_text_layout.html</anchorfile>
      <anchor>a1b731ddf0a7abc872d3e0f6a2c9bf05f</anchor>
      <arglist>(const ColorA &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLeadingOffset</name>
      <anchorfile>classcinder_1_1_text_layout.html</anchorfile>
      <anchor>a7e193d4e3a94f78d649e49047420d35f</anchor>
      <arglist>(float leadingOffset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorder</name>
      <anchorfile>classcinder_1_1_text_layout.html</anchorfile>
      <anchor>ab99207e23aaeb77484ec6340d8a519fc</anchor>
      <arglist>(int horizontal, int vertical)</arglist>
    </member>
    <member kind="function">
      <type>Surface</type>
      <name>render</name>
      <anchorfile>classcinder_1_1_text_layout.html</anchorfile>
      <anchor>a78814b545eafab777d43b3d2e82716fa</anchor>
      <arglist>(bool useAlpha=false, bool premultiplied=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::TextBox</name>
    <filename>classcinder_1_1_text_box.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Alignment</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>ae2e50d905d193ba8394dbcce508c3538</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LEFT</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>ae2e50d905d193ba8394dbcce508c3538a3227d57482aeeaa57c899845bc860bd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CENTER</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>ae2e50d905d193ba8394dbcce508c3538a70c3a072ef980f1b5c22deaa3f27f4f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RIGHT</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>ae2e50d905d193ba8394dbcce508c3538a55e2dac4853d683207577c8c72fbb99b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>GROW</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a37eeb426aa72084ef1410f5b7505f4a3ab856402c398fdea65cd1dda1e513a71f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum cinder::TextBox::Alignment</type>
      <name>Alignment</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>ad8f05eeff9cc23b119811606d0b6d1df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TextBox</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a1ec14865ec97061e321d03f0f9061d43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TextBox &amp;</type>
      <name>size</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a24043576a23391644b89a8fcaf96e6c7</anchor>
      <arglist>(Vec2i sz)</arglist>
    </member>
    <member kind="function">
      <type>TextBox &amp;</type>
      <name>size</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>ab287f227f8a1455e208a761710f0df20</anchor>
      <arglist>(int width, int height)</arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getSize</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a0c93b6e702c981d1b33bed046ccce25a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a3a9fe1f430c7c74625ea4fced5327591</anchor>
      <arglist>(Vec2i sz)</arglist>
    </member>
    <member kind="function">
      <type>TextBox &amp;</type>
      <name>text</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a07742a51a8c29dd8eaaa89caeba1dc53</anchor>
      <arglist>(const std::string &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getText</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>addabef2a61dea54579569f3a949687d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a933548caaa34070b59475df0e4e027af</anchor>
      <arglist>(const std::string &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendText</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a3cc5d4fab264602a8de4b5bf09443663</anchor>
      <arglist>(const std::string &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>TextBox &amp;</type>
      <name>font</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a736fc777fca91e8e6fbe73092d8183f2</anchor>
      <arglist>(const Font &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>const Font &amp;</type>
      <name>getFont</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a70ab8be385e1286f0ab5831e2a296de3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a86dcb42dfd2d095425d4ee73cbc4feda</anchor>
      <arglist>(const Font &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>TextBox &amp;</type>
      <name>alignment</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>aa2c1b6e1b9b7f6c27207cface63b67c6</anchor>
      <arglist>(Alignment align)</arglist>
    </member>
    <member kind="function">
      <type>Alignment</type>
      <name>getAlignment</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>ac086b9603db1483bfc3399387a2b1d4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlignment</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a0c39e801bfde2c730a6d3d48c7a196d8</anchor>
      <arglist>(Alignment align)</arglist>
    </member>
    <member kind="function">
      <type>TextBox &amp;</type>
      <name>color</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a3eed8bc8fa544fdab9cfcaa04c95aadc</anchor>
      <arglist>(ColorA color)</arglist>
    </member>
    <member kind="function">
      <type>ColorA</type>
      <name>getColor</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a214c5f7e4b43dcb99de493a3f8396def</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColor</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a7d3a849f5401783b4f7adf5cf7c27ad9</anchor>
      <arglist>(ColorA color)</arglist>
    </member>
    <member kind="function">
      <type>TextBox &amp;</type>
      <name>backgroundColor</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>ae6c6ad71eeb5b0e14cab77fbf153b8d2</anchor>
      <arglist>(ColorA bgColor)</arglist>
    </member>
    <member kind="function">
      <type>ColorA</type>
      <name>getBackgroundColor</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a808dc94914ddb7e638a1ed9ddf4de7f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColor</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a92bc54753b80709cde7bcfbf30003ad6</anchor>
      <arglist>(ColorA bgColor)</arglist>
    </member>
    <member kind="function">
      <type>TextBox &amp;</type>
      <name>premultiplied</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a0cef884f38dfce33c9bc1c878c05eced</anchor>
      <arglist>(bool premult=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPremultiplied</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>ad68ed4ac6eaf93b70f640a143c6f90f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPremultiplied</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a573eab513b0ded0b55c684cafa22248e</anchor>
      <arglist>(bool premult)</arglist>
    </member>
    <member kind="function">
      <type>TextBox &amp;</type>
      <name>ligate</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>af6e5577c03c6bd9976ad83e68f55a71c</anchor>
      <arglist>(bool ligateText=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLigate</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>add664d2d589b451260fac8e1f13f28cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLigate</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>aa8eabe9dec5f62b77e17c2de2f18c3bd</anchor>
      <arglist>(bool ligateText)</arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>measure</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>af2937ad4dd2663ba672b295af215ea5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::pair&lt; uint16_t, Vec2f &gt; &gt;</type>
      <name>measureGlyphs</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>aa2f9088d14c1eb6ddbbe57c17a81eb89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Surface</type>
      <name>render</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a55b36b2930d45f583d36159c88f41c4a</anchor>
      <arglist>(Vec2f offset=Vec2f::zero())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createLines</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>aef947958746cbb5bc2d45cb9ac3c3a6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>calculateLineBreaks</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a5c81ec34a9cc1983fd53305aabc956e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calculate</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>ad5f5f33652c33d5b4bf8ad7f37fa50c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Alignment</type>
      <name>mAlign</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>ac2e3f160bc882bf2fe38a881dc8a335d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec2i</type>
      <name>mSize</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a8f986530935782c713810bc9f45d2d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mText</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>ac411fa01c5e34af8417b356adf248aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Font</type>
      <name>mFont</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a518e76698e030d914593ac6eb93c5cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ColorA</type>
      <name>mColor</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a02852ec6dd5c554516a3d66579d50c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ColorA</type>
      <name>mBackgroundColor</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a9810a6d8ed56c1cda330ed73aee74ac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mPremultiplied</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a74e95d5091abaf7a5e32b9b714d38471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mLigate</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>accc787fc6deda3a83c0c3fa0e6935043</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mInvalid</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a1bee9def1b44978b2fc6d9735abcd4c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec2f</type>
      <name>mCalculatedSize</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>af01b9328d58e680f544210329d02bf36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::pair&lt; std::shared_ptr&lt; const __CTLine &gt;, Vec2f &gt; &gt;</type>
      <name>mLines</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>aa4a02816649db997241104d6039af5d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::wstring</type>
      <name>mWideText</name>
      <anchorfile>classcinder_1_1_text_box.html</anchorfile>
      <anchor>a72dc560200c667578a5d66723dd093dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::ThreadSetup</name>
    <filename>classcinder_1_1_thread_setup.html</filename>
    <member kind="function">
      <type></type>
      <name>ThreadSetup</name>
      <anchorfile>classcinder_1_1_thread_setup.html</anchorfile>
      <anchor>ae134954d24304c0e13e04feeca187230</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ThreadSetup</name>
      <anchorfile>classcinder_1_1_thread_setup.html</anchorfile>
      <anchor>ae59aef173991db5afe04ef9c13cc223a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cocoa::SafeNsAutoreleasePool</type>
      <name>mAutoreleasePool</name>
      <anchorfile>classcinder_1_1_thread_setup.html</anchorfile>
      <anchor>a5fdfec82e039e18664f54f4efe852955</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Timeline</name>
    <filename>classcinder_1_1_timeline.html</filename>
    <base>cinder::TimelineItem</base>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a54b409c790bc714cc64a49a4c158761f</anchor>
      <arglist>(float timestep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stepTo</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>ae1b647c0e66d86fca1636c89d47bdee7</anchor>
      <arglist>(float absoluteTime)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getCurrentTime</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a0498aec78e9076e6b5d80fbe86344425</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Tween&lt; T &gt;::Options</type>
      <name>apply</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a3b568b7bf8c154c63cdd3614f8bb9f2a</anchor>
      <arglist>(Anim&lt; T &gt; *target, T endValue, float duration, EaseFn easeFunction=easeNone, typename Tween&lt; T &gt;::LerpFn lerpFunction=&amp;tweenLerp&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>Tween&lt; T &gt;::Options</type>
      <name>apply</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a400d4bedec9273b7957a1e7ccfbf95ba</anchor>
      <arglist>(Anim&lt; T &gt; *target, T startValue, T endValue, float duration, EaseFn easeFunction=easeNone, typename Tween&lt; T &gt;::LerpFn lerpFunction=&amp;tweenLerp&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>Tween&lt; T &gt;::Options</type>
      <name>appendTo</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a207bc47ace7d9a9256a7b8a493c0c312</anchor>
      <arglist>(Anim&lt; T &gt; *target, T endValue, float duration, EaseFn easeFunction=easeNone, typename Tween&lt; T &gt;::LerpFn lerpFunction=&amp;tweenLerp&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>Tween&lt; T &gt;::Options</type>
      <name>appendTo</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a617683a0d5d576b455c25d5305f0f658</anchor>
      <arglist>(Anim&lt; T &gt; *target, T startValue, T endValue, float duration, EaseFn easeFunction=easeNone, typename Tween&lt; T &gt;::LerpFn lerpFunction=&amp;tweenLerp&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>Tween&lt; T &gt;::Options</type>
      <name>applyPtr</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a2e8bcfaae624cab24af7797a1d6e329b</anchor>
      <arglist>(T *target, T endValue, float duration, EaseFn easeFunction=easeNone, typename Tween&lt; T &gt;::LerpFn lerpFunction=&amp;tweenLerp&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>Tween&lt; T &gt;::Options</type>
      <name>applyPtr</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a8bb4c33448e6d825616bcc8bb9ea2914</anchor>
      <arglist>(T *target, T startValue, T endValue, float duration, EaseFn easeFunction=easeNone, typename Tween&lt; T &gt;::LerpFn lerpFunction=&amp;tweenLerp&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>Tween&lt; T &gt;::Options</type>
      <name>appendToPtr</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a3696a66b18a0c33f48322e884fb47e5f</anchor>
      <arglist>(T *target, T endValue, float duration, EaseFn easeFunction=easeNone, typename Tween&lt; T &gt;::LerpFn lerpFunction=&amp;tweenLerp&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>Tween&lt; T &gt;::Options</type>
      <name>appendToPtr</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>ab4f444a8e65f71e4b1a2cde61a559ff8</anchor>
      <arglist>(T *target, T startValue, T endValue, float duration, EaseFn easeFunction=easeNone, typename Tween&lt; T &gt;::LerpFn lerpFunction=&amp;tweenLerp&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>CueRef</type>
      <name>add</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a8ac4915596b1811445708cb1cebbf555</anchor>
      <arglist>(const std::function&lt; void()&gt; &amp;action, float atTime)</arglist>
    </member>
    <member kind="function">
      <type>FnTweenRef&lt; T &gt;</type>
      <name>applyFn</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>abdbcdda324821f03c91e7d2fba4ac058</anchor>
      <arglist>(const std::function&lt; void(T)&gt; &amp;fn, T startValue, T endValue, float duration, const EaseFn &amp;easeFunction=easeNone, const typename Tween&lt; T &gt;::LerpFn &amp;lerpFunction=&amp;tweenLerp&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendPingPong</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a7b3cce133ffc581feb79ebd102703dca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a5e56f1ee14d89b664fc91f5bed8c8c0a</anchor>
      <arglist>(TimelineItemRef item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a14ad6452b02e6653f83ed6ded845bf4d</anchor>
      <arglist>(TimelineItemRef item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a6d31b73fd8262a2a1b6fbbfb3cf22087</anchor>
      <arglist>(TimelineItemRef item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a909a79e70084b10d8e14cc27c812e327</anchor>
      <arglist>(TimelineItemRef item, float atTime)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumItems</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>aa19953adb160d5b7f5f964d54e70b21b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>acda708785957e9921c124674b3982b70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TimelineItemRef</type>
      <name>find</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a9a91d9b511cda5184bcb6829a591ff11</anchor>
      <arglist>(void *target) const </arglist>
    </member>
    <member kind="function">
      <type>TimelineItemRef</type>
      <name>findLast</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>ab485f5de8caddc4adbb962ad5ffdfeee</anchor>
      <arglist>(void *target) const </arglist>
    </member>
    <member kind="function">
      <type>TimelineItemRef</type>
      <name>findLastEnd</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>ab034b0e4de305bd20c288cf032879a66</anchor>
      <arglist>(void *target) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>findEndTimeOf</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a739f9f92a07aecf6afa0c88ae0a55983</anchor>
      <arglist>(void *target, bool *found=NULL) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a5813d454fd22a5cdfe75fc48141908be</anchor>
      <arglist>(TimelineItemRef item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTarget</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a199cb8b04091ba3ede5547011e11d8a5</anchor>
      <arglist>(void *target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cloneAndReplaceTarget</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a8fb8b86bf62af94f07c8b6942cd7d454</anchor>
      <arglist>(void *target, void *replacementTarget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replaceTarget</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a76c9900e3995e34e745e26b8f4810635</anchor>
      <arglist>(void *target, void *replacementTarget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a0e8d15e38f02cc98ef54342a98dd0a98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>ac024787e7f1355826bd8fa53a42fef14</anchor>
      <arglist>(bool unsetStarted=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultAutoRemove</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a2b127dab40c706407873fb83e2e2ab9c</anchor>
      <arglist>(bool defaultAutoRemove)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDefaultAutoRemove</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>ae746eeb4cef38df9cab5fca8451011a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>itemTimeChanged</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>acec05f182da1aa726615e59f41dc6807</anchor>
      <arglist>(TimelineItem *item)</arglist>
    </member>
    <member kind="function">
      <type>TimelineRef</type>
      <name>thisRef</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a07dcc96cd62fd478125878472a8634e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getTarget</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>aaef55f4faca24aad1b53e7e984a7997e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getStartTime</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a0071d3cb5148dac9cf778ca261e35a41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartTime</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a9e8696542dd9f1722a6cdddad7d879f4</anchor>
      <arglist>(float newTime)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDuration</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>aececeaf33efccc4f647bf0cc51b8d19e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDuration</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>afab4eb9635ea253c73f0c75443ad65f6</anchor>
      <arglist>(float newDuration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLoop</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a732030609c0632d0c5349a59ab56cf91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLoop</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a44f60f1fc38bc0c9060504b4780a09c5</anchor>
      <arglist>(bool doLoop=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPingPong</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a6d39842bad3f5087b0593c545178949b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPingPong</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a99ac70175f9976c069c81bada18fe431</anchor>
      <arglist>(bool pingPong=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getInfinite</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>ad7808da58ec5034b62316e9d53ced099</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInfinite</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a31d5e7719c14ac05193b67f8a09983f9</anchor>
      <arglist>(bool infinite=true)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getEndTime</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a37b287f746dbdfd96f924da4768a30ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>class Timeline *</type>
      <name>getParent</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a60576930b78d14f603d8c17954a44205</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeSelf</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>ac6e79e634a4d0f8e7c72a545af33ab69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStarted</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>aa0f0ed209199cdc06c968ea0ce9439bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isComplete</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a631bc69a8308d7eef0fbb2b1b1fc3622</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAutoRemove</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a0b318db27897cb3af7995df9a18451af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAutoRemove</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a1a5608ebe95bde12ce62327cfed20d6a</anchor>
      <arglist>(bool autoRemove=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>updateAtLoopStart</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a5660be16a0c68ed87866dc04ccee77cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stepTo</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a3186c49aeed1a9c2b61edf40659a11a2</anchor>
      <arglist>(float time, bool reverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TimelineRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a17b02e50640188530706e06108e2974e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Timeline</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a99372f198cd3783571c4037384ac6521</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>reverse</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a638861b4a1a2a6e81adc9608605716e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TimelineItemRef</type>
      <name>cloneReverse</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>ac18240f53176612e605966bb61009f4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TimelineItemRef</type>
      <name>clone</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>af9cf5fd614248af751a185e9115d2b02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a457cc72e37b201e30d1ddfbc4191eedb</anchor>
      <arglist>(bool reverse)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>loopStart</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a33a016327b6935d6f4128742f1f76a51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a332437648962e8eb4c16f996f55801bb</anchor>
      <arglist>(float absTime)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>af3a592a866327cf338379178753dd44e</anchor>
      <arglist>(bool reverse)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>eraseMarked</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a742fd72e335a6d5885a59592fac2c11a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual float</type>
      <name>calcDuration</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a2b90ab4bdfc6a5bf17ebcdbd006fd9ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDurationDirty</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>aa457aca21ac941259b4d8829455777bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateDuration</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>af258155c49a99f7059c88abbcba59a73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>float</type>
      <name>loopTime</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a359ba469227fe9e5f7648b4bdd305c0f</anchor>
      <arglist>(float absTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setTarget</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a3cf1121057941c086b9c9ec6e118687f</anchor>
      <arglist>(void *target)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mDefaultAutoRemove</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a439275d2115172391b0f2e9d2883aa34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mCurrentTime</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>a8d22efa285188439f9b47cee16322eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::multimap&lt; void *, TimelineItemRef &gt;</type>
      <name>mItems</name>
      <anchorfile>classcinder_1_1_timeline.html</anchorfile>
      <anchor>aa694766508875bb5dcb5153192111da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>class Timeline *</type>
      <name>mParent</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>aeab1b06c95d04c66a4048c33cc0fd85d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>mTarget</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>ad2d3d612fe2020d9e1b99a0695369c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mStartTime</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>acc081e26fa854f444a436776aa68d914</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mHasStarted</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>abb11e213dc9fd2bb913e9b35f128e8f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mHasReverseStarted</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a6ac9f09e60d68edcdd92e40557b5fd35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mComplete</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a58671cdaee8a9117033981713c5f5ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mReverseComplete</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>ae143eed3c1c3dc697fb0c1d44e66ab8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mMarkedForRemoval</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a0e465e10f20678fb605dd4295a643af3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mInfinite</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>aefcd2bab7f2d15d691ae00ae2c076fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mLoop</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a5744417e5c254e8d23588454db8b28c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mPingPong</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a83abc7c1af3fb9aa2eecfa3164897597</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mUseAbsoluteTime</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a1d9d1f26202c23a44c88dca0dabccb3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mAutoRemove</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>aa4cba86b2432324d6d09a19344dc3390</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mLastLoopIteration</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a4535783c07d98450a81842d1166e54f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Cue</name>
    <filename>classcinder_1_1_cue.html</filename>
    <base>cinder::TimelineItem</base>
    <member kind="function">
      <type></type>
      <name>Cue</name>
      <anchorfile>classcinder_1_1_cue.html</anchorfile>
      <anchor>a477645aeacdc9eb40dc85a7c6e1e97f1</anchor>
      <arglist>(const std::function&lt; void()&gt; &amp;fn, float atTime=0)</arglist>
    </member>
    <member kind="function">
      <type>CueRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1_cue.html</anchorfile>
      <anchor>a330003fb20a4456ea2a698562e4f6f3f</anchor>
      <arglist>(const std::function&lt; void()&gt; &amp;fn, float atTime=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFn</name>
      <anchorfile>classcinder_1_1_cue.html</anchorfile>
      <anchor>a4394c771a98b357061f8065d94632161</anchor>
      <arglist>(const std::function&lt; void()&gt; &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>std::function&lt; void()&gt;</type>
      <name>getFn</name>
      <anchorfile>classcinder_1_1_cue.html</anchorfile>
      <anchor>aad53e9e77bdab05d222af29d7e220384</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a773ad57258347bf64a658c7785c2a527</anchor>
      <arglist>(bool unsetStarted=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>calcDuration</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>af0e91d3e901e25d0d9fc7426f529f3b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TimelineItemRef</type>
      <name>thisRef</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a171cac8627ddde29319a1c0726f27586</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>reverse</name>
      <anchorfile>classcinder_1_1_cue.html</anchorfile>
      <anchor>aa4606802e6b78049ee0f339f1774bde3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TimelineItemRef</type>
      <name>cloneReverse</name>
      <anchorfile>classcinder_1_1_cue.html</anchorfile>
      <anchor>a1db91a631140ca3ac7a56b66dde7d8d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TimelineItemRef</type>
      <name>clone</name>
      <anchorfile>classcinder_1_1_cue.html</anchorfile>
      <anchor>a2994c329a093b59658e7d070c9b5b6c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classcinder_1_1_cue.html</anchorfile>
      <anchor>af4a9214c846cfeb9491673c003f4d7c4</anchor>
      <arglist>(bool reverse)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>loopStart</name>
      <anchorfile>classcinder_1_1_cue.html</anchorfile>
      <anchor>a8734d447ae5d604e0ffb76309d79547e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classcinder_1_1_cue.html</anchorfile>
      <anchor>a36bad2fe33e9fbc10c0149644829270b</anchor>
      <arglist>(float relativeTime)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchorfile>classcinder_1_1_cue.html</anchorfile>
      <anchor>a1866c549c0630371ea1c1a452990125e</anchor>
      <arglist>(bool reverse)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>updateAtLoopStart</name>
      <anchorfile>classcinder_1_1_cue.html</anchorfile>
      <anchor>ad86b88f556fc0739de5e88b8bb7badea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::function&lt; void()&gt;</type>
      <name>mFunction</name>
      <anchorfile>classcinder_1_1_cue.html</anchorfile>
      <anchor>a135e5ceb12a37c2e3357f5446c6b8601</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::TimelineItem</name>
    <filename>classcinder_1_1_timeline_item.html</filename>
    <member kind="function">
      <type></type>
      <name>TimelineItem</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a5ebe358240b7d517a54052cfb086db2a</anchor>
      <arglist>(class Timeline *parent=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TimelineItem</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a8fe69461dc893d577f6eb378d6f51e0e</anchor>
      <arglist>(class Timeline *parent, void *target, float startTime, float duration)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TimelineItem</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a97842a208b23c77055ae6921f5e6d333</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>af068b3c5ce705bd843b7e267149a08d2</anchor>
      <arglist>(bool reverse)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loopStart</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a001c45f6f4522f00c4a37f70a13c5992</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a583ecac533a4ae0a87d8b052b2208b5c</anchor>
      <arglist>(float relativeTime)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>complete</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>ad73bd8472bb5882a760eb949acd7ee72</anchor>
      <arglist>(bool reverse)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>reverse</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a3d51d24b3412e55c439cb17793d32483</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TimelineItemRef</type>
      <name>clone</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a05446924b0c7c1df1ebbd1ac90b066eb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TimelineItemRef</type>
      <name>cloneReverse</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>a921139a2421652fa0ef6c4f8cad7b2f3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Timeline</name>
      <anchorfile>classcinder_1_1_timeline_item.html</anchorfile>
      <anchor>ad55a3c161fedb629b674fd20d7235628</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Timer</name>
    <filename>classcinder_1_1_timer.html</filename>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>classcinder_1_1_timer.html</anchorfile>
      <anchor>a72fa95c74f0fae764294dae102d74f06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>classcinder_1_1_timer.html</anchorfile>
      <anchor>ae8a00c0c4b163c45164aa4a2f45e41c2</anchor>
      <arglist>(bool startOnConstruction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classcinder_1_1_timer.html</anchorfile>
      <anchor>a930d646ab81d48b99e11e1a10eb20538</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSeconds</name>
      <anchorfile>classcinder_1_1_timer.html</anchorfile>
      <anchor>a001297def71534227cc66b4916ecd6e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classcinder_1_1_timer.html</anchorfile>
      <anchor>a5c7204c5855f81795e2a59b8c21a0c40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStopped</name>
      <anchorfile>classcinder_1_1_timer.html</anchorfile>
      <anchor>aa77a5e2303fca9d9dcc48ac35ab2cdfa</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Triangulator</name>
    <filename>classcinder_1_1_triangulator.html</filename>
    <class kind="class">cinder::Triangulator::Exception</class>
    <member kind="enumeration">
      <type></type>
      <name>Winding</name>
      <anchorfile>classcinder_1_1_triangulator.html</anchorfile>
      <anchor>a0df152c9670a66c5cd0821727cfb1787</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WINDING_ODD</name>
      <anchorfile>classcinder_1_1_triangulator.html</anchorfile>
      <anchor>a0df152c9670a66c5cd0821727cfb1787a549cd5e1da472b9d7bf1380fe4fc51eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WINDING_NONZERO</name>
      <anchorfile>classcinder_1_1_triangulator.html</anchorfile>
      <anchor>a0df152c9670a66c5cd0821727cfb1787a5d6d3a9a38c342740ced53da9b117e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WINDING_POSITIVE</name>
      <anchorfile>classcinder_1_1_triangulator.html</anchorfile>
      <anchor>a0df152c9670a66c5cd0821727cfb1787af608a499f3f1b5af74c65c0dd1ca78b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WINDING_NEGATIVE</name>
      <anchorfile>classcinder_1_1_triangulator.html</anchorfile>
      <anchor>a0df152c9670a66c5cd0821727cfb1787a60094eac4c0bda9f0a49e286caaf6949</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WINDING_ABS_GEQ_TWO</name>
      <anchorfile>classcinder_1_1_triangulator.html</anchorfile>
      <anchor>a0df152c9670a66c5cd0821727cfb1787aca3f8706ea39098d2c52b66d92c31851</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum cinder::Triangulator::Winding</type>
      <name>Winding</name>
      <anchorfile>classcinder_1_1_triangulator.html</anchorfile>
      <anchor>a93f13e761021fb587028b19ce5b6078a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Triangulator</name>
      <anchorfile>classcinder_1_1_triangulator.html</anchorfile>
      <anchor>a9b6e62ac888dc8280069f969f8d165c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Triangulator</name>
      <anchorfile>classcinder_1_1_triangulator.html</anchorfile>
      <anchor>a72770b6a130de87a12c25e2a1cea79ea</anchor>
      <arglist>(const Path2d &amp;path, float approximationScale=1.0f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Triangulator</name>
      <anchorfile>classcinder_1_1_triangulator.html</anchorfile>
      <anchor>a9ec7172cfc65c05846962d15e8f1ba57</anchor>
      <arglist>(const Shape2d &amp;shape, float approximationScale=1.0f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Triangulator</name>
      <anchorfile>classcinder_1_1_triangulator.html</anchorfile>
      <anchor>a482aa061e72315dd42a93d02ff6cef9d</anchor>
      <arglist>(const PolyLine2f &amp;polyLine)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addShape</name>
      <anchorfile>classcinder_1_1_triangulator.html</anchorfile>
      <anchor>a18221b14934a1070560f1ffa859b3cc6</anchor>
      <arglist>(const Shape2d &amp;path, float approximationScale=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPath</name>
      <anchorfile>classcinder_1_1_triangulator.html</anchorfile>
      <anchor>a1b01296f5bbb50b618030a7929ab7a22</anchor>
      <arglist>(const Path2d &amp;path, float approximationScale=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPolyLine</name>
      <anchorfile>classcinder_1_1_triangulator.html</anchorfile>
      <anchor>a0a38193352ee80811bc03aa9f25c3199</anchor>
      <arglist>(const PolyLine2f &amp;polyLine)</arglist>
    </member>
    <member kind="function">
      <type>TriMesh2d</type>
      <name>calcMesh</name>
      <anchorfile>classcinder_1_1_triangulator.html</anchorfile>
      <anchor>a347b0cf91ff88cbe90c57250a542bf92</anchor>
      <arglist>(Winding winding=WINDING_ODD)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>allocate</name>
      <anchorfile>classcinder_1_1_triangulator.html</anchorfile>
      <anchor>ad373fd4abd3decc61ff025e6b5c61404</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mAllocated</name>
      <anchorfile>classcinder_1_1_triangulator.html</anchorfile>
      <anchor>ade685cf0a2e32fa5979b05621ca47597</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; TESStesselator &gt;</type>
      <name>mTess</name>
      <anchorfile>classcinder_1_1_triangulator.html</anchorfile>
      <anchor>a74b6663b84a046aebdd598f94a2dec80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Triangulator::Exception</name>
    <filename>classcinder_1_1_triangulator_1_1_exception.html</filename>
    <base>cinder::Exception</base>
  </compound>
  <compound kind="class">
    <name>cinder::TriMesh</name>
    <filename>classcinder_1_1_tri_mesh.html</filename>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a82cb1bd8d244773fb368123bc11e9898</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNormals</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a43103cc4153e69520f3e3de8afbd3e2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasColorsRGB</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a3a0817c919dd6758b7ba172da554abf6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasColorsRGBA</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a92982b8b72c2d2ec550ba4e30bb69db5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTexCoords</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>aa34dc69a4d4c8ddea92e57a9d68c4024</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendVertex</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>aa2fe50a39bb2e4ca96555e923b05b8a9</anchor>
      <arglist>(const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendVertices</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>ae751cb08f1f88b24424eb74ace40c939</anchor>
      <arglist>(const Vec3f *verts, size_t num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendVertices</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>af989575b1055c9a3fc12d7531370e0d5</anchor>
      <arglist>(const Vec4d *verts, size_t num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendNormal</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>ade63988bf9af345437a6c6d29df667ae</anchor>
      <arglist>(const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendNormals</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>ade8c979025d0210e37aa13ccc56abb99</anchor>
      <arglist>(const Vec3f *normals, size_t num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendNormals</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>ac87034bea9c6bc26555cc1af06d0d90c</anchor>
      <arglist>(const Vec4d *normals, size_t num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendColorRgb</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>aa5baaa5b9081d3ee9e4f531725f7e8bb</anchor>
      <arglist>(const Color &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendColorRgba</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a9c73b9bb0e7f915f4fdf990f1c4f4b12</anchor>
      <arglist>(const ColorA &amp;rgba)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendTexCoord</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>aa0fb9fb2dfa93eedbe1223727949bb9c</anchor>
      <arglist>(const Vec2f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendColorsRgb</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a0686e843c35a2c66bd0783dcba8f84ef</anchor>
      <arglist>(const Color *rgbs, size_t num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendColorsRgba</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a8da3fb6dbdda2ecc63a19cbfff429d8a</anchor>
      <arglist>(const ColorA *rgbas, size_t num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendTexCoords</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>afdbcc56f88a61b8a3ebc937fcdc29f0d</anchor>
      <arglist>(const Vec2f *texcoords, size_t num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendTriangle</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a78496861f1f384fcf45a49a3196903cb</anchor>
      <arglist>(size_t v0, size_t v1, size_t v2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendIndices</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a37755dd269be9a38bb8395e39faef3ed</anchor>
      <arglist>(const uint32_t *indices, size_t num)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumIndices</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a177db39631b60af5cdec16007726d94b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumTriangles</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a89a27a914859ca6f1cc44f0be95c872d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumVertices</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a1271c55f3695b6b9946c13ec402a397c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTriangleVertices</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>ad11d1720a40a902dc91c1eb9c8b39d16</anchor>
      <arglist>(size_t idx, Vec3f *a, Vec3f *b, Vec3f *c) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Vec3f &gt; &amp;</type>
      <name>getVertices</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>ac9ebf17a891e6ecd4a07a566d8688501</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Vec3f &gt; &amp;</type>
      <name>getVertices</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>aac8eec718718541920bd4da3bdb09ea7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Vec3f &gt; &amp;</type>
      <name>getNormals</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>aa3acecc48ff46e23ffa642d38206fbe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Vec3f &gt; &amp;</type>
      <name>getNormals</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a527460c23d86ca94b15d99773e89575b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Color &gt; &amp;</type>
      <name>getColorsRGB</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a1b50939c6674a6c5a9b54e25c0026895</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Color &gt; &amp;</type>
      <name>getColorsRGB</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a4e610228c44e261d475b439cefda3e6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ColorA &gt; &amp;</type>
      <name>getColorsRGBA</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a5222a6bdf93def7a8a86c300fd4fd3a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ColorA &gt; &amp;</type>
      <name>getColorsRGBA</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a8aff99a9bfaa0c90b10319c2b15ebae5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Vec2f &gt; &amp;</type>
      <name>getTexCoords</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a78a14191f05b7161b5f5d19a2dc9679b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Vec2f &gt; &amp;</type>
      <name>getTexCoords</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>ab42957cea5381ba67fa0349102d58e19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; uint32_t &gt; &amp;</type>
      <name>getIndices</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a780ebef456bcd675f0c4ef945c2574ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; uint32_t &gt; &amp;</type>
      <name>getIndices</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a81f22431807d96f4e0b5e87786459f30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AxisAlignedBox3f</type>
      <name>calcBoundingBox</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a9a56595a51170461432d1c5f601c7fff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AxisAlignedBox3f</type>
      <name>calcBoundingBox</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a92e0cfbe278cefb328ae5effadb8797b</anchor>
      <arglist>(const Matrix44f &amp;transform) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>ae01afbc299f73ce31a332ae6ef750976</anchor>
      <arglist>(DataSourceRef in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>acb6978b8b6632fecf89c856120444251</anchor>
      <arglist>(DataTargetRef out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recalculateNormals</name>
      <anchorfile>classcinder_1_1_tri_mesh.html</anchorfile>
      <anchor>a3a6a5075a35bfb6f745a1dac6d4e3c6b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::TriMesh2d</name>
    <filename>classcinder_1_1_tri_mesh2d.html</filename>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>a335f5b350b6816ca3d6a5cf98acc9181</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasColorsRgb</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>aa2cbdd65b356e57243e48618a2e9db60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasColorsRgba</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>aaefb21764b1df5209fa8b23408e56aa4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTexCoords</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>ac2c0ebdec2f004ec941f6450a357fea4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendVertex</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>a988aadce3901b94920fd733eed6b3bcc</anchor>
      <arglist>(const Vec2f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendVertices</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>a963930df9a5584398abaa8b9c44a81c9</anchor>
      <arglist>(const Vec2f *verts, size_t num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendColorRgb</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>af6eff33d193f2efc7b706dc3e0803809</anchor>
      <arglist>(const Color &amp;rgb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendColorRgba</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>ad1786569835ef4720896190fae025224</anchor>
      <arglist>(const ColorA &amp;rgba)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendTexCoord</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>af5a54f15b1e0677001736fc8e5dadac0</anchor>
      <arglist>(const Vec2f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendColorsRgb</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>a35b19041be30025ae7484dc396cef4d1</anchor>
      <arglist>(const Color *rgbs, size_t num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendColorsRgba</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>ad63cbe8a61ba6d02b07000b8628b9222</anchor>
      <arglist>(const ColorA *rgbas, size_t num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendTexCoords</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>a9f773e606c95dfcdc79372b0a2731e56</anchor>
      <arglist>(const Vec2f *texcoords, size_t num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendTriangle</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>a7206db7c8c849daf4d13442ede942e17</anchor>
      <arglist>(size_t v0, size_t v1, size_t v2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendIndices</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>a170cd5413fec9e539ecd124c6e9e0b04</anchor>
      <arglist>(const uint32_t *indices, size_t num)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumIndices</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>ad4691c27172ae9309edc47e5bf8a061f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumTriangles</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>a3a3be6a9d7f0e1fac214fb0f056c3f82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumVertices</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>ae2c1db50e0e34a284f1135c7ab1ab213</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTriangleVertices</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>a93d2d66c31ba89bec25cf40a10f25f78</anchor>
      <arglist>(size_t idx, Vec2f *a, Vec2f *b, Vec2f *c) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Vec2f &gt; &amp;</type>
      <name>getVertices</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>a289e09b7a131aa4e1bb4ba9b93d6e5f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Vec2f &gt; &amp;</type>
      <name>getVertices</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>a9e750dbea8ba0dde10b6d8a6265dfb8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Color &gt; &amp;</type>
      <name>getColorsRGB</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>ae096b6870d04c71e465477759ae8969b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Color &gt; &amp;</type>
      <name>getColorsRGB</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>a38d7d8991780344dace98253be348a03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ColorA &gt; &amp;</type>
      <name>getColorsRGBA</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>acaa5e2bfbfe26ca00ce140e842df6879</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ColorA &gt; &amp;</type>
      <name>getColorsRGBA</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>a5f453501670874bdf42170620a5dfd52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Vec2f &gt; &amp;</type>
      <name>getTexCoords</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>a937944efdae2d9fec96f19486193df3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Vec2f &gt; &amp;</type>
      <name>getTexCoords</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>a9420b69ba7998c4133d1e90987158625</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; size_t &gt; &amp;</type>
      <name>getIndices</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>aab74bfe7c3873e77e4eac58423b554f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; size_t &gt; &amp;</type>
      <name>getIndices</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>aa4b5082c921d180543ab8a1624d8b5c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rectf</type>
      <name>calcBoundingBox</name>
      <anchorfile>classcinder_1_1_tri_mesh2d.html</anchorfile>
      <anchor>a266365f3fefd3371438acc45f761838d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Tween</name>
    <filename>classcinder_1_1_tween.html</filename>
    <templarg>T</templarg>
    <base>cinder::TweenBase</base>
    <class kind="class">cinder::Tween::Options</class>
    <member kind="typedef">
      <type>std::function&lt; T(const T &amp;, const T &amp;, float)&gt;</type>
      <name>LerpFn</name>
      <anchorfile>classcinder_1_1_tween.html</anchorfile>
      <anchor>a968fe96107a7e73c43d8ed20a1361ce9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void()&gt;</type>
      <name>StartFn</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>a145e4ac46a4b9f7d261e958cddd6bc9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void()&gt;</type>
      <name>FinishFn</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>af0854f04380690fa9390fbb61f981e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void()&gt;</type>
      <name>UpdateFn</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>aff42212f397c81ba3ae31c5f89200d66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tween</name>
      <anchorfile>classcinder_1_1_tween.html</anchorfile>
      <anchor>a631ba0165147fc455c68c448d58722b3</anchor>
      <arglist>(T *target, T endValue, float startTime, float duration, EaseFn easeFunction=easeNone, LerpFn lerpFunction=&amp;tweenLerp&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tween</name>
      <anchorfile>classcinder_1_1_tween.html</anchorfile>
      <anchor>ab78a79680206dd40a5e27104b025eaa3</anchor>
      <arglist>(T *target, T startValue, T endValue, float startTime, float duration, EaseFn easeFunction=easeNone, LerpFn lerpFunction=&amp;tweenLerp&lt; T &gt;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Tween</name>
      <anchorfile>classcinder_1_1_tween.html</anchorfile>
      <anchor>a02b3161018781cfebe3fbfe9f4b43509</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getStartValue</name>
      <anchorfile>classcinder_1_1_tween.html</anchorfile>
      <anchor>a75be6ff49c237cce8a9fd92e560cc606</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getEndValue</name>
      <anchorfile>classcinder_1_1_tween.html</anchorfile>
      <anchor>aeb1955b431bb0b95d407afcec898b12a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getTarget</name>
      <anchorfile>classcinder_1_1_tween.html</anchorfile>
      <anchor>ad479a8748786bff7bb4db896d6a85f20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCopyStartValue</name>
      <anchorfile>classcinder_1_1_tween.html</anchorfile>
      <anchor>ae7c1478153aa046112c2203f176d7170</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLerpFn</name>
      <anchorfile>classcinder_1_1_tween.html</anchorfile>
      <anchor>ab9c888644a25750f949489c9e6fce770</anchor>
      <arglist>(const LerpFn &amp;lerpFn)</arglist>
    </member>
    <member kind="function">
      <type>TweenRef&lt; T &gt;</type>
      <name>getThisRef</name>
      <anchorfile>classcinder_1_1_tween.html</anchorfile>
      <anchor>a3bb4928056bae692960d31be23b6bcf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEaseFn</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>a765dc977aeed3c06381bb245f71d2738</anchor>
      <arglist>(EaseFn easeFunction)</arglist>
    </member>
    <member kind="function">
      <type>EaseFn</type>
      <name>getEaseFn</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>ac6547488b0725bd55bd98c63a4172fc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartFn</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>a88aa796d46e62c4890098ca836fe5a42</anchor>
      <arglist>(StartFn startFunction)</arglist>
    </member>
    <member kind="function">
      <type>StartFn</type>
      <name>getStartFn</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>a0b64a7120861e08826c7d270160fe1a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReverseStartFn</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>a9250b8f246e17c2f62d049594477a031</anchor>
      <arglist>(StartFn reverseStartFunction)</arglist>
    </member>
    <member kind="function">
      <type>StartFn</type>
      <name>getReverseStartFn</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>a76f3be0850c4c74b585bce9b0ce31f2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpdateFn</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>acc5a1ed62d0b94bf7bc40187a6f198b7</anchor>
      <arglist>(UpdateFn updateFunction)</arglist>
    </member>
    <member kind="function">
      <type>UpdateFn</type>
      <name>getUpdateFn</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>aa8ee258ffb5cf39948362c130e7f2104</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFinishFn</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>aa51b83b58090b0aaeee7b08878c2cfeb</anchor>
      <arglist>(FinishFn finishFn)</arglist>
    </member>
    <member kind="function">
      <type>FinishFn</type>
      <name>getFinishFn</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>ad5f3f50684513a5face72135653dd9b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReverseFinishFn</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>afdf7ac4a53084145804623170b16fa26</anchor>
      <arglist>(FinishFn reverseFinishFn)</arglist>
    </member>
    <member kind="function">
      <type>FinishFn</type>
      <name>getReverseFinishFn</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>a55f713f634a2db9cdf69d5307473d6a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>reverse</name>
      <anchorfile>classcinder_1_1_tween.html</anchorfile>
      <anchor>ac07bd6d1121486e83551a55b390ab775</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TimelineItemRef</type>
      <name>clone</name>
      <anchorfile>classcinder_1_1_tween.html</anchorfile>
      <anchor>abbfe5b06c0f46eba2abf4afb9286e9f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TimelineItemRef</type>
      <name>cloneReverse</name>
      <anchorfile>classcinder_1_1_tween.html</anchorfile>
      <anchor>a8ca54f58c87ff7b54f658f369c41f6d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>start</name>
      <anchorfile>classcinder_1_1_tween.html</anchorfile>
      <anchor>a6a93866dd20eee4ab6c9a16557bee527</anchor>
      <arglist>(bool reverse)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classcinder_1_1_tween.html</anchorfile>
      <anchor>a4a30779adff4ee9e192646969d84c37b</anchor>
      <arglist>(float relativeTime)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>a7c3045674830fe92f75ef05e508fffe2</anchor>
      <arglist>(bool unsetStarted)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>complete</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>aa6d9538ba7e15087fdbc74cf5f954d15</anchor>
      <arglist>(bool reverse)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>mStartValue</name>
      <anchorfile>classcinder_1_1_tween.html</anchorfile>
      <anchor>a11d04e309338b84c1a45ebd7eaec9394</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>mEndValue</name>
      <anchorfile>classcinder_1_1_tween.html</anchorfile>
      <anchor>a9da8d312a3c11ef25d4ce948a95074c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LerpFn</type>
      <name>mLerpFunction</name>
      <anchorfile>classcinder_1_1_tween.html</anchorfile>
      <anchor>a42d6b7f9e7196ac94a506fec9e00e01a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StartFn</type>
      <name>mStartFunction</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>ac704bc19ae7591a1483e2f791e09ace5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>StartFn</type>
      <name>mReverseStartFunction</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>a8075a72383c0b3a34699d7d1b4e3e5e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>UpdateFn</type>
      <name>mUpdateFunction</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>a12d7df2b58dcddf9a9e717576deba7c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FinishFn</type>
      <name>mFinishFunction</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>ac46f5160a24e5d7a65eb18b1a35ff93c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FinishFn</type>
      <name>mReverseFinishFunction</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>a9d7da4b595856c5814a43a670740ba45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EaseFn</type>
      <name>mEaseFunction</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>a5ac1affbd4d29c46a5d9874dc269732f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mDuration</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>ab72f9e57870fa2ade8274de5659314a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mCopyStartValue</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>a03be3a32910634e14c021c582facda21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Tween::Options</name>
    <filename>classcinder_1_1_tween_1_1_options.html</filename>
    <base>cinder::TweenBase::Options</base>
    <member kind="function">
      <type>Options &amp;</type>
      <name>startFn</name>
      <anchorfile>classcinder_1_1_tween_1_1_options.html</anchorfile>
      <anchor>a9df79b771f0fb46757efeae226ed9cb8</anchor>
      <arglist>(const TweenBase::StartFn &amp;startFn)</arglist>
    </member>
    <member kind="function">
      <type>Options &amp;</type>
      <name>reverseStartFn</name>
      <anchorfile>classcinder_1_1_tween_1_1_options.html</anchorfile>
      <anchor>a570bfca135621777a029d48e47a72f84</anchor>
      <arglist>(const TweenBase::StartFn &amp;reverseStartFn)</arglist>
    </member>
    <member kind="function">
      <type>Options &amp;</type>
      <name>updateFn</name>
      <anchorfile>classcinder_1_1_tween_1_1_options.html</anchorfile>
      <anchor>af1626b3f3fd5021080cc82df7d08fc5f</anchor>
      <arglist>(const TweenBase::UpdateFn &amp;updateFn)</arglist>
    </member>
    <member kind="function">
      <type>Options &amp;</type>
      <name>finishFn</name>
      <anchorfile>classcinder_1_1_tween_1_1_options.html</anchorfile>
      <anchor>a1fcfad5ab702738df500c86c124df7a2</anchor>
      <arglist>(const TweenBase::FinishFn &amp;finishFn)</arglist>
    </member>
    <member kind="function">
      <type>Options &amp;</type>
      <name>reverseFinishFn</name>
      <anchorfile>classcinder_1_1_tween_1_1_options.html</anchorfile>
      <anchor>ab54e0857eb01b220ee3eb17407c96976</anchor>
      <arglist>(const TweenBase::FinishFn &amp;reverseFinishFn)</arglist>
    </member>
    <member kind="function">
      <type>Options &amp;</type>
      <name>easeFn</name>
      <anchorfile>classcinder_1_1_tween_1_1_options.html</anchorfile>
      <anchor>ad3f6009e99a2d608b1c0ada6202fc272</anchor>
      <arglist>(const EaseFn &amp;easeFunc)</arglist>
    </member>
    <member kind="function">
      <type>Options &amp;</type>
      <name>delay</name>
      <anchorfile>classcinder_1_1_tween_1_1_options.html</anchorfile>
      <anchor>ad10b50113395969c71f41f35cc4ffd5a</anchor>
      <arglist>(float delayAmt)</arglist>
    </member>
    <member kind="function">
      <type>Options &amp;</type>
      <name>startTime</name>
      <anchorfile>classcinder_1_1_tween_1_1_options.html</anchorfile>
      <anchor>ac4bf2660ccb13e613163b87ad60998bc</anchor>
      <arglist>(float time)</arglist>
    </member>
    <member kind="function">
      <type>Options &amp;</type>
      <name>autoRemove</name>
      <anchorfile>classcinder_1_1_tween_1_1_options.html</anchorfile>
      <anchor>a1eee5dd96f17fdc77855c3900c729e20</anchor>
      <arglist>(bool remove=true)</arglist>
    </member>
    <member kind="function">
      <type>Options &amp;</type>
      <name>loop</name>
      <anchorfile>classcinder_1_1_tween_1_1_options.html</anchorfile>
      <anchor>a65807c070b50eb936036312b2058c882</anchor>
      <arglist>(bool doLoop=true)</arglist>
    </member>
    <member kind="function">
      <type>Options &amp;</type>
      <name>pingPong</name>
      <anchorfile>classcinder_1_1_tween_1_1_options.html</anchorfile>
      <anchor>a4356de7fc1b0fff774bac89056c40012</anchor>
      <arglist>(bool doPingPong=true)</arglist>
    </member>
    <member kind="function">
      <type>Options &amp;</type>
      <name>infinite</name>
      <anchorfile>classcinder_1_1_tween_1_1_options.html</anchorfile>
      <anchor>a5d39be37fc5965e896e4313eb7374cb9</anchor>
      <arglist>(bool doInfinite=true)</arglist>
    </member>
    <member kind="function">
      <type>Options &amp;</type>
      <name>timelineEnd</name>
      <anchorfile>classcinder_1_1_tween_1_1_options.html</anchorfile>
      <anchor>aa8006e9264d16c467be8f29df7f3803e</anchor>
      <arglist>(float offset=0)</arglist>
    </member>
    <member kind="function">
      <type>Options &amp;</type>
      <name>appendTo</name>
      <anchorfile>classcinder_1_1_tween_1_1_options.html</anchorfile>
      <anchor>a3c551a15f7a7ff9f9971fb1df8f5e1c1</anchor>
      <arglist>(Anim&lt; Y &gt; *endTarget, float offset=0)</arglist>
    </member>
    <member kind="function">
      <type>Options &amp;</type>
      <name>appendTo</name>
      <anchorfile>classcinder_1_1_tween_1_1_options.html</anchorfile>
      <anchor>a7b68ffa97239e7042016864b14c45887</anchor>
      <arglist>(void *endTarget, float offset=0)</arglist>
    </member>
    <member kind="function">
      <type>Options &amp;</type>
      <name>lerpFn</name>
      <anchorfile>classcinder_1_1_tween_1_1_options.html</anchorfile>
      <anchor>aefc1aeaae7db1babb487ec3b6cf5314c</anchor>
      <arglist>(const typename Tween&lt; T &gt;::LerpFn &amp;lerpFn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator TweenRef&lt; T &gt;</name>
      <anchorfile>classcinder_1_1_tween_1_1_options.html</anchorfile>
      <anchor>ae005457e77f25d76c796556a4f366d12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Options</name>
      <anchorfile>classcinder_1_1_tween_1_1_options.html</anchorfile>
      <anchor>ac1423896468733b7f7a56e3437d94f51</anchor>
      <arglist>(TweenRef&lt; T &gt; tweenRef, TimelineRef timeline)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>appendTo</name>
      <anchorfile>classcinder_1_1_tween_base_1_1_options.html</anchorfile>
      <anchor>a47c3f13f045e8e200fac63edbfc6e5b1</anchor>
      <arglist>(TweenBase &amp;tweenBase, void *target, float offset)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>timelineEnd</name>
      <anchorfile>classcinder_1_1_tween_base_1_1_options.html</anchorfile>
      <anchor>a882338465589f78b3e76c94433d8c2a9</anchor>
      <arglist>(TweenBase &amp;tweenBase, float offset)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TweenRef&lt; T &gt;</type>
      <name>mTweenRef</name>
      <anchorfile>classcinder_1_1_tween_1_1_options.html</anchorfile>
      <anchor>a9920b63bd13698536a67a897cdb4172b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimelineRef</type>
      <name>mTimeline</name>
      <anchorfile>classcinder_1_1_tween_base_1_1_options.html</anchorfile>
      <anchor>aa42aceae0ec3272d194e157232d9de9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Timeline</name>
      <anchorfile>classcinder_1_1_tween_1_1_options.html</anchorfile>
      <anchor>ad55a3c161fedb629b674fd20d7235628</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Anim</name>
    <filename>classcinder_1_1_anim.html</filename>
    <templarg>T</templarg>
    <base>cinder::AnimBase</base>
    <member kind="function">
      <type></type>
      <name>Anim</name>
      <anchorfile>classcinder_1_1_anim.html</anchorfile>
      <anchor>a5373a53e15b7075d539c917d2fd23c6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Anim</name>
      <anchorfile>classcinder_1_1_anim.html</anchorfile>
      <anchor>a06c8cefb28455a2373489fafdb52e11a</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Anim</name>
      <anchorfile>classcinder_1_1_anim.html</anchorfile>
      <anchor>ac42e3a0401afe5646d4ec393757f9418</anchor>
      <arglist>(const Anim&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator()</name>
      <anchorfile>classcinder_1_1_anim.html</anchorfile>
      <anchor>ac5b51249999fd710bd63ccb4bf7843ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>classcinder_1_1_anim.html</anchorfile>
      <anchor>ae605318d100ab2645ccd983bb4a96794</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const T &amp;</name>
      <anchorfile>classcinder_1_1_anim.html</anchorfile>
      <anchor>af5cb5b5df2b27c87c35ced6bbaed615a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Anim&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_anim.html</anchorfile>
      <anchor>a496ab48d42daba231401715402e215f1</anchor>
      <arglist>(const Anim &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Anim</name>
      <anchorfile>classcinder_1_1_anim.html</anchorfile>
      <anchor>a0220527e843c5ebd78d57fd5667f7e6d</anchor>
      <arglist>(Anim &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Anim&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_anim.html</anchorfile>
      <anchor>a8ffb80b5d09b19a82008b83c0632d37d</anchor>
      <arglist>(Anim &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Anim&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_anim.html</anchorfile>
      <anchor>a2e519dc8bb74d47047c383d8ef35e1e3</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>value</name>
      <anchorfile>classcinder_1_1_anim.html</anchorfile>
      <anchor>aaaaa14a78700ca052a863692c760808e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>value</name>
      <anchorfile>classcinder_1_1_anim.html</anchorfile>
      <anchor>a2e1842be7c0878ae7992de97f68a99a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>ptr</name>
      <anchorfile>classcinder_1_1_anim.html</anchorfile>
      <anchor>a0060670dd419ddad61cf88b60cf78cc6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>ptr</name>
      <anchorfile>classcinder_1_1_anim.html</anchorfile>
      <anchor>a39850f3be2dba454e89b3f97ca6c1ef6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classcinder_1_1_anim_base.html</anchorfile>
      <anchor>a01d6e5dba4b94ccc92df907c4547f8d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isComplete</name>
      <anchorfile>classcinder_1_1_anim_base.html</anchorfile>
      <anchor>a48a6cc21b07ba97d6e7970d032aa838c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TimelineRef</type>
      <name>getParent</name>
      <anchorfile>classcinder_1_1_anim_base.html</anchorfile>
      <anchor>a480520833a43f3a12dd6dc53bec6604f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_anim_base.html</anchorfile>
      <anchor>a96e8a2c9b354c49367c317ee9ab64ee2</anchor>
      <arglist>(const AnimBase &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setReplace</name>
      <anchorfile>classcinder_1_1_anim_base.html</anchorfile>
      <anchor>aaf2dbe484a126fabfc579f7b0dd45d3f</anchor>
      <arglist>(const AnimBase &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setParentTimeline</name>
      <anchorfile>classcinder_1_1_anim_base.html</anchorfile>
      <anchor>a834762049699aa4c3eeb6982ad2a8517</anchor>
      <arglist>(TimelineRef parentTimeline)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>mValue</name>
      <anchorfile>classcinder_1_1_anim.html</anchorfile>
      <anchor>ab1ed371cc4903642f203b7f031ef7870</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>mVoidPtr</name>
      <anchorfile>classcinder_1_1_anim_base.html</anchorfile>
      <anchor>aee35ec12243652509910e37cc3311acf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimelineRef</type>
      <name>mParentTimeline</name>
      <anchorfile>classcinder_1_1_anim_base.html</anchorfile>
      <anchor>a697de170c8cc8b9fa49b2b553cb12f91</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Timeline</name>
      <anchorfile>classcinder_1_1_anim.html</anchorfile>
      <anchor>ad55a3c161fedb629b674fd20d7235628</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::TweenBase</name>
    <filename>classcinder_1_1_tween_base.html</filename>
    <base>cinder::TimelineItem</base>
    <class kind="class">cinder::TweenBase::Options</class>
    <member kind="function">
      <type></type>
      <name>TweenBase</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>a16ffd159945f9c3620add1e02765334a</anchor>
      <arglist>(void *target, bool copyStartValue, float startTime, float duration, EaseFn easeFunction=easeNone)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TweenBase</name>
      <anchorfile>classcinder_1_1_tween_base.html</anchorfile>
      <anchor>a6dc5c96817ede15d7e7df0678a3590fb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::TweenBase::Options</name>
    <filename>classcinder_1_1_tween_base_1_1_options.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>Options</name>
      <anchorfile>classcinder_1_1_tween_base_1_1_options.html</anchorfile>
      <anchor>a2c02f91ad7e16996ca849243d2a576d4</anchor>
      <arglist>(TimelineRef timeline)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::TweenRef</name>
    <filename>classcinder_1_1_tween_ref.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>TweenRef</name>
      <anchorfile>classcinder_1_1_tween_ref.html</anchorfile>
      <anchor>a116f8b08ce02d81bb84ab5d4d07f057a</anchor>
      <arglist>(const std::shared_ptr&lt; Tween&lt; T &gt; &gt; &amp;sp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TweenRef</name>
      <anchorfile>classcinder_1_1_tween_ref.html</anchorfile>
      <anchor>a9726c9033f95cbd25d1741a6938480a3</anchor>
      <arglist>(Tween&lt; T &gt; *tween)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TweenRef</name>
      <anchorfile>classcinder_1_1_tween_ref.html</anchorfile>
      <anchor>abdea30a6e50623bc1bc4234228b7c9e8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::FnTween</name>
    <filename>classcinder_1_1_fn_tween.html</filename>
    <templarg>T</templarg>
    <base>cinder::Tween</base>
    <member kind="function">
      <type></type>
      <name>FnTween</name>
      <anchorfile>classcinder_1_1_fn_tween.html</anchorfile>
      <anchor>a2e23e533dd60820439cbcd9299010003</anchor>
      <arglist>(std::function&lt; void(T)&gt; fn, T startValue, T endValue, float startTime, float duration, EaseFn easeFunction=easeNone, typename Tween&lt; T &gt;::LerpFn lerpFunction=&amp;tweenLerp&lt; T &gt;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classcinder_1_1_fn_tween.html</anchorfile>
      <anchor>a85ea69aaf643a77481c5852a5a56c9c0</anchor>
      <arglist>(float relativeTime)</arglist>
    </member>
    <member kind="variable">
      <type>std::function&lt; void(T)&gt;</type>
      <name>mFn</name>
      <anchorfile>classcinder_1_1_fn_tween.html</anchorfile>
      <anchor>aae6e68d5731530752daa853a6f2e7522</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>mValue</name>
      <anchorfile>classcinder_1_1_fn_tween.html</anchorfile>
      <anchor>a8caac9e6ecaebce26c322a27845920ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::FnTweenRef</name>
    <filename>classcinder_1_1_fn_tween_ref.html</filename>
    <templarg>T</templarg>
    <base>cinder::TweenRef</base>
    <member kind="function">
      <type></type>
      <name>FnTweenRef</name>
      <anchorfile>classcinder_1_1_fn_tween_ref.html</anchorfile>
      <anchor>a1f95dc0559d3161a06b9f11bf715161a</anchor>
      <arglist>(const std::shared_ptr&lt; FnTween&lt; T &gt; &gt; &amp;sp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FnTweenRef</name>
      <anchorfile>classcinder_1_1_fn_tween_ref.html</anchorfile>
      <anchor>a5e85ea45b016feb0ff42428c38f1bdff</anchor>
      <arglist>(FnTween&lt; T &gt; *fnTween)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FnTweenRef</name>
      <anchorfile>classcinder_1_1_fn_tween_ref.html</anchorfile>
      <anchor>aa68358fca756975342acc8440cf21fcb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::AnimBase</name>
    <filename>classcinder_1_1_anim_base.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>AnimBase</name>
      <anchorfile>classcinder_1_1_anim_base.html</anchorfile>
      <anchor>a86ed123e015bfaa0a5596b2e5b932f21</anchor>
      <arglist>(void *voidPtr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AnimBase</name>
      <anchorfile>classcinder_1_1_anim_base.html</anchorfile>
      <anchor>ae8fbf15f74ab19973f00cc9ceb46ef9e</anchor>
      <arglist>(const AnimBase &amp;rhs, void *voidPtr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~AnimBase</name>
      <anchorfile>classcinder_1_1_anim_base.html</anchorfile>
      <anchor>aab365237e7b249956179a1332e70ee81</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Url</name>
    <filename>classcinder_1_1_url.html</filename>
    <member kind="function">
      <type></type>
      <name>Url</name>
      <anchorfile>classcinder_1_1_url.html</anchorfile>
      <anchor>a22c8ccf1e2908f73ebd831705dfcced8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Url</name>
      <anchorfile>classcinder_1_1_url.html</anchorfile>
      <anchor>ac2af75cadf7e895af823058a3e4a1d96</anchor>
      <arglist>(const std::string &amp;urlString, bool isEscaped=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classcinder_1_1_url.html</anchorfile>
      <anchor>a959d1541e432c8cf7b6890a25c08efcc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>c_str</name>
      <anchorfile>classcinder_1_1_url.html</anchorfile>
      <anchor>a7df510317d94a90d56765637ee31c786</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>encode</name>
      <anchorfile>classcinder_1_1_url.html</anchorfile>
      <anchor>a918cfc3655864f7ea4697447463d04be</anchor>
      <arglist>(const std::string &amp;unescaped)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::UrlOptions</name>
    <filename>classcinder_1_1_url_options.html</filename>
    <member kind="function">
      <type></type>
      <name>UrlOptions</name>
      <anchorfile>classcinder_1_1_url_options.html</anchorfile>
      <anchor>aabf6dc2dffe6de553f4cad58f8ee08e8</anchor>
      <arglist>(bool ignoreCache=false, float timeoutSeconds=30.0f)</arglist>
    </member>
    <member kind="function">
      <type>UrlOptions &amp;</type>
      <name>ignoreCache</name>
      <anchorfile>classcinder_1_1_url_options.html</anchorfile>
      <anchor>a40e37d2a51a776a6fdf568d2da992ddd</anchor>
      <arglist>(bool ignore=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIgnoreCache</name>
      <anchorfile>classcinder_1_1_url_options.html</anchorfile>
      <anchor>a5a6ef01f3804dab3a6fbb65607cf916c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIgnoreCache</name>
      <anchorfile>classcinder_1_1_url_options.html</anchorfile>
      <anchor>a6e5078e6fa41addd3a2cd899fd6949af</anchor>
      <arglist>(bool ignore=true)</arglist>
    </member>
    <member kind="function">
      <type>UrlOptions &amp;</type>
      <name>timeout</name>
      <anchorfile>classcinder_1_1_url_options.html</anchorfile>
      <anchor>a093c25f8b9db130e124ed3159575f757</anchor>
      <arglist>(float seconds)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getTimeout</name>
      <anchorfile>classcinder_1_1_url_options.html</anchorfile>
      <anchor>a1cc6188a6c59d23f2af1bbc13acd8269</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeout</name>
      <anchorfile>classcinder_1_1_url_options.html</anchorfile>
      <anchor>a2505881d5d491acff97b96a4a1b9fc2f</anchor>
      <arglist>(float seconds)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::IStreamUrl</name>
    <filename>classcinder_1_1_i_stream_url.html</filename>
    <base>cinder::IStream</base>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>readDataAvailable</name>
      <anchorfile>classcinder_1_1_i_stream_url.html</anchorfile>
      <anchor>a442721b29af2d067da0b0bcffea8363d</anchor>
      <arglist>(void *dest, size_t maxSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>seekAbsolute</name>
      <anchorfile>classcinder_1_1_i_stream_url.html</anchorfile>
      <anchor>a554371f3fda062f7ac3f8ead60b255e7</anchor>
      <arglist>(off_t absoluteOffset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>seekRelative</name>
      <anchorfile>classcinder_1_1_i_stream_url.html</anchorfile>
      <anchor>a3630d0a24c54e53704ecbc6600e98f0a</anchor>
      <arglist>(off_t relativeOffset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual off_t</type>
      <name>tell</name>
      <anchorfile>classcinder_1_1_i_stream_url.html</anchorfile>
      <anchor>ab008336c28853269f131a79b13d80d8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual off_t</type>
      <name>size</name>
      <anchorfile>classcinder_1_1_i_stream_url.html</anchorfile>
      <anchor>a26295b6b81c9dec0c1a864453855319e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEof</name>
      <anchorfile>classcinder_1_1_i_stream_url.html</anchorfile>
      <anchor>aab46d8ba29f07d41614db0a82066ca47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getUser</name>
      <anchorfile>classcinder_1_1_i_stream_url.html</anchorfile>
      <anchor>a41dc9cfb86f3a6088e5c8fe59589f747</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPassword</name>
      <anchorfile>classcinder_1_1_i_stream_url.html</anchorfile>
      <anchor>ad541757b70e83fc0836d7f20130cd33f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IStreamUrlRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1_i_stream_url.html</anchorfile>
      <anchor>a2540096c141a8cf5d7531244f4590d73</anchor>
      <arglist>(const Url &amp;url, const std::string &amp;user=&quot;&quot;, const std::string &amp;password=&quot;&quot;, const UrlOptions &amp;options=UrlOptions())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IStreamUrl</name>
      <anchorfile>classcinder_1_1_i_stream_url.html</anchorfile>
      <anchor>a7526502746f3a548b5fb241efd46a831</anchor>
      <arglist>(const std::string &amp;url, const std::string &amp;user, const std::string &amp;password, const UrlOptions &amp;options)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>IORead</name>
      <anchorfile>classcinder_1_1_i_stream_url.html</anchorfile>
      <anchor>ad7bdd87af502b24e334fbb88b8986382</anchor>
      <arglist>(void *t, size_t size)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>IOWrite</name>
      <anchorfile>classcinder_1_1_i_stream_url.html</anchorfile>
      <anchor>afe631182ad9405aefd5186f74ee1e80c</anchor>
      <arglist>(const void *t, size_t size)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; IStreamUrlImpl &gt;</type>
      <name>mImpl</name>
      <anchorfile>classcinder_1_1_i_stream_url.html</anchorfile>
      <anchor>a664ed3bdbeccd814bef1f00e02728795</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::UrlLoadExc</name>
    <filename>classcinder_1_1_url_load_exc.html</filename>
    <base>cinder::Exception</base>
    <member kind="function">
      <type></type>
      <name>UrlLoadExc</name>
      <anchorfile>classcinder_1_1_url_load_exc.html</anchorfile>
      <anchor>a5cb766b9e418079f80088c1a9501b741</anchor>
      <arglist>(int statusCode, const std::string &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classcinder_1_1_url_load_exc.html</anchorfile>
      <anchor>aaabe92bfc10642aa0f10e86a32d6d2e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>statusCode</name>
      <anchorfile>classcinder_1_1_url_load_exc.html</anchorfile>
      <anchor>a8ae72f605d24a12c0fae306b5c6c7799</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::IStreamUrlImplCurl</name>
    <filename>classcinder_1_1_i_stream_url_impl_curl.html</filename>
    <member kind="function">
      <type></type>
      <name>IStreamUrlImplCurl</name>
      <anchorfile>classcinder_1_1_i_stream_url_impl_curl.html</anchorfile>
      <anchor>a35432b502c7e05b65f9bbac6572476c1</anchor>
      <arglist>(const std::string &amp;url, const std::string &amp;user, const std::string &amp;password)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IStreamUrlImplCurl</name>
      <anchorfile>classcinder_1_1_i_stream_url_impl_curl.html</anchorfile>
      <anchor>a21c79d458af37a004478c55d13686f80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>readDataAvailable</name>
      <anchorfile>classcinder_1_1_i_stream_url_impl_curl.html</anchorfile>
      <anchor>a4dda05408da9bd8a87cfa037be83dd34</anchor>
      <arglist>(void *dest, size_t maxSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>seekAbsolute</name>
      <anchorfile>classcinder_1_1_i_stream_url_impl_curl.html</anchorfile>
      <anchor>aeb5f6761d95ef3b9f1aaf543b135a5c1</anchor>
      <arglist>(off_t absoluteOffset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>seekRelative</name>
      <anchorfile>classcinder_1_1_i_stream_url_impl_curl.html</anchorfile>
      <anchor>aa27c3819632d4f6db956f8353b25a512</anchor>
      <arglist>(off_t relativeOffset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual off_t</type>
      <name>tell</name>
      <anchorfile>classcinder_1_1_i_stream_url_impl_curl.html</anchorfile>
      <anchor>a08042464d88dd11fe51e0da52beb1ecf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual off_t</type>
      <name>size</name>
      <anchorfile>classcinder_1_1_i_stream_url_impl_curl.html</anchorfile>
      <anchor>a9cded9fe1a66f60ba1a1e5d9b4c819a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEof</name>
      <anchorfile>classcinder_1_1_i_stream_url_impl_curl.html</anchorfile>
      <anchor>a9f680db9465cf5463a4fe2abe1f177bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>IORead</name>
      <anchorfile>classcinder_1_1_i_stream_url_impl_curl.html</anchorfile>
      <anchor>a1c407d904dcfd2554bbd8cb914a42631</anchor>
      <arglist>(void *t, size_t size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::IStreamUrlImplWinInet</name>
    <filename>classcinder_1_1_i_stream_url_impl_win_inet.html</filename>
    <member kind="function">
      <type></type>
      <name>IStreamUrlImplWinInet</name>
      <anchorfile>classcinder_1_1_i_stream_url_impl_win_inet.html</anchorfile>
      <anchor>a3b0e512cdea68fc0306df2f113d6bb21</anchor>
      <arglist>(const std::string &amp;url, const std::string &amp;user, const std::string &amp;password, const UrlOptions &amp;options)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IStreamUrlImplWinInet</name>
      <anchorfile>classcinder_1_1_i_stream_url_impl_win_inet.html</anchorfile>
      <anchor>a4ffa443c5c356865d213bab8f755aef6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>readDataAvailable</name>
      <anchorfile>classcinder_1_1_i_stream_url_impl_win_inet.html</anchorfile>
      <anchor>a6b464b8c71de73f1d40e40f80ef0ba1e</anchor>
      <arglist>(void *dest, size_t maxSize)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>seekAbsolute</name>
      <anchorfile>classcinder_1_1_i_stream_url_impl_win_inet.html</anchorfile>
      <anchor>a0f38a2160ea406a38493447a31906c78</anchor>
      <arglist>(off_t absoluteOffset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>seekRelative</name>
      <anchorfile>classcinder_1_1_i_stream_url_impl_win_inet.html</anchorfile>
      <anchor>a30806a31bf45942d0e070ff2996e150f</anchor>
      <arglist>(off_t relativeOffset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual off_t</type>
      <name>tell</name>
      <anchorfile>classcinder_1_1_i_stream_url_impl_win_inet.html</anchorfile>
      <anchor>adcd368721528fd53423cdc0964ba99f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual off_t</type>
      <name>size</name>
      <anchorfile>classcinder_1_1_i_stream_url_impl_win_inet.html</anchorfile>
      <anchor>a89c50a9a5f739b772de52daff79b22ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEof</name>
      <anchorfile>classcinder_1_1_i_stream_url_impl_win_inet.html</anchorfile>
      <anchor>ab3096fad5877db38faf9267b61fade06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>IORead</name>
      <anchorfile>classcinder_1_1_i_stream_url_impl_win_inet.html</anchorfile>
      <anchor>a7857690d2af42c9a41c902853cd63ae4</anchor>
      <arglist>(void *t, size_t size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Vec3</name>
    <filename>classcinder_1_1_vec3.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>TYPE</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>ab8a827037f799dbaa37ac95453ae5af9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a29d0ed81c8dde08cb25af811f69db5d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec3</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>adfde1b79a8a3f8e66c33fe83fbf9d942</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec3</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>ab9fb38ab4d620b55be7e50ea48cd349c</anchor>
      <arglist>(T nx, T ny, T nz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec3</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a3531688fd1016dd30e9b2bbcb5d13a37</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec3</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a0e5532c832781ddfb0bc392322eb72e1</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;v2, T aZ)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec3</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a28ed1ea2d2984c268e390cf0c2cf1021</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec3</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>ac310bb4b368edf251715d55105a1733b</anchor>
      <arglist>(const T *d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec3</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a511188c399eec88ff7fe40493a2198fb</anchor>
      <arglist>(const Vec3&lt; FromT &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec3</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a22f4508969cb7dd34f53619f9f72a2e1</anchor>
      <arglist>(const Y &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a87def85887d18af8cb83e3d98016b81b</anchor>
      <arglist>(T ax, T ay, T az)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a4ec450b4fa86d1ded68e4d1ef606268b</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>ac4290eb2f7eaee599b87c2f257716da0</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a31a4a7c0c0fd4507952ba58838f60fa3</anchor>
      <arglist>(const Vec3&lt; FromT &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a7ddd190d99856aa9e3c0a4dda7990fa5</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>ae4f2376d321180674b76932f71388012</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>ptr</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a671aaaf4ae849d908a730112aed256f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>acd71102bea78fd36f2a007c1d752adee</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a25321084106b6b9cd70b4c6103866abe</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a302404a20fb71d73b434a9c0a28c732c</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>abd15304fa30f2db8df707b6cfaa23a60</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a3f7d3af25016dade752ce9ae9c73f9b3</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a4cc4c11548ac27e12a680deab5103c0a</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>acfaeb703ab945aaafedfb0d99a90c976</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>aabac7942e3b3adef74a57ce882650d74</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a18f7939466cfd7fdfc79142e413bb560</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a1003a88889b82c2d7f1f81f97cb585a0</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a07cf05191f618ebe1336ea998b2c4850</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>aab55aee9be27bc3421808a9235ec4a7f</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a55e8872a080838f6754717893e4518b4</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>af90a40c8c5074a9260095cf14179921f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a8535bc4c79a91b1583692815b155d72d</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a94988e6949b7206e8c4d3c0b1f3b7846</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a02d6ef9285886199550e77fc17b0a03f</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>cross</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a59070f3f9a3f19f945f48df7e9c63661</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>distance</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a3ae8fdc067c5f60b07d058f2cc6f1066</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>distanceSquared</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a8325993ea1ce865cdac31e0e87459317</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a5f32de060bc6743658aa539318fd82bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lengthSquared</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>ad3165c3f65d58344c3f1133b33a5ca8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>limit</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a7cd45a6737cb92d2075ef1c3b172ef2f</anchor>
      <arglist>(T maxLength)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>limited</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a87f1bb0818f943812f1e74dec30ffbb8</anchor>
      <arglist>(T maxLength) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a95821bb1c4557c552889a4f14cf4be51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>inverse</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a3278d1ebc945b42620894cc6fdcb5465</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>aeb6123823b6b47cd6f13c83a13698a72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>normalized</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>af5d293426b9d94e8e8b3bc88d9e2416a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>safeNormalize</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>af085a0d594fb1f41abd1a615e52f1435</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>safeNormalized</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a47249d1c633d810789f103b387ba8e6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>getOrthogonal</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>ab7c3bdce1e17d646544e6ebf1b73cd46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotateX</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>aca5cc2c5c5eeac2ac5c3dadc07c1986f</anchor>
      <arglist>(T angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotateY</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a2bb409f69b4aabe2820b182bb068bc52</anchor>
      <arglist>(T angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotateZ</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>aa156ae1a643b774747e425826568443a</anchor>
      <arglist>(T angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a9ef844aa684dac9f39df0cd34a4c46b7</anchor>
      <arglist>(Vec3&lt; T &gt; axis, T angle)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>lerp</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a802bcf8701d9b65a364a8e04d87ecc1b</anchor>
      <arglist>(T fact, const Vec3&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lerpEq</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a135524b8fd496d7ee3e69876172a75ca</anchor>
      <arglist>(T fact, const Vec3&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>slerp</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a69912e8f6620b0809ecf6a7df63b19ec</anchor>
      <arglist>(T fact, const Vec3&lt; T &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>squad</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a3df55297f01ce0e01d808616bd8b5e73</anchor>
      <arglist>(T t, const Vec3&lt; T &gt; &amp;tangentA, const Vec3&lt; T &gt; &amp;tangentB, const Vec3&lt; T &gt; &amp;end) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>xx</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a521c9e14da5d32613e35a26e6111ad51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>xy</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a12e9ef862b531980a6a38da0e84f6ef5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>xz</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a7e6ea6f3d017402850e17251e6d589d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>yx</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a586429caccb1ea9f9249532559fa3373</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>yy</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a7e6bcaab5dff8059483be9dc82ba51f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>yz</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a52b612abbf4cd6eb9f161785d6c0cc9a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>zx</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a36da18ae1f394856621229364aaeb65b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>zy</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a406da1f7c6d3a475eb36bffa9b49a81c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>zz</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a9c6ecd1d48351a8681d1f3180723bbd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>xxx</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>ac012a12f731bd25b22a1b9f65138df59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>xxy</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a2d14d0748e39d42f7a8f3bd72f4881cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>xxz</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a5287aecbddbd58d8b813a65e2aaf66be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>xyx</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a3a2a247b8849b089d9f6c6469c1425a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>xyy</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a450d4f607c2ec90e9d4a8d59ee83d479</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>xyz</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>ab509da5a0817c66dc993c60b5cbb2e1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>xzx</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a6a49c32010c8bdd076afd5e685d471cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>xzy</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a7e90d9a7be9510c9beefa6c0f395ff74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>xzz</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a514578578e629534fbc1780de6b6d441</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>yxx</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a518e3c9fe1be4800974475eace3dee50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>yxy</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a88be06e5ae72498caa5e3aeec09fc425</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>yxz</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>af8df1303c6f6739fe1c21e29d34a973b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>yyx</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>ae1343ae6d448eebcb89f5837a8a98a80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>yyy</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a3fb5898ad61956c024c2b362b11c3f83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>yyz</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>ae65e3f507da329d67ed1c46fb629d41f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>yzx</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a931b906a8400c54e3cb677d51d1a3621</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>yzy</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a73e0170ac04d852f012c4a28fc99fb21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>yzz</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a9798739e540a674f2fda42063cf1dc40</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>zxx</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a5a029a1e463721b5ec0f68acf14883d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>zxy</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a642ba323e9f08fc6fc98175835c31912</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>zxz</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a8209b2b8eb48f2183dadda0001a0b289</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>zyx</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a34e4c10918169491eb8cf23660bfe217</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>zyy</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a103d964518603ec1891e56b59c0b8a34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>zyz</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a9c5269c6400ef803a1f71dbbebe88510</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>zzx</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a962f4de838c0e6a3c82efc2c1d874e80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>zzy</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a5e6cce30bbebb90f492acc9dfa4a2a21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>zzz</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a1317261d467fbe28dccb795ac3b35b64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a465e9057a1d8a00b6972858aedd17e7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3&lt; T &gt;</type>
      <name>zero</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a14b770d5dc1f60be251f734c232bd4d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3&lt; T &gt;</type>
      <name>one</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a40f0fc81eabc67401d64f29ce558c8c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3&lt; T &gt;</type>
      <name>xAxis</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>aa3f1c02411dac3626470b3b86d300bed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3&lt; T &gt;</type>
      <name>yAxis</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a780df03268cd9c82f03e21758634e884</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3&lt; T &gt;</type>
      <name>zAxis</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>af013134b8ca766aba36d555738d1f635</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec3&lt; T &gt;</type>
      <name>NaN</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a346d68e9a8aebe39ffa0ffcedc6cbbfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>x</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>afe9290afba72d916e9a9151f20135ffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>y</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a1cdeedcdf989bf535c1c946cda6a9aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>z</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a1898e23b728500d7debf242fc84c1cc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>DIM</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>a587bbc721bd6a6372b2f5ea06e692296</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classcinder_1_1_vec3.html</anchorfile>
      <anchor>ab986d69c21c13ffcb7f490e835210f08</anchor>
      <arglist>(std::ostream &amp;lhs, const Vec3&lt; T &gt; rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Vec2</name>
    <filename>classcinder_1_1_vec2.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>TYPE</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a63a7c8dc2ce3e00b6278102484d19049</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>ae73a4713a0d4dfa2ebd8f3785c4247b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VECTRAIT&lt; T &gt;::DIST</type>
      <name>DIST</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a89f65ab09f7dda59e3d5f25c42047faa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec2</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a719fddc52357959e7b8583fcf71558d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec2</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a19a93e9b0e2355a5b0ffcaa228eab4a5</anchor>
      <arglist>(T nx, T ny)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec2</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a4a1a68ff2721e7bebbb968e9ecbc2c0a</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec2</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>aeadf5e96242979682835dbf9a6615d16</anchor>
      <arglist>(const T *d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec2</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a2ceac4738b8ce95f276d4e3e7014673b</anchor>
      <arglist>(const Vec2&lt; FromT &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>ab9cc61640cad45f86e6935b1fb276d17</anchor>
      <arglist>(T ax, T ay)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a9dd70aecc311a168e5b8b4c88ff2d364</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>abca1912d92dbc0f6c8ec50d93b2cddd4</anchor>
      <arglist>(const Vec2&lt; FromT &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>ace15685d362a0ee280d510f1ef8b4885</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a52dd742609d9621f6935477b07cc3d37</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>ad53f42d792bad77ce43a4aa75cff4ac6</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>ptr</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>ae0e0e542b3da477cd1f26f84d6861159</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec2&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a0e96dcd28478422d89a6a5d402a5520b</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec2&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a65d0d23f5dea716b205dac5478863d80</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>afdd8d911305c4509271182302dac0930</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec2&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a91f9199cd521cfd42e84d334374e4575</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>ac68bc23d780fe830bfed8fba9b23614c</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a26005d217febd9d9ea8a16fa0940baea</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>affab125f9f0f7725747a46743fc0249a</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a7d448ed7e587f7806b60c9340cf4f1ab</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const Vec2&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a35b8a43baa9b1ef663ab2b9926a77ed0</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>afc35722d99e2df1564b6604f1890fb87</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a7336e6fdec37415f88ca69ee4d1ac0e1</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a928cc965198968d8640072a285a82569</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>af76ca6b6c82b7954d2a2366c19079446</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a7542a458c81110abc843cdb915383943</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>ad9ca743e6a39da4809e2170b189c7a8d</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>af301558867cf76c27a7ab394418b8f56</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a3d00cb93e141ae3b970e49ffedb9c584</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cross</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a807fed81054b18340f844fa52cbf5ef3</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>DIST</type>
      <name>distance</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>afcc56ca827aba92db3c6f606f5ce994f</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>distanceSquared</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a107193ea9e64b7cd5b01995ee0bf0797</anchor>
      <arglist>(const Vec2&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>DIST</type>
      <name>length</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a611793685d66f6129902037d330f43db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>ab9a48915c8bee4255dd5d3532d29b124</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>normalized</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>afb15cc5492431f1bd73b0870a9e60b4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>safeNormalize</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a8817c93ae726e31d5834e09ebb9abc2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>safeNormalized</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a523422af0735234bd6ae0ac4b24c4c36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a166bb6dd949c1bb7e7aa4f564ad06085</anchor>
      <arglist>(DIST radians)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lengthSquared</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a88c4cc1851f4b497c337c01d78aafffa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>limit</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a309d241287f822890762a724e0195cd1</anchor>
      <arglist>(DIST maxLength)</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>limited</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a07b43113009120351c06a6668a5d08e2</anchor>
      <arglist>(T maxLength) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a62c5e82329fc9a1ae02b71eb076ce1aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>inverse</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a0c4abd595d816147c3edf4e4f3da5cac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>lerp</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a7cbc9e5df58752f63c04ff45bc04921b</anchor>
      <arglist>(T fact, const Vec2&lt; T &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lerpEq</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a2882bdbeb539120795ba1d06d48103a7</anchor>
      <arglist>(T fact, const Vec2&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>xx</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a07bf2423952e8aedf51783b141e29b92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>xy</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a247ec2e1cdcc33acb141a0115248cf89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>yx</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a0b5ad39113bb439782ef89b9c9bdede9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>yy</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a5384e17ad136dd169ef43aa81be6d2c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>xxx</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>aeaa7bc01f390f9ba1d8bf4352cb373db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>xxy</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a58598e803c64666d33861332b2b28039</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>xyx</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>ac1727ae78e3ca50d2c49bdb0ccfdeafc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>xyy</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a63d316b0296ca4225abaf22b1ddb9017</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>yxx</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>aa435a7a0092ef06ff0b26439a7bd6966</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>yxy</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>ac4a16040130280f90e308b92dbdb6b7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>yyx</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a2bc9206530df582959ef9b9a2589379f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>yyy</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a9746b74e5465c7f62446855c43426d4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec2&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a0e7b695dc21b207393741b530eaa0116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec2&lt; T &gt;</type>
      <name>zero</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>ab746e54851a2dec15ba2d547909efe59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec2&lt; T &gt;</type>
      <name>one</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>aa2cf44a9865f9ccdfdccdfb6ed05aa94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec2&lt; T &gt;</type>
      <name>xAxis</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a75cb9be9b6e390db6a79fff7c4ceab0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec2&lt; T &gt;</type>
      <name>yAxis</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>ac2f7a0ca6557eaec8a3b5c60cf61ca06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec2&lt; T &gt;</type>
      <name>NaN</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a2b9dd3bd13c4f0a1be25d4703cff31af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>x</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>aedfd0518222bd0e7894aaddacac06c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>y</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>a3d465527eecbdb3e9e4092d0adccc81d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>DIM</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>aca378bbae32c8d8d8efc80cdffd80633</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classcinder_1_1_vec2.html</anchorfile>
      <anchor>ae706403ac2dc6c98baa64578207cac12</anchor>
      <arglist>(std::ostream &amp;lhs, const Vec2&lt; T &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::Vec4</name>
    <filename>classcinder_1_1_vec4.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>TYPE</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a4a3a212993ef654231181a2ac3c61454</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ac895b369ffdb528b4ec5b32b26d4ad6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec4</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aa69c08811729969f19fe78f4a08fd1a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec4</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>affbfdb877ab898774ec2e71598071d19</anchor>
      <arglist>(T nx, T ny, T nz, T nw=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec4</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a0a73a05b11795c32d4c91aab6d666632</anchor>
      <arglist>(const Vec3&lt; T &gt; &amp;src, T aW=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec4</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a21d9ac45556d07e6fc06b4da9ca5373a</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec4</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a16c51eca774c8d1e1cc2dfad8f0424e1</anchor>
      <arglist>(const Vec4&lt; FromT &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec4</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a0c2f7df3aa5d8703eb455f67a2d9c16e</anchor>
      <arglist>(const T *d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aee3cf05ba3b9cbc15393112283b9e2c8</anchor>
      <arglist>(T ax, T ay, T az, T aw)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a9496c7d8a19f82dad336cea0be9ac7c1</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a256bf72bc95484536c68a18db8cb4afc</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a8fa7794e3a5df961a5096e9fd97ecf45</anchor>
      <arglist>(const Vec4&lt; FromT &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>adfdf0c0df3afadaccccff79988d33f0e</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a37e4ab510d138da9230f374b84e1abd2</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>ptr</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a9d2825004823fc747beb987aab72767a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec4&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a96dd4eb4afde1f9e02324a96dd4ad6a3</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec4&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a4d3410b8a3271b4ceac3e245e12724c5</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec4&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a8bd3849ff438bebebb1c35a60415ad64</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>const Vec4&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a813f0c753e3809e2ceb334344b9a3818</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a2e517502044b6e051d6083b090c226c3</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a4797475de2e64d7cbc6acb25eb61b953</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a8f3d9039ade2575adf1ec9e0f37ed6cd</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a07eb5701c92da7d452a63b7acbe285d2</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>const Vec4&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aace6b7a94c18fa7466cd41255f839924</anchor>
      <arglist>(T rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ada8831bd2b532da4b1316b13bd4b56ca</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aff04a5c059db63936e889f24169fec33</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a3e3ee265ce80444a0158100ac35de2d0</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a9b952cdfad593fb2c47a84a020a84aab</anchor>
      <arglist>(T rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a6b2cc785cec552d8f0ffe223ef8540df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a9ac3fa83d991a7f0962f5b11bb6c5be8</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a67c0209315b103e1c5541c7bb1f260d4</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>dot</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a9883bbcb1093e5cee238d0f9c6d16c04</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>cross</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a60035a931fac9be7576b43d0d4583b31</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>distance</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>af34793cec0090b6d15799082e112ac76</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>distanceSquared</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>acc77e7d506c6a64fc0ea6745af5d2b08</anchor>
      <arglist>(const Vec4&lt; T &gt; &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>length</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a83668fd29828e431c0066454ca30d751</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lengthSquared</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a03b876b2b1e361e7a50def7e39fcd178</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a0c36efa83bad0c7a4c308fbd9bfde28e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>normalized</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a3be28d8062bd607ccc1eabc7c330881e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>safeNormalize</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a77a605fefada7062ff7c51483e50d9a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>limit</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a028691d358d00582329134c04d35f7b7</anchor>
      <arglist>(T maxLength)</arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>limited</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>afeb108a8135c2acbfbec891c46d2a821</anchor>
      <arglist>(T maxLength) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a3128e6441b8fe0ccf68e116e907ed02d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>inverse</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aa2cd247abeb847897583cec40f50129a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>lerp</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a8e927c868e3c0e5938ba62c5b49981fe</anchor>
      <arglist>(T fact, const Vec4&lt; T &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lerpEq</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a88b683071bb7d958925e9c0cce867c1e</anchor>
      <arglist>(T fact, const Vec4&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>slerp</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>abd9832f4b787f43b6509cc925d7d1bb1</anchor>
      <arglist>(T fact, const Vec3&lt; T &gt; &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>squad</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ab833fcbcf2fb185d087bb869a6dda031</anchor>
      <arglist>(T t, const Vec4&lt; T &gt; &amp;tangentA, const Vec4&lt; T &gt; &amp;tangentB, const Vec4&lt; T &gt; &amp;end) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>xx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a3053715bc127830f42b55ed97cbfccdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>xy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a369fa2486932f26e60f4caad209de25f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>xz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ac7d49cd1f6eb298968e0968b7ddf733f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>yx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a8761938b996a2fb91a5e25df0917ee60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>yy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a75ab3b14572819730d0cdfe7ce3486a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>yz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aadee11d448b9b0187e7f4038b7a861ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>zx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a90fb9704fdb6a28041636e3a10e5cf3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>zy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a31a270e0ed33bc2f0117841b36c4ee3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2&lt; T &gt;</type>
      <name>zz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ac22ca3ef4e6f7f1377ccfb914fa0edd6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>xxx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a6ed53d460bd7cacb0c30a939ebf30b41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>xxy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a8a902eafba35a9d5bec3f0940da5f1da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>xxz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>acad08614a1083ba40809e82d8d85ce0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>xyx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a68f9d0539f8d214c5ad0988db73f25fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>xyy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a695fb887c06b5dc17c649d4cf62bab73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>xyz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aa7b2e19db1b642d077be02b5029c6ab5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>xzx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a40f9c29441e8f7cc97a964e7e54d441e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>xzy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ad1fb7feb2a8ac601ce889e3744fdf38f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>xzz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ad432efec9f6adebd0288d65ada545a7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>yxx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ac770ff21417612099f44676b71b8ecde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>yxy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ab54e23d2e2c2d8312ad8d71e3c917f67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>yxz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>abe0ccadd1bbea1063d6aa253d845b181</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>yyx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a128cae0d6316518a8a3dafcfa522e896</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>yyy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>af5e21941c2b40d272b06d921358d545b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>yyz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a1f1240021467954f2bcf526d1803a706</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>yzx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a74e9eb7a02586ed93c27925003f0aea0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>yzy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a8c18a88b6bcc2d0b87716033ba0689e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>yzz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ae9f713abe1c95b32f48f846e6c9a6666</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>zxx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a915c10775d1545e4c9ecbd79c5a8e2bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>zxy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ad561b13739320af3c1914bcc28247f41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>zxz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aa0f63603dc80885e8ca2ac820c1a5ff5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>zyx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aef6e3c4a3a425cbe629d65d930fc3718</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>zyy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>afe660bdb740bd17445df840aa04f7789</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>zyz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ae34d31276831ab92dffd00c67e82a86f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>zzx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a58f50fc08dd709678e99b9219ba565fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>zzy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>afa2b39c9bff2a47e32fab5d9b502e033</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3&lt; T &gt;</type>
      <name>zzz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ad7ce2b634f7370242ed5aebe7c1d5e0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xxxx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>af21b13945ae1041d921120eec9832dfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xxxy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a570dd4bbd44d54d54e53cbcff64e8738</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xxxz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ab0887e19ea68294f2980be56f39da745</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xxxw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a195705fd4cbca3e0f81fa4bbc0d524ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xxyx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a6177f04d39465e111c9862fa7e52cc3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xxyy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aa4278531953557ee3125d43c6c21f5f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xxyz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a1cc822f51cf66760c767f830f5ba2039</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xxyw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a22d75084c67c5eaa8ec5020654773d89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xxzx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a05c889dc8f53935900757b657c49ba32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xxzy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a25af6c47f824eb8bf78041e4b6904350</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xxzz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ae733232727f585f966fb893d54f5e281</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xxzw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a7180a928daf02d0c9a5690832d7ae2fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xxwx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a83520000462973a081a22480b88acb20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xxwy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a3c8e22f092c9a83ba456552a159b3076</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xxwz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a25b8ecaaf8a9349dc44e126ad0d11bed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xxww</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>acf80742fff59df7e2e180aac5578eb55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xyxx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>af84aedd36bc2b6bec119e6166b7cabef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xyxy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a04325e557d0644cb31f08ea2dad4e7d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xyxz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a44c05c60f246188e6167a0675c33df7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xyxw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a6acccee3f3a27010369db2b860ecade6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xyyx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>afce4fc24affee1a14643ff44110eed30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xyyy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ae993efff05772eec0a2274976e90c907</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xyyz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a05d84e0ac729c37e46e80c1efbe23f34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xyyw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ad1af9f0bfa0d1e0198d38199ed7817f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xyzx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a1cc1a16f58c122eedcff2930701eecd5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xyzy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a31b9131e7f9dded28ccb2fdac4fbb55f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xyzz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a143dd0b228e3e368c99ba7a1413406c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xyzw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a7f91400f04007d13d18f58e79f9cef1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xywx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ac4e694108ee846d791dc8be81410eb58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xywy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a0135420ca6e97083cf5c0ffd686bf05b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xywz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a15d8e169f619c98b9d89ce2af926638b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xyww</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aeaf3c87200960cfeaf460cf47726e22f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xzxx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a475e0120af58a192a9a6ead8aa104a1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xzxy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a6f39e81dc1562486a6b829ff38d3e870</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xzxz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a5e1149e0dc73e735d38d4e1adec82379</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xzxw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aef42e8660509a547a429f05330cda1e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xzyx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a3ba434469301969404e09024bc6c812a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xzyy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ae1d20508a13d4386df9ae740a6d325a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xzyz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aab7b4d6693bda6162412382da7153f2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xzyw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a0b9e5e7779260d58936365ce5dc0701a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xzzx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a65872c4c6a527a80ce2ff3836983c8c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xzzy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a2b4349bae3cd26c6ef80f85f2bfa534c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xzzz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>acf210547fa79aa62f37b812d80317594</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xzzw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a833b2339278110a88b68459f3df90be7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xzwx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a7f44f78d551972db3fb92eb3d94e26e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xzwy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a4abdfb1e8aa650268604cc4878f30946</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xzwz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>af4d52ffa3a8d8df0b17115c35f82a2f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xzww</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ac96e02d2ed56087ac885fa50a8d59e53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xwxx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a99e2bce93a816d9ca58a06df413fa422</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xwxy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a69b4edb09aa23f33b9ac2fdec35647d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xwxz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a94269311c5cee3d10a3f79c9d3c1bee0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xwxw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aa3e83e464ecf9b917f47bb636a15ef0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xwyx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>adacc8a7d303bbbaab68f9c12de2802a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xwyy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a19de362ab163a308603510328195cba4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xwyz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a4f90c814e13aff03212b307f1e215ee6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xwyw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a3d7efa55b6a13991e81f2b3ad82a1e3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xwzx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ab9c5730dd1c813961628df792bd12099</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xwzy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>af529ef4e20fd56f9a231de5b10b30234</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xwzz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a2761631dd6e8761b90d236a1ea7dc4b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xwzw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a2f82f2d9b4ef5143fc8a89b6e702fd4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xwwx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a0ce2b22dee08dc8b3a31207f3df400dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xwwy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>abfeabfbcc27ed6b29e1d0b00521cd18d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xwwz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a5765a5e9e4fb54e8000a5f31c8535ad1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>xwww</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aaa79a61ac4de9b148f5913c94ce5f8cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yxxx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a7e6638bfc1ade24e4b5574311d06f0a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yxxy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a3d1b18ae1e664182d741992fb1d6b052</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yxxz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a414f6d645e9178fc252cdfc2a04533a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yxxw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a92519021dae5259bb4232e694f86030f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yxyx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a54b436cd65756b7954012b177577b39a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yxyy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ac9669f6858eaeb54edc4fb3f2c211943</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yxyz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aa6bb3fb8d734f1495aaeeb32eabf5a53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yxyw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>abca50abb7b70f75d7da068e9ad9a0397</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yxzx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a75e1c422d8fc4b417bbabf9ff0a47b15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yxzy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>affe4c8c0e80bb9f97bc2ba258d6c6ecf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yxzz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ad05e43d40202cd80ab78e007cd442a7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yxzw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a7c7d52a85bfcd7a4988d25acaee7ff54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yxwx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a9afae8a6ea13e08518b7a09c99a79d0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yxwy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a42593f5c994e4db15002baf188bc9b5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yxwz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a16b0c00c3a57fbbd0e33ae5e1663072a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yxww</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a37129b8938d00099db7fda0c3a4aabb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yyxx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ae18e103a6e75fc0daf1771ce015de71e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yyxy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ac9a91cbb26e9e2b2567007b61844c30f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yyxz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ab3ee866eb696fea7a65079ac3eb89b3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yyxw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aa066468cadf15b2c59be2e06f1c71bdc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yyyx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a24f289ad53be9ac6d9a194d97a285e79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yyyy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ac7578fc28c0f9c5182dc92f485ce48bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yyyz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a4cf33ea4e9058c62cb422cf4d8cbd6a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yyyw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a55611fc298a9bf9bc8e4127a1f60df7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yyzx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ad95b811e96974ed91de2f35390470d14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yyzy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a3c75ed9649efe8322bf95a1e064bc0a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yyzz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a5ecb94c549832bec28209b66e62c9246</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yyzw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ae50293321518665a881d2769549cc6e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yywx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a289773a8399cdba0a507404f3444194b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yywy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a21d21dab3f84bda9d228c88e5e769a98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yywz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a3607a013e262972ef43a58dd54da0f48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yyww</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a6dfca93c95f104ab945898151de708ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yzxx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a6a619851f09517fbfffa7781d5a0bc64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yzxy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a067ce7b1f1ff6c0e6381464b71ff57d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yzxz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ad38d995a4652fb110cf1143da7210d55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yzxw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aeb9436c3affeab6b5b72f5c55e93635f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yzyx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a5f5989ca575728e80eac5b1f48b72f75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yzyy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ae74efa532581fa5d5673cffa6902bd15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yzyz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a5886418eefefcc917114d5f1a15bf388</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yzyw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a16b11ec0d9ea54a6ebc69c685b1c1260</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yzzx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aa22b7b25573f3ade01a0e59794fd12ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yzzy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ad6bf85c408879f951d199056e9e605b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yzzz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a900ff17d38c8d45fb61b99a5f8504e34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yzzw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a01ea899bf470e36f03ba86ba4803b49f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yzwx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ab13016ed313155d8982b89c096a89ccf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yzwy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ac1c4fe88f3244bbd853232f0a3f0c18b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yzwz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a7e5e3065c4c1c41019b27dcab04eb218</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>yzww</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a206e7a854bb6dda1c57a913216a25c5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>ywxx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aa2d14be7b962d862fcb903015e24ee99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>ywxy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a7bc09b1d9118fde7a36075b4fd8a8986</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>ywxz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a9383e2fc6b3ef03dba0f392435d86f9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>ywxw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a37c3445d77a49f18efa2764bbfe532f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>ywyx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a2283d8146c5453c9da07d179d4e0ed5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>ywyy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a811a8469708a37dbe1c15f1c2c6eed33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>ywyz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>af36ced81e65b90b91a36398d23794fd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>ywyw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a07c1f0635b31209671bc6a8f51fc59e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>ywzx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a8bccc518a036f4c80b49bd9128a8ceed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>ywzy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ae33813c131fa6cbe4845b2b18cb9ac7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>ywzz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a41f67465dac934c94c22349ba9de0660</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>ywzw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>af903c3f7fd3261ba312ef7d3d6157a32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>ywwx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>abe7522a42eee00dd9f01cc251d39a283</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>ywwy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a76aefcce1862d1f2df26c13ba71f5128</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>ywwz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>af29ccdf36914273ef18e106378572108</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>ywww</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a80de1db7bdb1f2a4f64235b28af5b75f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zxxx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a737f9a0edc5a07e2c5ba211e5fd2a41c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zxxy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a549e7e8b44c2bdd4cda1831fa3ad90e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zxxz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a8744e12d9bf730e11f659050d3c76f20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zxxw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a8579d8a19947ee244198714308709cda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zxyx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ab98fedf82fe77f673ff2c3024e5700ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zxyy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>abcadfa98cc64d9dbbed0e77da1616395</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zxyz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a72bad36f96ddb636bc60b77df5f8ad67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zxyw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a1e3c4de685ce480311c7da3f76bc5e5c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zxzx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a1495b82d084756986017d9cafa038a3f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zxzy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ac64611db70bc4115a2b730eac329cf2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zxzz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a5708b32aa1ee4460230ead743182bd6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zxzw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a9c2fbd3a074d1af5229e45d04c8a8a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zxwx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a064f71f115c1e89dd5275a2a67a05093</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zxwy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a4710281300f875367bc1f0620b0c7173</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zxwz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a87103d5ed662cd389748c7788d2b5d75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zxww</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a5bd19e2f17d435983b3c8dffe19635de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zyxx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a932e5bf9d5d48507b3dbcb7765a42c66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zyxy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a756f7ce3a6022fd15e79d8bbf99c926e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zyxz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aabf2137eda08abc50c01bcc2ca0f9466</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zyxw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ad6d88aa2dc25ea54a8d306e6972859a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zyyx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ad00495aad0f15aae8ad321e400aad09d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zyyy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a682361b5562f26a67675afb3d95bedf4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zyyz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a2b598e5d64a1978a2f61b0e024114432</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zyyw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a14d3c3fdc62da3cccbeb39d245e16668</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zyzx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a971fc4df6affb4340b5aae2fd9571e16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zyzy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a7d5d92210caca499d4e7233e0c00458f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zyzz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a7192b02883b20d4c95b6f1999d1af328</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zyzw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a8760fd06b853561a2c6cba6f5157a312</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zywx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a89d135cd4b6e88c81862c779deb59fc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zywy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a1db0fc8cf2d056cd59d0ea500f03a2d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zywz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a2da3219f8b3f25dde542f6fbc2e5c09d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zyww</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a0ddb0bd9c3496790cbdf0e738f31c32d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zzxx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a22fe062721e26d36a96e5c159427537f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zzxy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a48dda8c1d072b1c7dda0454623f60247</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zzxz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a7a01aff62b1b53521e206901ec738a79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zzxw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>abcd84a8c58a0d2a98574480e85ca9816</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zzyx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aef344c7aa6aace563e8616730ce61535</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zzyy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a124e33865883eba94b53e47dcf4b2863</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zzyz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>af9bec71ac27a9f9ef2b86ea8ef58657c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zzyw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aa3a53144a2212b8b9923954afcb4c3b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zzzx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a79397062ac6f2d5d80f1f598b5cf5a2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zzzy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aa3bc21791d2ae69a799ca07fc924adcb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zzzz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aec4575f5ad3eb8f3d86ac7f251058e0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zzzw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a0fc979f15ece9ccc02af4016047373a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zzwx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a09db507bb8b226c5b810edce540235a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zzwy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a9456de6506a87195f84f112933d36ee7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zzwz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>abd91e997dbc76279a6a82869dc377115</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zzww</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ae57b99eabff8a9dd6fac636ece469e9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zwxx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a1f3389794924c0a40768c6a90bd7789c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zwxy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a52d5b6daa3880914b366e79fa30a36a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zwxz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aeed8f246b8e3b2370ab589c94163da0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zwxw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a4ecec201d88e57fa95f960bfa34eb719</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zwyx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a5a62b5f1b88baf82572550f1498ad2be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zwyy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a972abb23e7f432664b0a980434f63b45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zwyz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a50b628d2081c0e9a0ded3dad68f35a05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zwyw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a8227f42bbefb313b58d34c9f0473fe7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zwzx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ac1eb3099b59d8446727820982e8a10ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zwzy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a8cb7e57dafe260a9a654d169d8d3f6a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zwzz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>afbf575e649b634a174bf485371f3c5e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zwzw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a9813c0542e582a6b3dbb0a3acf4578b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zwwx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>af18b98e6d91b72ac691bb7cf9d89fbb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zwwy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a9735ead3fd4a2a5dc4648cddeb667f8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zwwz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a0477c8fce5cf7e2686601a09f2ac2471</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>zwww</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a8535e95511c7599de450307cfafb25cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wxxx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ac4d6fff46e2bfa0d8dedecf31f3dacc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wxxy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ab46415d97e2232634b5a2c76360f2fbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wxxz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a587da44c20abdec3ea0235379fc483ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wxxw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a0122bae904d25807da033d7f7c611071</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wxyx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a568677b392b3282785791b5aeb3d2729</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wxyy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a9dcc0dce383192b7a80ffb9a54111f4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wxyz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>afb845693899f00cebd18aa79ad773de6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wxyw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a381c613cd2dfcab08a5d3fc70474cc57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wxzx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>afc613939a4deea5c4db354eaaefaa838</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wxzy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a99c29065e0fc86db6bcc1902b0b17f96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wxzz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a6e7cab3b3c891b6f2554f378314f4c7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wxzw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>af4caab6f885a05fcd43c8dfefa247533</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wxwx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a454cf8811f1124cff8f83b586e1ab1ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wxwy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a9f222eb41b753bb4aac630213ecc507b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wxwz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ad7e785aa841a338efcb9b57b28326884</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wxww</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a55dda41297f2de4f56e620ce0e97db66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wyxx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ad9ae1d0682779669ad4f7fd100a32bf0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wyxy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a05d567ce0e7408d4471fe8f15d10f4f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wyxz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ad9bd046f5eba5116e85eeb3ab9b9b19b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wyxw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a184a99482b8767aefc498db0785b9365</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wyyx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a6ce097174bb772f64bfdec91bc2e4489</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wyyy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ada7dd5baf6a26d8cf8c6a0873608748c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wyyz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>af1da3bc5c538eda26d2d217288afaf88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wyyw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a539d402d17868c7021a847136aab075e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wyzx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a022865712625e8d4a05ab8a77258101e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wyzy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>adde44970deb56bacd6a7633e19807b12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wyzz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ab35c7a27101db990c7b674165e0e344c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wyzw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aed685815a5fb5b022385e2eaa337088b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wywx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a396bd337cb564aee2be9640031edf190</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wywy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a748972395b51522723a2137c696f9fef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wywz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a7caf3f2f7fc36982adf7ca153e9a4116</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wyww</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a7bbf8a289a2be6779cc75271e572a735</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wzxx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>acb73aa7cfff35c9d4f881f3df5fd97b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wzxy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a186c8360f870ee1191661139cb7fd05b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wzxz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ad4e5241b9723409217bed15577dca74e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wzxw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a3fe86fc14df9361c6d33f6a7d7363dff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wzyx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a1348c44b63740af2169f7941316e18c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wzyy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a75130f755948e9cb7b31d29415f1af0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wzyz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>abf592b9cf7d596cca88e00ff4ff7bbca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wzyw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a4c5e0cca8f214f91fc6393840e0118b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wzzx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a14c0216eaa68348c43349c797a4753cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wzzy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a20d5716b4d5dc0a77b01b44d89820ad9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wzzz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a051bd2eb09ae2ba96af9fed34c92db7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wzzw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>afe3a561792063c7a594e264fdf7a598a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wzwx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a7206323c701b6e35b4677c6a305e73cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wzwy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a838ad307c80e098cd70e08e3adf8d28d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wzwz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a2faf238d317cc894709e095d81b95510</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wzww</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a3bfbef6ab33533b266a497ac6947cc07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wwxx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a325ab28a8c5edfd8814c0b69b55993fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wwxy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ae3785ad5c5f20a3fe7ac76b59b491aef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wwxz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a4f78e9b87ae0eaeb4f17c13b36ef991c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wwxw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ab1ba0f282ac87e207de718a479a3d2fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wwyx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a368afe22051402ed1e703014f768b155</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wwyy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>addf591960e2368ce9beb21994ca12e08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wwyz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a0fa25f35a956cfb486ea5fc590d51c48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wwyw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a1f0f0d4e66890aab145baa0005d68045</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wwzx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a5a6c55151b1feb7beea5a581f599b3a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wwzy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>adc823f8eb9905b231b01b79600b137a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wwzz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a53f50590c13d7edcb1a450098e41d895</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wwzw</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a6c8a6c4535edaca9ed17073417fe0e98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wwwx</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a7832f3ec3dcee99aaa39296ed7c6eaa9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wwwy</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a02e598def07ea2dfc590ae2abb2e9816</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wwwz</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a2e27aa02417e88fcb19814c7584ca565</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec4&lt; T &gt;</type>
      <name>wwww</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>aa158733d4ed3a95ed91fc62e63497e1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec4&lt; T &gt;</type>
      <name>max</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ab27e488207fe91ffe9ef0e22b5fd4b66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec4&lt; T &gt;</type>
      <name>zero</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a1fb6ff9817f26ee76040685f5b4dc4ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec4&lt; T &gt;</type>
      <name>one</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a95412c92e89937df5bc2775bec2bd71c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec4&lt; T &gt;</type>
      <name>xAxis</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a1a30c8317170db10fdd9fb0fd39eed59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec4&lt; T &gt;</type>
      <name>yAxis</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a77224635829b858d10bce7ee0cd29b8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec4&lt; T &gt;</type>
      <name>zAxis</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a16f0ade41005aa31d14a2e116b417ff7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec4&lt; T &gt;</type>
      <name>wAxis</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a4c5a894d11a92d0d8b18cb07c69a4cd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec4&lt; T &gt;</type>
      <name>NaN</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a3b8ca6d0625f2677d4d42c3d33bb0dbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>x</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ac9fbbcb44990a43063ebfc79e13b7fce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>y</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a058d3470a5154b3b74f25e82922df7c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>z</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>ab21aa6ffa7512e29ad92560c138ba951</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>w</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a8cf00871b12002ea980ac4875ab52dbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>DIM</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a14f78779a54a3c20daba4a83ef15f4bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classcinder_1_1_vec4.html</anchorfile>
      <anchor>a3fc3a0f26c33111f856376c38d449b75</anchor>
      <arglist>(std::ostream &amp;lhs, const Vec4&lt; T &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::XmlTree</name>
    <filename>classcinder_1_1_xml_tree.html</filename>
    <class kind="class">cinder::XmlTree::Attr</class>
    <class kind="class">cinder::XmlTree::ConstIter</class>
    <class kind="class">cinder::XmlTree::ExcAttrNotFound</class>
    <class kind="class">cinder::XmlTree::ExcChildNotFound</class>
    <class kind="class">cinder::XmlTree::Exception</class>
    <class kind="class">cinder::XmlTree::ExcUnknownNodeType</class>
    <class kind="class">cinder::XmlTree::Iter</class>
    <class kind="class">cinder::XmlTree::ParseOptions</class>
    <member kind="enumeration">
      <type></type>
      <name>NodeType</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a6135324728befd55633fa464dd388cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NODE_UNKNOWN</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a6135324728befd55633fa464dd388cf3a01e947060288e1a689b1e826fedb4d43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NODE_DOCUMENT</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a6135324728befd55633fa464dd388cf3a66b75b28758770b0b204c07f0a58a998</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NODE_ELEMENT</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a6135324728befd55633fa464dd388cf3afc25b2be41435376e0aa57bed3066a03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NODE_CDATA</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a6135324728befd55633fa464dd388cf3a9741e1ef02650327f32b92941568703b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NODE_COMMENT</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a6135324728befd55633fa464dd388cf3a9161963f1ea5ef47bda99db3b2187c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NODE_DATA</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a6135324728befd55633fa464dd388cf3ac0860148f3ea9de5e6d3e2e97479e474</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlTree</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a01f95ee0830d2654814a95949fe1d1e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlTree</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a9b42cb008fa1191cd0ef23c96da04483</anchor>
      <arglist>(const XmlTree &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>XmlTree &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>afd83aaf9ee01beb2a72f84e96aa50fb0</anchor>
      <arglist>(const XmlTree &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlTree</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a90e6e916f4e6abdeb13ab410b51f741c</anchor>
      <arglist>(DataSourceRef dataSource, ParseOptions parseOptions=ParseOptions())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlTree</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a3cab4602ab2ec2322ee8fc9764ad1f72</anchor>
      <arglist>(const std::string &amp;xmlString, ParseOptions parseOptions=ParseOptions())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>XmlTree</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a837e1f7848d7990a8c1cb1f1b9840765</anchor>
      <arglist>(const std::string &amp;tag, const std::string &amp;value, XmlTree *parent=0, NodeType type=NODE_ELEMENT)</arglist>
    </member>
    <member kind="function">
      <type>NodeType</type>
      <name>getNodeType</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a96eb0930ac8e13466ff645c753eb9105</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNodeType</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a47e6dbaa4a27f14bf5be4c2681922026</anchor>
      <arglist>(NodeType type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDocument</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a0424ce87c797ad3984429605f0ab91fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isElement</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a063712d000ef66f3a56be37b4b9dde39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCData</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a9b13245525475aff69577c35710aaf25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isComment</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>ad429f6fcad3cbf84411f223963afb0b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a045c5762e7c1d007b99994435975f11a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>afdb3bf6fa7cf6d66b700ac82c6a6be5d</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getValue</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>acc7f1501311af5db881eaada1512bb17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getValue</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a5ec7740a5357a3e3d2b988b7e4688e26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getValue</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>adc8883b135cd540135fdf2bc64015098</anchor>
      <arglist>(const T &amp;defaultValue) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a8ecacf6938bc26056445689eebff10c5</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a7b08aad8b917bfb227bfab429bf851aa</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasParent</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a82329654b35fb0cc821d39317378656d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>XmlTree &amp;</type>
      <name>getParent</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>abed9f24668e197147951b22ddf1e91a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const XmlTree &amp;</type>
      <name>getParent</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a4a8fcb3fc5e3d74d42afe225978f71fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iter</type>
      <name>find</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a2bacc49d3fe4a9c8a00c31eece9551ac</anchor>
      <arglist>(const std::string &amp;relativePath, bool caseSensitive=false, char separator= &apos;/&apos;)</arglist>
    </member>
    <member kind="function">
      <type>ConstIter</type>
      <name>find</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>ae228cdcd69e5200a0a1431e45d24fb14</anchor>
      <arglist>(const std::string &amp;relativePath, bool caseSensitive=false, char separator= &apos;/&apos;) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasChild</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>af2e92b166037a51b1513810537cf6331</anchor>
      <arglist>(const std::string &amp;relativePath, bool caseSensitive=false, char separator= &apos;/&apos;) const </arglist>
    </member>
    <member kind="function">
      <type>XmlTree &amp;</type>
      <name>getChild</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a0330c31f8c01d342779c0d2f6da26ab5</anchor>
      <arglist>(const std::string &amp;relativePath, bool caseSensitive=false, char separator= &apos;/&apos;)</arglist>
    </member>
    <member kind="function">
      <type>const XmlTree &amp;</type>
      <name>getChild</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>ac9a39ee4e844271e6fa3e2e99b461ddf</anchor>
      <arglist>(const std::string &amp;relativePath, bool caseSensitive=false, char separator= &apos;/&apos;) const </arglist>
    </member>
    <member kind="function">
      <type>Container &amp;</type>
      <name>getChildren</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a3dec2bb17a23b776b3476a7f9ebcf06c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>getChildren</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>adea98b6686a4731c79fb3d9d8d1f2a43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; Attr &gt; &amp;</type>
      <name>getAttributes</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a5c1ba7c42a42fc449c923ecd8e46ad0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::list&lt; Attr &gt; &amp;</type>
      <name>getAttributes</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>ab1b3c1c4e2e2ca68d4061762394a84d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Attr &amp;</type>
      <name>getAttribute</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>abf98dd773a4e571a9114cd97b89ab866</anchor>
      <arglist>(const std::string &amp;attrName) const </arglist>
    </member>
    <member kind="function">
      <type>const Attr</type>
      <name>operator[]</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a080283243a5c83a3aeccbac7b4e4f5ae</anchor>
      <arglist>(const std::string &amp;attrName) const </arglist>
    </member>
    <member kind="function">
      <type>Attr</type>
      <name>operator[]</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>ae9ff1eb0563b3841599633902f4cc175</anchor>
      <arglist>(const std::string &amp;attrName)</arglist>
    </member>
    <member kind="function">
      <type>const XmlTree &amp;</type>
      <name>operator/</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>ad23ae9f5746fa84bb424e1b642fc8406</anchor>
      <arglist>(const std::string &amp;childName) const </arglist>
    </member>
    <member kind="function">
      <type>XmlTree &amp;</type>
      <name>operator/</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>acfa3547141c5348f692a13420a9b6f06</anchor>
      <arglist>(const std::string &amp;childName)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getAttributeValue</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a2a35e96659494390cc83dda18a280da7</anchor>
      <arglist>(const std::string &amp;attrName) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getAttributeValue</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>abf1a582f7f3d2d95484af91148594e7f</anchor>
      <arglist>(const std::string &amp;attrName, const T &amp;defaultValue) const </arglist>
    </member>
    <member kind="function">
      <type>XmlTree &amp;</type>
      <name>setAttribute</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a83360683794db21d32e54ff36c18ca8b</anchor>
      <arglist>(const std::string &amp;attrName, const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>XmlTree &amp;</type>
      <name>setAttribute</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>ad91f3e102894c5eb2092c3518380a016</anchor>
      <arglist>(const std::string &amp;attrName, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAttribute</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a513316a31348c6abe62ea68afe24cd96</anchor>
      <arglist>(const std::string &amp;attrName) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPath</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a30b692af881ada011cf94668774ec7a9</anchor>
      <arglist>(char separator= &apos;/&apos;) const </arglist>
    </member>
    <member kind="function">
      <type>Iter</type>
      <name>begin</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a932a9559ce3cacb3ddaa58f65e268741</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iter</type>
      <name>begin</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>ab653d685ae80e5b2dc07bd9fea8ea8be</anchor>
      <arglist>(const std::string &amp;filterPath, bool caseSensitive=false, char separator= &apos;/&apos;)</arglist>
    </member>
    <member kind="function">
      <type>ConstIter</type>
      <name>begin</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a5d4c86660311df7521a072cf1a0ca819</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIter</type>
      <name>begin</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>ac307060ca81356a4c933cd044f8781b0</anchor>
      <arglist>(const std::string &amp;filterPath, bool caseSensitive=false, char separator= &apos;/&apos;) const </arglist>
    </member>
    <member kind="function">
      <type>Iter</type>
      <name>end</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a54fb430a869b3fd52454be0299687844</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIter</type>
      <name>end</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a816215cf3b78571dbae42f4a615cfc19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a28acc1795c319d4942971831e2bf8909</anchor>
      <arglist>(const XmlTree &amp;newChild)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDocType</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a3d19c06be47e41ddc45320d82e8d82b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDocType</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>aedb4679688440778e82230b06888c60c</anchor>
      <arglist>(const std::string &amp;docType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a33392d8f768b5bfc9fa23890ca4deea0</anchor>
      <arglist>(DataTargetRef target, bool createDocument=true)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; rapidxml::xml_document&lt; char &gt; &gt;</type>
      <name>createRapidXmlDoc</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>acb6cfbb1df884505021b32f9b9c66ba1</anchor>
      <arglist>(bool createDocument=false) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static XmlTree</type>
      <name>createDoc</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a572922d4a13bf6ef8391f2e5f11a9c55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classcinder_1_1_xml_tree.html</anchorfile>
      <anchor>a0f002c0af29c06e9c69689346afac943</anchor>
      <arglist>(std::ostream &amp;out, const XmlTree &amp;xml)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::XmlTree::Attr</name>
    <filename>classcinder_1_1_xml_tree_1_1_attr.html</filename>
    <member kind="function">
      <type></type>
      <name>Attr</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_attr.html</anchorfile>
      <anchor>a4da06418e7cb33e89539a6d3d60edc7b</anchor>
      <arglist>(XmlTree *xml, const std::string &amp;name, const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const std::string &amp;</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_attr.html</anchorfile>
      <anchor>a210904d7cdd18f98d6d6cd689423dfd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Attr &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_attr.html</anchorfile>
      <anchor>a9bc9686e6898a95d9c477bb43c4ba3f4</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_attr.html</anchorfile>
      <anchor>a570e398f0e02d93bdbe2a4d576dee090</anchor>
      <arglist>(const char *rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_attr.html</anchorfile>
      <anchor>a5332e29b17c1f11475c2c21062ed41d2</anchor>
      <arglist>(const std::string &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_attr.html</anchorfile>
      <anchor>a0c763775cc8478c816ce99a09aaf5c5a</anchor>
      <arglist>(const char *rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_attr.html</anchorfile>
      <anchor>a3ab931e08a97e53dbe94b63e6a5fe6e0</anchor>
      <arglist>(const std::string &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>as</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_attr.html</anchorfile>
      <anchor>aa735ca34a55ebbcd13bb853eb6b20b41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_attr.html</anchorfile>
      <anchor>a70ff225c5eeef35da26c12e4a0fa262d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_attr.html</anchorfile>
      <anchor>a7c3f3133d0f6b0898dd517018e3f72c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getValue</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_attr.html</anchorfile>
      <anchor>ae59186d3bc4c232ee93a477aec64946b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getValue</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_attr.html</anchorfile>
      <anchor>ab2755d29491b544bbab3be41cec79bc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_attr.html</anchorfile>
      <anchor>aaefff4f9bd349279f65719bb17ab4e21</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_attr.html</anchorfile>
      <anchor>a0c0c3187b7ee0c61c6e3ba66c537e82f</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::XmlTree::ConstIter</name>
    <filename>classcinder_1_1_xml_tree_1_1_const_iter.html</filename>
    <member kind="function">
      <type>const XmlTree &amp;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_const_iter.html</anchorfile>
      <anchor>a43c748768c7a3d1c5010dd89a1ccddca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const XmlTree *</type>
      <name>operator-&gt;</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_const_iter.html</anchorfile>
      <anchor>af30218a2a3c442ca17ac902e1fcef4c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIter &amp;</type>
      <name>operator++</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_const_iter.html</anchorfile>
      <anchor>ae80043481eab6eda6a4d75441bbed9d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstIter</type>
      <name>operator++</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_const_iter.html</anchorfile>
      <anchor>a004b361133024a22c9007e8f8a5e9420</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_const_iter.html</anchorfile>
      <anchor>a4d4263972e3c2520c30f296d2e28264d</anchor>
      <arglist>(const ConstIter &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_const_iter.html</anchorfile>
      <anchor>aa4871a46de38cab83d022c488c9bff25</anchor>
      <arglist>(const ConstIter &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::XmlTree::ExcAttrNotFound</name>
    <filename>classcinder_1_1_xml_tree_1_1_exc_attr_not_found.html</filename>
    <base>cinder::XmlTree::Exception</base>
    <member kind="function">
      <type></type>
      <name>ExcAttrNotFound</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_exc_attr_not_found.html</anchorfile>
      <anchor>af1da287102d7f4ed8b83ab387c027284</anchor>
      <arglist>(const XmlTree &amp;node, const std::string &amp;attrName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_exc_attr_not_found.html</anchorfile>
      <anchor>a1522bbe2006a1e7ef7644eb83c8d7c3a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::XmlTree::ExcChildNotFound</name>
    <filename>classcinder_1_1_xml_tree_1_1_exc_child_not_found.html</filename>
    <base>cinder::XmlTree::Exception</base>
    <member kind="function">
      <type></type>
      <name>ExcChildNotFound</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_exc_child_not_found.html</anchorfile>
      <anchor>ad5c9334098887461565f2dfe3323ca9e</anchor>
      <arglist>(const XmlTree &amp;node, const std::string &amp;childPath)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_exc_child_not_found.html</anchorfile>
      <anchor>a038f7d92583858735a90c780ca67636c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::XmlTree::Exception</name>
    <filename>classcinder_1_1_xml_tree_1_1_exception.html</filename>
    <base>cinder::Exception</base>
  </compound>
  <compound kind="class">
    <name>cinder::XmlTree::ExcUnknownNodeType</name>
    <filename>classcinder_1_1_xml_tree_1_1_exc_unknown_node_type.html</filename>
    <base>cinder::Exception</base>
  </compound>
  <compound kind="class">
    <name>cinder::XmlTree::Iter</name>
    <filename>classcinder_1_1_xml_tree_1_1_iter.html</filename>
    <base>cinder::XmlTree::ConstIter</base>
    <member kind="function">
      <type>XmlTree &amp;</type>
      <name>operator*</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_iter.html</anchorfile>
      <anchor>a1bf3a0ec3a087b1e3d37cabb9abfd49a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>XmlTree *</type>
      <name>operator-&gt;</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_iter.html</anchorfile>
      <anchor>afc8f5b83a85fd0092b13d495a468a44e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iter &amp;</type>
      <name>operator++</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_iter.html</anchorfile>
      <anchor>abf0a472c3d219a60fcfc1d2788eb25f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Iter</type>
      <name>operator++</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_iter.html</anchorfile>
      <anchor>a2993c9e67e1eae3777e08449e9556a7f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_iter.html</anchorfile>
      <anchor>a0f927173eb90432029a083c5cb2387b8</anchor>
      <arglist>(const Iter &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_iter.html</anchorfile>
      <anchor>abe556a2444b8b0db1e5a2f61e5b15f6a</anchor>
      <arglist>(const Iter &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::XmlTree::ParseOptions</name>
    <filename>classcinder_1_1_xml_tree_1_1_parse_options.html</filename>
    <member kind="function">
      <type></type>
      <name>ParseOptions</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_parse_options.html</anchorfile>
      <anchor>a46bacca3dc71d36cb84bd378238baf67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParseOptions &amp;</type>
      <name>parseComments</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_parse_options.html</anchorfile>
      <anchor>a86015d0dcf27100e9a0b86d74071b9a2</anchor>
      <arglist>(bool parse=true)</arglist>
    </member>
    <member kind="function">
      <type>ParseOptions &amp;</type>
      <name>collapseCData</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_parse_options.html</anchorfile>
      <anchor>a43b0360a96779db5a6bc1442f4913696</anchor>
      <arglist>(bool collapse=true)</arglist>
    </member>
    <member kind="function">
      <type>ParseOptions &amp;</type>
      <name>ignoreDataChildren</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_parse_options.html</anchorfile>
      <anchor>ad54a1262fc2556b1faf84f73934b4ad9</anchor>
      <arglist>(bool ignore=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getParseComments</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_parse_options.html</anchorfile>
      <anchor>aa8546dd6718ba690e2813792635f1be9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParseComments</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_parse_options.html</anchorfile>
      <anchor>a213adebec9d16d1367636b950cd7850e</anchor>
      <arglist>(bool parseComments=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getCollapseCData</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_parse_options.html</anchorfile>
      <anchor>aed425565d5a45e5f8c648fbdc157f5d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCollapseCData</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_parse_options.html</anchorfile>
      <anchor>a7e61362a669e1813c6a47e1dba809160</anchor>
      <arglist>(bool collapseCData=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getIgnoreDataChildren</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_parse_options.html</anchorfile>
      <anchor>ac4d37ceb155ae1548d491723a8d9e102</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIgnoreDataChildren</name>
      <anchorfile>classcinder_1_1_xml_tree_1_1_parse_options.html</anchorfile>
      <anchor>adfe08f1f7c5af51863f7503ff6b63df5</anchor>
      <arglist>(bool ignore=true)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>cinder::app</name>
    <filename>namespacecinder_1_1app.html</filename>
    <class kind="struct">cinder::app::BooleanOrEventCombiner</class>
    <class kind="struct">cinder::app::BooleanAndEventCombiner</class>
    <class kind="struct">cinder::app::BitwiseAndEventCombiner</class>
    <class kind="class">cinder::app::App</class>
    <class kind="class">cinder::app::AppImplMsw</class>
    <class kind="class">cinder::app::WindowImplMsw</class>
    <class kind="class">cinder::app::BlankingWindow</class>
    <class kind="class">cinder::app::AppImplMswBasic</class>
    <class kind="class">cinder::app::WindowImplMswBasic</class>
    <class kind="class">cinder::app::AppImplMswRenderer</class>
    <class kind="class">cinder::app::AppImplMswRendererGdi</class>
    <class kind="class">cinder::app::AppImplMswRendererGl</class>
    <class kind="class">cinder::app::AppImplMswScreenSaver</class>
    <class kind="class">cinder::app::WindowImplMswScreenSaver</class>
    <class kind="struct">cinder::app::EventCombiner</class>
    <class kind="class">cinder::app::Event</class>
    <class kind="class">cinder::app::FileDropEvent</class>
    <class kind="class">cinder::app::KeyEvent</class>
    <class kind="class">cinder::app::MouseEvent</class>
    <class kind="class">cinder::app::Renderer</class>
    <class kind="class">cinder::app::TouchEvent</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class BlankingWindow &gt;</type>
      <name>BlankingWindowRef</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a97fd1ac1b2206c380778a9a8185532a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AppBasic</type>
      <name>AppNative</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>aba1cfc1d6453b74bfe98c135ca3a83e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Window &gt;</type>
      <name>WindowRef</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a174fc1a532214ee1c6709836e30dfb55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class Renderer &gt;</type>
      <name>RendererRef</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>ac0853b8cebb1960f1e447a9ee702e6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class RendererGl &gt;</type>
      <name>RendererGlRef</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>ab93a6c43656f0e9b6c073d9af543123b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>InterfaceOrientation</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1e19beaf18c41d11111186e34c5c9588</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Unknown</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1e19beaf18c41d11111186e34c5c9588ab4febc60aa25dca244a378932eb0cdf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Portrait</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1e19beaf18c41d11111186e34c5c9588af3edf95f4407e48b13d615167f301f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PortraitUpsideDown</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1e19beaf18c41d11111186e34c5c9588ac8f424c9cef950f20750dca9e2d8c36d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LandscapeLeft</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1e19beaf18c41d11111186e34c5c9588ad505e6aaa43959b776ac0192c4b058b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LandscapeRight</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1e19beaf18c41d11111186e34c5c9588a0aab4c75704e315b3492910ea2a1954b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PortraitAll</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1e19beaf18c41d11111186e34c5c9588afedd797e44be66da25ac679ec6e0b8a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LandscapeAll</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1e19beaf18c41d11111186e34c5c9588a8988a5cab65e97c7a39ef1a6863a3011</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>All</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1e19beaf18c41d11111186e34c5c9588a17d75410cc1dc2880e52758e3dc9aa8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a97f28a240e92fa4487df3ddd3256a258</anchor>
      <arglist>(std::ostream &amp;lhs, const InterfaceOrientation &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOrientationDegrees</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a7f6f1b4a7dbb7d44d141daa1bc5c6857</anchor>
      <arglist>(InterfaceOrientation orientation)</arglist>
    </member>
    <member kind="function">
      <type>LRESULT CALLBACK</type>
      <name>WndProc</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a7733cfd3230445d90fcfab2eecedec0e</anchor>
      <arglist>(HWND mWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</arglist>
    </member>
    <member kind="function">
      <type>LRESULT CALLBACK</type>
      <name>BlankingWndProc</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>afa87fcce557e3c5f25da30aabcce6687</anchor>
      <arglist>(HWND mWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>prepMouseEventModifiers</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a9ab147cf8e4e9c68ce51220589640e21</anchor>
      <arglist>(WPARAM wParam)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>prepNativeKeyCode</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a55c7705fae9716e7b1aa90fc304eae2d</anchor>
      <arglist>(WPARAM wParam)</arglist>
    </member>
    <member kind="function">
      <type>WCHAR</type>
      <name>mapVirtualKey</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>aa7dfe197bd1574f1f9fb269c576bdf72</anchor>
      <arglist>(WPARAM wParam)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>prepKeyEventModifiers</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>ab2f2c166b60e78d83bbb212b95ae476a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HWND</type>
      <name>createDummyWindow</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a3bcfb56b5e2ac88ebe6fba5e74ee7a0e</anchor>
      <arglist>(int *width, int *height, bool fullscreen)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a53bc4602c1a1b0568d8d77ea12572b61</anchor>
      <arglist>(std::ostream &amp;out, const FileDropEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>adbc1c49973da95cc8de67019be9f92c8</anchor>
      <arglist>(std::ostream &amp;out, const TouchEvent::Touch &amp;touch)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a95e76bc0770eb6f21f7143884ba16d87</anchor>
      <arglist>(std::ostream &amp;out, const TouchEvent &amp;event)</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>sMultisampleSupported</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a8b4be73eff97f9d62184412ef5c2a46c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sArbMultisampleFormat</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>adad8aba92f227df5cd28fc7b28666ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>map&lt; int, int &gt;</type>
      <name>sKeyTable</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1bcdf331ef120915e0d9823388eff457</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>__pad0__</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a3aaa20e3953abddfe255492f45082fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BooleanAndEventCombiner</type>
      <name>EventSignalShouldQuit</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>ac203ec26a44dbda34030a8c15b85dca4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BitwiseAndEventCombiner&lt; uint32_t &gt;</type>
      <name>EventSignalSupportedOrientations</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a85973d651490d206a0d9881567c45620</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EventCombiner&lt; MouseEvent &gt;</type>
      <name>EventSignalMouse</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a15f2dcd8edde81a939e76b6ef9a6720f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>__pad1__</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a8cfe450355148a0afdaeac62db7c0e5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EventCombiner&lt; TouchEvent &gt;</type>
      <name>EventSignalTouch</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a1d208a6ec662442765a76243b5541f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>__pad2__</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>ae6f74488fb7130c0de5c1bc4f87ab894</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EventCombiner&lt; KeyEvent &gt;</type>
      <name>EventSignalKey</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a90b2776e78df7849cbdb04f6aaf60cb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>__pad3__</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a73fbc38f0cd8b63c675d7e2d87f59722</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EventCombiner&lt; FileDropEvent &gt;</type>
      <name>EventSignalFileDrop</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>a6538af004eddca7dc3025f61378565e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>__pad4__</name>
      <anchorfile>namespacecinder_1_1app.html</anchorfile>
      <anchor>afb4ef5aa5770e3d273623448ffb9b265</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct" objc="yes">
    <name>cinder::app::BooleanOrEventCombiner</name>
    <filename>structcinder_1_1app_1_1_boolean_or_event_combiner.html</filename>
    <member kind="typedef" protection="protected">
      <type>bool</type>
      <name>result_type</name>
      <anchorfile>structcinder_1_1app_1_1_boolean_or_event_combiner.html</anchorfile>
      <anchor>af547ab332499eb45648bc2c2521dfb48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1app_1_1_boolean_or_event_combiner.html</anchorfile>
      <anchor>a6e0f304962242508536210885b661185</anchor>
      <arglist>(InputIterator first, InputIterator last) const </arglist>
    </member>
  </compound>
  <compound kind="struct" objc="yes">
    <name>cinder::app::BooleanAndEventCombiner</name>
    <filename>structcinder_1_1app_1_1_boolean_and_event_combiner.html</filename>
    <member kind="typedef" protection="protected">
      <type>bool</type>
      <name>result_type</name>
      <anchorfile>structcinder_1_1app_1_1_boolean_and_event_combiner.html</anchorfile>
      <anchor>a7e1944be4c02abbbf152a8b0b4e4d71b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1app_1_1_boolean_and_event_combiner.html</anchorfile>
      <anchor>a1f8d4be85244e3e4b3b1fd3e5c89f755</anchor>
      <arglist>(InputIterator first, InputIterator last) const </arglist>
    </member>
  </compound>
  <compound kind="struct" objc="yes">
    <name>cinder::app::BitwiseAndEventCombiner</name>
    <filename>structcinder_1_1app_1_1_bitwise_and_event_combiner.html</filename>
    <templarg></templarg>
    <member kind="typedef" protection="protected">
      <type>T</type>
      <name>result_type</name>
      <anchorfile>structcinder_1_1app_1_1_bitwise_and_event_combiner.html</anchorfile>
      <anchor>a21415a1baa9ae170c3086b2a1629ad52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1app_1_1_bitwise_and_event_combiner.html</anchorfile>
      <anchor>a8f500c90d802e1a6d3b90854940c2053</anchor>
      <arglist>(InputIterator first, InputIterator last) const </arglist>
    </member>
  </compound>
  <compound kind="class" objc="yes">
    <name>cinder::app::App</name>
    <filename>classcinder_1_1app_1_1_app.html</filename>
    <class kind="class">cinder::app::App::Settings</class>
    <member kind="function">
      <type></type>
      <name>App</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a4955daa366fd743907dd59f2f3fa659e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~App</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a78c66f24d0b27aad28297925aeb58882</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a5d00c8290e799445e072b5fd5c24ed67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>ad97f4ce068ad55b360b09c5dca5d27b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>af4dd0c8459354a9ced7250ad2a97dc9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>draw</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a19648361e5d7d80c738985d909de9a64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseDown</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a6c7445ec6e54f470e1fde9b1b05c26ee</anchor>
      <arglist>(MouseEvent event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseUp</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a6d58c81611bc66a2f313c012d06b36cf</anchor>
      <arglist>(MouseEvent event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseWheel</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a8ed69e709dc58cffeec563bdb1ddfd16</anchor>
      <arglist>(MouseEvent event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseMove</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a92bf3a24b35421166f58f31d4cdcf121</anchor>
      <arglist>(MouseEvent event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mouseDrag</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a951b397345f8014100cbfd1fc96896b0</anchor>
      <arglist>(MouseEvent event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>touchesBegan</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>af2d9745afc0943c6c9537c6203b63544</anchor>
      <arglist>(TouchEvent event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>touchesMoved</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a1a3d4d26290c148b0fb9b700bb4e7cf3</anchor>
      <arglist>(TouchEvent event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>touchesEnded</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a4a16f3595beeb34b5823028c9ab767b6</anchor>
      <arglist>(TouchEvent event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>keyDown</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>ad277fbd24c0744c50d1dc59590a29d13</anchor>
      <arglist>(KeyEvent event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>keyUp</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a20411a4b9dd523295e0c3dd69edc5385</anchor>
      <arglist>(KeyEvent event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resize</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a0961c1bb2fbb555138ea3905f64b670d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fileDrop</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>aec058e7902f7fa0ae20ffc145a7f1244</anchor>
      <arglist>(FileDropEvent event)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>quit</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a387a29657505d6c094f89ac7b79288b1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>signals::signal&lt; void()&gt; &amp;</type>
      <name>getSignalUpdate</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a35163153ec4e82da136ea46f59657e14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>signals::signal&lt; void()&gt; &amp;</type>
      <name>getSignalShutdown</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>aadb86452bba1a501fac15283e835a3e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emitShutdown</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a8761405a4d02cfe681465ac83250504c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; TouchEvent::Touch &gt; &amp;</type>
      <name>getActiveTouches</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a619da15f4585c172c7dd513b40391f26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Settings &amp;</type>
      <name>getSettings</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a94e2ffe814ab3b6bdd8b91ef9c14b995</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>RendererRef</type>
      <name>getRenderer</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a4edc2bf67c96911b8747d71e765a71ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DisplayRef</type>
      <name>getDisplay</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a3fde0ff561049b51abb826fcb6020a6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual WindowRef</type>
      <name>getWindow</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>ab543ad0aeaf789447a6f1860766022a1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>getNumWindows</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a783c31b2ff3565689b30c9d3a9cf6eb7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual WindowRef</type>
      <name>getWindowIndex</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a66a658aba3b6fed1ea58dbe5a3b8ba43</anchor>
      <arglist>(size_t index) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enablePowerManagement</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a3e75642dd965f31baad2354fa115a441</anchor>
      <arglist>(bool powerManagement=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPowerManagementEnabled</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>ac146e500154d6dd6d1034ddcf245860d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWindowWidth</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a89284b15ef478de50df6b9507d31517f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWindowHeight</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a7ffafab5d728a602502089164b760235</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWindowSize</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>af4e89d6ec78d61e1b0e5cfd4104e93a2</anchor>
      <arglist>(int windowWidth, int windowHeight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWindowSize</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>ac4206b94b7028e787cf3edbdc16b5195</anchor>
      <arglist>(const Vec2i &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>getWindowCenter</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a102949f58d90f91f4095052d94b134f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getWindowSize</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a6f3ab8c70545d4f5a620485601f4cba2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getWindowAspectRatio</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a3c67168974bd48a69d301cc7a8a22bfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>getWindowBounds</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a352e2db6c94e35dfa6ac1cd92c9c3d78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getWindowContentScale</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>ae03f3d68cbc02c5a800a83e81bba6e4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getWindowPos</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a8caa130be2dd74c432f1963fb5787f84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWindowPosX</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a864d98624636e0ef44f6c0a8a526d50b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWindowPosY</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>ab1f13ec8755dcbd9f18adce9592f8ccd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWindowPos</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a53c56c9a389ef406423829d86ecd3a96</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWindowPos</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a66467a9d3adba8ab787f190c688be503</anchor>
      <arglist>(const Vec2i &amp;windowPos)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getFrameRate</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a0a816737ffc7e68391074a9f5ba30c15</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setFrameRate</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>af2f52fcf279bfdef6202b06887965b94</anchor>
      <arglist>(float frameRate)=0</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAverageFps</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a0e03d735e2744f9f638adbfb94f876af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFpsSampleInterval</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>ae854ef2131bb6441f7a3a448849c9aa8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFpsSampleInterval</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a8a1eb4e40b507c1f925a899ca7577eed</anchor>
      <arglist>(double sampleInterval)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFullScreen</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>aaef77fad88248edb5355017e89c10209</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFullScreen</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a883aaaf3166750cccc728af81be7c49f</anchor>
      <arglist>(bool aFullScreen, const FullScreenOptions &amp;options=FullScreenOptions())</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getElapsedSeconds</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>ab7c8910fb7519c5d5c9dcf549f377560</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getElapsedFrames</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a4b6bc809abc6f7e2c329c2d26e45dd81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataSourceRef</type>
      <name>loadAsset</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a5311b582c43aeb7b6fcc1e021da45f79</anchor>
      <arglist>(const fs::path &amp;relativePath)</arglist>
    </member>
    <member kind="function">
      <type>fs::path</type>
      <name>getAssetPath</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a126bf1ef9885afe4f424091f56c1a17b</anchor>
      <arglist>(const fs::path &amp;relativePath)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAssetDirectory</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a07f1e090249255165b16aae2a2ae9e57</anchor>
      <arglist>(const fs::path &amp;dirPath)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual fs::path</type>
      <name>getAppPath</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>ad49a739c6f7a68b3cc03e5eebae3a52d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NSBundle *</type>
      <name>getBundle</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a5b8bcda9f871a084265f27a605b317c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>fs::path</type>
      <name>getOpenFilePath</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>ad519ee690aa52cf9bd6a629c5c0ba78e</anchor>
      <arglist>(const fs::path &amp;initialPath=&quot;&quot;, std::vector&lt; std::string &gt; extensions=std::vector&lt; std::string &gt;())</arglist>
    </member>
    <member kind="function">
      <type>fs::path</type>
      <name>getFolderPath</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a4b9ecc47a9a2ae040afb48db118213b2</anchor>
      <arglist>(const fs::path &amp;initialPath=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>fs::path</type>
      <name>getSaveFilePath</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a73b3791b2c1f603140338bb1cb973647</anchor>
      <arglist>(const fs::path &amp;initialPath=&quot;&quot;, std::vector&lt; std::string &gt; extensions=std::vector&lt; std::string &gt;())</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>console</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a3e321040a4fbefa774e35f1991cd7689</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Timeline &amp;</type>
      <name>timeline</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a22cc2cda3ec0bb09a539193cf3873db6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::asio::io_service &amp;</type>
      <name>io_service</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>ae0eb45ba9f0a0d4e39c1d56d3ef90002</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispatchAsync</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a75b7e17d2447e44da0b58a240ca2f560</anchor>
      <arglist>(const std::function&lt; void()&gt; &amp;fn)</arglist>
    </member>
    <member kind="function">
      <type>std::result_of&lt; T()&gt;::type</type>
      <name>dispatchSync</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a67deffec525d2d73a44d3c5d21bc9a6d</anchor>
      <arglist>(T fn)</arglist>
    </member>
    <member kind="function">
      <type>RendererRef</type>
      <name>getDefaultRenderer</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a464b080eacb54d9d7d5415d215635f5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Surface</type>
      <name>copyWindowSurface</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a0b4dacbb1e536f62dd5a3f4f41193cc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Surface</type>
      <name>copyWindowSurface</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>adf690c3273264903a7a78f08b44ba1d1</anchor>
      <arglist>(const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreWindowContext</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a34924c21bb5b32a6db86c68964e54328</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RendererRef</type>
      <name>findSharedRenderer</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a808764e27357ef09781f50e85eb0798e</anchor>
      <arglist>(RendererRef searchRenderer) const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>getsWindowsPaintEvents</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a2a25f993486f3c4797b16e388a05ceff</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>receivesEvents</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a25aec03bb865d3a91e200fd0b7609f7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vec2i</type>
      <name>getMousePos</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a7c6f194d43f9685849c2a649913e5bf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataSourceRef</type>
      <name>loadResource</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>afef905bb792960152d38c2680f88ea33</anchor>
      <arglist>(const std::string &amp;macPath, int mswID, const std::string &amp;mswType)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataSourceRef</type>
      <name>loadResource</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a3cdd362308705e8bd6297434f4d70eb3</anchor>
      <arglist>(const std::string &amp;macPath)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static fs::path</type>
      <name>getResourcePath</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a0c8d7b751876d5489424f22f16105c20</anchor>
      <arglist>(const fs::path &amp;rsrcRelativePath)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static fs::path</type>
      <name>getResourcePath</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>ae9c4716afeb01de7761bfddc59f2461e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DataSourceRef</type>
      <name>loadResource</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a4f5e2b9bf7d0aaeb92925b73feea4fca</anchor>
      <arglist>(int mswID, const std::string &amp;mswType)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isPrimaryThread</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a068641d4b6f5a2ac0917db19ceb9c78f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static App *</type>
      <name>get</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a3610be7faab247c98cead8d90ddf97bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; std::ostream &gt;</type>
      <name>mOutputStream</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>aa5e736f3a45e428f84d82b59dd7ede35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RendererRef</type>
      <name>mDefaultRenderer</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>a962c3414e1186a5e25d9bd0c1629dd59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mPowerManagement</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>ab00cd2e8f81a38590f73076c0df871ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static App *</type>
      <name>sInstance</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>ad76981e26a2a8895e0006887d6f7f056</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>AppImplMsw</name>
      <anchorfile>classcinder_1_1app_1_1_app.html</anchorfile>
      <anchor>abc572e29726ec341d81451c534b09748</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class" objc="yes">
    <name>cinder::app::App::Settings</name>
    <filename>classcinder_1_1app_1_1_app_1_1_settings.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isPrepared</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>ae8fc3d89d6adfb3400ce0abebd0ee873</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWindowSize</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a495842dba37452bbe7ea5fac0cb116f6</anchor>
      <arglist>(int windowSizeX, int windowSizeY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWindowSize</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a2e000ee0757c531eeac329e157f2fb59</anchor>
      <arglist>(const Vec2i &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getWindowSize</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a38bfdd17f8c0a3b703676b7d35dea06c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getWindowPos</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a853c6d2be6ef49173b6ead5281f2d220</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWindowPos</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>aedde93729d6fefb95231466809845818</anchor>
      <arglist>(int windowPosX, int windowPosY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWindowPos</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>adc8d08826860e6d9611b72990c3ef168</anchor>
      <arglist>(const Vec2i &amp;windowPos)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWindowPosSpecified</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a66b9f383e7ee2a9c0a2a7fad1dc36d30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unspecifyWindowPos</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a7ae7e652de171f0bdb8866c4fb80807a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFullScreen</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>ab8bb28828f6bb121649fc629dacdd51b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFullScreen</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>abb15def999bef8adf812a6cdd6dedf7a</anchor>
      <arglist>(bool fullScreen=true, const FullScreenOptions &amp;options=FullScreenOptions())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isResizable</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a0051213f9db30d99dd08f2c660d0826e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResizable</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a74dcd64be3a9893595a041e0b96f3f58</anchor>
      <arglist>(bool resizable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBorderless</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>adf7d86a71537623a7daebbd02bd10788</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderless</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>aa1377e67fdffa0db650b1b623d27505b</anchor>
      <arglist>(bool borderless=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAlwaysOnTop</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a99c26657a0c96c8a6582a6faef9c0f05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlwaysOnTop</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a9eb4acf2d539496bacd4b39690a3d471</anchor>
      <arglist>(bool alwaysOnTop=true)</arglist>
    </member>
    <member kind="function">
      <type>DisplayRef</type>
      <name>getDisplay</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a97e46fd46ccbc197d839f560ac8cec3c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisplay</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>ae7c6708dd68f1e800b4f900c319c7fe0</anchor>
      <arglist>(DisplayRef display)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareWindow</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>ac3478efa6d85f880a4b0bc999e629ae9</anchor>
      <arglist>(const Window::Format &amp;format)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Window::Format &gt; &amp;</type>
      <name>getWindowFormats</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a1262dd4aea4b8632c961ef7daf606e4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Window::Format &gt; &amp;</type>
      <name>getWindowFormats</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>aef1c633af2722bddd64097e1d38ec875</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableHighDensityDisplay</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>af6fca8e6cc2dc3aeb557d8bbd30c3eaa</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isHighDensityDisplayEnabled</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a69014a6dfe5b1cc47757ced615314273</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Window::Format</type>
      <name>getDefaultWindowFormat</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a0684c06b4dddb7478a0f64221712afde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultWindowFormat</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a4f1ccd9075fd4eb571875c752e8b65d5</anchor>
      <arglist>(const Window::Format &amp;format)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableMultiTouch</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>ab8d78f133fc2557f1e5f1c524053a95c</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMultiTouchEnabled</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>ab85d76904654b68f116b4632e0842aa0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablePowerManagement</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a1d277a1f3bdd3c705662389137c3413e</anchor>
      <arglist>(bool aPowerManagement=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPowerManagementEnabled</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a7607b9fcf4d90d97eb890ed26dc0c2fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTitle</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a685421476db18f5d1057741546438d47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitle</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>af46559d4c0712bf5f0915f4309ac09e5</anchor>
      <arglist>(const std::string &amp;title)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrameRate</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a525f54c6e56b8325627012ea42240bc5</anchor>
      <arglist>(float frameRate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableFrameRate</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>ae737f2aa6ae0eb2a8872c970105cd405</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFrameRateEnabled</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a621bb28e01e5cc7df48ed8643dba8e9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFrameRate</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a55541600f7ba1084fd920ac85b9b735f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Settings</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a936f74f6c2b4986d181dde21fc0361f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Settings</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>af1970902f0755732bc5f6b69945269fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mShouldQuit</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a42d24bddfac61cbc848bde57d032496a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Window::Format &gt;</type>
      <name>mWindowFormats</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>ae28a4d0c9636602e4c219b94162d90e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Window::Format</type>
      <name>mDefaultWindowFormat</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a8f023568f87dcdce9fb0ec2dd86dc3cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mFrameRateEnabled</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a39f112edc43d27b9c6ee51e256e7c8bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mFrameRate</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a4f804dcf4e26c327127bc7bca6651352</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mPowerManagement</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a0d8aa596a4d23d8151440782bbe25579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mEnableHighDensityDisplay</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a6bf2b23278a95c598be17ba497bd2eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mEnableMultiTouch</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a5a94bdcb956e8fe8c4fa7656e2735bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mTitle</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a1ae7ed7a06f50358d262a19aeb1524a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>App</name>
      <anchorfile>classcinder_1_1app_1_1_app_1_1_settings.html</anchorfile>
      <anchor>a4097b3e04a4f8ece21f5abe1b10e6323</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::app::AppImplMsw</name>
    <filename>classcinder_1_1app_1_1_app_impl_msw.html</filename>
    <member kind="function">
      <type></type>
      <name>AppImplMsw</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>a1cd5b274e8b6cec0bb2659fa07dc88e5</anchor>
      <arglist>(class App *aApp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AppImplMsw</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>a4eb4f63d384422144c90ddd1552108d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>class App *</type>
      <name>getApp</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>ad8f2d3877dcd90ed1328966dfce764ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFrameRate</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>a611e5ff8a4bd87272e028177b28be353</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual float</type>
      <name>setFrameRate</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>abdd2490bcd7e52da441718dbb9474c56</anchor>
      <arglist>(float aFrameRate)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>quit</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>aec7fc5fe7a3dc68b03717024eacd125f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual WindowRef</type>
      <name>getWindow</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>a612fb19e709abc1213b94fff407ff8b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWindow</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>a39487a4f233a35d17b21bf10ac51b054</anchor>
      <arglist>(WindowRef window)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>hideCursor</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>a056a00de83f18358caeadaec69a93437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>showCursor</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>af08e8f207c3ff333b83d0f0f87220b27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Buffer</type>
      <name>loadResource</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>a83a8bf9e31646c61043a55346f34a0a4</anchor>
      <arglist>(int id, const std::string &amp;type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static fs::path</type>
      <name>getAppPath</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>a64e90a85c321b97496e7c34ca3c6e1e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static fs::path</type>
      <name>getOpenFilePath</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>ab27403e3489ee9c5da25cc96f48be4ef</anchor>
      <arglist>(const fs::path &amp;initialPath, std::vector&lt; std::string &gt; extensions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static fs::path</type>
      <name>getSaveFilePath</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>a819d4c82eabec8030ae9a3a84036be63</anchor>
      <arglist>(const fs::path &amp;initialPath, std::vector&lt; std::string &gt; extensions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static fs::path</type>
      <name>getFolderPath</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>aed45c3d7ba22f8f92aa943105b6ac510</anchor>
      <arglist>(const fs::path &amp;initialPath)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>setupHasBeenCalled</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>a3e5d9f4d5d1977617cdee69a4bd0364f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>closeWindow</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>ad0df7900957002520bab60494caf914b</anchor>
      <arglist>(class WindowImplMsw *windowImpl)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setForegroundWindow</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>a246549faa1577f8bef56281ab8f70235</anchor>
      <arglist>(WindowRef window)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>class App *</type>
      <name>mApp</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>a7a22b12d63ecfac3fb5a0971d5f8c0cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mFrameRate</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>a61816fb628c15e54026a571dfe59eb70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>WindowRef</type>
      <name>mActiveWindow</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>a514964be6289b7d80fa65bf3fafbfde6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mSetupHasBeenCalled</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>a41bc292cc7b28ef57e41ff1fa6112239</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ULONG_PTR</type>
      <name>mGdiplusToken</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>ae78c7f96a3472474910a753c50a1a9a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>WindowImplMsw</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>a5de8cb821fb3bb8004eb6abf05dfe8dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend LRESULT CALLBACK</type>
      <name>WndProc</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw.html</anchorfile>
      <anchor>a9135ea2a0d6fce68ba3b858226a31a4f</anchor>
      <arglist>(HWND, UINT, WPARAM, LPARAM)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::app::WindowImplMsw</name>
    <filename>classcinder_1_1app_1_1_window_impl_msw.html</filename>
    <member kind="function">
      <type></type>
      <name>WindowImplMsw</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>addba7349bb56db5708398bd31c90fd52</anchor>
      <arglist>(const Window::Format &amp;format, RendererRef sharedRenderer, AppImplMsw *appImpl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WindowImplMsw</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a42409b7056102a22afb7eceb32d29841</anchor>
      <arglist>(HWND hwnd, RendererRef renderer, RendererRef sharedRenderer, AppImplMsw *appImpl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WindowImplMsw</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a8aaa56fa7b8d4b50e785b67eb7f91f57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFullScreen</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a17e85edad1f35b99f2d9f72657be3149</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFullScreen</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a77eabe75fd971a0a0c92bec710f8c5bc</anchor>
      <arglist>(bool fullScreen, const app::FullScreenOptions &amp;options)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vec2i</type>
      <name>getSize</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a2030bd5615bd12d3e222ec876cd04f28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSize</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a6f171bbd68c10e9693a72a5e2161dd77</anchor>
      <arglist>(const Vec2i &amp;size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vec2i</type>
      <name>getPos</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a8b59896132794682a04bcddc82b8bc5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPos</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a9b564ec305a9025e33427e1d43671eff</anchor>
      <arglist>(const Vec2i &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>close</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>ab1fb106572a59d90776eb2b462529b39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getTitle</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a768b3915a1ee46b00536d43a44f25f53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTitle</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a4ac6ebf3680462f69235c2fbcf1143ea</anchor>
      <arglist>(const std::string &amp;title)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hide</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a20b2951988c94bc9e0be7fcd4dc27638</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>show</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a825234477158ebef0facaa31040b2366</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isHidden</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a09d5c08313a8cd09c983050bb0e57ec7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DisplayRef</type>
      <name>getDisplay</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a8d68f968503f2111ad1c4c5b0eb153ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RendererRef</type>
      <name>getRenderer</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>adf6cfa756948b0c3a2e4f5e57a9bff7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; TouchEvent::Touch &gt; &amp;</type>
      <name>getActiveTouches</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>ac122372d112679abc4c6adbd2eb32815</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>getNative</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a462ecf5de047fa2d31d3659a289b7915</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableMultiTouch</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a2fe5533728a556388601a260c2a85fee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBorderless</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a31978974eb91b9f39afed177b453e2fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderless</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a714ae04c7dbc8a49135c067bdf60e6da</anchor>
      <arglist>(bool borderless)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAlwaysOnTop</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>acd0c7d5569b28012fe9b8b399406ec85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlwaysOnTop</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a90cfdf59b9267d780b6cd6e34247923a</anchor>
      <arglist>(bool alwaysOnTop)</arglist>
    </member>
    <member kind="function">
      <type>AppImplMsw *</type>
      <name>getAppImpl</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a0695819debb9389e2697233fa222ac25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>WindowRef</type>
      <name>getWindow</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>ac92b91005d29a29514af81a45113f43a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>keyDown</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>aa48f804501872972eeb1d4dae7b29493</anchor>
      <arglist>(const KeyEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>draw</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a90e10cfadfad9e2dce878d95f15c518a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>redraw</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>aa0373f34a17f7ef394036a0a961be2d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resize</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a2a5a0081f404036f180efef2cdf39972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>privateClose</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>ae96abd6d6f7dac222c5cf96944866e42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createWindow</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>ac69879b43a3d17e4a7de7c0201ca5794</anchor>
      <arglist>(const Vec2i &amp;windowSize, const std::string &amp;title, DisplayRef display, RendererRef sharedRenderer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>completeCreation</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>ab81f9d2f12ee7d2a9ae0227cd0ba4828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getScreenSize</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a6d9f8507845a209a295113ead2f70cba</anchor>
      <arglist>(int clientWidth, int clientHeight, int *resultWidth, int *resultHeight)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>onTouch</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>aaa81ff0f8a8cab9b15df53562462a00f</anchor>
      <arglist>(HWND hWnd, WPARAM wParam, LPARAM lParam)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>toggleFullScreen</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a059573bab4ae25b80b5b516bb17da9c7</anchor>
      <arglist>(const app::FullScreenOptions &amp;options)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>registerWindowClass</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a1eed2f1987557a592a80020172970ec5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AppImplMsw *</type>
      <name>mAppImpl</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a0766fcecc8525dcac2da665873304d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>WindowRef</type>
      <name>mWindowRef</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>ae73867aeb4c74ac614fe2e68b36274b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HWND</type>
      <name>mWnd</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>aafeb954426b4ee7207e54b44eb1ae9e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HDC</type>
      <name>mDC</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a1246c7bdfa42cc8f9e705f3bfbe7094b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DWORD</type>
      <name>mWindowStyle</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a27f8aa0660e1e7247a1b18dd1845d8cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DWORD</type>
      <name>mWindowExStyle</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a53ee2d5c28d70d15cfb679707a2a5f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec2i</type>
      <name>mWindowOffset</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a8f93e37a266d2379937e262a185f4b02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mHidden</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a99589234d82d785226b78a36db9efb87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mWindowWidth</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a596d0311760f927e5bd300b1218c4f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mWindowHeight</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>ab32e56fd662d9e09abd8d1a6812041b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mFullScreen</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a4d61b9fd598141994bb5fbc23320c58e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mBorderless</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>aaf7f23434de9994a03b8c81353cac5e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mAlwaysOnTop</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>af4b098eb8028520d37d174328205b964</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mResizable</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>aeb039881f19592de10afb4c2206e387a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec2i</type>
      <name>mWindowedPos</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a1b443da452fdb1bbbd03026bf5262232</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec2i</type>
      <name>mWindowedSize</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a5fe4f2c591668feb43ab930d4970b6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DisplayRef</type>
      <name>mDisplay</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a32b6d8112c0b58d78af64e43e73ab45e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RendererRef</type>
      <name>mRenderer</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a20744dd3b57493b8cdef79ed8f2a0c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; DWORD, Vec2f &gt;</type>
      <name>mMultiTouchPrev</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a5033df8f417e80348bc186d141f6c072</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; TouchEvent::Touch &gt;</type>
      <name>mActiveTouches</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>ae19a49595f4a627a0c2fddfe0bf6e614</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mIsDragging</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a18dbd7e0a091c3573cdfdf9267c56d4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>friend</type>
      <name>AppImplMsw</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a8f36cfff3ae91e9f9e70bb2895726e75</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend LRESULT CALLBACK</type>
      <name>WndProc</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw.html</anchorfile>
      <anchor>a9135ea2a0d6fce68ba3b858226a31a4f</anchor>
      <arglist>(HWND, UINT, WPARAM, LPARAM)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::app::BlankingWindow</name>
    <filename>classcinder_1_1app_1_1_blanking_window.html</filename>
    <member kind="function">
      <type></type>
      <name>BlankingWindow</name>
      <anchorfile>classcinder_1_1app_1_1_blanking_window.html</anchorfile>
      <anchor>a0d88416746a74f364a490133a5fdac86</anchor>
      <arglist>(DisplayRef display)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classcinder_1_1app_1_1_blanking_window.html</anchorfile>
      <anchor>adf6c74054784a08e4c2d47554e423aaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BlankingWindowRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1app_1_1_blanking_window.html</anchorfile>
      <anchor>ae431cee69db04b6c3a8e90017bf7e732</anchor>
      <arglist>(DisplayRef display)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>registerWindowClass</name>
      <anchorfile>classcinder_1_1app_1_1_blanking_window.html</anchorfile>
      <anchor>a15a75bfc5f38a5c6b03c71b156fff8f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HWND</type>
      <name>mWnd</name>
      <anchorfile>classcinder_1_1app_1_1_blanking_window.html</anchorfile>
      <anchor>a68e5489e990a5491ceb42b2610f7f262</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::app::AppImplMswBasic</name>
    <filename>classcinder_1_1app_1_1_app_impl_msw_basic.html</filename>
    <base>cinder::app::AppImplMsw</base>
    <member kind="function">
      <type></type>
      <name>AppImplMswBasic</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_basic.html</anchorfile>
      <anchor>a599f60ac7f378286cd9d090d39a78a6f</anchor>
      <arglist>(class AppBasic *aApp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_basic.html</anchorfile>
      <anchor>a848fa536b8cca1620576d7c3cb22066f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>class AppBasic *</type>
      <name>getApp</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_basic.html</anchorfile>
      <anchor>a243aa50d2b59921996794a360a14ea8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quit</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_basic.html</anchorfile>
      <anchor>a56794fcd75dacc6b0cacfd4c4943d0b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>setFrameRate</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_basic.html</anchorfile>
      <anchor>ac1c753ce4b8691ab9283d1b9127879d8</anchor>
      <arglist>(float aFrameRate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableFrameRate</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_basic.html</anchorfile>
      <anchor>ae93d641e0c2ef9f4d5e48a11c7a2f384</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFrameRateEnabled</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_basic.html</anchorfile>
      <anchor>ad7143ebdb1b1147cd4cd509caa2f7c58</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumWindows</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_basic.html</anchorfile>
      <anchor>a6b5d99f84ee1956569c9f00095760c70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>WindowRef</type>
      <name>getWindowIndex</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_basic.html</anchorfile>
      <anchor>a9396f0267f0fe41a6b2a716eb757410f</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>WindowRef</type>
      <name>getForegroundWindow</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_basic.html</anchorfile>
      <anchor>a284955918363e8b5dc44f7d683caf0d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>fs::path</type>
      <name>getAppPath</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_basic.html</anchorfile>
      <anchor>ac1112417d90935467d161f5b3ef8eaa8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupBlankingWindows</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_basic.html</anchorfile>
      <anchor>a439310fb9f34a77ca65bf02d2f74ee60</anchor>
      <arglist>(DisplayRef fullScreenDisplay)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroyBlankingWindows</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_basic.html</anchorfile>
      <anchor>aff57f11e77bf99a2a64ec160e0380d58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AppBasic</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_basic.html</anchorfile>
      <anchor>a10753489ae44783117dc499318742721</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend LRESULT CALLBACK</type>
      <name>WndProc</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_basic.html</anchorfile>
      <anchor>ae749e989b362e19783c7af4a2bf46c95</anchor>
      <arglist>(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::app::WindowImplMswBasic</name>
    <filename>classcinder_1_1app_1_1_window_impl_msw_basic.html</filename>
    <base>cinder::app::WindowImplMsw</base>
    <member kind="function">
      <type></type>
      <name>WindowImplMswBasic</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw_basic.html</anchorfile>
      <anchor>a02c946ebefb69a9d19152548a872fdd6</anchor>
      <arglist>(const Window::Format &amp;format, RendererRef sharedRenderer, AppImplMswBasic *appImpl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WindowImplMswBasic::toggleFullScreen</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw_basic.html</anchorfile>
      <anchor>adf74bb4a4477045e4b1fbd9c7cef796b</anchor>
      <arglist>(const app::FullScreenOptions &amp;options)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AppImplMswBasic *</type>
      <name>mAppImplBasic</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw_basic.html</anchorfile>
      <anchor>a0bcf85c9fb3a06ac8ed0eb98048c5a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>friend</type>
      <name>AppImplMswBasic</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw_basic.html</anchorfile>
      <anchor>a4bea5ad0eaadba0cd1ad6d3acb6661cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::app::AppImplMswRenderer</name>
    <filename>classcinder_1_1app_1_1_app_impl_msw_renderer.html</filename>
    <member kind="function">
      <type></type>
      <name>AppImplMswRenderer</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer.html</anchorfile>
      <anchor>a295bcbdcb4e76d7ea58e76e0e76a0c8e</anchor>
      <arglist>(App *aApp)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>initialize</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer.html</anchorfile>
      <anchor>a0d9dd377ef778e2f80c5c76b203da075</anchor>
      <arglist>(HWND wnd, HDC dc, RendererRef sharedRenderer)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>prepareToggleFullScreen</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer.html</anchorfile>
      <anchor>ada382e26b15f2e3128d56101d5f0b3f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishToggleFullScreen</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer.html</anchorfile>
      <anchor>a2de506e93c2afe3df99418379b1ca2ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>kill</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer.html</anchorfile>
      <anchor>a4130f8504c8b77556a3de1207fdff9b8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>defaultResize</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer.html</anchorfile>
      <anchor>a093264a27344d209adb27f3d7084f89b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>swapBuffers</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer.html</anchorfile>
      <anchor>af103bcca53c241c0e61ade3388925253</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>makeCurrentContext</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer.html</anchorfile>
      <anchor>a7926449d860f8e528a6a7d5ad1b853ea</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HWND</type>
      <name>mWnd</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer.html</anchorfile>
      <anchor>a7f846a9bdb5be1426b3384a54da8f23e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>App *</type>
      <name>mApp</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer.html</anchorfile>
      <anchor>a578aa1acea08ed17caa40d8c074b7630</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::app::AppImplMswRendererGdi</name>
    <filename>classcinder_1_1app_1_1_app_impl_msw_renderer_gdi.html</filename>
    <base>cinder::app::AppImplMswRenderer</base>
    <member kind="function">
      <type></type>
      <name>AppImplMswRendererGdi</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gdi.html</anchorfile>
      <anchor>af060bbf886f123d36d36e873640d8c9c</anchor>
      <arglist>(App *aApp, bool doubleBuffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initialize</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gdi.html</anchorfile>
      <anchor>a4c0b57064e8f3fe3e5ec0d4a8acb3a55</anchor>
      <arglist>(HWND wnd, HDC dc, RendererRef sharedRenderer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>kill</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gdi.html</anchorfile>
      <anchor>acf2a8d4de44246747372d15dfc0ee4ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>defaultResize</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gdi.html</anchorfile>
      <anchor>abf603eb7be00c03684a61bd0db99e8f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>swapBuffers</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gdi.html</anchorfile>
      <anchor>a9a360a3e4b02bd6589457dfec7ea6977</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>makeCurrentContext</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gdi.html</anchorfile>
      <anchor>ad6e16732e4e76e5ba7fabe83d242f656</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HDC</type>
      <name>getDc</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gdi.html</anchorfile>
      <anchor>a988e1f4a61436a1a10cc4d248385d2ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Surface8u</type>
      <name>copyWindowContents</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gdi.html</anchorfile>
      <anchor>a8e4beaede6350af9b8b227556c5376fc</anchor>
      <arglist>(const Area &amp;area)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::HDC</type>
      <name>mPaintDc</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gdi.html</anchorfile>
      <anchor>a166a94a31bf56c041ecb71ed2c05bc9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::PAINTSTRUCT</type>
      <name>mPaintStruct</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gdi.html</anchorfile>
      <anchor>adf527b526c8a0a42ae49036c1d81bc07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mDoubleBuffer</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gdi.html</anchorfile>
      <anchor>ae6a470062168c769f351a552a5daa615</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::HDC</type>
      <name>mDoubleBufferDc</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gdi.html</anchorfile>
      <anchor>a362d55c14f03245745296466b6bab646</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::HBITMAP</type>
      <name>mDoubleBufferBitmap</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gdi.html</anchorfile>
      <anchor>acc9db05dae8e4a6e32a3b7461fb35ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::HBITMAP</type>
      <name>mDoubleBufferOldBitmap</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gdi.html</anchorfile>
      <anchor>a6e52a88947f98c14f7bb0e5c75328dc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec2i</type>
      <name>mDoubleBufferBitmapSize</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gdi.html</anchorfile>
      <anchor>a3b3aaf3ba5a5d65bacf320c7b73d4f28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::app::AppImplMswRendererGl</name>
    <filename>classcinder_1_1app_1_1_app_impl_msw_renderer_gl.html</filename>
    <base>cinder::app::AppImplMswRenderer</base>
    <member kind="function">
      <type></type>
      <name>AppImplMswRendererGl</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gl.html</anchorfile>
      <anchor>a2946e268c4e56b8fdba6614547ef51d7</anchor>
      <arglist>(App *aApp, RendererGl *aRenderer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>initialize</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gl.html</anchorfile>
      <anchor>adfd979f2bd6b6f6e6e8e5aede28ec901</anchor>
      <arglist>(HWND wnd, HDC dc, RendererRef sharedRenderer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>prepareToggleFullScreen</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gl.html</anchorfile>
      <anchor>a00354bf4d92eef9fac52f6856ab1f5be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishToggleFullScreen</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gl.html</anchorfile>
      <anchor>a9be040de447fc2ba5562b83f5b8af59b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>kill</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gl.html</anchorfile>
      <anchor>ae887cc508e1ec54a822295df5b793280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>defaultResize</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gl.html</anchorfile>
      <anchor>a135551d6dd3bfe1840408f89b1c81081</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>swapBuffers</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gl.html</anchorfile>
      <anchor>afe7cf1e1337dda48c59399058b6dbd03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>makeCurrentContext</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gl.html</anchorfile>
      <anchor>a88fc8c5bac002b590c9e98ad541dbe5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>initializeInternal</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gl.html</anchorfile>
      <anchor>adeeb68d3f5ea61f1b0f66142372f9554</anchor>
      <arglist>(HWND wnd, HDC dc, HGLRC sharedRC)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>initMultisample</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gl.html</anchorfile>
      <anchor>a74035fba7cb9637317d5e87e84301ece</anchor>
      <arglist>(PIXELFORMATDESCRIPTOR pfd, int requestedLevelIdx, HDC dc)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RendererGl *</type>
      <name>mRenderer</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gl.html</anchorfile>
      <anchor>a8bffa6031533fa31ff9cc85756511267</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mWasFullScreen</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gl.html</anchorfile>
      <anchor>aee36f9fe3f4a0613f0cb8da010d4ec01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mWasVerticalSynced</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gl.html</anchorfile>
      <anchor>a07b05ca8bb44d7b8ded3051f4d3bc0b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HGLRC</type>
      <name>mRC</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gl.html</anchorfile>
      <anchor>aee68c32fc85b9382f03575ea3b2305f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HGLRC</type>
      <name>mPrevRC</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gl.html</anchorfile>
      <anchor>a736e882801fd36387b8054ffdd21dff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HDC</type>
      <name>mDC</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_renderer_gl.html</anchorfile>
      <anchor>a8e841517d67cf9e6608f2df07d9cd501</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::app::AppImplMswScreenSaver</name>
    <filename>classcinder_1_1app_1_1_app_impl_msw_screen_saver.html</filename>
    <base>cinder::app::AppImplMsw</base>
    <member kind="function">
      <type></type>
      <name>AppImplMswScreenSaver</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_screen_saver.html</anchorfile>
      <anchor>add9320789ac27cafecbce2209320c8e2</anchor>
      <arglist>(class AppScreenSaver *aApp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AppImplMswScreenSaver</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_screen_saver.html</anchorfile>
      <anchor>a7fff037f0f3499f1c22f041fee3ce069</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_screen_saver.html</anchorfile>
      <anchor>af5587c6738990295de1bef92fc3dd31d</anchor>
      <arglist>(HWND aWnd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_screen_saver.html</anchorfile>
      <anchor>af4b5555aa99947ace62b0e3c604f7ae3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quit</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_screen_saver.html</anchorfile>
      <anchor>a05052db16e32bfa49a92f93946edd8a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LRESULT</type>
      <name>eventHandler</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_screen_saver.html</anchorfile>
      <anchor>a1c6fbc09c8f255ddb64e8ae4f5ff30bc</anchor>
      <arglist>(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual WindowRef</type>
      <name>getWindow</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_screen_saver.html</anchorfile>
      <anchor>a63dfe06df1ced7d79b164492d9c8302f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>getNumWindows</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_screen_saver.html</anchorfile>
      <anchor>a895f5cd22bed77e6a342e7684e2b23ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual WindowRef</type>
      <name>getWindowIndex</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_screen_saver.html</anchorfile>
      <anchor>a0eaeaf9d858c72a3d98ec1a7bcb47b88</anchor>
      <arglist>(size_t index) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPreview</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_screen_saver.html</anchorfile>
      <anchor>acbd62cd060c54a2a7735626b6f85fb14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>closeWindow</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_screen_saver.html</anchorfile>
      <anchor>abbf59c5d1eaf4049b77afb7c970afbe1</anchor>
      <arglist>(class WindowImplMsw *windowImpl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setForegroundWindow</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_screen_saver.html</anchorfile>
      <anchor>ae78871afb2bc4704ca8450ca51940a0d</anchor>
      <arglist>(WindowRef window)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>class AppScreenSaver *</type>
      <name>mApp</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_screen_saver.html</anchorfile>
      <anchor>a2e8a0c994ca8c611010b31a41bd41914</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mPreview</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_screen_saver.html</anchorfile>
      <anchor>a8014c79b4ce61ec4458ef98c065f01e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mDebugMode</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_screen_saver.html</anchorfile>
      <anchor>a73f12027d52dc36e00262e7801af2c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; WindowImplMswScreenSaver * &gt;</type>
      <name>mWindows</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_screen_saver.html</anchorfile>
      <anchor>adada34c8b1d573a1309ba62dbcfc4568</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; BlankingWindowRef &gt;</type>
      <name>mBlankingWindows</name>
      <anchorfile>classcinder_1_1app_1_1_app_impl_msw_screen_saver.html</anchorfile>
      <anchor>a66cee26645b9a1f206e0a80e1b273586</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::app::WindowImplMswScreenSaver</name>
    <filename>classcinder_1_1app_1_1_window_impl_msw_screen_saver.html</filename>
    <base>cinder::app::WindowImplMsw</base>
    <member kind="function">
      <type></type>
      <name>WindowImplMswScreenSaver</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw_screen_saver.html</anchorfile>
      <anchor>a29017f81545480bdbd93afc980d58c00</anchor>
      <arglist>(HWND hwnd, RendererRef renderer, RendererRef sharedRenderer, AppImplMswScreenSaver *appImpl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFullScreen</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw_screen_saver.html</anchorfile>
      <anchor>a84f83e561b97b92a3640d71761067938</anchor>
      <arglist>(bool fullScreen, const app::FullScreenOptions &amp;options)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>friend</type>
      <name>AppImplMswScreenSaver</name>
      <anchorfile>classcinder_1_1app_1_1_window_impl_msw_screen_saver.html</anchorfile>
      <anchor>a331c464d1d195bf186ec57bb336901c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::app::EventCombiner</name>
    <filename>structcinder_1_1app_1_1_event_combiner.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>void</type>
      <name>result_type</name>
      <anchorfile>structcinder_1_1app_1_1_event_combiner.html</anchorfile>
      <anchor>aafa0afb8b71489f841fb40d6bf5d701c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventCombiner</name>
      <anchorfile>structcinder_1_1app_1_1_event_combiner.html</anchorfile>
      <anchor>a9412a2c26d32372198dd8a7506d7a983</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventCombiner</name>
      <anchorfile>structcinder_1_1app_1_1_event_combiner.html</anchorfile>
      <anchor>a8bebc3d9e50b1509668de1e9bb08187f</anchor>
      <arglist>(const T *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structcinder_1_1app_1_1_event_combiner.html</anchorfile>
      <anchor>a31226b93f7629961af99e153e6d60275</anchor>
      <arglist>(InputIterator first, InputIterator last) const </arglist>
    </member>
    <member kind="variable">
      <type>const T *</type>
      <name>mEvent</name>
      <anchorfile>structcinder_1_1app_1_1_event_combiner.html</anchorfile>
      <anchor>ad450adf075edcf2ccbf60c8a289d17c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::app::Event</name>
    <filename>classcinder_1_1app_1_1_event.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isHandled</name>
      <anchorfile>classcinder_1_1app_1_1_event.html</anchorfile>
      <anchor>ad35f2d9288be22001165d8403348554e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHandled</name>
      <anchorfile>classcinder_1_1app_1_1_event.html</anchorfile>
      <anchor>a81589329aa0376375024617c6f5ed64d</anchor>
      <arglist>(bool handled=true)</arglist>
    </member>
    <member kind="function">
      <type>WindowRef</type>
      <name>getWindow</name>
      <anchorfile>classcinder_1_1app_1_1_event.html</anchorfile>
      <anchor>aa744a1c778f6352e44d8120249de61b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWindow</name>
      <anchorfile>classcinder_1_1app_1_1_event.html</anchorfile>
      <anchor>a0172ac3046e54bfa550784fd95aa582e</anchor>
      <arglist>(const WindowRef &amp;window)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Event</name>
      <anchorfile>classcinder_1_1app_1_1_event.html</anchorfile>
      <anchor>a52ad6c2e6e66c75da8b59abe7fcd29dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mHandled</name>
      <anchorfile>classcinder_1_1app_1_1_event.html</anchorfile>
      <anchor>aa1ab2bf44086907f7f290da7dabf21f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>WindowRef</type>
      <name>mWindow</name>
      <anchorfile>classcinder_1_1app_1_1_event.html</anchorfile>
      <anchor>a46b06d8dc5da2d4858bdb74c1afff19d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Event</name>
      <anchorfile>classcinder_1_1app_1_1_event.html</anchorfile>
      <anchor>ac30321716d9fb94b0bb6c018b29021b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Event</name>
      <anchorfile>classcinder_1_1app_1_1_event.html</anchorfile>
      <anchor>afa964acd17e06fef355f0a4a0f29a4d6</anchor>
      <arglist>(WindowRef window)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::app::FileDropEvent</name>
    <filename>classcinder_1_1app_1_1_file_drop_event.html</filename>
    <base>cinder::app::Event</base>
    <member kind="function">
      <type></type>
      <name>FileDropEvent</name>
      <anchorfile>classcinder_1_1app_1_1_file_drop_event.html</anchorfile>
      <anchor>a3e0f19fe48f8ea6cbb63a74965b4fbfb</anchor>
      <arglist>(WindowRef win, int aX, int aY, const std::vector&lt; fs::path &gt; &amp;aFiles)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getX</name>
      <anchorfile>classcinder_1_1app_1_1_file_drop_event.html</anchorfile>
      <anchor>a649b1af84ba5fadded0a1b51ad58dbba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getY</name>
      <anchorfile>classcinder_1_1app_1_1_file_drop_event.html</anchorfile>
      <anchor>ae45f0b95ecb3727106df7fe87b286ad7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getPos</name>
      <anchorfile>classcinder_1_1app_1_1_file_drop_event.html</anchorfile>
      <anchor>a328def3cef584d9d780122c5020411e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; fs::path &gt; &amp;</type>
      <name>getFiles</name>
      <anchorfile>classcinder_1_1app_1_1_file_drop_event.html</anchorfile>
      <anchor>a770bef855b529fde065b176d9d71fac5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumFiles</name>
      <anchorfile>classcinder_1_1app_1_1_file_drop_event.html</anchorfile>
      <anchor>a5739173c875b4c43b2ed7046833711d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const fs::path &amp;</type>
      <name>getFile</name>
      <anchorfile>classcinder_1_1app_1_1_file_drop_event.html</anchorfile>
      <anchor>a6177d74ffa7a23abb4816075f5739ca3</anchor>
      <arglist>(size_t index) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::app::KeyEvent</name>
    <filename>classcinder_1_1app_1_1_key_event.html</filename>
    <base>cinder::app::Event</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>SHIFT_DOWN</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a51a25e464e3a1bd99f624b43e2697c6aa34615974afee16ff99e32e975cb246f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ALT_DOWN</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a51a25e464e3a1bd99f624b43e2697c6aa35f80791a7f964f911603bdaccfb4600</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CTRL_DOWN</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a51a25e464e3a1bd99f624b43e2697c6aaf07039a524cbf12aadbfa4ee4a5515ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>META_DOWN</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a51a25e464e3a1bd99f624b43e2697c6aacd9ff35f914fc422d258f12b07cd7f91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ACCEL_DOWN</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a51a25e464e3a1bd99f624b43e2697c6aa42cb25bc0ef19226c5d549d8d53335d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_UNKNOWN</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a6e0aa288dabbe944f08a0f303659f998</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_FIRST</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a3d701d7b2d8d68853d35e6adcfd2245f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_BACKSPACE</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ac52217b401e5316b31a395f4ee0a2fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_TAB</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236aaf45c5f509050a5fc94ac7ce60a60a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_CLEAR</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236aef7665432250715c4517d5d510c1b4af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_RETURN</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a5a56844a52011d51a0af67f0a5743da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_PAUSE</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236adcc9ea46b61e3c601fc8836221a92fd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_ESCAPE</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a63435e9202f6efd4a2cb68e507a2fe92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_SPACE</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236abb10025fb3d54a02e233c7eef36bbc5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_EXCLAIM</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ac7dbcc16b133a8ac508c3167379edd21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_QUOTEDBL</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236abe5105c1fcb56ae5128937b0579980a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_HASH</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a609b71186ebe0f875342d1c484552faf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_DOLLAR</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236abe69e2a8e7992ef6b63cf5dfa2d09fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_AMPERSAND</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a443ecd5680fd9ab6124bf191573b0e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_QUOTE</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a2be636729ae908234b7af464d4b60823</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_LEFTPAREN</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a468cf7e68a0c67c719e6162a6488f975</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_RIGHTPAREN</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a197527594855b5a3a02a474e599d256f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_ASTERISK</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a096242b46aec67b7b14bd6d6adbdf48b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_PLUS</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236aecf61665e343f76956f16ee8ab43922f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_COMMA</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a1870a4be7721b87b5f5d59d3e4589f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_MINUS</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236aba5a8f763a5252acfa70ae7209bd1fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_PERIOD</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a054ac64c553dd4c5719aecf911881db5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_SLASH</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236acce61c85107fbda5c39e3b72b471f2e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_0</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a644af375c5b3b97478d37764791af051</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_1</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a05eb5e9ec0a67ba5cd746479e12e75ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_2</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236aa337d6c9a7df7561eb084a00963a1fbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_3</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236af9cc9a4d3bf27d8ba4604d0236947822</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_4</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ad6b77df7baf143dcda6ac5106fa590b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_5</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a185262862411e44acf802f660bde347b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_6</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236aace5a57b76ed3f6b8c3ae3a96247bef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_7</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ab94ccfd0d787ef1bfc1768511048d44a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_8</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a0501df12c8d88b601f46bb5df820af63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_9</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ad4d14f9e4ec051997757a4bdaf3a990c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_COLON</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a7a577c81836185f82add6db7fba6d3ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_SEMICOLON</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a22e571851f7b544010a26c0eb043db4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_LESS</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236af41701ded44d443417081a4af378ff34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_EQUALS</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a72c0b46a76d9605890c5b8973375aef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_GREATER</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a4f15cd3650db52df67520cfcf497af83</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_QUESTION</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ae3a43093cb45218aeeda234f23d74b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_AT</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a2ecab26666b6c5a6e907d1114809901c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_LEFTBRACKET</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236aa6baf6719933bd6589455f53e0b67ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_BACKSLASH</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236abf8336134f40621da9c5c81ff07a2806</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_RIGHTBRACKET</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236aed97386ca929843504aa3a285da23e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_CARET</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ae13ada6edef53653d2b9dd9c9611b610</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_UNDERSCORE</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ad0ef60327d4b1a6a799aea79a8da90ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_BACKQUOTE</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a603b9760976fc762d02f9811e2d2fd35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_a</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a6f1fca07d3cbbfc65c6ab558ee302af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_b</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ac9bdcec140b3c36b5b6e08a96cdbfcc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_c</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a1ab5c760fd245013d4242e2a5a89b868</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_d</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236abf549d87766f79f5fb710ab1b53e9509</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_e</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a8b8d5fc40a60866ea38fc5b32542e697</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_f</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a20310094032b80ed89b5d4366c1edf3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_g</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a107177006e81b2b03f59f8d9134f8b0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_h</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a94e96a5cbb3c4d25ebf7db1566a1f6d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_i</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ad764092f41c475914052d3bc57418e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_j</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ab36b270693bdf4316eb2d92358f849ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_k</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ad7248764e4c63a23255b7c37230158d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_l</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a204c4159db767b034a04c54d3acb6d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_m</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a3105a4aced3ae338ca9562de261b0390</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_n</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236acbc439d468b02944149989271be6a666</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_o</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ae7d08a0da8c3c6c197432abc1f39191a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_p</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ad7472d63e9842010937f1264c71426a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_q</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a619f37304eb9106fb111429d8544032d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_r</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ae6ca3bb02ba97a373b0c10b8e19b6115</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_s</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a9d9e7719f22629f3c305937b1cf21b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_t</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a29409e43bdfaccd3b97b85b5a6be9264</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_u</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a714dd23607d928d2731647dc9eca91d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_v</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236adb16e4d602b6eeb2ec68ac397e897ae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_w</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236af215ab35b44f908623a14b7be400e9d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_x</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a9db3fe3c96f3ed066fc9d6bf05a1ef27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_y</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236aa16b1bfafc35dcd2d39bc8745fea4b2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_z</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236aeba63e1199344f732e054851729d2a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_DELETE</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a8163c2a0272f59abb7de362e1bef3e4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_KP0</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ab6565a6a3be6f693703d402728b1ab61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_KP1</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a808be06bc050ebea7464252eef37ece3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_KP2</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a6bb0e6bf1a09143466689fdedeeed70e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_KP3</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a19517331143241b79a1c5b36ab6be181</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_KP4</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a7a1f1b62d086cf7e06857d16d4b191af</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_KP5</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a553af7d3e00aea759a07fc0094983abc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_KP6</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a543df4157d1b99ef3132375ee01ee5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_KP7</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236aa0cebf5ca884e93d0a903d6a2aa8f51c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_KP8</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a7dbb927d4d82211b7d982469e9d2fa75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_KP9</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ab1b4a0898731621e63b842f14b1841a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_KP_PERIOD</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a9b79e2cab8d96f280379128d3420003c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_KP_DIVIDE</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a526df11a55cdd111a3d3c217229f788d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_KP_MULTIPLY</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a34ff934424e29f4cf9a990db35775b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_KP_MINUS</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a775437d9e5e4180275500d53bce1bf8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_KP_PLUS</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236af9e8b8753ab81cbd5fd5f098bcd03767</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_KP_ENTER</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a529781a686db64f709bd78d1fb94ee8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_KP_EQUALS</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a04601ac0096ddcfe8df60d24698e4f41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_UP</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a0fdf2724b357c40d9bfc1866a4d53269</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_DOWN</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a2a5e3dabf4319661efe7447ea1e780a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_RIGHT</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a3c1060eb4d0615ab5a48859c182c744c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_LEFT</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a35a4d1a87959e0df309c127333c31ec7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_INSERT</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a9407068cdf7fe9a5d509abd30e8a6124</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_HOME</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a43b73d3a2eaff00a1edf7caf9c5c400f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_END</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a14d2e08c9fb15da0c5d6a740606fddec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_PAGEUP</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236abc8c11d6b11a0de71d63e115c447af87</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_PAGEDOWN</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a895cfdb88e6e235d63e0b64e8c892bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_F1</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ae63d526d93660d6aa2e37ae11518e2de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_F2</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a180d9490c2e6cec30b1750ac84fbab34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_F3</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a1e3bf85aa3c10acf65ec57ad4ebf2789</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_F4</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a1749e9fe6df03845cee228de96ae3e09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_F5</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236aa98934a1573be7587a485b9029584545</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_F6</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236aef0db8d47b5123dfde5b4a541b7d118f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_F7</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a67dbf847e4e718923f6f292bbe8bc28f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_F8</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a1cc0db275109df70361221ec06e4e267</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_F9</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a0428358a552d9e9295676c95c1c4d50c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_F10</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a67c31ddb0a8e9bd98554b3b140790eaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_F11</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ab7a5583305280b66a0b2ae79ba474208</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_F12</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236affc7408b64d69b77539a5a30e13d40e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_F13</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a547e62ecf5fac6e59465b81a9cdce2f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_F14</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a86a52be2408aa8950383670e38fe92c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_F15</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ab42b119874c471f40378ea92f3388df2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_NUMLOCK</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a501356090de4ccb07d129b29c076d139</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_CAPSLOCK</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236acba9bfaef6e8cbcdc8063bf85046250e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_SCROLLOCK</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a7c1bfa9d8dc89195801c5a20762e5c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_RSHIFT</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a7850250ba48b11cdc7c9fd1f260e7f91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_LSHIFT</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a543f65a6c73c75ba9cb55b6c8d51fc3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_RCTRL</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236af26c81a7a87b002b8603753b184e3c7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_LCTRL</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a6b36980110f93503c7bf3a9db5a41d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_RALT</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a21b7ffc615814efb067990c5c1f901c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_LALT</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ac22010f86cc9177dbc82bedb61e47f05</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_RMETA</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a517b0802771945fc062406b8685fbbb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_LMETA</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a65aaa76a7dc0a22fdbce872156a276f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_LSUPER</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a2fbf9c2df77f3c5d11d688be3887d44e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_RSUPER</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a0771d49e4e2cf187d998d93513a0bffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_MODE</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ac965e72ff5f3babd1eb881334f687d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_COMPOSE</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a47a88d6a7c656b58430c0a754bacc9f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_HELP</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ac3b8c318abfa2ce0aa618c499b5c5228</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_PRINT</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a53f1ea0dd62baa49ae3c53c9fc67aa4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_SYSREQ</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236ab2df363bd795711729385e6679f90f20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_BREAK</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a5257403ead9ae03a59526f4352370972</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_MENU</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a6792338d42b4a2c632ee07350a2e774d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_POWER</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a3471aa5312f06ba82c7bb1ea13126cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_EURO</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a7786375249cfc23e7aaba0f118df3553</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_UNDO</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a41197adb54f47fe28482fc33c30722a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>KEY_LAST</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a89d3c58382fa8651d0c8b1420cbca236a68c4daf7aacbf063cc54b75848249bcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyEvent</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>ace8fd11900b400493461501c4dc57e7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyEvent</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>af2aa80811d850abcb8c2bf0b6036ba8f</anchor>
      <arglist>(WindowRef win, int aCode, uint32_t aChar32, char aChar, unsigned int aModifiers, unsigned int aNativeKeyCode)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getChar</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>aba9cb71d48f2db45d709ebc6e62136b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getCharUtf32</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a76fbd74c05b56427ac5ac2528d5d2f87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCode</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a0fdc639a3c7e085682970f20067a6da3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isShiftDown</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a266190d42647657f832f7f9f0de48a60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAltDown</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a1327fc17e81f0d9fe70bd762b5d54420</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isControlDown</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>ad74c16137b5fe755b042b87557d4fc01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMetaDown</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a0788862c178fbfad922c0c4b81ce8d0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAccelDown</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a50abfdc6b870714e1037c80ba2852ebd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNativeKeyCode</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>af8508b1de5f0791acff67bcb11aa576e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>translateNativeKeyCode</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a65402b09fe742637d1e3a4d357572c54</anchor>
      <arglist>(int nativeKeyCode)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mCode</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>abeed6fc2626fd4a86aec6df46e023153</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>mChar32</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a6d33071a561a3984d0ccf8f1c3982d92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>mChar</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a59f24707bcdc91e63b1af2649e759c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>mModifiers</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>af1868bf0524b35593167d7532e956733</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>mNativeKeyCode</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>aa8be2945d761f0aa03a7ff9c2ff12bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>WindowRef</type>
      <name>mWindow</name>
      <anchorfile>classcinder_1_1app_1_1_key_event.html</anchorfile>
      <anchor>a6a6226c10ddb415a18cb02502950cb4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::app::MouseEvent</name>
    <filename>classcinder_1_1app_1_1_mouse_event.html</filename>
    <base>cinder::app::Event</base>
    <member kind="enumvalue">
      <type>@</type>
      <name>LEFT_DOWN</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a9e1bf7f1b2cc5621fdcf89549adc46cfaacbe76b6c177519b326b0aca3f114c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RIGHT_DOWN</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a9e1bf7f1b2cc5621fdcf89549adc46cfa324d43d17fb37333e903f4aab1a54716</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MIDDLE_DOWN</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a9e1bf7f1b2cc5621fdcf89549adc46cfa81f66d9f0e95d433ea3089a7255308f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SHIFT_DOWN</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a9e1bf7f1b2cc5621fdcf89549adc46cfade85a5f9b61d7388f8114862c5e94350</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ALT_DOWN</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a9e1bf7f1b2cc5621fdcf89549adc46cfa4f3290a33688da18541b4d8f8125ef17</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CTRL_DOWN</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a9e1bf7f1b2cc5621fdcf89549adc46cfaf2cd2e2f5ca03f85b6626b3c33c64f4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>META_DOWN</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a9e1bf7f1b2cc5621fdcf89549adc46cfa8a7aad4a38d7e688d80c45f91444da09</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ACCEL_DOWN</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a9e1bf7f1b2cc5621fdcf89549adc46cfae1ec43bf471897c4304025b710bbddfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MouseEvent</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a4dab2914ad76c5875f68134f02164662</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MouseEvent</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a76bd231fba54b695053c279618f9ad7c</anchor>
      <arglist>(WindowRef win, int aInitiator, int aX, int aY, unsigned int aModifiers, float aWheelIncrement, uint32_t aNativeModifiers)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getX</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>ace66ca6ce32789e3824552a3310ee4e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getY</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>ab55f988f399ab37026062de35030ee29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getPos</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a92aa25314f286ba0fc6591075e904f79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeft</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>ae28b5797386c3c9e98e17a358fb77b82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRight</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a232d43010e8a02d9165d198603b9727d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMiddle</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a904e9caaf10d890412180713b5c80907</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeftDown</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a40a47a0d3c696a029705b1c77a2c9193</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRightDown</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a03fd6126ce8568bf922373bab3826231</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMiddleDown</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a9c9f613892761f1558c32ef4cd4cc891</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isShiftDown</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a9b26f5a975c190c67ca34c812d06532d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAltDown</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a6546edf0a2c4200506b3f72ccb6cc266</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isControlDown</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a13db497bf0a3500a6591b1888eff8be6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMetaDown</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a4d022a3dbebcfa94b27858fbb335f35d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAccelDown</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a4865ddf3e4e253849324550a634b9971</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getWheelIncrement</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a5ecc6c4528fa844beae3ff0df24a02d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getNativeModifiers</name>
      <anchorfile>classcinder_1_1app_1_1_mouse_event.html</anchorfile>
      <anchor>a570029fac749a4397a921017f60c354f</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class" objc="yes">
    <name>cinder::app::Renderer</name>
    <filename>classcinder_1_1app_1_1_renderer.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Renderer</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>a01695d1280e03c63a5f7c9a0693791f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RendererRef</type>
      <name>clone</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>a4a600560000cea572e66b87738f95496</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>a65629850ae4f02882e0cfa480ccd91fd</anchor>
      <arglist>(App *aApp, CGRect frame, NSView *cinderView, RendererRef sharedRenderer, bool retinaEnabled)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CGContextRef</type>
      <name>getCgContext</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>a30c181d46dac0d0f5772cafd59deff15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CGLContextObj</type>
      <name>getCglContext</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>a856b2251152735bf56c4d82b2838ee07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CGLPixelFormatObj</type>
      <name>getCglPixelFormat</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>a94a4ff6620890b45e5b773ea462ff578</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>a24247f91e9d70b5a5a1860547befb8fe</anchor>
      <arglist>(App *aApp, const Area &amp;frame, UIView *cinderView, RendererRef sharedRenderer)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEaglLayer</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>abd6a3d22409166ffa6785148b1f07992</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFrameSize</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>a653178bec973780de38de90ae1adafdf</anchor>
      <arglist>(int width, int height)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>acd12d3a95b8fb1e29816027d063d1edc</anchor>
      <arglist>(App *aApp, HWND wnd, HDC dc, RendererRef sharedRenderer)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>prepareToggleFullScreen</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>ac2b7b30522604c0e7b301b0ab6fcd215</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishToggleFullScreen</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>ae173902e0504a89ce4aa6e3a4d7745b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>kill</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>a8accd38a49b505a0aedefdd252d333ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual HWND</type>
      <name>getHwnd</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>a73d0db0f1171c732bb4576f0a7d56119</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HDC</type>
      <name>getDc</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>a94d2e40b516a10c3010559003d239428</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Surface</type>
      <name>copyWindowSurface</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>a727b9882db6c893d9e29b66adee48374</anchor>
      <arglist>(const Area &amp;area)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startDraw</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>aa621168f7a5df9afcf196ed189f617ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finishDraw</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>a7d3eb1c9615476b07234d0c8176fba09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>makeCurrentContext</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>a42771db65eaeafdc36887e6f56c70b95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>defaultResize</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>a9b0b07c5956a24ff02c18e1bb2476e77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Renderer</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>a29c990a15ef4b2f817d032855936046f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Renderer</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>a032b81c183a6938179c0cecda97e2d14</anchor>
      <arglist>(const Renderer &amp;renderer)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>App *</type>
      <name>mApp</name>
      <anchorfile>classcinder_1_1app_1_1_renderer.html</anchorfile>
      <anchor>aa2402050daedf2670fc67afd28a8fc97</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::app::TouchEvent</name>
    <filename>classcinder_1_1app_1_1_touch_event.html</filename>
    <base>cinder::app::Event</base>
    <class kind="class">cinder::app::TouchEvent::Touch</class>
    <member kind="function">
      <type></type>
      <name>TouchEvent</name>
      <anchorfile>classcinder_1_1app_1_1_touch_event.html</anchorfile>
      <anchor>a8e8e1b25a215260ca097f81258b79000</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TouchEvent</name>
      <anchorfile>classcinder_1_1app_1_1_touch_event.html</anchorfile>
      <anchor>ae91a95a78cefe46e50fec99542228de2</anchor>
      <arglist>(WindowRef win, const std::vector&lt; Touch &gt; &amp;touches)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Touch &gt; &amp;</type>
      <name>getTouches</name>
      <anchorfile>classcinder_1_1app_1_1_touch_event.html</anchorfile>
      <anchor>a4c4f6055f59e74e1abff054592ecca45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Touch &gt; &amp;</type>
      <name>getTouches</name>
      <anchorfile>classcinder_1_1app_1_1_touch_event.html</anchorfile>
      <anchor>ab69127afd29e106d26c6cc6ba269ea53</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::app::TouchEvent::Touch</name>
    <filename>classcinder_1_1app_1_1_touch_event_1_1_touch.html</filename>
    <member kind="function">
      <type></type>
      <name>Touch</name>
      <anchorfile>classcinder_1_1app_1_1_touch_event_1_1_touch.html</anchorfile>
      <anchor>ac4778aba47d364453d1c6ac0d7d24005</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Touch</name>
      <anchorfile>classcinder_1_1app_1_1_touch_event_1_1_touch.html</anchorfile>
      <anchor>a8fb4119410b2522a72c4e6b8a06094d4</anchor>
      <arglist>(const Vec2f &amp;pos, const Vec2f &amp;prevPos, uint32_t id, double time, void *native)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getX</name>
      <anchorfile>classcinder_1_1app_1_1_touch_event_1_1_touch.html</anchorfile>
      <anchor>ad636047b72af5d47833cbabc551ceba2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getY</name>
      <anchorfile>classcinder_1_1app_1_1_touch_event_1_1_touch.html</anchorfile>
      <anchor>a01c52c724f8080f693f74ede322aef57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>getPos</name>
      <anchorfile>classcinder_1_1app_1_1_touch_event_1_1_touch.html</anchorfile>
      <anchor>a29ee063f1fe9bbe3436fb40028342e80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getPrevX</name>
      <anchorfile>classcinder_1_1app_1_1_touch_event_1_1_touch.html</anchorfile>
      <anchor>a64109decc08a12db5eb3f2b64e17e2e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getPrevY</name>
      <anchorfile>classcinder_1_1app_1_1_touch_event_1_1_touch.html</anchorfile>
      <anchor>ab03105508c2d6347a8c9b7cfbc743000</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>getPrevPos</name>
      <anchorfile>classcinder_1_1app_1_1_touch_event_1_1_touch.html</anchorfile>
      <anchor>a9f5d0e1a2ebafc101ef34174c6b647e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getId</name>
      <anchorfile>classcinder_1_1app_1_1_touch_event_1_1_touch.html</anchorfile>
      <anchor>a2375c8388ee0275c59a962acf08bf568</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTime</name>
      <anchorfile>classcinder_1_1app_1_1_touch_event_1_1_touch.html</anchorfile>
      <anchor>a3ea6a544e051a114b671f2df68f491ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const void *</type>
      <name>getNative</name>
      <anchorfile>classcinder_1_1app_1_1_touch_event_1_1_touch.html</anchorfile>
      <anchor>a142008ea4d12345078cdfb92bf82c1d2</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>cinder::audio</name>
    <filename>namespacecinder_1_1audio.html</filename>
    <class kind="class">cinder::audio::LoaderSourceCallback</class>
    <class kind="class">cinder::audio::Callback</class>
    <class kind="class">cinder::audio::CircularBuffer</class>
    <class kind="class">cinder::audio::CocoaCaConverter</class>
    <class kind="class">cinder::audio::FftProcessorImpl</class>
    <class kind="class">cinder::audio::FftProcessor</class>
    <class kind="class">cinder::audio::FftProcessorImplAccelerate</class>
    <class kind="class">cinder::audio::Input</class>
    <class kind="class">cinder::audio::InputExc</class>
    <class kind="class">cinder::audio::InvalidDeviceInputExc</class>
    <class kind="class">cinder::audio::InputImplAudioUnit</class>
    <class kind="class">cinder::audio::Io</class>
    <class kind="class">cinder::audio::Target</class>
    <class kind="class">cinder::audio::Source</class>
    <class kind="class">cinder::audio::Loader</class>
    <class kind="class">cinder::audio::IoException</class>
    <class kind="class">cinder::audio::IoExceptionFailedLoad</class>
    <class kind="class">cinder::audio::IoExceptionSourceNotFound</class>
    <class kind="class">cinder::audio::IoExceptionUnsupportedDataType</class>
    <class kind="class">cinder::audio::IoExceptionUnsupportedDataFormat</class>
    <class kind="struct">cinder::audio::IoRegistrar</class>
    <class kind="struct">cinder::audio::IoRegistrant</class>
    <class kind="class">cinder::audio::Track</class>
    <class kind="class">cinder::audio::OutputImpl</class>
    <class kind="class">cinder::audio::Output</class>
    <class kind="class">cinder::audio::OutputException</class>
    <class kind="class">cinder::audio::OutOfTracksException</class>
    <class kind="class">cinder::audio::TargetOutputImplAudioUnit</class>
    <class kind="class">cinder::audio::OutputImplAudioUnit</class>
    <class kind="class">cinder::audio::TargetOutputImplXAudio</class>
    <class kind="class">cinder::audio::OutputImplXAudio</class>
    <class kind="struct">cinder::audio::BufferT</class>
    <class kind="struct">cinder::audio::BufferListT</class>
    <class kind="class">cinder::audio::PcmBufferT</class>
    <class kind="class">cinder::audio::PcmBufferException</class>
    <class kind="class">cinder::audio::InvalidChannelPcmBufferException</class>
    <class kind="class">cinder::audio::OutOfRangePcmBufferException</class>
    <class kind="class">cinder::audio::LoaderSourceFile</class>
    <class kind="class">cinder::audio::SourceFile</class>
    <class kind="class">cinder::audio::LoaderSourceFileWav</class>
    <class kind="class">cinder::audio::SourceFileWav</class>
    <class kind="class">cinder::audio::LoaderSourceFileWindowsMedia</class>
    <class kind="class">cinder::audio::SourceFileWindowsMedia</class>
    <member kind="typedef">
      <type>ComponentDescription</type>
      <name>AudioComponentDescription</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a2ff32656f0ab161a01f6b0cad2c1a5c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class FftProcessor &gt;</type>
      <name>FftProcessorRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>acae2a72b999c2c1f6abbd1cbba77b965</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; InputDevice &gt;</type>
      <name>InputDeviceRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a484d1198972361a905be10136a2817b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class Source &gt;</type>
      <name>SourceRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>ab7d4b1fe91a68a0c2c940dd7c23ae02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class Target &gt;</type>
      <name>TargetRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a4f25a52551fda15ec52bb9374d140423</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class Loader &gt;</type>
      <name>LoaderRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a6337b56d4de52ccd8c13d1a48ff062ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HRESULT(*</type>
      <name>LoaderDataCallback</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a78e91307e5b04f000feb02d042205be0</anchor>
      <arglist>)(void *audioData, uint32_t dataSize, void *track, uint64_t sampleTime, uint32_t sampleDuration)</arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>TrackId</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a52f950a215e17b4764484c15a0fdf47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class cinder::audio::Track &gt;</type>
      <name>TrackRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a0d4f8fef341ddf26a23aa04f0c4991b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum cinder::audio::ChannelIdentifier</type>
      <name>ChannelIdentifier</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>ac508d0ce6b1b1f5aaec602dfdcf63c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferT&lt; void &gt;</type>
      <name>BufferGeneric</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a8c8514772b4d44ad7f47f1dee58f2b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferT&lt; uint8_t &gt;</type>
      <name>Buffer8u</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a101d6a024c6c4bd0595b60167c2b9cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferT&lt; int8_t &gt;</type>
      <name>Buffer8i</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a0be141e33c7bc67947649f81edb35803</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferT&lt; uint16_t &gt;</type>
      <name>Buffer16u</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a751f44fc722be2db190b312856c51694</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferT&lt; int16_t &gt;</type>
      <name>Buffer16i</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>abf928cf033267dbd0a0a2f019707aeb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferT&lt; int32_t &gt;</type>
      <name>Buffer32i</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a0bf244baa09f4801e93ed942e52866d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferT&lt; uint32_t &gt;</type>
      <name>Buffer32u</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a6075f70f94728d59a1c70e579482b99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferT&lt; float &gt;</type>
      <name>Buffer32f</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>af3c21f226a016d532ffe43fe52a7aea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BufferT&lt; float &gt; &gt;</type>
      <name>Buffer32fRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a4ec75c5c56f501a9fca6d890d085f338</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferListT&lt; void &gt;</type>
      <name>BufferList</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>ab1fa59c8df393e231a3696d86553b3d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BufferListT&lt; float &gt;</type>
      <name>BufferList32f</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a468e7f7ecb9275d22465db9cc91c225c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; BufferList32f &gt;</type>
      <name>BufferList32fRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>af9775f8e6ef105ecae8fa7b4e75a8843</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PcmBufferT&lt; float &gt;</type>
      <name>PcmBuffer32f</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>ac53cba7fe139d383e383e39efecd184f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; PcmBuffer32f &gt;</type>
      <name>PcmBuffer32fRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>aeffed732a048fdec550d4af2fd03ae31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class SourceFile &gt;</type>
      <name>SourceFileRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>abe5b8ef165f01d450f1dfd17f186c483</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class LoaderSourceFile &gt;</type>
      <name>LoaderSourceFileRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a4993a96a1c4996c58f724016d7721a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class SourceFileWav &gt;</type>
      <name>SourceFileWavRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a70cb06afb5b273f6923732fa03820a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class LoaderSourceFileWav &gt;</type>
      <name>LoaderSourceFileWavRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a08411a1165b2762f1e59256aaff32b7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class SourceFileWindowsMedia &gt;</type>
      <name>SourceFileWindowsMediaRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>abbf912b5b3e95836b114f88b9f6c3eef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class LoaderSourceFileWindowsMedia &gt;</type>
      <name>LoaderSourceFileWindowsMediaRef</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a3353f59285df9da38d4390b8648a0b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_UNKOWN</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268a09939e774d7dd1f722c71007812fb5ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_PCM</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268ad0fc24843c8c5a006ea2d394c1acc7dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_MS_ADPCM</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268a1c475a2bced40c0cf928e0604ab037fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_IEEE_FLOAT</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268a32e9ebbccc49d32e9cf6c5a4fddc17b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_ALAW</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268a03e65bbc1df56892438990e458f59aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_MULAW</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268a94e64a4e23c5f4c430bae900429af907</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_DIALOGIC_OKI_ADPCM</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268aab537bc271be7a6df70e7a118da8631f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_YAMAHA_ADPCM</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268ae0222b5b178a06163617d27a48f1dafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_GSM610</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268aff1ff1f2c338b440e68150c9f2d4bb14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_G721_ADPCM</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268a323f725bd36509d3aabccb01020e8e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_MPEG</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268aab8c87aea0af3bb16a5c306d63148beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WAV_FORMAT_MP3</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>afa247becdaff97a3607a7bf7e038e268aa0f66111b169c37d42a4dde3666e1e49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ChannelIdentifier</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a8fdfd3e4f82c33e1d27d4ff144285774</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHANNEL_FRONT_LEFT</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a8fdfd3e4f82c33e1d27d4ff144285774aec80148f1564971dd558b558bb225b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CHANNEL_FRONT_RIGHT</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a8fdfd3e4f82c33e1d27d4ff144285774a8d2456cc6c09dc3ea0a25db593aa0eb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; float &gt;</type>
      <name>calculateFft</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a6a5af388a78f29c7e08ae536f9fe0950</anchor>
      <arglist>(Buffer32fRef aBuffer, uint16_t aBandCount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteFftBuffer</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a901399b8fe7dce83d36e006bc0255fb4</anchor>
      <arglist>(float *buffer)</arglist>
    </member>
    <member kind="function">
      <type>SourceRef</type>
      <name>load</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a71a6f579c46fcbee416f53d492659913</anchor>
      <arglist>(const std::string &amp;path, std::string extension=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>SourceRef</type>
      <name>load</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>ad161d0384fac997ae448920d9b1c2b08</anchor>
      <arglist>(DataSourceRef dataSource, std::string extension=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteBuffer</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>abe628b8bdeca67efcc407327f1403ffb</anchor>
      <arglist>(BufferT&lt; T &gt; *aBuffer)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; BufferListT&lt; T &gt; &gt;</type>
      <name>createBufferList</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a267f308a9190dd9cf693bd693b38040a</anchor>
      <arglist>(uint32_t sampleCount, uint16_t channelCount, bool isInterleaved)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteBufferList</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a83a977dc921cb0f709063f52cff37435</anchor>
      <arglist>(BufferListT&lt; T &gt; *aBufferList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_PP_SEQ_FOR_EACH</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>aa31d56e2aed71f2abcf1ecd058bcf16b</anchor>
      <arglist>(CREATE_BUFFERLIST_PROTOTYPES,~, AUDIO_DATA_TYPES) template&lt; typename T &gt; PcmBufferT&lt; T &gt;</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readStreamWithEndianess</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a8eac97ba802d6d7ca340f6e2ae93a0a2</anchor>
      <arglist>(IStreamRef aIStream, T *param, bool isBigEndian)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Callback&lt; T, U &gt; &gt;</type>
      <name>createCallback</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a5614cbce261d8a25f72fb3321e52e878</anchor>
      <arglist>(T *callbackObj, void(T::*callbackFn)(uint64_t inSampleOffset, uint32_t inSampleCount, BufferT&lt; U &gt; *ioBuffer), bool ownCallbackObj=false, uint32_t aSampleRate=44100, uint16_t aChannelCount=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>silenceBuffers</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>af986afc385f4791e0bf89d24c5fbf78d</anchor>
      <arglist>(BufferList *aBufferList)</arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>gRiffMarker</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>ac08516a6c8bc8649d98c7277b0d4d72d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>gRifxMarker</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a6e5fad076db9b80cb8a0db7f77cbd5f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>gWaveMarker</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>abbafccb37b2426b370abee600567eb3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>gDataMarker</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a5815a65a2c2fe8b6187d7a18a8638afd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const uint32_t</type>
      <name>gFmtMarker</name>
      <anchorfile>namespacecinder_1_1audio.html</anchorfile>
      <anchor>a6e0146fba90a11f4ab58724515b80839</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::LoaderSourceCallback</name>
    <filename>classcinder_1_1audio_1_1_loader_source_callback.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>cinder::audio::Loader</base>
    <member kind="function">
      <type></type>
      <name>~LoaderSourceCallback</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_callback.html</anchorfile>
      <anchor>a056332749389147152b315171e11a183</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>getSampleOffset</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_callback.html</anchorfile>
      <anchor>ac43c130dd8945ce38446cdec91e7a60b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSampleOffset</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_callback.html</anchorfile>
      <anchor>a953ed50a4fd9ab221db0582ff27e065e</anchor>
      <arglist>(uint64_t anOffset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadData</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_callback.html</anchorfile>
      <anchor>a91fc5561176c937f743068bef42aabf9</anchor>
      <arglist>(BufferList *ioData)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uint32_t</type>
      <name>getOptimalBufferSize</name>
      <anchorfile>classcinder_1_1audio_1_1_loader.html</anchorfile>
      <anchor>a999f462660af5b35fe8474de00f9843f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LoaderRef</type>
      <name>createRef</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_callback.html</anchorfile>
      <anchor>ac936a87a01347ced6c1273c935c99807</anchor>
      <arglist>(Callback&lt; T, U &gt; *source, Target *target)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fillBufferListFromCaBufferList</name>
      <anchorfile>classcinder_1_1audio_1_1_loader.html</anchorfile>
      <anchor>a5895bdd1202808ba1b1f565e0f6e46c2</anchor>
      <arglist>(BufferList *aBufferList, const AudioBufferList *caBufferList)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::shared_ptr&lt; AudioBufferList &gt;</type>
      <name>createCaBufferList</name>
      <anchorfile>classcinder_1_1audio_1_1_loader.html</anchorfile>
      <anchor>ab58faeaa2862671863e1dfed30f69cf1</anchor>
      <arglist>(const BufferList *caBufferList)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::Callback</name>
    <filename>classcinder_1_1audio_1_1_callback.html</filename>
    <templarg>T</templarg>
    <templarg>U</templarg>
    <base>cinder::audio::Source</base>
    <member kind="typedef">
      <type>void(T::*</type>
      <name>CallbackFunction</name>
      <anchorfile>classcinder_1_1audio_1_1_callback.html</anchorfile>
      <anchor>a51a8cde83413bf3c1754729fbf94bb7e</anchor>
      <arglist>)(uint64_t inSampleOffset, uint32_t inSampleCount, BufferT&lt; U &gt; *ioBuffer)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DataType</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a4bc939f11aac6aa611faec79d0efe26a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UINT8</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a4bc939f11aac6aa611faec79d0efe26aa95cc136e8961d7aac9473693fab9973e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INT8</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a4bc939f11aac6aa611faec79d0efe26aa710e2c4e8c088136f3ce82cc45768cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UINT16</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a4bc939f11aac6aa611faec79d0efe26aa5e36baa0f72d77515a8f8c679c4b66ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INT16</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a4bc939f11aac6aa611faec79d0efe26aa1bdb32c534945fd87dc90421ae97ae86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UINT32</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a4bc939f11aac6aa611faec79d0efe26aa23266765419c31574cb830eab548cf31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INT32</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a4bc939f11aac6aa611faec79d0efe26aae37e1727aaa3de28a148d2627c812ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FLOAT32</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a4bc939f11aac6aa611faec79d0efe26aafd02420322aa22aa27573024525e422f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DATA_UNKNOWN</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a4bc939f11aac6aa611faec79d0efe26aae3e25e7981431befab0e204c94dccf30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum cinder::audio::Io::DataType</type>
      <name>DataType</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>ad1a2495bcf826279681ae2085c0dac8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Callback</name>
      <anchorfile>classcinder_1_1audio_1_1_callback.html</anchorfile>
      <anchor>ade40244e7715a99bc83809ae8ccd0ac6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LoaderRef</type>
      <name>createLoader</name>
      <anchorfile>classcinder_1_1audio_1_1_callback.html</anchorfile>
      <anchor>ab552638e634fbb9d93e3cd8abb9524df</anchor>
      <arglist>(Target *target)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDuration</name>
      <anchorfile>classcinder_1_1audio_1_1_callback.html</anchorfile>
      <anchor>a851daba183e38e9d1b03358a465b7e45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getSampleRate</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a002ca0202830eaa782dc8fc936773fea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int16_t</type>
      <name>getChannelCount</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a3d58d64bbd44445cf7775fd375522002</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int16_t</type>
      <name>getBitsPerSample</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a68f4ab463e22b1131d81a03faf8d8d75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int16_t</type>
      <name>getBlockAlign</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a53d69c92387b78cc57c99a5a070715c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DataType</type>
      <name>getDataType</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a7d66eb81c3809451d20393e44b6091b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInterleaved</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a3ac177a43f879c77efbb84ce5d9cd98c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPcm</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a533e0dd9dfca24b72b184529412786fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFloat</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a8f0d40a49396bb3ca8dec09fd833fbb1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBigEndian</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a3dc2f7d2a8205e6beff3c997c350d723</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>loadFromCaAudioStreamBasicDescription</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a744189310a870f3bd8ca7253b861b60b</anchor>
      <arglist>(Io *anIo, const AudioStreamBasicDescription *audioDescription)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mSampleRate</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>aa21a75c1f389bcfad80a9af4e7b3a75d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int16_t</type>
      <name>mChannelCount</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a1f2a317279ff3aa2182ee6f52f57da1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int16_t</type>
      <name>mBitsPerSample</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>af028712eb25d2db1ebf917ed5fc7c27a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int16_t</type>
      <name>mBlockAlign</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a79c801a5bef211dd85dd2dc92a4c49ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataType</type>
      <name>mDataType</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>adaa666945d1e4210a2e25c8b5a43dcef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mIsInterleaved</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a8627d05e253a15bf4c9eb8a73046a16f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mIsPcm</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a80f612544c704ddbc18bd21d939bb4b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mIsBigEndian</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a62bdef6dedf0c7dc75d5d67f6710232c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>mNativeFormatId</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>af22d401036cd52c85295936753e32013</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>mNativeFormatFlags</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>aebbbeaf6cb81f09c870964a717b9d038</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>mBytesPerPacket</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a94d9074ff4f2f68ef9a68d405c1532ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>mFramesPerPacket</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a5786102dee10e9a0a7ab42f4091aa486</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>mBytesPerFrame</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a2d128d0b15deb4e29d191937caf314d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>LoaderSourceCallback&lt; T, U &gt;</name>
      <anchorfile>classcinder_1_1audio_1_1_callback.html</anchorfile>
      <anchor>af75f0c53032ed7d8abd64937ea5624ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::shared_ptr&lt; Callback&lt; T2, U2 &gt; &gt;</type>
      <name>createCallback</name>
      <anchorfile>classcinder_1_1audio_1_1_callback.html</anchorfile>
      <anchor>a89f6fa68e4bfe911a1ebcebc24389091</anchor>
      <arglist>(T2 *callbackObj, void(T2::*callbackFn)(uint64_t inSampleOffset, uint32_t inSampleCount, BufferT&lt; U2 &gt; *ioBuffer), bool ownCallbackObj, uint32_t aSampleRate, uint16_t aChannelCount)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::CircularBuffer</name>
    <filename>classcinder_1_1audio_1_1_circular_buffer.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>std::pair&lt; T *, uint32_t &gt;</type>
      <name>ArrayRange</name>
      <anchorfile>classcinder_1_1audio_1_1_circular_buffer.html</anchorfile>
      <anchor>a55b5f41097cf716927681ec6d43fd47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CircularBuffer</name>
      <anchorfile>classcinder_1_1audio_1_1_circular_buffer.html</anchorfile>
      <anchor>a704c6b0d69d4c1d718065ad29ceaaa33</anchor>
      <arglist>(uint32_t size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CircularBuffer</name>
      <anchorfile>classcinder_1_1audio_1_1_circular_buffer.html</anchorfile>
      <anchor>a0fb5f965db4da30ee39c50fc62701115</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classcinder_1_1audio_1_1_circular_buffer.html</anchorfile>
      <anchor>a11c915e04351655ec7f1d45c8e67265a</anchor>
      <arglist>(const T *src, uint32_t size)</arglist>
    </member>
    <member kind="function">
      <type>ArrayRange</type>
      <name>arrayOne</name>
      <anchorfile>classcinder_1_1audio_1_1_circular_buffer.html</anchorfile>
      <anchor>a6b17aeb71efdfcfb1ddf60844cb2f7cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArrayRange</type>
      <name>arrayTwo</name>
      <anchorfile>classcinder_1_1audio_1_1_circular_buffer.html</anchorfile>
      <anchor>ac944878d24cb3f9e3319932b0f36d51e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>size</name>
      <anchorfile>classcinder_1_1audio_1_1_circular_buffer.html</anchorfile>
      <anchor>a96750485dcef15883d30487b318f638d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>maxSize</name>
      <anchorfile>classcinder_1_1audio_1_1_circular_buffer.html</anchorfile>
      <anchor>a99b1b7a551cb9de2f686b36a65de55d6</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::CocoaCaConverter</name>
    <filename>classcinder_1_1audio_1_1_cocoa_ca_converter.html</filename>
    <member kind="typedef">
      <type>void(*</type>
      <name>LoaderFunction</name>
      <anchorfile>classcinder_1_1audio_1_1_cocoa_ca_converter.html</anchorfile>
      <anchor>a6a7e4b3bf1511c4017f0287d306593e7</anchor>
      <arglist>)(Loader *aLoader, uint32_t *ioSampleCount, BufferList *ioData, AudioStreamPacketDescription *packetDescriptions)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CocoaCaConverter</name>
      <anchorfile>classcinder_1_1audio_1_1_cocoa_ca_converter.html</anchorfile>
      <anchor>a4694ac0e40c417d878fdeaeffa64cfab</anchor>
      <arglist>(Loader *aLoader, LoaderFunction loaderFn, const AudioStreamBasicDescription &amp;sourceDescription, const AudioStreamBasicDescription &amp;targetDescription, uint32_t maxPacketSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CocoaCaConverter</name>
      <anchorfile>classcinder_1_1audio_1_1_cocoa_ca_converter.html</anchorfile>
      <anchor>a1fe312b31152c2bc455c3d5a044d7efe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadData</name>
      <anchorfile>classcinder_1_1audio_1_1_cocoa_ca_converter.html</anchorfile>
      <anchor>a9823f3f3bfdfbd26193a9c1077176951</anchor>
      <arglist>(BufferList *ioData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classcinder_1_1audio_1_1_cocoa_ca_converter.html</anchorfile>
      <anchor>ac45d1c814cf8de3c03b77733c5aa9e5e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::FftProcessorImpl</name>
    <filename>classcinder_1_1audio_1_1_fft_processor_impl.html</filename>
    <member kind="function">
      <type></type>
      <name>FftProcessorImpl</name>
      <anchorfile>classcinder_1_1audio_1_1_fft_processor_impl.html</anchorfile>
      <anchor>a0ab3b5d3e0e2bde430680f3ff7502546</anchor>
      <arglist>(uint16_t aBandCount)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FftProcessorImpl</name>
      <anchorfile>classcinder_1_1audio_1_1_fft_processor_impl.html</anchorfile>
      <anchor>a9facc7b71a138e0c038bd13398100b50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::shared_ptr&lt; float &gt;</type>
      <name>process</name>
      <anchorfile>classcinder_1_1audio_1_1_fft_processor_impl.html</anchorfile>
      <anchor>a59937603d0911e397f66bcdaa115bd4e</anchor>
      <arglist>(const float *inBuffer)=0</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>getBandCount</name>
      <anchorfile>classcinder_1_1audio_1_1_fft_processor_impl.html</anchorfile>
      <anchor>a9bf478da53c0eae8b9a394f41eed35ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16_t</type>
      <name>mBandCount</name>
      <anchorfile>classcinder_1_1audio_1_1_fft_processor_impl.html</anchorfile>
      <anchor>a895a44fc1dee23f82649dee2212f0969</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::FftProcessor</name>
    <filename>classcinder_1_1audio_1_1_fft_processor.html</filename>
    <member kind="function">
      <type>std::shared_ptr&lt; float &gt;</type>
      <name>process</name>
      <anchorfile>classcinder_1_1audio_1_1_fft_processor.html</anchorfile>
      <anchor>a49a581a54e63836b55bf83d3d36c0f37</anchor>
      <arglist>(const float *inBuffer)</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>getBandCount</name>
      <anchorfile>classcinder_1_1audio_1_1_fft_processor.html</anchorfile>
      <anchor>a4f94f3da477be6e8e7cfb50d2028d1cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FftProcessorRef</type>
      <name>createRef</name>
      <anchorfile>classcinder_1_1audio_1_1_fft_processor.html</anchorfile>
      <anchor>af0588630b648f405cd906a6a57068ecf</anchor>
      <arglist>(uint16_t aBandCount=DEFAULT_BAND_COUNT)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>DEFAULT_BAND_COUNT</name>
      <anchorfile>classcinder_1_1audio_1_1_fft_processor.html</anchorfile>
      <anchor>a492f88bc5fdd60605777fa332f8e9c9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::FftProcessorImplAccelerate</name>
    <filename>classcinder_1_1audio_1_1_fft_processor_impl_accelerate.html</filename>
    <base>cinder::audio::FftProcessorImpl</base>
    <member kind="function">
      <type></type>
      <name>FftProcessorImplAccelerate</name>
      <anchorfile>classcinder_1_1audio_1_1_fft_processor_impl_accelerate.html</anchorfile>
      <anchor>a908a934f2accefd4478e1709d888835c</anchor>
      <arglist>(uint16_t aBandCount)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FftProcessorImplAccelerate</name>
      <anchorfile>classcinder_1_1audio_1_1_fft_processor_impl_accelerate.html</anchorfile>
      <anchor>a3beda4ffe661c73329d4429a21433791</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; float &gt;</type>
      <name>process</name>
      <anchorfile>classcinder_1_1audio_1_1_fft_processor_impl_accelerate.html</anchorfile>
      <anchor>a6a0e493904d146b41403c41e2e38940e</anchor>
      <arglist>(const float *inBuffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::Input</name>
    <filename>classcinder_1_1audio_1_1_input.html</filename>
    <member kind="function">
      <type></type>
      <name>Input</name>
      <anchorfile>classcinder_1_1audio_1_1_input.html</anchorfile>
      <anchor>a8f378c973136ebcfc2877efbf25fcdde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Input</name>
      <anchorfile>classcinder_1_1audio_1_1_input.html</anchorfile>
      <anchor>a3491361a51221851a2112871e2aa0f16</anchor>
      <arglist>(InputDeviceRef aDevice)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Input</name>
      <anchorfile>classcinder_1_1audio_1_1_input.html</anchorfile>
      <anchor>a19c891428d517ef790b081277d302625</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classcinder_1_1audio_1_1_input.html</anchorfile>
      <anchor>a2cc1028128a9bbf357789cf89bd133a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classcinder_1_1audio_1_1_input.html</anchorfile>
      <anchor>aeecc0210df6f16e163d152c1cad95182</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PcmBuffer32fRef</type>
      <name>getPcmBuffer</name>
      <anchorfile>classcinder_1_1audio_1_1_input.html</anchorfile>
      <anchor>a710d89740e23c5671b493c4eb3517bb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCapturing</name>
      <anchorfile>classcinder_1_1audio_1_1_input.html</anchorfile>
      <anchor>a5079294690153884034b5e8af44b4af7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getSampleRate</name>
      <anchorfile>classcinder_1_1audio_1_1_input.html</anchorfile>
      <anchor>a45b4db942d2becbd887c57c43f1923ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>getChannelCount</name>
      <anchorfile>classcinder_1_1audio_1_1_input.html</anchorfile>
      <anchor>a250a59d2ffa2d17b03605cc1fa51cfb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::vector&lt; InputDeviceRef &gt; &amp;</type>
      <name>getDevices</name>
      <anchorfile>classcinder_1_1audio_1_1_input.html</anchorfile>
      <anchor>a7619c497f2a87a0220e19afbabd82633</anchor>
      <arglist>(bool forceRefresh=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InputDeviceRef</type>
      <name>getDefaultDevice</name>
      <anchorfile>classcinder_1_1audio_1_1_input.html</anchorfile>
      <anchor>ad0aaaaa5f0147da5982708bd0714423b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InputDeviceRef</type>
      <name>findDeviceByName</name>
      <anchorfile>classcinder_1_1audio_1_1_input.html</anchorfile>
      <anchor>a3fd9dd6bc568e06b905268bf50b300da</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InputDeviceRef</type>
      <name>findDeviceByNameContains</name>
      <anchorfile>classcinder_1_1audio_1_1_input.html</anchorfile>
      <anchor>ade927bfad78dd3b5c327722e68764eca</anchor>
      <arglist>(const std::string &amp;nameFragment)</arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; InputImpl &gt; Input::*</type>
      <name>unspecified_bool_type</name>
      <anchorfile>classcinder_1_1audio_1_1_input.html</anchorfile>
      <anchor>aafa1eca108b95632a4e592e1c5309fe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unspecified_bool_type</name>
      <anchorfile>classcinder_1_1audio_1_1_input.html</anchorfile>
      <anchor>ad07da266a847d27955e6b55108619be7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classcinder_1_1audio_1_1_input.html</anchorfile>
      <anchor>afaac023178a7bd1528745dbbd101f636</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::InputExc</name>
    <filename>classcinder_1_1audio_1_1_input_exc.html</filename>
    <base>cinder::Exception</base>
  </compound>
  <compound kind="class">
    <name>cinder::audio::InvalidDeviceInputExc</name>
    <filename>classcinder_1_1audio_1_1_invalid_device_input_exc.html</filename>
    <base>cinder::audio::InputExc</base>
  </compound>
  <compound kind="class">
    <name>cinder::audio::InputImplAudioUnit</name>
    <filename>classcinder_1_1audio_1_1_input_impl_audio_unit.html</filename>
    <class kind="class">cinder::audio::InputImplAudioUnit::Device</class>
    <member kind="function">
      <type></type>
      <name>InputImplAudioUnit</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>ac16cc0ef3ffcd553115a14947830ccbd</anchor>
      <arglist>(InputDeviceRef aDevice)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InputImplAudioUnit</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>a3be6b61234b209d068d704b693779d48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>a9294d9a0214a43b645275e591c915fa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>a837ada12047696b46a96e9b3cba57d38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PcmBuffer32fRef</type>
      <name>getPcmBuffer</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>ae8bda5b12414c8f3c3d5659fbbe3a944</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCapturing</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>a43a242cc8ca52d40bbebad2df0f7f1c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getSampleRate</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>aa9ce4315ce53d0b8994d43b39a3ca088</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>getChannelCount</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>ab5f5133aab318b1be1a617b39a2b96d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::vector&lt; InputDeviceRef &gt; &amp;</type>
      <name>getDevices</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>aa12124b254275971a1d27dd406e19a67</anchor>
      <arglist>(bool forceRefresh)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InputDeviceRef</type>
      <name>getDefaultDevice</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>a1fb2047f25c48bd2a1b718a1f4e37657</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setup</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>ae1b498c0ee88cc81fd698087b1e0f1c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static OSStatus</type>
      <name>inputCallback</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>aed71de94e5ec678558d066c5fe5b21bd</anchor>
      <arglist>(void *, AudioUnitRenderActionFlags *, const AudioTimeStamp *, UInt32, UInt32, AudioBufferList *)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mIsSetup</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>a724993d74a010661980dbb7e67114cbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InputDeviceRef</type>
      <name>mDevice</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>a17f40e2ffdeb43732f1fd9bdc6ab3d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mIsCapturing</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>afdc6a7534fb9f9ab8f634a50a7500b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AudioComponentInstance</type>
      <name>mInputUnit</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>a3ea740b9b4f7c9d6809d685bd53cdc1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AudioUnit</type>
      <name>mInputUnit</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>a1d9d3c92c8aa3bb98d25cbb7ac6057a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AudioBufferList *</type>
      <name>mInputBuffer</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>a4b2e0df59c2b3ee2436f114d52cc8582</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float *</type>
      <name>mInputBufferData</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>a4d495ac80a77d2c2e999568b350e1984</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; CircularBuffer&lt; float &gt; * &gt;</type>
      <name>mCircularBuffers</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>a3abf70556b804028c2fb98a0151a17ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>mBufferMutex</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>ac4dc09c6c87a3747b217c42fc4982bbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AudioStreamBasicDescription</type>
      <name>mFormatDescription</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>a31e48d16ae26087aacff7aee2ce4e042</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>mSampleRate</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>a9acc3d574335b309adcb49901494267d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16_t</type>
      <name>mChannelCount</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>a9f4124bb406bd18f903f2f582b68914b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static bool</type>
      <name>sDevicesEnumerated</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>ab697dd0b48fd11820da000ae9923925a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static std::vector&lt; InputDeviceRef &gt;</type>
      <name>sDevices</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit.html</anchorfile>
      <anchor>a13fb88df836d4fbf9b3ec53dcfbc1483</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::InputImplAudioUnit::Device</name>
    <filename>classcinder_1_1audio_1_1_input_impl_audio_unit_1_1_device.html</filename>
    <member kind="function">
      <type></type>
      <name>Device</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit_1_1_device.html</anchorfile>
      <anchor>a10e4be4f30ccac9a6c54e2d76572c824</anchor>
      <arglist>(AudioDeviceID aDeviceId)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit_1_1_device.html</anchorfile>
      <anchor>a7b170eff5b3c32c91ffec103f2c9486e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit_1_1_device.html</anchorfile>
      <anchor>a2ccf3ec19ee6ec2a0b913257e3eee280</anchor>
      <arglist>(const Device &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Device</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit_1_1_device.html</anchorfile>
      <anchor>ad830c3a4fc7c2fc8ce19690b41dc36b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit_1_1_device.html</anchorfile>
      <anchor>a3f6c580d6d3c0de392257c56c0a6091b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classcinder_1_1audio_1_1_input_impl_audio_unit_1_1_device.html</anchorfile>
      <anchor>a2ccf3ec19ee6ec2a0b913257e3eee280</anchor>
      <arglist>(const Device &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::Io</name>
    <filename>classcinder_1_1audio_1_1_io.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>Io</name>
      <anchorfile>classcinder_1_1audio_1_1_io.html</anchorfile>
      <anchor>a4af97d1183cb96637fc654ca5586ced7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::Target</name>
    <filename>classcinder_1_1audio_1_1_target.html</filename>
    <base>cinder::audio::Io</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Target</name>
      <anchorfile>classcinder_1_1audio_1_1_target.html</anchorfile>
      <anchor>ad94bc3590af4b35e6473752e6acf9281</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Target</name>
      <anchorfile>classcinder_1_1audio_1_1_target.html</anchorfile>
      <anchor>a9d928724a906a3fcb9175a96f34acc4a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::Source</name>
    <filename>classcinder_1_1audio_1_1_source.html</filename>
    <base>cinder::audio::Io</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Source</name>
      <anchorfile>classcinder_1_1audio_1_1_source.html</anchorfile>
      <anchor>a06ab9ebd39043b1e0c293269f4b42f4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LoaderRef</type>
      <name>createLoader</name>
      <anchorfile>classcinder_1_1audio_1_1_source.html</anchorfile>
      <anchor>a024f2f00e30938040478675e81ac8b9f</anchor>
      <arglist>(Target *target)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getDuration</name>
      <anchorfile>classcinder_1_1audio_1_1_source.html</anchorfile>
      <anchor>a149455ec2b5577cd33338c6e91dffb44</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::Loader</name>
    <filename>classcinder_1_1audio_1_1_loader.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Loader</name>
      <anchorfile>classcinder_1_1audio_1_1_loader.html</anchorfile>
      <anchor>a999c032bf43caecbbe490cc73df77806</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>loadData</name>
      <anchorfile>classcinder_1_1audio_1_1_loader.html</anchorfile>
      <anchor>ad93ef6054a04f1a6e6a39bd8bd025c6a</anchor>
      <arglist>(BufferList *ioData)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint64_t</type>
      <name>getSampleOffset</name>
      <anchorfile>classcinder_1_1audio_1_1_loader.html</anchorfile>
      <anchor>ad59540aa086b7b7306daaad7d2fbaccf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setSampleOffset</name>
      <anchorfile>classcinder_1_1audio_1_1_loader.html</anchorfile>
      <anchor>a9ca35c9523698ee698bfd199410b2381</anchor>
      <arglist>(uint64_t anOffset)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Loader</name>
      <anchorfile>classcinder_1_1audio_1_1_loader.html</anchorfile>
      <anchor>a512e5413122a2b933bfb610b79d1bbea</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::IoException</name>
    <filename>classcinder_1_1audio_1_1_io_exception.html</filename>
    <base>cinder::Exception</base>
  </compound>
  <compound kind="class">
    <name>cinder::audio::IoExceptionFailedLoad</name>
    <filename>classcinder_1_1audio_1_1_io_exception_failed_load.html</filename>
    <base>cinder::audio::IoException</base>
  </compound>
  <compound kind="class">
    <name>cinder::audio::IoExceptionSourceNotFound</name>
    <filename>classcinder_1_1audio_1_1_io_exception_source_not_found.html</filename>
    <base>cinder::audio::IoExceptionFailedLoad</base>
  </compound>
  <compound kind="class">
    <name>cinder::audio::IoExceptionUnsupportedDataType</name>
    <filename>classcinder_1_1audio_1_1_io_exception_unsupported_data_type.html</filename>
    <base>cinder::audio::IoException</base>
  </compound>
  <compound kind="class">
    <name>cinder::audio::IoExceptionUnsupportedDataFormat</name>
    <filename>classcinder_1_1audio_1_1_io_exception_unsupported_data_format.html</filename>
    <base>cinder::audio::IoException</base>
  </compound>
  <compound kind="struct">
    <name>cinder::audio::IoRegistrar</name>
    <filename>structcinder_1_1audio_1_1_io_registrar.html</filename>
    <member kind="typedef">
      <type>SourceRef(*</type>
      <name>SourceCreationFunc</name>
      <anchorfile>structcinder_1_1audio_1_1_io_registrar.html</anchorfile>
      <anchor>ae15665c071b427da18e0d92ee8e719ad</anchor>
      <arglist>)(DataSourceRef)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SourceRef</type>
      <name>createSource</name>
      <anchorfile>structcinder_1_1audio_1_1_io_registrar.html</anchorfile>
      <anchor>ac4db8fe75b5796b590bd009acd446704</anchor>
      <arglist>(DataSourceRef dataSource, std::string extension)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerSourceType</name>
      <anchorfile>structcinder_1_1audio_1_1_io_registrar.html</anchorfile>
      <anchor>ac99a0f7083f3ad0e80623fb6a83bd68f</anchor>
      <arglist>(std::string extension, SourceCreationFunc func, int32_t priority=2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerSourceGeneric</name>
      <anchorfile>structcinder_1_1audio_1_1_io_registrar.html</anchorfile>
      <anchor>ad69c95ebd24c5e4986d4b47d849b4ac8</anchor>
      <arglist>(SourceCreationFunc func, int32_t priority=2)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Io</name>
      <anchorfile>structcinder_1_1audio_1_1_io_registrar.html</anchorfile>
      <anchor>a1978c2610e5ff627efa580d7d44982d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::audio::IoRegistrant</name>
    <filename>structcinder_1_1audio_1_1_io_registrant.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>IoRegistrant</name>
      <anchorfile>structcinder_1_1audio_1_1_io_registrant.html</anchorfile>
      <anchor>a75a0d30d4dbe02ffff3719cf40ad640e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::Track</name>
    <filename>classcinder_1_1audio_1_1_track.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Track</name>
      <anchorfile>classcinder_1_1audio_1_1_track.html</anchorfile>
      <anchor>af4c027c299510748c1969d84aef9c20b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>play</name>
      <anchorfile>classcinder_1_1audio_1_1_track.html</anchorfile>
      <anchor>a62e15baa3b766855a13ff64b29c04269</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classcinder_1_1audio_1_1_track.html</anchorfile>
      <anchor>a4996327d871e6060009b544f3481d22d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isPlaying</name>
      <anchorfile>classcinder_1_1audio_1_1_track.html</anchorfile>
      <anchor>a153907326b3a205c45f5a0c584339e06</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setVolume</name>
      <anchorfile>classcinder_1_1audio_1_1_track.html</anchorfile>
      <anchor>ae8bda617bd5f92cd62c19805b98435c0</anchor>
      <arglist>(float aVolume)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getVolume</name>
      <anchorfile>classcinder_1_1audio_1_1_track.html</anchorfile>
      <anchor>a4b9fd0b9faee5cfcb2da17afe1541e32</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getTime</name>
      <anchorfile>classcinder_1_1audio_1_1_track.html</anchorfile>
      <anchor>a62d05bfc07322a63baf5b041416ba590</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setTime</name>
      <anchorfile>classcinder_1_1audio_1_1_track.html</anchorfile>
      <anchor>ab86cee90141efeb05068af096333e396</anchor>
      <arglist>(double aTime)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setLooping</name>
      <anchorfile>classcinder_1_1audio_1_1_track.html</anchorfile>
      <anchor>a648acb225918fe15264825c3d876b5c2</anchor>
      <arglist>(bool isLooping)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isLooping</name>
      <anchorfile>classcinder_1_1audio_1_1_track.html</anchorfile>
      <anchor>a8a1fdf1e7c97d2abaf8f84403d46d5f4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>enablePcmBuffering</name>
      <anchorfile>classcinder_1_1audio_1_1_track.html</anchorfile>
      <anchor>a4aebac7726ad4b89c896ea65a2e0997c</anchor>
      <arglist>(bool isBuffering)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isPcmBuffering</name>
      <anchorfile>classcinder_1_1audio_1_1_track.html</anchorfile>
      <anchor>a54355a5dc31845df8656b6c73375efb8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PcmBuffer32fRef</type>
      <name>getPcmBuffer</name>
      <anchorfile>classcinder_1_1audio_1_1_track.html</anchorfile>
      <anchor>ac6ad8d92d12517838eb9ad1f84dcc1e7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Track</name>
      <anchorfile>classcinder_1_1audio_1_1_track.html</anchorfile>
      <anchor>a5c3c1c3496b510ad664ad4513ae70d22</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::OutputImpl</name>
    <filename>classcinder_1_1audio_1_1_output_impl.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~OutputImpl</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl.html</anchorfile>
      <anchor>a7a59812c59a5e4842f1c1bcd78cf0972</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>play</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl.html</anchorfile>
      <anchor>a438b009c3d7dd08597d5fafcfdc9bf4c</anchor>
      <arglist>(SourceRef aSource)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual TrackRef</type>
      <name>addTrack</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl.html</anchorfile>
      <anchor>ac02bbee49bf1038390e01aa64f48f73e</anchor>
      <arglist>(SourceRef aSource, bool autoplay)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>removeTrack</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl.html</anchorfile>
      <anchor>a80fb0acdcf46b291d3dd9ac0b301c5c8</anchor>
      <arglist>(TrackId trackId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getVolume</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl.html</anchorfile>
      <anchor>ab0ca14adf8323de7660f919c9a07b3c6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setVolume</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl.html</anchorfile>
      <anchor>a5e03b955aee3bc934313ed905b4b1914</anchor>
      <arglist>(float aVolume)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OutputImpl</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl.html</anchorfile>
      <anchor>a8edd2adea0fba2404d306c35efc4c4f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual TrackId</type>
      <name>availableTrackId</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl.html</anchorfile>
      <anchor>a6a820732373b30af2ade65ad6795b174</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TrackId</type>
      <name>mNextTrackId</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl.html</anchorfile>
      <anchor>a879c89091730cde157a189aa9c7d447c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Track</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl.html</anchorfile>
      <anchor>ac9187679244c6a3414c63aae65f83a2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::Output</name>
    <filename>classcinder_1_1audio_1_1_output.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>play</name>
      <anchorfile>classcinder_1_1audio_1_1_output.html</anchorfile>
      <anchor>a015b0654b7a0209b08ba721d438db006</anchor>
      <arglist>(SourceRef aSource)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TrackRef</type>
      <name>addTrack</name>
      <anchorfile>classcinder_1_1audio_1_1_output.html</anchorfile>
      <anchor>ae8fd844e7f5df8c6e01f54e0544edd24</anchor>
      <arglist>(SourceRef aSource, bool autoplay=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>removeTrack</name>
      <anchorfile>classcinder_1_1audio_1_1_output.html</anchorfile>
      <anchor>a44591055b2f0344478d267a157ad22f0</anchor>
      <arglist>(TrackId trackId)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getVolume</name>
      <anchorfile>classcinder_1_1audio_1_1_output.html</anchorfile>
      <anchor>a5360b337a5a24b3b5dbaa059749a47a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setVolume</name>
      <anchorfile>classcinder_1_1audio_1_1_output.html</anchorfile>
      <anchor>ae430943f3473ccf63db2a39405a0acda</anchor>
      <arglist>(float aVolume)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::OutputException</name>
    <filename>classcinder_1_1audio_1_1_output_exception.html</filename>
    <base>cinder::Exception</base>
  </compound>
  <compound kind="class">
    <name>cinder::audio::OutOfTracksException</name>
    <filename>classcinder_1_1audio_1_1_out_of_tracks_exception.html</filename>
    <base>cinder::Exception</base>
  </compound>
  <compound kind="class">
    <name>cinder::audio::TargetOutputImplAudioUnit</name>
    <filename>classcinder_1_1audio_1_1_target_output_impl_audio_unit.html</filename>
    <base>cinder::audio::Target</base>
    <member kind="function">
      <type></type>
      <name>~TargetOutputImplAudioUnit</name>
      <anchorfile>classcinder_1_1audio_1_1_target_output_impl_audio_unit.html</anchorfile>
      <anchor>a585df6bbefcf1e93e67868fafe3adad7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; TargetOutputImplAudioUnit &gt;</type>
      <name>createRef</name>
      <anchorfile>classcinder_1_1audio_1_1_target_output_impl_audio_unit.html</anchorfile>
      <anchor>af20f3cf5d308a5a3aaccdef6b7fe8ae5</anchor>
      <arglist>(const OutputImplAudioUnit *aOutput)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::OutputImplAudioUnit</name>
    <filename>classcinder_1_1audio_1_1_output_impl_audio_unit.html</filename>
    <base>cinder::audio::OutputImpl</base>
    <member kind="function">
      <type></type>
      <name>OutputImplAudioUnit</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_audio_unit.html</anchorfile>
      <anchor>a285c93623df8eda81a9b68ad56a41ed1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OutputImplAudioUnit</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_audio_unit.html</anchorfile>
      <anchor>a3e96e94c53d74477daec59ee900f31b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TrackRef</type>
      <name>addTrack</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_audio_unit.html</anchorfile>
      <anchor>ad10930ded478431480c5da281e8e2db2</anchor>
      <arglist>(SourceRef source, bool autoplay)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTrack</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_audio_unit.html</anchorfile>
      <anchor>a634756657d2ec2d5732aa9cd2032db68</anchor>
      <arglist>(TrackId trackId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_audio_unit.html</anchorfile>
      <anchor>a8fafbff3e087f9cb93d40fb95828ad84</anchor>
      <arglist>(float aVolume)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getVolume</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_audio_unit.html</anchorfile>
      <anchor>a22c5de416742d29308ef4af0be165391</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TrackId</type>
      <name>availableTrackId</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_audio_unit.html</anchorfile>
      <anchor>ab750dc2b859227c9f9f96b822350f0cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>TargetOutputImplAudioUnit</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_audio_unit.html</anchorfile>
      <anchor>a8f9a743ed18ea9d2a85db9d7764208dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::TargetOutputImplXAudio</name>
    <filename>classcinder_1_1audio_1_1_target_output_impl_x_audio.html</filename>
    <base>cinder::audio::Target</base>
    <member kind="function">
      <type></type>
      <name>~TargetOutputImplXAudio</name>
      <anchorfile>classcinder_1_1audio_1_1_target_output_impl_x_audio.html</anchorfile>
      <anchor>ae11d24b50e8fb6f14e5f49414bcc0062</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; TargetOutputImplXAudio &gt;</type>
      <name>createRef</name>
      <anchorfile>classcinder_1_1audio_1_1_target_output_impl_x_audio.html</anchorfile>
      <anchor>a749653123dd91c48f27962ce4a088a85</anchor>
      <arglist>(const WAVEFORMATEX *aOutDescription)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::OutputImplXAudio</name>
    <filename>classcinder_1_1audio_1_1_output_impl_x_audio.html</filename>
    <base>cinder::audio::OutputImpl</base>
    <class kind="class">cinder::audio::OutputImplXAudio::Track</class>
    <member kind="function">
      <type></type>
      <name>OutputImplXAudio</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio.html</anchorfile>
      <anchor>a7f8c3718593c4217aab82c418e900968</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OutputImplXAudio</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio.html</anchorfile>
      <anchor>a3b952942d23487a5c2bd7ef5d9e6afb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TrackRef</type>
      <name>addTrack</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio.html</anchorfile>
      <anchor>a1b1bf841f22b0315ff7e28e40509ce33</anchor>
      <arglist>(SourceRef aSource, bool autoplay)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTrack</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio.html</anchorfile>
      <anchor>a693f7b93a746cde5437714bb0c262917</anchor>
      <arglist>(TrackId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio.html</anchorfile>
      <anchor>aff506a958d3b4e627e6b62bda20e70a2</anchor>
      <arglist>(float aVolume)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getVolume</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio.html</anchorfile>
      <anchor>a667f886da4e13b5c0df877c2d2b56a16</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IXAudio2 *</type>
      <name>mXAudio</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio.html</anchorfile>
      <anchor>a92e724acccfab1b15abcda5697e88aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::IXAudio2MasteringVoice *</type>
      <name>mMasterVoice</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio.html</anchorfile>
      <anchor>aac0e2eb78f9b3bf33ef3aaa04f8b38b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; TrackId, std::shared_ptr&lt; OutputImplXAudio::Track &gt; &gt;</type>
      <name>mTracks</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio.html</anchorfile>
      <anchor>aca91497ebf93763061c9afd88457bb7b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::OutputImplXAudio::Track</name>
    <filename>classcinder_1_1audio_1_1_output_impl_x_audio_1_1_track.html</filename>
    <base>cinder::audio::Track</base>
    <member kind="function">
      <type></type>
      <name>Track</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio_1_1_track.html</anchorfile>
      <anchor>a039aa09d1aa01b71c1ed4aaddbc9ccc6</anchor>
      <arglist>(SourceRef source, OutputImplXAudio *output)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Track</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio_1_1_track.html</anchorfile>
      <anchor>aee64c8af17a7ca610f64b44d8af21119</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>play</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio_1_1_track.html</anchorfile>
      <anchor>acbe7a4043418c4cb01762c2ccceba98a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio_1_1_track.html</anchorfile>
      <anchor>a277049097719952785b2ee514ed03ae8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPlaying</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio_1_1_track.html</anchorfile>
      <anchor>a9c1621eacfca819fa6977d5d31a51296</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TrackId</type>
      <name>getTrackId</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio_1_1_track.html</anchorfile>
      <anchor>a04cbe249d1b1971382893e21ce795827</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio_1_1_track.html</anchorfile>
      <anchor>a2de4a484d54d152b10974c49a0054450</anchor>
      <arglist>(float aVolume)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getVolume</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio_1_1_track.html</anchorfile>
      <anchor>a2202f20d5732f7d693f11a577ea0a856</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTime</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio_1_1_track.html</anchorfile>
      <anchor>a279c1925dbbda048093119ce3dc3e3e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio_1_1_track.html</anchorfile>
      <anchor>a6284e855efe28af9eb3166778904e2ab</anchor>
      <arglist>(double aTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLooping</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio_1_1_track.html</anchorfile>
      <anchor>a1b8a02ed070f5c59cb65cf11a34331a3</anchor>
      <arglist>(bool isLooping)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLooping</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio_1_1_track.html</anchorfile>
      <anchor>a8e2c25c7568e913a00b730435ccc64bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enablePcmBuffering</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio_1_1_track.html</anchorfile>
      <anchor>ae73bd49f8017fd3ee7e29e12341b1545</anchor>
      <arglist>(bool isBuffering)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPcmBuffering</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio_1_1_track.html</anchorfile>
      <anchor>a9a46aefe14c39b8003bcc2f1b2f6ddb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PcmBuffer32fRef</type>
      <name>getPcmBuffer</name>
      <anchorfile>classcinder_1_1audio_1_1_output_impl_x_audio_1_1_track.html</anchorfile>
      <anchor>aae6b6025d267dd48f6d8e31113bd111a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::audio::BufferT</name>
    <filename>structcinder_1_1audio_1_1_buffer_t.html</filename>
    <templarg>T</templarg>
    <member kind="variable">
      <type>uint32_t</type>
      <name>mNumberChannels</name>
      <anchorfile>structcinder_1_1audio_1_1_buffer_t.html</anchorfile>
      <anchor>a19ad8b7e80e35cd2dc717e5616073883</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>mDataByteSize</name>
      <anchorfile>structcinder_1_1audio_1_1_buffer_t.html</anchorfile>
      <anchor>a5c1a7ababe29c269bf6a80772de1d5f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>mSampleCount</name>
      <anchorfile>structcinder_1_1audio_1_1_buffer_t.html</anchorfile>
      <anchor>aa74c7bc63c105f7dfe9c21e779bbe1ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>mData</name>
      <anchorfile>structcinder_1_1audio_1_1_buffer_t.html</anchorfile>
      <anchor>a2c66f1893e5b361cd2c1c13453c40387</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::audio::BufferListT</name>
    <filename>structcinder_1_1audio_1_1_buffer_list_t.html</filename>
    <templarg>T</templarg>
    <member kind="variable">
      <type>uint32_t</type>
      <name>mNumberBuffers</name>
      <anchorfile>structcinder_1_1audio_1_1_buffer_list_t.html</anchorfile>
      <anchor>a6dcf875a800b4fc95da1d02c239770a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BufferT&lt; T &gt; *</type>
      <name>mBuffers</name>
      <anchorfile>structcinder_1_1audio_1_1_buffer_list_t.html</anchorfile>
      <anchor>a94b0ca9dc07522bbfbc358c6c7f7c7bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::PcmBufferT</name>
    <filename>classcinder_1_1audio_1_1_pcm_buffer_t.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>PcmBufferT</name>
      <anchorfile>classcinder_1_1audio_1_1_pcm_buffer_t.html</anchorfile>
      <anchor>a777b5a29ebbf1eba9422a6ca72fc8449</anchor>
      <arglist>(uint32_t aMaxSampleCount, uint16_t aChannelCount, bool isInterleaved)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PcmBufferT</name>
      <anchorfile>classcinder_1_1audio_1_1_pcm_buffer_t.html</anchorfile>
      <anchor>a888ef7a16247be1c05af842e71f387a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getSampleCount</name>
      <anchorfile>classcinder_1_1audio_1_1_pcm_buffer_t.html</anchorfile>
      <anchor>aa474c5bf5d2d22442d175c3088458afd</anchor>
      <arglist>(ChannelIdentifier channelId=CHANNEL_FRONT_LEFT) const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getMaxSampleCount</name>
      <anchorfile>classcinder_1_1audio_1_1_pcm_buffer_t.html</anchorfile>
      <anchor>a51d3fd225bae2b21b2fb674d0568a986</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint16_t</type>
      <name>getChannelCount</name>
      <anchorfile>classcinder_1_1audio_1_1_pcm_buffer_t.html</anchorfile>
      <anchor>ac893c0a0ad98ce05061302a54aaaa3fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInterleaved</name>
      <anchorfile>classcinder_1_1audio_1_1_pcm_buffer_t.html</anchorfile>
      <anchor>a2bf47f7b7795e6693ea44d0b1141bf65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; BufferT&lt; T &gt; &gt;</type>
      <name>getChannelData</name>
      <anchorfile>classcinder_1_1audio_1_1_pcm_buffer_t.html</anchorfile>
      <anchor>aa3ed3e2c36d9fe175d0121e271c138fe</anchor>
      <arglist>(ChannelIdentifier channelId) const </arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; BufferT&lt; T &gt; &gt;</type>
      <name>getInterleavedData</name>
      <anchorfile>classcinder_1_1audio_1_1_pcm_buffer_t.html</anchorfile>
      <anchor>a85c01b8a7877c21d373bc463f7429c52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendInterleavedData</name>
      <anchorfile>classcinder_1_1audio_1_1_pcm_buffer_t.html</anchorfile>
      <anchor>a6bff4db45ddfba7e34152c599eb34082</anchor>
      <arglist>(T *aData, uint32_t aSampleCount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendChannelData</name>
      <anchorfile>classcinder_1_1audio_1_1_pcm_buffer_t.html</anchorfile>
      <anchor>ace5c7a7bd75d320b3ce4881e8a53004b</anchor>
      <arglist>(T *aData, uint32_t aSampleCount, ChannelIdentifier channelId)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::PcmBufferException</name>
    <filename>classcinder_1_1audio_1_1_pcm_buffer_exception.html</filename>
    <base>cinder::Exception</base>
  </compound>
  <compound kind="class">
    <name>cinder::audio::InvalidChannelPcmBufferException</name>
    <filename>classcinder_1_1audio_1_1_invalid_channel_pcm_buffer_exception.html</filename>
    <base>cinder::audio::PcmBufferException</base>
  </compound>
  <compound kind="class">
    <name>cinder::audio::OutOfRangePcmBufferException</name>
    <filename>classcinder_1_1audio_1_1_out_of_range_pcm_buffer_exception.html</filename>
    <base>cinder::audio::PcmBufferException</base>
  </compound>
  <compound kind="class">
    <name>cinder::audio::LoaderSourceFile</name>
    <filename>classcinder_1_1audio_1_1_loader_source_file.html</filename>
    <base>cinder::audio::Loader</base>
    <member kind="function">
      <type></type>
      <name>~LoaderSourceFile</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file.html</anchorfile>
      <anchor>a25dba340833eb00bd2f44e2e24ed44d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>getSampleOffset</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file.html</anchorfile>
      <anchor>a7f50e4d67d2a7c23cfb6540d5cfe665f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSampleOffset</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file.html</anchorfile>
      <anchor>a6bce99dcd162fdd58f0182d3704279f1</anchor>
      <arglist>(uint64_t anOffset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadData</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file.html</anchorfile>
      <anchor>ad25a998c0e7a1617ca44974003d61d26</anchor>
      <arglist>(BufferList *ioData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LoaderSourceFileRef</type>
      <name>createRef</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file.html</anchorfile>
      <anchor>afa3b6190c0b0229da8105421ae9850c4</anchor>
      <arglist>(SourceFile *source, Target *target)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::SourceFile</name>
    <filename>classcinder_1_1audio_1_1_source_file.html</filename>
    <base>cinder::audio::Source</base>
    <member kind="function">
      <type></type>
      <name>~SourceFile</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file.html</anchorfile>
      <anchor>a2a6a04574f04fac3668a16cd70efd68f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LoaderRef</type>
      <name>createLoader</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file.html</anchorfile>
      <anchor>a04bef3841de9d7cffbed6a4fa59b6846</anchor>
      <arglist>(Target *target)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDuration</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file.html</anchorfile>
      <anchor>a42b5e482a385964f547ceb8308ec6559</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SourceRef</type>
      <name>createRef</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file.html</anchorfile>
      <anchor>a068b11e9448f1fe42527c888924cb5e9</anchor>
      <arglist>(DataSourceRef dataSourceRef)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SourceFileRef</type>
      <name>createFileRef</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file.html</anchorfile>
      <anchor>aa16426b1712a5e188aff26cf0e7e2700</anchor>
      <arglist>(DataSourceRef dataSourceRef)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerSelf</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file.html</anchorfile>
      <anchor>ac1fc5da358feadba69fdf9738a9ea599</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SourceFile</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file.html</anchorfile>
      <anchor>a601021de339f2101df7597143f3953b8</anchor>
      <arglist>(DataSourceRef dataSourceRef)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint64_t</type>
      <name>packetAtTime</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file.html</anchorfile>
      <anchor>a484492736bd38806ba5865ff65539b77</anchor>
      <arglist>(double aTime) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>timeAtPacket</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file.html</anchorfile>
      <anchor>a5b17d4f625ce93cd78da58175ccc76b9</anchor>
      <arglist>(uint64_t aPacket) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint64_t</type>
      <name>packetAtSample</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file.html</anchorfile>
      <anchor>a684336d10efb080f6be0ddb0ce8ce6dd</anchor>
      <arglist>(uint64_t aSample) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint64_t</type>
      <name>sampleAtPacket</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file.html</anchorfile>
      <anchor>ad85e13613d5fa116575e15f4777a1e9c</anchor>
      <arglist>(uint64_t aPacket) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; OpaqueAudioFileID &gt;</type>
      <name>mFileRef</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file.html</anchorfile>
      <anchor>a8f4dd922ec863eed1d97f3875c5b016c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64_t</type>
      <name>mPacketCount</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file.html</anchorfile>
      <anchor>a7f3bc08a8bca83bc134d1bbc6326b7cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64_t</type>
      <name>mByteCount</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file.html</anchorfile>
      <anchor>a528977b0ad3335d368d498cf9e607ca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>mDuration</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file.html</anchorfile>
      <anchor>a86b975cdfa7e5373d571e4e78ce7fd00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>mMaxPacketSize</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file.html</anchorfile>
      <anchor>a96f5c9e2c2ab2b3d6a8fa7950ea17c23</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>LoaderSourceFile</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file.html</anchorfile>
      <anchor>a3855b95e5a9f60e46ea1867648a1f801</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::LoaderSourceFileWav</name>
    <filename>classcinder_1_1audio_1_1_loader_source_file_wav.html</filename>
    <base>cinder::audio::Loader</base>
    <member kind="function">
      <type></type>
      <name>~LoaderSourceFileWav</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_wav.html</anchorfile>
      <anchor>abe1b21ff86f94dc1c7bebb0a057f4f14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getOptimalBufferSize</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_wav.html</anchorfile>
      <anchor>a41651040b880fd45dd479a6719870e89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadData</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_wav.html</anchorfile>
      <anchor>a64bb125f0dcc42c90b958ef6a8c5b0b9</anchor>
      <arglist>(BufferList *ioData)</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>getSampleOffset</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_wav.html</anchorfile>
      <anchor>afa6c4000c049fa603dc53b5f0e55dbc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSampleOffset</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_wav.html</anchorfile>
      <anchor>a1a31ba9b9f19a83a2a0d6fe42aaf972b</anchor>
      <arglist>(uint64_t anOffset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LoaderSourceFileWavRef</type>
      <name>createRef</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_wav.html</anchorfile>
      <anchor>a92113a2c9e093714a0e34969d341b0d2</anchor>
      <arglist>(SourceFileWav *source, Target *target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LoaderSourceFileWav</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_wav.html</anchorfile>
      <anchor>a595e1211a4edcf489e2c579d4c0e33e4</anchor>
      <arglist>(SourceFileWav *source, Target *target)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SourceFileWav *</type>
      <name>mSource</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_wav.html</anchorfile>
      <anchor>aa1e36c9a8c1181654e9d70d24c6274cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IStreamRef</type>
      <name>mStream</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_wav.html</anchorfile>
      <anchor>af619f7e9f28b476a3667a1cfa33012e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64_t</type>
      <name>mSampleOffset</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_wav.html</anchorfile>
      <anchor>af7b928bff9c98c3412c2aab950ef9f2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::SourceFileWav</name>
    <filename>classcinder_1_1audio_1_1_source_file_wav.html</filename>
    <base>cinder::audio::Source</base>
    <member kind="function">
      <type></type>
      <name>~SourceFileWav</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file_wav.html</anchorfile>
      <anchor>a0a60ffa238cc585da3067f58797c6357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LoaderRef</type>
      <name>createLoader</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file_wav.html</anchorfile>
      <anchor>a6fa58fb8a01859c86ca01ccf9cd37398</anchor>
      <arglist>(Target *target)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getLength</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file_wav.html</anchorfile>
      <anchor>a5b8caa60eef11f28c2c70e95cbae6309</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDuration</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file_wav.html</anchorfile>
      <anchor>a5bf614bc93ffbfc43b3777b7c32a09e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SourceRef</type>
      <name>createRef</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file_wav.html</anchorfile>
      <anchor>a59c740fc48d97d0aac3af25f8527318b</anchor>
      <arglist>(DataSourceRef dataSourceRef)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SourceFileWavRef</type>
      <name>createFileWavRef</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file_wav.html</anchorfile>
      <anchor>a08a980dd9910b45d44467150aed78afb</anchor>
      <arglist>(DataSourceRef dataSourceRef)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerSelf</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file_wav.html</anchorfile>
      <anchor>adb5519acec2b3e698804d0ff59abe231</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::LoaderSourceFileWindowsMedia</name>
    <filename>classcinder_1_1audio_1_1_loader_source_file_windows_media.html</filename>
    <base>cinder::audio::Loader</base>
    <member kind="function">
      <type></type>
      <name>~LoaderSourceFileWindowsMedia</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_windows_media.html</anchorfile>
      <anchor>a48d66a55b120c62e76c9803c7334b8d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getOptimalBufferSize</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_windows_media.html</anchorfile>
      <anchor>a92f9c24084828d133e4dfd69b87aa32d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadData</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_windows_media.html</anchorfile>
      <anchor>a61327d4883610e62f662565fef78971d</anchor>
      <arglist>(BufferList *ioData)</arglist>
    </member>
    <member kind="function">
      <type>uint64_t</type>
      <name>getSampleOffset</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_windows_media.html</anchorfile>
      <anchor>a0a02d6c1ed25c2b280d99b0c731cb1f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSampleOffset</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_windows_media.html</anchorfile>
      <anchor>aad81f8072287c96b0a65470c3ee1d305</anchor>
      <arglist>(uint64_t anOffset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LoaderSourceFileWindowsMediaRef</type>
      <name>createRef</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_windows_media.html</anchorfile>
      <anchor>a6608572c95f03f9647a51129f8babc7f</anchor>
      <arglist>(SourceFileWindowsMedia *source, Target *target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LoaderSourceFileWindowsMedia</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_windows_media.html</anchorfile>
      <anchor>a08d3b7b577a3959572cfb071faf52854</anchor>
      <arglist>(SourceFileWindowsMedia *source, Target *target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint64_t</type>
      <name>timeAtSample</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_windows_media.html</anchorfile>
      <anchor>ace140040b93a9a3bda2182d6609fcd33</anchor>
      <arglist>(uint64_t aSample) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uint64_t</type>
      <name>sampleAtTime</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_windows_media.html</anchorfile>
      <anchor>af2fa15954695cc40df205c2d8bf11f55</anchor>
      <arglist>(uint64_t aTime) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SourceFileWindowsMedia *</type>
      <name>mSource</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_windows_media.html</anchorfile>
      <anchor>a6e97c3c2ee930ea3182dd902ac4db368</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>WAVEFORMATEX</type>
      <name>mOutputFormat</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_windows_media.html</anchorfile>
      <anchor>a3b39cc6c550c099ac931c76f5b2c7a4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>mStreamSize</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_windows_media.html</anchorfile>
      <anchor>ad6974117abe0c69c15053bafe6526615</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; IWMSyncReader &gt;</type>
      <name>mReader</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_windows_media.html</anchorfile>
      <anchor>aa6f71f931aaa797d20eed64e685c8a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; IWMHeaderInfo &gt;</type>
      <name>mHeaderInfo</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_windows_media.html</anchorfile>
      <anchor>a62e5bb1bb138cf553dbc039ab5fa57ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>mMaxBufferSize</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_windows_media.html</anchorfile>
      <anchor>a45c076ecd467cf77cfe49d1d98e2d661</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint64_t</type>
      <name>mSampleOffset</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_windows_media.html</anchorfile>
      <anchor>a121fc0f883a2c42e40ce994bd4b7a7d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>mSrcBlockAlign</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_windows_media.html</anchorfile>
      <anchor>a8caf7f2b3dfe339ced416616934e6af8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>mSrcSampleRate</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_windows_media.html</anchorfile>
      <anchor>a725915d479dd11871f11c8d326206cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint16_t</type>
      <name>mSrcChannelCount</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_windows_media.html</anchorfile>
      <anchor>ae975c384f920fe1b5ad4be029f00e805</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>mSrcBitsPerSample</name>
      <anchorfile>classcinder_1_1audio_1_1_loader_source_file_windows_media.html</anchorfile>
      <anchor>a256ed3294e533ef878005f4549060651</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::audio::SourceFileWindowsMedia</name>
    <filename>classcinder_1_1audio_1_1_source_file_windows_media.html</filename>
    <base>cinder::audio::Source</base>
    <member kind="function">
      <type></type>
      <name>~SourceFileWindowsMedia</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file_windows_media.html</anchorfile>
      <anchor>a03af59dc1a6ae166dfde5eadc4b1e148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LoaderRef</type>
      <name>createLoader</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file_windows_media.html</anchorfile>
      <anchor>ad05b80d21b00d282582e6d0bc267de60</anchor>
      <arglist>(Target *target)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getLength</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file_windows_media.html</anchorfile>
      <anchor>a87d25e0336e8c846d1060334c681110d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDuration</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file_windows_media.html</anchorfile>
      <anchor>a379f5750f2a743120b0c5c1723da113a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SourceRef</type>
      <name>createRef</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file_windows_media.html</anchorfile>
      <anchor>a2bf90a2cb1af084280469c11b56ce3b3</anchor>
      <arglist>(DataSourceRef dataSourceRef)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SourceFileWindowsMediaRef</type>
      <name>createFileRef</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file_windows_media.html</anchorfile>
      <anchor>a4cada22d2a215041e0811945113061f9</anchor>
      <arglist>(DataSourceRef dataSourceRef)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerSelf</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file_windows_media.html</anchorfile>
      <anchor>ae35a23c6d861cdb8103da4faad8e611f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SourceFileWindowsMedia</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file_windows_media.html</anchorfile>
      <anchor>ad30ad980755937e95a9f29957365654e</anchor>
      <arglist>(DataSourceRef dataSourceRef)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cinder::Buffer</type>
      <name>mBuffer</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file_windows_media.html</anchorfile>
      <anchor>a9df027805922c2541fa53d124a9304ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; void &gt;</type>
      <name>mMemHandle</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file_windows_media.html</anchorfile>
      <anchor>aa250cb551f44dab4dd656c353ae0546e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>friend</type>
      <name>LoaderSourceFileWindowsMedia</name>
      <anchorfile>classcinder_1_1audio_1_1_source_file_windows_media.html</anchorfile>
      <anchor>aa1be18cd374051f20454c693417df56b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>cinder::cocoa</name>
    <filename>namespacecinder_1_1cocoa.html</filename>
    <class kind="class">cinder::cocoa::SafeNsString</class>
    <class kind="class">cinder::cocoa::SafeNsData</class>
    <class kind="class">cinder::cocoa::SafeNsAutoreleasePool</class>
    <class kind="class">cinder::cocoa::SafeUiImage</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; struct __CFString &gt;</type>
      <name>SafeCfString</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>abaa4987f1249360cec40dd23f99902b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageSourceCgImage &gt;</type>
      <name>ImageSourceCgImageRef</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a941445731c9ea96ab644711ad9ff654d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>safeCfRelease</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>ab780329d073b3477b1789a9fc0c42bf0</anchor>
      <arglist>(const CFTypeRef cfRef)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>safeCocoaRelease</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a4b52b404e162f913cf47bde4fe9987a3</anchor>
      <arglist>(void *nsObject)</arglist>
    </member>
    <member kind="function">
      <type>CGContextRef</type>
      <name>createCgBitmapContext</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a68e52c84a0469f51a84cc2103289fe0e</anchor>
      <arglist>(const Surface8u &amp;surface)</arglist>
    </member>
    <member kind="function">
      <type>CGContextRef</type>
      <name>getWindowContext</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>af85e55ad00907aae72d5d48d46310da6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Surface8u</type>
      <name>convertNsBitmapDataRep</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a1ff7538b0e2cc11ec6a80bc0acaeea50</anchor>
      <arglist>(const NSBitmapImageRep *rep, bool assumeOwnership=false)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convertCfString</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>acae25ccc339a777367d894ef8c6a9587</anchor>
      <arglist>(CFStringRef str)</arglist>
    </member>
    <member kind="function">
      <type>CFStringRef</type>
      <name>createCfString</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a1ddcb6e6efe5afe5d4bd21f2e29d84b0</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>SafeCfString</type>
      <name>createSafeCfString</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a88db0ccda4fe1cb11ea2b78c86bffe78</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>convertNsString</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a3b73659a87bc7e00046cb89aa32ccbed</anchor>
      <arglist>(NSString *str)</arglist>
    </member>
    <member kind="function">
      <type>CFURLRef</type>
      <name>createCfUrl</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a4a09ce61e00d3ccbe4e9ab384eb8d06d</anchor>
      <arglist>(const cinder::Url &amp;url)</arglist>
    </member>
    <member kind="function">
      <type>CFAttributedStringRef</type>
      <name>createCfAttributedString</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>af9a038a31df75f7f6a5fef7b50cbb1b8</anchor>
      <arglist>(const std::string &amp;str, const cinder::Font &amp;font, const ColorA &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>CFAttributedStringRef</type>
      <name>createCfAttributedString</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a8ce49ba3b5f8eea1a2dbb4daa74b80bb</anchor>
      <arglist>(const std::string &amp;str, const cinder::Font &amp;font, const ColorA &amp;color, bool ligate)</arglist>
    </member>
    <member kind="function">
      <type>CGColorRef</type>
      <name>createCgColor</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a021f161b77c405922c4c34d4d3524d60</anchor>
      <arglist>(const Color &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>CGColorRef</type>
      <name>createCgColor</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a2e3410eb17e519fed8649c3b0e62a332</anchor>
      <arglist>(const ColorA &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>CGRect</type>
      <name>createCgRect</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>ac36c036a81203213106c3fcd2f9dff3c</anchor>
      <arglist>(const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>CgRectToArea</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a5c94d3c9efa228bd8faddba0d2b58d3a</anchor>
      <arglist>(const CGRect &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertCgPath</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>ab2488133691d9534e4d64fa81879c0bc</anchor>
      <arglist>(CGPathRef cgPath, Shape2d *resultShape, bool flipVertical=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCvPixelFormatTypeFromSurfaceChannelOrder</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a1302c5fcbf511bfe2a787a6d0fa77fe7</anchor>
      <arglist>(const SurfaceChannelOrder &amp;sco)</arglist>
    </member>
    <member kind="function">
      <type>CFDataRef</type>
      <name>createCfDataRef</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a4621271b8dd0e6d8f19311ba48e5241d</anchor>
      <arglist>(const cinder::Buffer &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>ImageSourceCgImageRef</type>
      <name>createImageSource</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a63180afe76a6ccfef65efd35bfee7d5c</anchor>
      <arglist>(::CGImageRef imageRef, ImageSource::Options options)</arglist>
    </member>
    <member kind="function">
      <type>::CGImageRef</type>
      <name>createCgImage</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a382256058b2da10083a67e6e972e3123</anchor>
      <arglist>(ImageSourceRef imageSource, ImageTarget::Options options)</arglist>
    </member>
    <member kind="function">
      <type>Surface8u</type>
      <name>convertUiImage</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a66d03723aafbd0d34291b3b09040efcc</anchor>
      <arglist>(UIImage *uiImage, bool assumeOwnership=false)</arglist>
    </member>
    <member kind="function">
      <type>SafeUiImage</type>
      <name>createUiImage</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>abf3aea6c2c02b9fa1be4d827ebfa28cb</anchor>
      <arglist>(const ImageSourceRef imageSource)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeToSavedPhotosAlbum</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>aae9f44096ff909f0ca5af4f954156ab7</anchor>
      <arglist>(const ImageSourceRef imageSource)</arglist>
    </member>
    <member kind="function">
      <type>CGSize</type>
      <name>createCgSize</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a7212bb3b2977e6de9d40be9455a69b3f</anchor>
      <arglist>(const Vec2i &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>CGSize</type>
      <name>createCgSize</name>
      <anchorfile>namespacecinder_1_1cocoa.html</anchorfile>
      <anchor>a8cbc4b513560dab46ea9426893230b80</anchor>
      <arglist>(const Vec2f &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class" objc="yes">
    <name>cinder::cocoa::SafeNsString</name>
    <filename>classcinder_1_1cocoa_1_1_safe_ns_string.html</filename>
    <member kind="function">
      <type></type>
      <name>SafeNsString</name>
      <anchorfile>classcinder_1_1cocoa_1_1_safe_ns_string.html</anchorfile>
      <anchor>a6b1002ae7ebacf75ac32da26a644a1ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SafeNsString</name>
      <anchorfile>classcinder_1_1cocoa_1_1_safe_ns_string.html</anchorfile>
      <anchor>a7b43b3ed591afbf28d2a48b82ace2f87</anchor>
      <arglist>(NSString *str)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SafeNsString</name>
      <anchorfile>classcinder_1_1cocoa_1_1_safe_ns_string.html</anchorfile>
      <anchor>a6411e6eab89682615327c5df05d2a5d1</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator NSString *const</name>
      <anchorfile>classcinder_1_1cocoa_1_1_safe_ns_string.html</anchorfile>
      <anchor>abff55bc4048adb4de82a960846f3a0a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classcinder_1_1cocoa_1_1_safe_ns_string.html</anchorfile>
      <anchor>a8b0a3b1226b9796530bed768ed95ed3a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class" objc="yes">
    <name>cinder::cocoa::SafeNsData</name>
    <filename>classcinder_1_1cocoa_1_1_safe_ns_data.html</filename>
    <member kind="function">
      <type></type>
      <name>SafeNsData</name>
      <anchorfile>classcinder_1_1cocoa_1_1_safe_ns_data.html</anchorfile>
      <anchor>a941b7537eeea272391db1ad99fb336f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SafeNsData</name>
      <anchorfile>classcinder_1_1cocoa_1_1_safe_ns_data.html</anchorfile>
      <anchor>a656bf3f7487e7701aa3bde41364ecd23</anchor>
      <arglist>(const Buffer &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator NSData *const</name>
      <anchorfile>classcinder_1_1cocoa_1_1_safe_ns_data.html</anchorfile>
      <anchor>a9e3ea1fe699323b45f6c9efb384f8aa5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class" objc="yes">
    <name>cinder::cocoa::SafeNsAutoreleasePool</name>
    <filename>classcinder_1_1cocoa_1_1_safe_ns_autorelease_pool.html</filename>
    <member kind="function">
      <type></type>
      <name>SafeNsAutoreleasePool</name>
      <anchorfile>classcinder_1_1cocoa_1_1_safe_ns_autorelease_pool.html</anchorfile>
      <anchor>af057a0a5d259693ac21150b3e76cfbf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SafeNsAutoreleasePool</name>
      <anchorfile>classcinder_1_1cocoa_1_1_safe_ns_autorelease_pool.html</anchorfile>
      <anchor>a3b57171c8d151998a2de764c0fdf2e4c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class" objc="yes">
    <name>cinder::cocoa::SafeUiImage</name>
    <filename>classcinder_1_1cocoa_1_1_safe_ui_image.html</filename>
    <member kind="function">
      <type></type>
      <name>SafeUiImage</name>
      <anchorfile>classcinder_1_1cocoa_1_1_safe_ui_image.html</anchorfile>
      <anchor>a79087d92f8ccc0f922350fd83c0d1618</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SafeUiImage</name>
      <anchorfile>classcinder_1_1cocoa_1_1_safe_ui_image.html</anchorfile>
      <anchor>a657bd452f306523a3e3327cb7dadfa37</anchor>
      <arglist>(UIImage *uiImage, CGImageRef imageRef)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator UIImage *</name>
      <anchorfile>classcinder_1_1cocoa_1_1_safe_ui_image.html</anchorfile>
      <anchor>a0fd6d6f577ce38c43fb9d5980bf60461</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>cinder::gl</name>
    <filename>namespacecinder_1_1gl.html</filename>
    <class kind="class">cinder::gl::DisplayList</class>
    <class kind="class">cinder::gl::Renderbuffer</class>
    <class kind="class">cinder::gl::Fbo</class>
    <class kind="class">cinder::gl::FboException</class>
    <class kind="class">cinder::gl::FboExceptionInvalidSpecification</class>
    <class kind="struct">cinder::gl::SaveTextureBindState</class>
    <class kind="struct">cinder::gl::BoolState</class>
    <class kind="struct">cinder::gl::ClientBoolState</class>
    <class kind="struct">cinder::gl::SaveColorState</class>
    <class kind="struct">cinder::gl::SaveFramebufferBinding</class>
    <class kind="class">cinder::gl::Exception</class>
    <class kind="class">cinder::gl::ExceptionUnknownTarget</class>
    <class kind="class">cinder::gl::GlslProg</class>
    <class kind="class">cinder::gl::GlslProgCompileExc</class>
    <class kind="class">cinder::gl::GlslNullProgramExc</class>
    <class kind="class">cinder::gl::Light</class>
    <class kind="class">cinder::gl::Material</class>
    <class kind="class">cinder::gl::StereoAutoFocuser</class>
    <class kind="class">cinder::gl::Texture</class>
    <class kind="class">cinder::gl::TextureCache</class>
    <class kind="class">cinder::gl::SurfaceConstraintsGLTexture</class>
    <class kind="class">cinder::gl::TextureDataExc</class>
    <class kind="class">cinder::gl::TextureFont</class>
    <class kind="class">cinder::gl::TileRender</class>
    <class kind="class">cinder::gl::Vbo</class>
    <class kind="class">cinder::gl::VboMesh</class>
    <class kind="class">cinder::gl::VboExc</class>
    <class kind="class">cinder::gl::VboInvalidTargetExc</class>
    <class kind="class">cinder::gl::VboFailedMapExc</class>
    <class kind="class">cinder::gl::VboFailedUnmapExc</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Texture &gt;</type>
      <name>TextureRef</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ae9fbc0fd7428f918be8294799459d9cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; VboMesh &gt;</type>
      <name>VboMeshRef</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>aba53e650f3d3915f1e0c886e6199ef13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; GlslProg &gt;</type>
      <name>GlslProgRef</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a9b53d5bd398b738e4ba7bff48cd07564</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class TextureFont &gt;</type>
      <name>TextureFontRef</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a51573e6fc1b76bcb23fe3c0beeb287ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeGlee</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>acefdbdc0a6cbc28299bf0797357bfcc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExtensionAvailable</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a6c76f801af6a41e90339894d17b0f8db</anchor>
      <arglist>(const std::string &amp;extName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a2fbfcc011e3992ebe4a239464a97d896</anchor>
      <arglist>(const ColorA &amp;color=ColorA::black(), bool clearDepthBuffer=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableVerticalSync</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a96b372396a487d30379d021091a7028f</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVerticalSyncEnabled</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>aa9a4c34953184e41a17945ee947128e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setModelView</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ac191bbc2207f7fc6f957f4bb26cac0d3</anchor>
      <arglist>(const Camera &amp;cam)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProjection</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a4f9ad12f54702f3762361f804e2ec86e</anchor>
      <arglist>(const Camera &amp;cam)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrices</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>aae701f052de1bf3c1b0d2dc05f4512c6</anchor>
      <arglist>(const Camera &amp;cam)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushModelView</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a617d10ce027c18747bbd9692d05f92af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popModelView</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a3ed49d64da76eb531f83210ef5785052</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushModelView</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>aea4b11e044329d15c1c9986aac5e201e</anchor>
      <arglist>(const Camera &amp;cam)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushProjection</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a7e2993b15e507172b41ffe7c54ad0bc7</anchor>
      <arglist>(const Camera &amp;cam)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushMatrices</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>aa1486b02795149205c80dadecae79cc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popMatrices</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a1645efbc66ebd194c335d98749edd466</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multModelView</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a202555d6f2d2b848718cf2163e4b91d9</anchor>
      <arglist>(const Matrix44f &amp;mtx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multProjection</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ab09199dace7ac26064834905787ba81c</anchor>
      <arglist>(const Matrix44f &amp;mtx)</arglist>
    </member>
    <member kind="function">
      <type>Matrix44f</type>
      <name>getModelView</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a148ea0d64757892bc845d11de72e6612</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix44f</type>
      <name>getProjection</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>aaeabb4c7249545d78d7044e2f4d4de50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatricesWindowPersp</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a7345b64510638b473e6234fea828aeb6</anchor>
      <arglist>(int screenWidth, int screenHeight, float fovDegrees=60.0f, float nearPlane=1.0f, float farPlane=1000.0f, bool originUpperLeft=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatricesWindow</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a42ef86d897997bb2841cb354e6e77d91</anchor>
      <arglist>(int screenWidth, int screenHeight, bool originUpperLeft=true)</arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>getViewport</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a734dca12be3a9257f93d7559faaf318e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewport</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a383ed8cd0c1ced7335aeb24866dd8a5e</anchor>
      <arglist>(const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a9be60d97976007f2313107ed053bd0b8</anchor>
      <arglist>(const Vec2f &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a3dd2ab22d1b4227cc4c063aff5483a1e</anchor>
      <arglist>(const Vec3f &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ae3bda300feb39b6cff8b26289b4bafd0</anchor>
      <arglist>(const Vec3f &amp;scl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a23d2e23fb9fec3817ca824ffa13870bc</anchor>
      <arglist>(const Vec3f &amp;xyz)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ad2db4645848b2c95b0fa7d2637232189</anchor>
      <arglist>(const Quatf &amp;quat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableAlphaBlending</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a2cb8982a5a007376031745ac074bed4c</anchor>
      <arglist>(bool premultiplied=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableAlphaBlending</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a827c4891a9cdb131dcf0900d3cc3afb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableAdditiveBlending</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a461bcc8262ee0119ddf6d04e54f1bc5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableAlphaTest</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a5828de179aa09656761214c42081e744</anchor>
      <arglist>(float value=0.5f, int func=GL_GREATER)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableAlphaTest</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ade99b6754a467585930762c731ed427e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableWireframe</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>afa2bc5dcc9b47fffe453c766aeab921d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableWireframe</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a48c341d76de7f03662aa441cbd9fbe2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableDepthRead</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a29c89789e81816aae727bb4fa67f0557</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableDepthRead</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a39fc0f8808d3c838e8e672206155ae92</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableDepthWrite</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>af0f288e79355d2caa51a668e95c34762</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableDepthWrite</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a1124315ba7afda1825556d86f63119b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ac95d12e2e84beefa8fa5cf03208da8c6</anchor>
      <arglist>(const Vec2f &amp;start, const Vec2f &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a026dddf77657af2220d4777b57b4e0a3</anchor>
      <arglist>(const Vec3f &amp;start, const Vec3f &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawCube</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>aded1f26c4551ea294c38dcd0f53f0f78</anchor>
      <arglist>(const Vec3f &amp;center, const Vec3f &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawColorCube</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ad437c0db1a58bf32b1446417d26cce6d</anchor>
      <arglist>(const Vec3f &amp;center, const Vec3f &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStrokedCube</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a83b1ccb52359bdc68b8780c19a7fad1e</anchor>
      <arglist>(const Vec3f &amp;center, const Vec3f &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSphere</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>afb36eda0e75914ad146ac8aba3777f50</anchor>
      <arglist>(const Vec3f &amp;center, float radius, int segments=12)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ada9a13926b78fe2e15b591e98b6bc12b</anchor>
      <arglist>(const class Sphere &amp;sphere, int segments=12)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolidCircle</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a225b1296ceeaa8b2393339fc39debf7a</anchor>
      <arglist>(const Vec2f &amp;center, float radius, int numSegments=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStrokedCircle</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ac4287584c2ab9bb57cd24a298163144a</anchor>
      <arglist>(const Vec2f &amp;center, float radius, int numSegments=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolidEllipse</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ad06d9caec735920707ba046487925cf6</anchor>
      <arglist>(const Vec2f &amp;center, float radiusX, float radiusY, int numSegments=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStrokedEllipse</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a19a690b7e9222448fa2da276c217a304</anchor>
      <arglist>(const Vec2f &amp;center, float radiusX, float radiusY, int numSegments=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolidRect</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>aa864abe460f72df3a3feffba6877b08e</anchor>
      <arglist>(const Rectf &amp;rect, bool textureRectangle=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStrokedRect</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a27354e3ff26fc32199ffc04b7e6d68db</anchor>
      <arglist>(const Rectf &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolidRoundedRect</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>af5af358ebe7bd7a2e6dbedc3c413a144</anchor>
      <arglist>(const Rectf &amp;r, float cornerRadius, int numSegmentsPerCorner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStrokedRoundedRect</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ad4ea89711fca3684f5c0ec306b029e0e</anchor>
      <arglist>(const Rectf &amp;r, float cornerRadius, int numSegmentsPerCorner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolidTriangle</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a575b200164060d5cee4babd275e58fa6</anchor>
      <arglist>(const Vec2f &amp;pt1, const Vec2f &amp;pt2, const Vec2f &amp;pt3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolidTriangle</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ad3d31ce09f238fa22e6d5262a00e5ddd</anchor>
      <arglist>(const Vec2f pts[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolidTriangle</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a4abdfa02bfd91d992341690ff32f8662</anchor>
      <arglist>(const Vec2f &amp;pt1, const Vec2f &amp;pt2, const Vec2f &amp;pt3, const Vec2f &amp;texPt1, const Vec2f &amp;texPt2, const Vec2f &amp;texPt3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolidTriangle</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>af4c10b6df7ebf4be348e7915d4857e89</anchor>
      <arglist>(const Vec2f pts[3], const Vec2f texCoord[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStrokedTriangle</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a9bbd432933f5b882dbe23d46f8162bb8</anchor>
      <arglist>(const Vec2f &amp;pt1, const Vec2f &amp;pt2, const Vec2f &amp;pt3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStrokedTriangle</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ae67bb2baa2e39a0008cb36d3a8784beb</anchor>
      <arglist>(const Vec2f pts[3])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawCoordinateFrame</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a16ea664ce9bbde923821d82b724e880d</anchor>
      <arglist>(float axisLength, float headLength, float headRadius)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawVector</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a9c01e8443ea98da5e3a406711452a749</anchor>
      <arglist>(const Vec3f &amp;start, const Vec3f &amp;end, float headLength=0.2f, float headRadius=0.05f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawFrustum</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a14256c1806be1e7252c5718ce2aaa267</anchor>
      <arglist>(const Camera &amp;cam)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTorus</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a43d519840986615ae3542ff5d4f44141</anchor>
      <arglist>(float outterRadius, float innerRadius, int longitudeSegments=12, int latitudeSegments=12)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawCylinder</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a70f28209c6bdb11553d4c45d368fd06d</anchor>
      <arglist>(float baseRadius, float topRadius, float height, int slices=12, int stacks=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a838fabf019bc0666b00d36dd5589c204</anchor>
      <arglist>(const PolyLine&lt; Vec2f &gt; &amp;polyLine)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>abe4eb3754575bc15cdc6e1d7d134421b</anchor>
      <arglist>(const PolyLine&lt; Vec3f &gt; &amp;polyLine)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a395ee245bed68f44690f895bb1973fe5</anchor>
      <arglist>(const Path2d &amp;path2d, float approximationScale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>afa2ada755608e381759e3e125a15902c</anchor>
      <arglist>(const Shape2d &amp;shape2d, float approximationScale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolid</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>afad5aabf8d23cbbade074495422ae286</anchor>
      <arglist>(const Path2d &amp;path2d, float approximationScale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolid</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a3aa639210fec19f33e71aed8e6fcfe95</anchor>
      <arglist>(const Shape2d &amp;shape2d, float approximationScale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolid</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a723e2a81138fce60f586ac933346f6e1</anchor>
      <arglist>(const PolyLine2f &amp;polyLine)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a6e90ecae18934dbeb555853c66011ed5</anchor>
      <arglist>(const TriMesh2d &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRange</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a47f6d947ec0277e2830b46d3be4fa53a</anchor>
      <arglist>(const TriMesh2d &amp;mesh, size_t startTriangle, size_t triangleCount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a9e62bfdae870f732ca59f92d448ed645</anchor>
      <arglist>(const TriMesh &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRange</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a86ef42d8b0f944f0198499df22bfed86</anchor>
      <arglist>(const TriMesh &amp;mesh, size_t startTriangle, size_t triangleCount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a375f873fcf7056a2f0d00ecea7257b46</anchor>
      <arglist>(const VboMesh &amp;vbo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRange</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a7b4a1d5705efa1a8fe35c8b31666eb58</anchor>
      <arglist>(const VboMesh &amp;vbo, size_t startIndex, size_t indexCount, int vertexStart=-1, int vertexEnd=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawArrays</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ad10685b4d7ffb087bb4f8199fdcae1f1</anchor>
      <arglist>(const VboMesh &amp;vbo, GLint first, GLsizei count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawBillboard</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a4b0879c7123cf2cf31ef1b1f7e9a4e71</anchor>
      <arglist>(const Vec3f &amp;pos, const Vec2f &amp;scale, float rotationDegrees, const Vec3f &amp;bbRight, const Vec3f &amp;bbUp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>afa0740258a60c37956211e3b843e1dce</anchor>
      <arglist>(const Texture &amp;texture)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a92133b5442df7e3d7f4e97d3fc280471</anchor>
      <arglist>(const Texture &amp;texture, const Vec2f &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a993397b47900e4858338583793981bfc</anchor>
      <arglist>(const Texture &amp;texture, const Rectf &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ab9ce2bab95244a2abcac8e6d4fd6d062</anchor>
      <arglist>(const Texture &amp;texture, const Area &amp;srcArea, const Rectf &amp;destRect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawString</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a8715d619df092110ac326e7a4ab08098</anchor>
      <arglist>(const std::string &amp;str, const Vec2f &amp;pos, const ColorA &amp;color=ColorA(1, 1, 1, 1), Font font=Font())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStringCentered</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a9724ec44b06320535bb92d4d81746d5a</anchor>
      <arglist>(const std::string &amp;str, const Vec2f &amp;pos, const ColorA &amp;color=ColorA(1, 1, 1, 1), Font font=Font())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStringRight</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a4b7c9bb652ec5c10aca201dc7659296c</anchor>
      <arglist>(const std::string &amp;str, const Vec2f &amp;pos, const ColorA &amp;color=ColorA(1, 1, 1, 1), Font font=Font())</arglist>
    </member>
    <member kind="function">
      <type>set&lt; Font::Glyph &gt;</type>
      <name>getNecessaryGlyphs</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a3d65ac9eee7dd72073d1880fb7652ba3</anchor>
      <arglist>(const Font &amp;font, const string &amp;supportedChars)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableVerticalSync</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a8d4ab0f8ad1b3cd4a8cf6b74e947df3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatricesWindowPersp</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>abd5c6c9b115fbda4c2c71f9aa69dc040</anchor>
      <arglist>(const Vec2i &amp;screenSize, float fovDegrees=60.0f, float nearPlane=1.0f, float farPlane=1000.0f, bool originUpperLeft=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatricesWindow</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ad37886f223dd0e415baba31c59c36993</anchor>
      <arglist>(const Vec2i &amp;screenSize, bool originUpperLeft=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ab27ce1fa3c14f9fb122cf37fd8b2b2ca</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a622ff4651b1d02cc23cfc913fe9d3679</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a3b636879e0423592010a372d285eb958</anchor>
      <arglist>(const Vec2f &amp;scl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a4bab17be7953bcb3f69c162142a8bac0</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ae2826ab8097c5b5e862579d5fb93aba9</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a535cac17a8ed7ad52b4f745f2cfd76b3</anchor>
      <arglist>(float degrees)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>begin</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a5839c578556194a5e391f590926da66d</anchor>
      <arglist>(GLenum mode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a63fb36d011c4d899c04dc153235ffeb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vertex</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a2270404ec863d91306718ec2cef26971</anchor>
      <arglist>(const Vec2f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vertex</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a0f3ab18c9fa9b104f1098569ff3ced27</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vertex</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a9eb28a62f71f9708e16ebeecb605dc5c</anchor>
      <arglist>(const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vertex</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ab22ec6641fa98b38332d1338f6d14fd1</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>texCoord</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ad2d97e2b737fe5e9e5f4ee3ac0f96611</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>texCoord</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>aa3c8e73eb4ae8da7ef7cf21ddc52ef7c</anchor>
      <arglist>(const Vec2f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>texCoord</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a361492da629ec4eb9adf3930d50d8393</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>texCoord</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a769662a3fefb9ca0566adbee820470d4</anchor>
      <arglist>(const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>color</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a8a78cf5a47edfa85ca17a42b166ccaaf</anchor>
      <arglist>(float r, float g, float b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>color</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a8cc82192f2455ab5b992dcdd50af8932</anchor>
      <arglist>(float r, float g, float b, float a)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>color</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a8d09fc0c6af91ea1337ff04f7996f50c</anchor>
      <arglist>(const Color8u &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>color</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a97f2f086f019c50f60eeaa654711a696</anchor>
      <arglist>(const ColorA8u &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>color</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a3c10044dd03d623fb0c32c0dc2e9e2ca</anchor>
      <arglist>(const Color &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>color</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>af956a20e7350e9d0c3c9d3f534165b39</anchor>
      <arglist>(const ColorA &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ad661cc5c41727eaca6cb2b8bee32bc0f</anchor>
      <arglist>(GLenum state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a29cc277c287e66d0d006a70f7460e13b</anchor>
      <arglist>(GLenum state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lineWidth</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a1d2adc8b6b4a51e1e251b54cd7a86527</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStrokedCube</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a7714e121a55263dcf702c8447e790dcc</anchor>
      <arglist>(const AxisAlignedBox3f &amp;aab)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a32eda5f8b4d5c89777b3f2b89df46119</anchor>
      <arglist>(const class PolyLine&lt; Vec2f &gt; &amp;polyLine)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>af005a57cab16e4a208203c117cf0ebcd</anchor>
      <arglist>(const class PolyLine&lt; Vec3f &gt; &amp;polyLine)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>af71325bdfeb97381c624f3c1357560fd</anchor>
      <arglist>(const class Path2d &amp;path2d, float approximationScale=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a14af9189a09f376ca2b2c6098b1de818</anchor>
      <arglist>(const class Shape2d &amp;shape2d, float approximationScale=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolid</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>aaad7e3de316294933d094c4ec6a39b7d</anchor>
      <arglist>(const class Path2d &amp;path2d, float approximationScale=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawSolid</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ad541218e8a8d06a27f6ea7797d6b77e9</anchor>
      <arglist>(const class Shape2d &amp;shape2d, float approximationScale=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a0cd5aadafa3009a7a6bf77127bd12fee</anchor>
      <arglist>(const VboMeshRef &amp;vbo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRange</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a8f862dd93fab8dafd4dddd82b3b919e0</anchor>
      <arglist>(const VboMeshRef &amp;vbo, size_t startIndex, size_t indexCount, int vertexStart=-1, int vertexEnd=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawArrays</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a26c004a1966e6984ac0731e81a6ac6e2</anchor>
      <arglist>(const VboMeshRef &amp;vbo, GLint first, GLsizei count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a6c5e6cf9b11527a69eab04258993703d</anchor>
      <arglist>(const TextureRef &amp;texture)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>aca7b439de8347cc3aa2a1a243aac0cb3</anchor>
      <arglist>(const TextureRef &amp;texture, const Vec2f &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>ae7673487da659270682e20d6768a6cf9</anchor>
      <arglist>(const TextureRef &amp;texture, const Rectf &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a5be3e521337dcc0ce0f3d1bbb369dd10</anchor>
      <arglist>(const TextureRef &amp;texture, const Area &amp;srcArea, const Rectf &amp;destRect)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>namespacecinder_1_1gl.html</anchorfile>
      <anchor>a30954fda8a2cdbe83ff742fa5faa7df1</anchor>
      <arglist>(const svg::Doc &amp;svg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::DisplayList</name>
    <filename>classcinder_1_1gl_1_1_display_list.html</filename>
    <class kind="struct">cinder::gl::DisplayList::Obj</class>
    <member kind="function">
      <type></type>
      <name>DisplayList</name>
      <anchorfile>classcinder_1_1gl_1_1_display_list.html</anchorfile>
      <anchor>a731bcfd07ad069feabfd3d58c183c801</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DisplayList</name>
      <anchorfile>classcinder_1_1gl_1_1_display_list.html</anchorfile>
      <anchor>a4ec3368985ae5463dde11b9e42c1e0f2</anchor>
      <arglist>(GLint aMode)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>newList</name>
      <anchorfile>classcinder_1_1gl_1_1_display_list.html</anchorfile>
      <anchor>ae6182533ea9afe83aa48943bc01b4b0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endList</name>
      <anchorfile>classcinder_1_1gl_1_1_display_list.html</anchorfile>
      <anchor>a41965dcc950361e3330e217bcb33dcf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getID</name>
      <anchorfile>classcinder_1_1gl_1_1_display_list.html</anchorfile>
      <anchor>adf3c053c1ba52d4d3670e3f1f5457568</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classcinder_1_1gl_1_1_display_list.html</anchorfile>
      <anchor>aba43d058cbbeb5446d21875a1f41f9ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix44f &amp;</type>
      <name>getModelMatrix</name>
      <anchorfile>classcinder_1_1gl_1_1_display_list.html</anchorfile>
      <anchor>aa53218783463ed1de5750345f92fdde6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Matrix44f &amp;</type>
      <name>getModelMatrix</name>
      <anchorfile>classcinder_1_1gl_1_1_display_list.html</anchorfile>
      <anchor>a20466df5693c2fdb63edebdf562040e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaterial</name>
      <anchorfile>classcinder_1_1gl_1_1_display_list.html</anchorfile>
      <anchor>a016cced9feed7ea12d943fdc3a1bf712</anchor>
      <arglist>(const Material &amp;aMaterial)</arglist>
    </member>
    <member kind="function">
      <type>Material &amp;</type>
      <name>getMaterial</name>
      <anchorfile>classcinder_1_1gl_1_1_display_list.html</anchorfile>
      <anchor>ad119907a4771896c33dcc7832997aba2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Obj &gt;</type>
      <name>mObj</name>
      <anchorfile>classcinder_1_1gl_1_1_display_list.html</anchorfile>
      <anchor>ab9a3c1c2930ba05ff984b08595e4bc02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Obj &gt; DisplayList::*</type>
      <name>unspecified_bool_type</name>
      <anchorfile>classcinder_1_1gl_1_1_display_list.html</anchorfile>
      <anchor>a7501988a64db690eea26ae1341b7c2f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unspecified_bool_type</name>
      <anchorfile>classcinder_1_1gl_1_1_display_list.html</anchorfile>
      <anchor>a8b02b418092526b677dd2ac7f349ce7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classcinder_1_1gl_1_1_display_list.html</anchorfile>
      <anchor>af1c3ec445f5d6321469a3bbb676ac9f4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::gl::DisplayList::Obj</name>
    <filename>structcinder_1_1gl_1_1_display_list_1_1_obj.html</filename>
    <member kind="function">
      <type></type>
      <name>Obj</name>
      <anchorfile>structcinder_1_1gl_1_1_display_list_1_1_obj.html</anchorfile>
      <anchor>a41a0c6da593441c5adbac5aca85e78a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Obj</name>
      <anchorfile>structcinder_1_1gl_1_1_display_list_1_1_obj.html</anchorfile>
      <anchor>af8d5ae895089c171a47a7fbb6ff70af4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>GLuint</type>
      <name>mID</name>
      <anchorfile>structcinder_1_1gl_1_1_display_list_1_1_obj.html</anchorfile>
      <anchor>a83f0b329cdca92476d4d1247e2a580d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLint</type>
      <name>mMode</name>
      <anchorfile>structcinder_1_1gl_1_1_display_list_1_1_obj.html</anchorfile>
      <anchor>a1a8f0c2197491d5bf78a4fae737420a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix44f</type>
      <name>mModelMatrix</name>
      <anchorfile>structcinder_1_1gl_1_1_display_list_1_1_obj.html</anchorfile>
      <anchor>a262ae57ea50576262d5e9ce79182f2ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; Material &gt;</type>
      <name>mMaterial</name>
      <anchorfile>structcinder_1_1gl_1_1_display_list_1_1_obj.html</anchorfile>
      <anchor>a4779a475e418ba44c7366e8eb9ddd065</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::Renderbuffer</name>
    <filename>classcinder_1_1gl_1_1_renderbuffer.html</filename>
    <member kind="function">
      <type></type>
      <name>Renderbuffer</name>
      <anchorfile>classcinder_1_1gl_1_1_renderbuffer.html</anchorfile>
      <anchor>a9d3050f902228378d531996154b402a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Renderbuffer</name>
      <anchorfile>classcinder_1_1gl_1_1_renderbuffer.html</anchorfile>
      <anchor>ac75b6d5fe60d19ef7daaf3bae8146731</anchor>
      <arglist>(int width, int height, GLenum internalFormat=GL_RGBA8_OES)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Renderbuffer</name>
      <anchorfile>classcinder_1_1gl_1_1_renderbuffer.html</anchorfile>
      <anchor>aa86d44c4120b5574e0301bc49f6c3acf</anchor>
      <arglist>(int width, int height, GLenum internalFormat=GL_RGBA8)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Renderbuffer</name>
      <anchorfile>classcinder_1_1gl_1_1_renderbuffer.html</anchorfile>
      <anchor>ac3a4e0eb68418679195683658ff8dc31</anchor>
      <arglist>(int width, int height, GLenum internalFormat, int msaaSamples, int coverageSamples=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWidth</name>
      <anchorfile>classcinder_1_1gl_1_1_renderbuffer.html</anchorfile>
      <anchor>a9805d6ca1ae72137b37b763b3d3db7de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHeight</name>
      <anchorfile>classcinder_1_1gl_1_1_renderbuffer.html</anchorfile>
      <anchor>a65638e4f9d8143777206f328f14c9631</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getSize</name>
      <anchorfile>classcinder_1_1gl_1_1_renderbuffer.html</anchorfile>
      <anchor>a86e6f6d67b802d1f60c07f7defc2d7a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>getBounds</name>
      <anchorfile>classcinder_1_1gl_1_1_renderbuffer.html</anchorfile>
      <anchor>a8933e9ea057605124abb43c9f2665d69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAspectRatio</name>
      <anchorfile>classcinder_1_1gl_1_1_renderbuffer.html</anchorfile>
      <anchor>ab4937db36dfd65eb0fd85707d7229a0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>getId</name>
      <anchorfile>classcinder_1_1gl_1_1_renderbuffer.html</anchorfile>
      <anchor>ad183f745747a20210fed7ccb58f15caa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>getInternalFormat</name>
      <anchorfile>classcinder_1_1gl_1_1_renderbuffer.html</anchorfile>
      <anchor>ae17714942d744284ede20160d0d781a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSamples</name>
      <anchorfile>classcinder_1_1gl_1_1_renderbuffer.html</anchorfile>
      <anchor>af7872f4f555681ca9a6dda3c8627037d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCoverageSamples</name>
      <anchorfile>classcinder_1_1gl_1_1_renderbuffer.html</anchorfile>
      <anchor>a7d7214b4cce82e7bda48a6fa189f48af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Obj &gt; Renderbuffer::*</type>
      <name>unspecified_bool_type</name>
      <anchorfile>classcinder_1_1gl_1_1_renderbuffer.html</anchorfile>
      <anchor>a0705a1a570784ade90a0d9e3df2e27c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unspecified_bool_type</name>
      <anchorfile>classcinder_1_1gl_1_1_renderbuffer.html</anchorfile>
      <anchor>aaf31c05467b1b3c00cc11f620d6db570</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classcinder_1_1gl_1_1_renderbuffer.html</anchorfile>
      <anchor>adb1f021b09925aa4362cf5b44989d7b7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::Fbo</name>
    <filename>classcinder_1_1gl_1_1_fbo.html</filename>
    <class kind="struct">cinder::gl::Fbo::Format</class>
    <class kind="struct">cinder::gl::Fbo::Obj</class>
    <member kind="function">
      <type></type>
      <name>Fbo</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>a186018250b023d8928b58036b65627c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fbo</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>a6aee6dc47a18cc7bcde9c640613f5bb8</anchor>
      <arglist>(int width, int height, Format format=Format())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fbo</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>aefb44a8380c36ec2dcca7d056b59399c</anchor>
      <arglist>(int width, int height, bool alpha, bool color=true, bool depth=true)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getWidth</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>aa58af235055dcd4dae433cb5079a2918</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHeight</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>ab476f6e2cd2aa99036f1665395bbfbc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getSize</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>a3903e3493b9a2a34e8774ebbdd597b03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>getBounds</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>a4e809b409d480e9e66d3f5c2c14a58e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAspectRatio</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>aefb86aaff33494195244cf02ad8cd423</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Format &amp;</type>
      <name>getFormat</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>a684e9f8738e47b7ffcb84c18281d7dba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>getTarget</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>ab1c2bc6da8793dabd96032c3b884d06f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Texture &amp;</type>
      <name>getTexture</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>a3e2201cbdfb0227e0cf98ab17a559488</anchor>
      <arglist>(int attachment=0)</arglist>
    </member>
    <member kind="function">
      <type>Texture &amp;</type>
      <name>getDepthTexture</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>a956919b4e2f86735543b3c289dfb9437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bindTexture</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>a8c8e2e75815c7e4354e22102ec1aaa0d</anchor>
      <arglist>(int textureUnit=0, int attachment=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unbindTexture</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>a1017e33a7d1c511f2ec601f41abc5c22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bindDepthTexture</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>a0ef31243c7db0488658bfc8d562d9bd4</anchor>
      <arglist>(int textureUnit=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bindFramebuffer</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>af8cd9569175244c967f3c6a158fde75a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>getId</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>ad870a26719d85dc53fe26a67ae861eb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>getResolveId</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>a10a9544d38966a2ac532c68c634e1080</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blitTo</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>a5da64be6eaa3d6a06dbf94fce92f518f</anchor>
      <arglist>(Fbo dst, const Area &amp;srcArea, const Area &amp;dstArea, GLenum filter=GL_NEAREST, GLbitfield mask=GL_COLOR_BUFFER_BIT) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blitToScreen</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>a55b6a6414e34d498649a4af412d2daa0</anchor>
      <arglist>(const Area &amp;srcArea, const Area &amp;dstArea, GLenum filter=GL_NEAREST, GLbitfield mask=GL_COLOR_BUFFER_BIT) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blitFromScreen</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>a6bb0a207af9f95576109da52a39a1f23</anchor>
      <arglist>(const Area &amp;srcArea, const Area &amp;dstArea, GLenum filter=GL_NEAREST, GLbitfield mask=GL_COLOR_BUFFER_BIT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unbindFramebuffer</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>a2abc8f07cde38094d561ed9e7384c4b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GLint</type>
      <name>getMaxSamples</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>a0ecdf73dc3a40a841b46b400b6e711d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GLint</type>
      <name>getMaxAttachments</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>a0642859dd0aab3d152db69a7ff008f44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>acf3a917a86fb912f9db2578a5668eff9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>initMultisample</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>aaf974e05544b4bb7b6463d9a7c816622</anchor>
      <arglist>(bool csaa)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resolveTextures</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>a9396cb6f8cfe38d72a006a473e11415a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateMipmaps</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>aa6ab63720e6c724b2af2c09e1776e76f</anchor>
      <arglist>(bool bindFirst, int attachment) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkStatus</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>a0eadf58267d7d1e1067d1dd2e55071c5</anchor>
      <arglist>(class FboExceptionInvalidSpecification *resultExc)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Obj &gt;</type>
      <name>mObj</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>a8a4ea1b6b735856df2b788905719a767</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static GLint</type>
      <name>sMaxSamples</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>a57346c137888df8ce83e44a392e99201</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static GLint</type>
      <name>sMaxAttachments</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>ad54cc5264f9b5de9b673981dbee97f91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Obj &gt; Fbo::*</type>
      <name>unspecified_bool_type</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>ae3c5d02fdf24044ac50f9a6538f4f0a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unspecified_bool_type</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>a74d8c7b37083daac0f24b550b7a92c9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo.html</anchorfile>
      <anchor>afab6d48eb441f5ec9337c85292ff89f1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::gl::Fbo::Format</name>
    <filename>structcinder_1_1gl_1_1_fbo_1_1_format.html</filename>
    <member kind="function">
      <type></type>
      <name>Format</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>af1ed6112c957cd469a72c17ceec7ec98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTarget</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>afe423ab1360ae34cd8fbf45f27b922c9</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColorInternalFormat</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a5e184f508e451752b1cceb2d8a4994a9</anchor>
      <arglist>(GLenum colorInternalFormat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDepthInternalFormat</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>aff856b546ffb879ad4dd6f52112f0d2f</anchor>
      <arglist>(GLenum depthInternalFormat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSamples</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a89bf5b2a951a1b02ca33d8f045510484</anchor>
      <arglist>(int samples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoverageSamples</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a9bbb6899f14aeba95c0b256dab5a778e</anchor>
      <arglist>(int coverageSamples)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableColorBuffer</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a3141c0c1591a2712e520134666fea53a</anchor>
      <arglist>(bool colorBuffer=true, int numColorBuffers=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableDepthBuffer</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>aef6c78695f5459fb9624171ab71aed37</anchor>
      <arglist>(bool depthBuffer=true, bool asTexture=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableMipmapping</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>aec68e166260c8213e1cfc277d2efd8a6</anchor>
      <arglist>(bool enableMipmapping=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrap</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a8dd61719ad8b3e40470e10a6704ebd9a</anchor>
      <arglist>(GLenum wrapS, GLenum wrapT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrapS</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>ab85ef1222c9de5912ba94694837d5b22</anchor>
      <arglist>(GLenum wrapS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrapT</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>ab9066cbe7d5f8c1705567f5d1a9962eb</anchor>
      <arglist>(GLenum wrapT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinFilter</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a9cacbe44ec89fc160fb43c93870114fe</anchor>
      <arglist>(GLenum minFilter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMagFilter</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a43deb5759cdf3bdd4e979c3c54a648f0</anchor>
      <arglist>(GLenum magFilter)</arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>getTarget</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>ac909f690dd41ccca47b4959238f70314</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>getColorInternalFormat</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a255333428c37cb3a9c434fb9b8dc523a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>getDepthInternalFormat</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a630f05bac5fc57e47e8e360b23f65e04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSamples</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>ab563c043b89e0e9e347b252bef9f9ef6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCoverageSamples</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a3627b807a3e034f8f67f50d82efc9da2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasColorBuffer</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a6729c0eb874eee6a977b65cdadea6cc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumColorBuffers</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>af44ab92e8d4c13ff5ab740fb87d18b21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDepthBuffer</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>aadd4ac7e9423b25ad3afadfc693bb1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDepthBufferTexture</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a7e9a929a741a33dc81934781b38ec553</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMipMapping</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>ab160cae8c5ff725469725a789e95f80c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GLenum</type>
      <name>mTarget</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a69150cc60dc6f4b53f42251b7998b07c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GLenum</type>
      <name>mColorInternalFormat</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a73e8bedef3738b699b36df8b456c7f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GLenum</type>
      <name>mDepthInternalFormat</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a0039272502b3e181b2edcfd04e2da170</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mSamples</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>ac8955f7960d17c6a45b9072c21d10da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mCoverageSamples</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a3b123acd7321b0a96648be4757f81268</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mMipmapping</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>aa581a2d7d7a5c470f4e1945b264a2bea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mDepthBuffer</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a87250b821c104288897ed9e5dff9e6be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mDepthBufferAsTexture</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>aee0c2a70edf99f9983f5619875753f24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mStencilBuffer</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a5d2a059ea45feaeb5125c7747e3d02d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mNumColorBuffers</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a282a38645d15162e720a0ed5645a7620</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GLenum</type>
      <name>mWrapS</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a62e31fbb2bb16399e4873dfe488696f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GLenum</type>
      <name>mWrapT</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a6f5d53d1a4d7e70865f3d5d18639e6b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GLenum</type>
      <name>mMinFilter</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a4662e002446beec19ce8b76b9d422c59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GLenum</type>
      <name>mMagFilter</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>ab29f01e030b9353d5b28017c43629594</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Fbo</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_format.html</anchorfile>
      <anchor>a748bc41f24a81bb3bbcc3dae1c5ee9ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::gl::Fbo::Obj</name>
    <filename>structcinder_1_1gl_1_1_fbo_1_1_obj.html</filename>
    <member kind="function">
      <type></type>
      <name>Obj</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_obj.html</anchorfile>
      <anchor>a2dad6937e8bb8dd57b56a88b456278b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Obj</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_obj.html</anchorfile>
      <anchor>a41495a69dc8cfe2e2c133ecc222e5fc2</anchor>
      <arglist>(int aWidth, int aHeight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Obj</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_obj.html</anchorfile>
      <anchor>a4dc32f5073902fef0c6fb65725ad49f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mWidth</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_obj.html</anchorfile>
      <anchor>a5bf2d7725723833f75e2d74fe0948c9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mHeight</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_obj.html</anchorfile>
      <anchor>af5df16da00ec3b6115087f5420ad56de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Format</type>
      <name>mFormat</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_obj.html</anchorfile>
      <anchor>a85e95ff26f630c6f2c5959a649764852</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLuint</type>
      <name>mId</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_obj.html</anchorfile>
      <anchor>a037d97c96cf1da8c827068a8a0c197fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLuint</type>
      <name>mResolveFramebufferId</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_obj.html</anchorfile>
      <anchor>aa9bcac75d6af8f1a8d5828f4fd0f8660</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Renderbuffer &gt;</type>
      <name>mMultisampleColorRenderbuffers</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_obj.html</anchorfile>
      <anchor>a7df473e3cef59890ba80145069706f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Renderbuffer</type>
      <name>mMultisampleDepthRenderbuffer</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_obj.html</anchorfile>
      <anchor>a28176ed17858ac72394cfb82389b99fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Texture &gt;</type>
      <name>mColorTextures</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_obj.html</anchorfile>
      <anchor>aa0d02e5d33ccd6a0bbd209704412d4ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Texture</type>
      <name>mDepthTexture</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_obj.html</anchorfile>
      <anchor>a65c84a31d73b3b01b86a6c0091fa47be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Renderbuffer</type>
      <name>mDepthRenderbuffer</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_obj.html</anchorfile>
      <anchor>a50f0177676e37d23d4f89748665bf3ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mNeedsResolve</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_obj.html</anchorfile>
      <anchor>a949aaa81aa8272dc19224a1990beeb9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mNeedsMipmapUpdate</name>
      <anchorfile>structcinder_1_1gl_1_1_fbo_1_1_obj.html</anchorfile>
      <anchor>ab9503e1ffd88053db9240a873b0001a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::FboException</name>
    <filename>classcinder_1_1gl_1_1_fbo_exception.html</filename>
    <base>cinder::gl::Exception</base>
  </compound>
  <compound kind="class">
    <name>cinder::gl::FboExceptionInvalidSpecification</name>
    <filename>classcinder_1_1gl_1_1_fbo_exception_invalid_specification.html</filename>
    <base>cinder::gl::FboException</base>
    <member kind="function">
      <type></type>
      <name>FboExceptionInvalidSpecification</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo_exception_invalid_specification.html</anchorfile>
      <anchor>abaa9b644e17e7aa185ef8d5190193fa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FboExceptionInvalidSpecification</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo_exception_invalid_specification.html</anchorfile>
      <anchor>aa6d180ccf5a37290729ebfd69a3913af</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classcinder_1_1gl_1_1_fbo_exception_invalid_specification.html</anchorfile>
      <anchor>afdefcf815f7741d182ea34580bbc1f6d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::gl::SaveTextureBindState</name>
    <filename>structcinder_1_1gl_1_1_save_texture_bind_state.html</filename>
    <member kind="function">
      <type></type>
      <name>SaveTextureBindState</name>
      <anchorfile>structcinder_1_1gl_1_1_save_texture_bind_state.html</anchorfile>
      <anchor>a1738417b33d58693e8a2ca15d27eef0b</anchor>
      <arglist>(GLint target)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SaveTextureBindState</name>
      <anchorfile>structcinder_1_1gl_1_1_save_texture_bind_state.html</anchorfile>
      <anchor>afe87af7e599dc3c0d52a42d74a495e8f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::gl::BoolState</name>
    <filename>structcinder_1_1gl_1_1_bool_state.html</filename>
    <member kind="function">
      <type></type>
      <name>BoolState</name>
      <anchorfile>structcinder_1_1gl_1_1_bool_state.html</anchorfile>
      <anchor>a6479f69423b610d882f4166c7e043bc9</anchor>
      <arglist>(GLint target)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoolState</name>
      <anchorfile>structcinder_1_1gl_1_1_bool_state.html</anchorfile>
      <anchor>a8b00c4113f1d2be2a6310be75aef4b41</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::gl::ClientBoolState</name>
    <filename>structcinder_1_1gl_1_1_client_bool_state.html</filename>
    <member kind="function">
      <type></type>
      <name>ClientBoolState</name>
      <anchorfile>structcinder_1_1gl_1_1_client_bool_state.html</anchorfile>
      <anchor>a141c42b0a2186ca402e13e32a5e1c0e8</anchor>
      <arglist>(GLint target)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ClientBoolState</name>
      <anchorfile>structcinder_1_1gl_1_1_client_bool_state.html</anchorfile>
      <anchor>abc705f7fd53a820f47237751ecfb4036</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::gl::SaveColorState</name>
    <filename>structcinder_1_1gl_1_1_save_color_state.html</filename>
    <member kind="function">
      <type></type>
      <name>SaveColorState</name>
      <anchorfile>structcinder_1_1gl_1_1_save_color_state.html</anchorfile>
      <anchor>aae92a206af9e9d2df65c0e3793ff58cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SaveColorState</name>
      <anchorfile>structcinder_1_1gl_1_1_save_color_state.html</anchorfile>
      <anchor>a24c43e3ce7bb9e0133b4f3dc66729865</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::gl::SaveFramebufferBinding</name>
    <filename>structcinder_1_1gl_1_1_save_framebuffer_binding.html</filename>
    <member kind="function">
      <type></type>
      <name>SaveFramebufferBinding</name>
      <anchorfile>structcinder_1_1gl_1_1_save_framebuffer_binding.html</anchorfile>
      <anchor>ad7c5f551d4c1f2f19f6b36041e69a6a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SaveFramebufferBinding</name>
      <anchorfile>structcinder_1_1gl_1_1_save_framebuffer_binding.html</anchorfile>
      <anchor>a4997cacdde5db609141bb90e27f40177</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::Exception</name>
    <filename>classcinder_1_1gl_1_1_exception.html</filename>
    <base>cinder::Exception</base>
  </compound>
  <compound kind="class">
    <name>cinder::gl::ExceptionUnknownTarget</name>
    <filename>classcinder_1_1gl_1_1_exception_unknown_target.html</filename>
    <base>cinder::gl::Exception</base>
  </compound>
  <compound kind="class">
    <name>cinder::gl::GlslProg</name>
    <filename>classcinder_1_1gl_1_1_glsl_prog.html</filename>
    <class kind="struct">cinder::gl::GlslProg::Obj</class>
    <member kind="function">
      <type></type>
      <name>GlslProg</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>abb079b976d9dc3c783b5ce4d901b84bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlslProg</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>ab60a6dfad70a1fbae0ce67987d154261</anchor>
      <arglist>(DataSourceRef vertexShader, DataSourceRef fragmentShader=DataSourceRef(), DataSourceRef geometryShader=DataSourceRef(), GLint geometryInputType=GL_POINTS, GLint geometryOutputType=GL_TRIANGLES, GLint geometryOutputVertices=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlslProg</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>a081dcf35509f2cea9cd40d7f2c73ed12</anchor>
      <arglist>(const char *vertexShader, const char *fragmentShader=0, const char *geometryShader=0, GLint geometryInputType=GL_POINTS, GLint geometryOutputType=GL_TRIANGLES, GLint geometryOutputVertices=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>a163e7c31ab01b7407e086c76da25745f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>getHandle</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>a4d037908b516427ce261880ca4b42a48</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniform</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>a2a210fdb257b7d64155b6fb6c838f097</anchor>
      <arglist>(const std::string &amp;name, int data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniform</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>ab64fc2f2aec809dee19ec6550b427490</anchor>
      <arglist>(const std::string &amp;name, const Vec2i &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniform</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>a0440712fc01d70eb018962730f3fc17c</anchor>
      <arglist>(const std::string &amp;name, const int *data, int count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniform</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>a14f91a83e1ccf5fd6d81bb175e3e1524</anchor>
      <arglist>(const std::string &amp;name, const Vec2i *data, int count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniform</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>ad91c16aa5622f7a888b7004f432e48cf</anchor>
      <arglist>(const std::string &amp;name, float data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniform</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>ab545ec7abea5b086775139c1bcdc984d</anchor>
      <arglist>(const std::string &amp;name, const Vec2f &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniform</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>afece574da814c3364e8f52898328095a</anchor>
      <arglist>(const std::string &amp;name, const Vec3f &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniform</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>a7a86255bbf27facb503b03d1dd2368ec</anchor>
      <arglist>(const std::string &amp;name, const Vec4f &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniform</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>ab04c7b6bd645b7d913295015a4744e6a</anchor>
      <arglist>(const std::string &amp;name, const Color &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniform</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>ae6ff892ed7781fb6ed9df0ecd35ec3b2</anchor>
      <arglist>(const std::string &amp;name, const ColorA &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniform</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>ab40c4bf55eea5c0d3f60ef3b7a4b1794</anchor>
      <arglist>(const std::string &amp;name, const Matrix22f &amp;data, bool transpose=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniform</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>ad54890c0e3886f33ebbef32ff9bf3f09</anchor>
      <arglist>(const std::string &amp;name, const Matrix33f &amp;data, bool transpose=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniform</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>af6f22b8b190f2b3d1bd95990de2900e9</anchor>
      <arglist>(const std::string &amp;name, const Matrix44f &amp;data, bool transpose=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniform</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>a5d82b3ab0dd97ffa97c6b09a90bcd14d</anchor>
      <arglist>(const std::string &amp;name, const float *data, int count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniform</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>a4e68ad40c001bd795466d17aca19a045</anchor>
      <arglist>(const std::string &amp;name, const Vec2f *data, int count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniform</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>a255fbdddfa3539ce6ee8a25d13d8c635</anchor>
      <arglist>(const std::string &amp;name, const Vec3f *data, int count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniform</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>aa103956a3c418c22e87e60d3bff4539c</anchor>
      <arglist>(const std::string &amp;name, const Vec4f *data, int count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniform</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>a22faa35fd46881c21ee8c795f9fc76d1</anchor>
      <arglist>(const std::string &amp;name, const Matrix22f *data, int count, bool transpose=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniform</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>a9f00d34a668a5aaf50eae6d297198510</anchor>
      <arglist>(const std::string &amp;name, const Matrix33f *data, int count, bool transpose=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uniform</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>afdc5c7445c99cc31332954fde4299c29</anchor>
      <arglist>(const std::string &amp;name, const Matrix44f *data, int count, bool transpose=false)</arglist>
    </member>
    <member kind="function">
      <type>GLint</type>
      <name>getUniformLocation</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>ab69bfbdb4a6a9c9beb13ad045c6780dc</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>GLint</type>
      <name>getAttribLocation</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>a3f70f41f1fcc1aaae6b8a7628522320e</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getShaderLog</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>a1e448a64b1205cdc6fa3270151dc3f50</anchor>
      <arglist>(GLuint handle) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlslProgRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>ad39758cf76ca6b6b1b3a06b8a2ac9bca</anchor>
      <arglist>(DataSourceRef vertexShader, DataSourceRef fragmentShader=DataSourceRef(), DataSourceRef geometryShader=DataSourceRef(), GLint geometryInputType=GL_POINTS, GLint geometryOutputType=GL_TRIANGLES, GLint geometryOutputVertices=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GlslProgRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>ae421c1eccd297133f9f4f2684c83df0e</anchor>
      <arglist>(const char *vertexShader, const char *fragmentShader=0, const char *geometryShader=0, GLint geometryInputType=GL_POINTS, GLint geometryOutputType=GL_TRIANGLES, GLint geometryOutputVertices=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unbind</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>a7de605753187bfabf14daeb0b567d563</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadShader</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>a0d48db093b39c02d6f0ea5bed8bfd1c8</anchor>
      <arglist>(Buffer shaderSourceBuffer, GLint shaderType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>loadShader</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>a3a96397061f936ec4db31dc83ba81fae</anchor>
      <arglist>(const char *shaderSource, GLint shaderType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>attachShaders</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>a9ad4f4201ea86463013dcdf71e737eeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>link</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>abc13a984b5581c7e13418ffff0564f38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Obj &gt;</type>
      <name>mObj</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>ac62fdf5a98392a7c10f9211899c967f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Obj &gt; GlslProg::*</type>
      <name>unspecified_bool_type</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>a5f0eba7041d1aad58fc79630551cec0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unspecified_bool_type</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>afd233957607112bea47f547dc0121c68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog.html</anchorfile>
      <anchor>a937cfc7755cd7632899f684b5cfc3954</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::gl::GlslProg::Obj</name>
    <filename>structcinder_1_1gl_1_1_glsl_prog_1_1_obj.html</filename>
    <member kind="function">
      <type></type>
      <name>Obj</name>
      <anchorfile>structcinder_1_1gl_1_1_glsl_prog_1_1_obj.html</anchorfile>
      <anchor>a00b5b89ad9c5c7e298ffb05482822d00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Obj</name>
      <anchorfile>structcinder_1_1gl_1_1_glsl_prog_1_1_obj.html</anchorfile>
      <anchor>a74ef03c351d47228c68f203a83143146</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>GLuint</type>
      <name>mHandle</name>
      <anchorfile>structcinder_1_1gl_1_1_glsl_prog_1_1_obj.html</anchorfile>
      <anchor>a6fa3e912ca0eab867b45750a38168b69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, int &gt;</type>
      <name>mUniformLocs</name>
      <anchorfile>structcinder_1_1gl_1_1_glsl_prog_1_1_obj.html</anchorfile>
      <anchor>a7a34b6f803dca13cdeca229a0527bbef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::GlslProgCompileExc</name>
    <filename>classcinder_1_1gl_1_1_glsl_prog_compile_exc.html</filename>
    <member kind="function">
      <type></type>
      <name>GlslProgCompileExc</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog_compile_exc.html</anchorfile>
      <anchor>aafb73e50af13b1d659ead68de7ca6d87</anchor>
      <arglist>(const std::string &amp;log, GLint aShaderType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_prog_compile_exc.html</anchorfile>
      <anchor>a85b44715ef7ff0b0569b58f35e1b8ee0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::GlslNullProgramExc</name>
    <filename>classcinder_1_1gl_1_1_glsl_null_program_exc.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classcinder_1_1gl_1_1_glsl_null_program_exc.html</anchorfile>
      <anchor>a483410d8c54bd769e55ad2127a60a73d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::Light</name>
    <filename>classcinder_1_1gl_1_1_light.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a92b3c3fd3ac57da457869f96bc05f57b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>POINT</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a92b3c3fd3ac57da457869f96bc05f57ba3764c68d2732cefc9e3f4ed7f24c9f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DIRECTIONAL</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a92b3c3fd3ac57da457869f96bc05f57ba1d07e6745b6e2456fcc3fd7a4c9d6ed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SPOTLIGHT</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a92b3c3fd3ac57da457869f96bc05f57ba55f9d140b90279703200ed9add2367b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Light</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>abead80f7c67bcf3bdcfb58dc5740f033</anchor>
      <arglist>(int aType, int aID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmbient</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a195b3cef1792356d4ad3ee7c26365160</anchor>
      <arglist>(const Color &amp;aAmbient)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDiffuse</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a7bd03366577e7d4a120a89aba8771b8d</anchor>
      <arglist>(const Color &amp;aDiffuse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpecular</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a7b9ecf8b005c1b0e93d1a636cfe169c2</anchor>
      <arglist>(const Color &amp;aSpecular)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lookAt</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>aadd8a7b629b0ecb996a39149918fa723</anchor>
      <arglist>(const Vec3f &amp;eye, const Vec3f &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirection</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a970711346a8b4bf50bcf6f55e08b29c4</anchor>
      <arglist>(const Vec3f &amp;aDirection)</arglist>
    </member>
    <member kind="function">
      <type>Vec3f</type>
      <name>getPosition</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a2fa6743e670295065cb94dfac05ba6ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>aa8a23bb758e4e4a0679e294d7922ac09</anchor>
      <arglist>(const Vec3f &amp;aPosition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttenuation</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a9bcf5e6bbbdb09a7f244784c1a5c99b7</anchor>
      <arglist>(float aConstantAttenuation, float aLinearAttenuation=1.0f, float aQuadraticAttenuation=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstantAttenuation</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>ae6e9869ce63b183aeccc346ceb43f501</anchor>
      <arglist>(float aConstantAttenuation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearAttenuation</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>ae0f43222a5aa4a70c02cdb139f84ca85</anchor>
      <arglist>(float aLinearAttenuation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuadraticAttenuation</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a45992f838d49ead8e6f7ce0b9cf4883d</anchor>
      <arglist>(float aQuadraticAttenuation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpotExponent</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a359a986f32fba6579b5663f2a69fec44</anchor>
      <arglist>(float aSpotExponent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpotCutoff</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>abcda43394166ab1d311aecbeb57358fa</anchor>
      <arglist>(float aSpotCutoff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a2e1231edb42d3c878401a453d3cb0e8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>aa4d9f0f1843e1d6801053faadc009f39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a1dd01e82bca0f69d494b9c567c67b636</anchor>
      <arglist>(const Camera &amp;relativeCamera) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShadowParams</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>aacf5614995b7e8db58cdc67aa513e253</anchor>
      <arglist>(float aShadowFOV, float aShadowNear, float aShadowFar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShadowRenderMatrices</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a4b40ca1ee8336279a0ea06de476abe73</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Matrix44f</type>
      <name>getShadowTransformationMatrix</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a70a70ff09877f4d1992140f59d335542</anchor>
      <arglist>(const Camera &amp;camera) const </arglist>
    </member>
    <member kind="function">
      <type>const CameraPersp &amp;</type>
      <name>getShadowCamera</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a60de54e47feddd842ad9d042ab6a14d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDefaults</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a1f04120f859e5d86de0a42268f4d746b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mType</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a5b75d90425b64a10b4df455aee9fb5b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mID</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a0334f7b830ced407284c1d011cc0da40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mEnabled</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a5fe4780f1e952348ef386b5d154f217d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Color</type>
      <name>mAmbient</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a032062c43869ecb330989042034b10a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Color</type>
      <name>mDiffuse</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a1df12149974522b8d3d5f196dc262837</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Color</type>
      <name>mSpecular</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a92fe37b2c0df5c24f9d55be6b1002474</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>mPosition</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a176a2d7153110add6d302a73581ab053</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec3f</type>
      <name>mDirection</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a940b678a1a5aa187d116847d301fc67f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mSpotExponent</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>ad2b7b77d87ee12b6c26d3ca669d1d263</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mSpotCutoff</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a4b4dcd8a1d4c5d0b4b74aca15576cf7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mConstantAttenuation</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>ab0e89918866ecfc4245c0163bc112227</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mLinearAttenuation</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a3b75b0a3920537695808f93988ea8756</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mQuadraticAttenuation</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a7a7ef2752f0074298f84d5387013e23b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CameraPersp</type>
      <name>mShadowCam</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a9f048824075840fa555c7800c24a1556</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mShadowFOV</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a867f13c1d78b507299af9ba9e8810a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mShadowNear</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>a0f20440eb811c60de93a732d8216abfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mShadowFar</name>
      <anchorfile>classcinder_1_1gl_1_1_light.html</anchorfile>
      <anchor>ab96f07d2d352273d1115bb042ccfdc16</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::Material</name>
    <filename>classcinder_1_1gl_1_1_material.html</filename>
    <member kind="function">
      <type></type>
      <name>Material</name>
      <anchorfile>classcinder_1_1gl_1_1_material.html</anchorfile>
      <anchor>ac8a4d3c76a97d38b15d462db6daf8ec2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Material</name>
      <anchorfile>classcinder_1_1gl_1_1_material.html</anchorfile>
      <anchor>a2ec6d6e24a016a1d97013966e176e004</anchor>
      <arglist>(const ColorA &amp;aAmbient, const ColorA &amp;aDiffuse=ColorA(0, 0, 0, 1), const ColorA &amp;aSpecular=ColorA(0, 0, 0, 1), float aShininess=1.0f, const ColorA &amp;aEmission=ColorA(0, 0, 0, 1), GLenum aFace=GL_FRONT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>classcinder_1_1gl_1_1_material.html</anchorfile>
      <anchor>ace34d00aad6bcc95f2edfa6213843d08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmbient</name>
      <anchorfile>classcinder_1_1gl_1_1_material.html</anchorfile>
      <anchor>a28b0528b72a9df9c6b780498c1d6dac0</anchor>
      <arglist>(const ColorA &amp;aAmbient)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDiffuse</name>
      <anchorfile>classcinder_1_1gl_1_1_material.html</anchorfile>
      <anchor>a94bbfe1010a86e931b990476f759509f</anchor>
      <arglist>(const ColorA &amp;aDiffuse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpecular</name>
      <anchorfile>classcinder_1_1gl_1_1_material.html</anchorfile>
      <anchor>a5df5e40f7793d54b954cc9744cbb7dbe</anchor>
      <arglist>(const ColorA &amp;aSpecular)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShininess</name>
      <anchorfile>classcinder_1_1gl_1_1_material.html</anchorfile>
      <anchor>a162f65ed5c8d7491020268003808eb87</anchor>
      <arglist>(float aShininess)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEmission</name>
      <anchorfile>classcinder_1_1gl_1_1_material.html</anchorfile>
      <anchor>a4af8562b4e7726929608d4dc0ac99ec1</anchor>
      <arglist>(const ColorA &amp;aEmission)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFace</name>
      <anchorfile>classcinder_1_1gl_1_1_material.html</anchorfile>
      <anchor>a79bd34108ec8f964f891882a175750c0</anchor>
      <arglist>(GLenum aFace)</arglist>
    </member>
    <member kind="function">
      <type>ColorA</type>
      <name>getAmbient</name>
      <anchorfile>classcinder_1_1gl_1_1_material.html</anchorfile>
      <anchor>ac78e0aa5688d75249745e6257a7ab45d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColorA</type>
      <name>getDiffuse</name>
      <anchorfile>classcinder_1_1gl_1_1_material.html</anchorfile>
      <anchor>a09cf84bc6bb81379712bf5c1c01eaa7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColorA</type>
      <name>getSpecular</name>
      <anchorfile>classcinder_1_1gl_1_1_material.html</anchorfile>
      <anchor>a3f44d79355023f06a82bdf22512e0a81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getShininess</name>
      <anchorfile>classcinder_1_1gl_1_1_material.html</anchorfile>
      <anchor>a9d3fabee93df1b273e6edb71bff96c66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ColorA</type>
      <name>getEmission</name>
      <anchorfile>classcinder_1_1gl_1_1_material.html</anchorfile>
      <anchor>a8ef5d58ded613988c41edc258fb2f597</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>getFace</name>
      <anchorfile>classcinder_1_1gl_1_1_material.html</anchorfile>
      <anchor>abc7f99923443b79e1048b058bc3ec90e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ColorA</type>
      <name>mAmbient</name>
      <anchorfile>classcinder_1_1gl_1_1_material.html</anchorfile>
      <anchor>ae9352189823ebe4958a06fbb2fb5e44a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ColorA</type>
      <name>mDiffuse</name>
      <anchorfile>classcinder_1_1gl_1_1_material.html</anchorfile>
      <anchor>a68a9f250a51a13f705391bddd71cd957</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ColorA</type>
      <name>mSpecular</name>
      <anchorfile>classcinder_1_1gl_1_1_material.html</anchorfile>
      <anchor>a543a9cc1c54ab46479f1dd64a3fe214e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mShininess</name>
      <anchorfile>classcinder_1_1gl_1_1_material.html</anchorfile>
      <anchor>a362787ed614eec4ff9205d52d96a1027</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ColorA</type>
      <name>mEmission</name>
      <anchorfile>classcinder_1_1gl_1_1_material.html</anchorfile>
      <anchor>a368a7cbbf1e4c2a775324006de5f69ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GLenum</type>
      <name>mFace</name>
      <anchorfile>classcinder_1_1gl_1_1_material.html</anchorfile>
      <anchor>a2f69c10109251237edd2957fe87c029a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::StereoAutoFocuser</name>
    <filename>classcinder_1_1gl_1_1_stereo_auto_focuser.html</filename>
    <member kind="function">
      <type></type>
      <name>StereoAutoFocuser</name>
      <anchorfile>classcinder_1_1gl_1_1_stereo_auto_focuser.html</anchorfile>
      <anchor>a29b8ff2d7e65a2aceecd8b8a6dd37f86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>autoFocus</name>
      <anchorfile>classcinder_1_1gl_1_1_stereo_auto_focuser.html</anchorfile>
      <anchor>ab910bed5dc2546dd15e5fbabeb1916df</anchor>
      <arglist>(CameraStereo *cam, const Area &amp;area=gl::getViewport())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>autoFocus</name>
      <anchorfile>classcinder_1_1gl_1_1_stereo_auto_focuser.html</anchorfile>
      <anchor>ae3675b224a6cc68b27838ca899d6e792</anchor>
      <arglist>(CameraStereo *cam, const gl::Fbo &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getSpeed</name>
      <anchorfile>classcinder_1_1gl_1_1_stereo_auto_focuser.html</anchorfile>
      <anchor>adcabc74f5b27fe87c7b797ad919e0686</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>classcinder_1_1gl_1_1_stereo_auto_focuser.html</anchorfile>
      <anchor>a6b957c7ec4ce35ddba0e6db7e73c70d9</anchor>
      <arglist>(float factor)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDepth</name>
      <anchorfile>classcinder_1_1gl_1_1_stereo_auto_focuser.html</anchorfile>
      <anchor>a834a283ffa176cb52b5b8fb55769fda4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDepth</name>
      <anchorfile>classcinder_1_1gl_1_1_stereo_auto_focuser.html</anchorfile>
      <anchor>a4400279d72ec7199dcae43a135280bae</anchor>
      <arglist>(float factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classcinder_1_1gl_1_1_stereo_auto_focuser.html</anchorfile>
      <anchor>a8d1750a362992402b8b716e295625721</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>AF_WIDTH</name>
      <anchorfile>classcinder_1_1gl_1_1_stereo_auto_focuser.html</anchorfile>
      <anchor>afc403d2791176e4f3ed5c188c03929e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>AF_HEIGHT</name>
      <anchorfile>classcinder_1_1gl_1_1_stereo_auto_focuser.html</anchorfile>
      <anchor>ace51715ff1c53822a8cd533a16ac9c46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::Texture</name>
    <filename>classcinder_1_1gl_1_1_texture.html</filename>
    <class kind="struct">cinder::gl::Texture::Format</class>
    <class kind="struct">cinder::gl::Texture::Obj</class>
    <member kind="function">
      <type></type>
      <name>Texture</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a7739d036ab903ae346465d445308f52e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Texture</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a94edb2965e8e2c6bca551edf3d6f1224</anchor>
      <arglist>(int aWidth, int aHeight, Format format=Format())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Texture</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a0bccc4a4558b2cd219b0cacb3f0449fd</anchor>
      <arglist>(const unsigned char *data, int dataFormat, int aWidth, int aHeight, Format format=Format())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Texture</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a1e4563acc238c7cfe7a4ea2652eb3b87</anchor>
      <arglist>(const Surface8u &amp;surface, Format format=Format())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Texture</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a2df8d14278085c96c0c325ddd39f39c7</anchor>
      <arglist>(const Surface32f &amp;surface, Format format=Format())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Texture</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>ad3899f43b8bd2f8ec01c8a50973d26f7</anchor>
      <arglist>(const Channel8u &amp;channel, Format format=Format())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Texture</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>ad082e60d94871964c6f5c30a4c5846b7</anchor>
      <arglist>(const Channel32f &amp;channel, Format format=Format())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Texture</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a1b8b4dd36fef5a0512cbc6e25076e52d</anchor>
      <arglist>(ImageSourceRef imageSource, Format format=Format())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Texture</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a46e1a59b723a42f9ddaacf72cf6d0c09</anchor>
      <arglist>(GLenum aTarget, GLuint aTextureID, int aWidth, int aHeight, bool aDoNotDispose)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDoNotDispose</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>aaf2135a8ccc62b01c0aa10a01649e9ff</anchor>
      <arglist>(bool aDoNotDispose=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeallocator</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>abd4ee18fbf647010d4db023afbd05e57</anchor>
      <arglist>(void(*aDeallocatorFunc)(void *), void *aDeallocatorRefcon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrap</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a941092d9adee5a63cf0ef69ec6f8ceaf</anchor>
      <arglist>(GLenum wrapS, GLenum wrapT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrapS</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a53a37327ee80b969b7e77d49d607712f</anchor>
      <arglist>(GLenum wrapS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrapT</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a701c61b063259cafd353bda07aa15879</anchor>
      <arglist>(GLenum wrapT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinFilter</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a5bff77ae5e8beea724c94acf8f7c1e65</anchor>
      <arglist>(GLenum minFilter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMagFilter</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>afd57c3e9c37dc91f0cfaebbadd2a4535</anchor>
      <arglist>(GLenum magFilter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCleanTexCoords</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>aee0977c074df4c7e0be88890dda3a46e</anchor>
      <arglist>(float maxU, float maxV)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>ac7514ae59e1e95a15ee91517dc78054f</anchor>
      <arglist>(const Surface &amp;surface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a8a3fdb2e8f90f57527a186884f9eb7fd</anchor>
      <arglist>(const Surface32f &amp;surface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>ad482f4936094a22b28a3027f38ae5ef3</anchor>
      <arglist>(const Surface &amp;surface, const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>aa1f7957093884bc31fe336e755683856</anchor>
      <arglist>(const Channel32f &amp;channel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a22c529eb37a34e80ae755551b4ea3b4b</anchor>
      <arglist>(const Channel8u &amp;channel, const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>GLint</type>
      <name>getWidth</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a7615818f1bb23d29eaec58686000e168</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLint</type>
      <name>getHeight</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a7d854871bdba9bba5213516417689ff7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLint</type>
      <name>getCleanWidth</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a3defd9e39849cf22fd10e7c7d29dfa1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLint</type>
      <name>getCleanHeight</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a99a2cf13a8a5603a789e3599678f0345</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getSize</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a3fe0404109db678d8f5de037100cd1aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAspectRatio</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>aac19786839ec48048ca18aec260017ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>getBounds</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>acdac54f7b6e729ac62535051aebea66a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>getCleanBounds</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a83d38286a8630e4f4808cc58d33da625</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAlpha</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>af4ed6baceb66d54ae279ab6f18d90b4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getLeft</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a2a0922c2d8b781204ba2affddaa317ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRight</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a9b689bbc163ddcbfbfc590d5163b5cf7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getTop</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a5c4dfa200641ce1d739a1fd641e195c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getBottom</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a74c4224937d1d540b9e511d45d01d3ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMaxU</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a70e782aa6123e687750ab65ba4bcbf26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMaxV</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a604a8301dc54274d2f58e35e6c04d4be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rectf</type>
      <name>getAreaTexCoords</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a759ed10f704c0b7e30fe22d5e4f93fe1</anchor>
      <arglist>(const Area &amp;area) const </arglist>
    </member>
    <member kind="function">
      <type>GLint</type>
      <name>getInternalFormat</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a3d46fdc28981e9478b0f6ee91383157f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>getId</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>acb5b7270690679e4c9339c408e7c19d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>getTarget</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a2a970eb6fbcccdcea6b850bfae15396f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFlipped</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a2756e73144c58bd489b68f3a116998ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFlipped</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>afba3883c88bc7a975fdfd4d754555770</anchor>
      <arglist>(bool aFlipped=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableAndBind</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a24df1dfd00c73271dda956b8f1dbcd7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a7c5624fb7c17048e2b0551316faa4b28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>acdd83cbd54ac8e923335f5d8a33baba8</anchor>
      <arglist>(GLuint textureUnit=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unbind</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a452e5ed804782029213f4025e40699fd</anchor>
      <arglist>(GLuint textureUnit=0) const </arglist>
    </member>
    <member kind="function">
      <type>Texture</type>
      <name>weakClone</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a0263106bdb5b5ffece5002081e84872e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ImageSourceRef</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a2bddaed0fe0ed415f3f586689770b4cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextureRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a174fd44efa2481fd546831e2ea5ba92a</anchor>
      <arglist>(int width, int height, Format format=Format())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextureRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>aafbba9927f2d1607c82c6a6dd916f3da</anchor>
      <arglist>(const unsigned char *data, int dataFormat, int width, int height, Format format=Format())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextureRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a1ed6f006d39b637989e8a37968a5012b</anchor>
      <arglist>(const Surface8u &amp;surface, Format format=Format())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextureRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a6bf651bf9fe65765b0e71a6889a7ca5a</anchor>
      <arglist>(const Surface32f &amp;surface, Format format=Format())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextureRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a746e3c85d7d75ffff48c6ec0014ad969</anchor>
      <arglist>(const Channel8u &amp;channel, Format format=Format())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextureRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>ac64f58fe19b1ac1c062fcdb76e14ac25</anchor>
      <arglist>(const Channel32f &amp;channel, Format format=Format())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextureRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>ab311f18f121cedf77621c0ceef9c10ce</anchor>
      <arglist>(ImageSourceRef imageSource, Format format=Format())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextureRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a2fbbf585698819695e4bcab94094e86f</anchor>
      <arglist>(GLenum target, GLuint textureId, int width, int height, bool doNotDispose)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Texture</type>
      <name>loadDds</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a825ad21148297eb56133dd7bf420d7bf</anchor>
      <arglist>(IStreamRef ddsStream, Format format)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>SurfaceChannelOrderToDataFormatAndType</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a723a0b3826cdf6bc5f4680e0d9728b78</anchor>
      <arglist>(const SurfaceChannelOrder &amp;sco, GLint *dataFormat, GLenum *type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>dataFormatHasAlpha</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a6218f7e639f8a74557d02b023c8473f5</anchor>
      <arglist>(GLint dataFormat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>dataFormatHasColor</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a0f5a0f1f17c742b4d59fe6603ca31530</anchor>
      <arglist>(GLint dataFormat)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a27abd4e9ecebeec37d573cfbe3c1fa4f</anchor>
      <arglist>(const unsigned char *data, int unpackRowLength, GLenum dataFormat, GLenum type, const Format &amp;format)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a6a59e168ac5095cdf30efe6ef1c39dd5</anchor>
      <arglist>(const float *data, GLint dataFormat, const Format &amp;format)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a04b19ef5a2aaad131733a538b00209ed</anchor>
      <arglist>(ImageSourceRef imageSource, const Format &amp;format)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Obj &gt;</type>
      <name>mObj</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a1e243f0766139aab9116abfacea89c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Obj &gt; Texture::*</type>
      <name>unspecified_bool_type</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a801215da6d63e5c1b6d30f9d79387489</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unspecified_bool_type</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a037d378657ba922515c9e6b5ae373ea6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classcinder_1_1gl_1_1_texture.html</anchorfile>
      <anchor>a978bd8bc8c359c0f41774fce0670873e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::gl::Texture::Format</name>
    <filename>structcinder_1_1gl_1_1_texture_1_1_format.html</filename>
    <member kind="function">
      <type></type>
      <name>Format</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>a68a467b1b23897ccdeefe0650e2f6719</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTarget</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>aed0d324de593ad423bd1367390c86d51</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetRect</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>ae9431c6872bc561c0437b5a96f1514e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableMipmapping</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>a3e5896e0649a56c57372614f4e514687</anchor>
      <arglist>(bool enableMipmapping=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInternalFormat</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>a8d1ce062c1fdcdac08cfbbfc59b5af8b</anchor>
      <arglist>(GLint internalFormat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAutoInternalFormat</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>a71f0c1ee10b8ae60671617da3f0d739c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrap</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>aafcab3ac795472ee8a7ffae6581932f3</anchor>
      <arglist>(GLenum wrapS, GLenum wrapT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrapS</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>a0524d8b5a55b8fa8ff81836f5c8ba45d</anchor>
      <arglist>(GLenum wrapS)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWrapT</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>aef6f1537c68497d989df049d06c3d7b0</anchor>
      <arglist>(GLenum wrapT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinFilter</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>a832f8f34044fa69c4d611ee118c2299c</anchor>
      <arglist>(GLenum minFilter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMagFilter</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>ad54125636c4c3a5dba9a5b6a34e8545c</anchor>
      <arglist>(GLenum magFilter)</arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>getTarget</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>a5d576e2f1c1f736d3c212e2a5a77a570</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMipmapping</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>acbb1e3ad317af547ed875546d729f9ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLint</type>
      <name>getInternalFormat</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>a10d00c23b94775e3e53f10008137cdfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAutoInternalFormat</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>a20d633c94f54515d0a47cdc231768dae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>getWrapS</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>ac9e40b0db166b5e0eef1b06e07beddb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>getWrapT</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>ac273a46d13b987b8eb1191322badfdc4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>getMinFilter</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>a3332a37d004cee09c3c299451f0946e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>getMagFilter</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>aa84b33d90fcafd90697553c5b7e9d74b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GLenum</type>
      <name>mTarget</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>ac1d258aa803c5ff60a49dc41e28c9e87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GLenum</type>
      <name>mWrapS</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>afe1b0b5d08aefca240d521fb8338d55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GLenum</type>
      <name>mWrapT</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>a32084af4f691990db8dab491135010bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GLenum</type>
      <name>mMinFilter</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>aea21d0ade7188b6168d926f6dbf132d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GLenum</type>
      <name>mMagFilter</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>a8c9fb6db217dde587235cbcc4e0e625a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mMipmapping</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>aadfe0932dae2e06e4e2b3545a6fb9cc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GLint</type>
      <name>mInternalFormat</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>a13fc251beecbe9ee1c31255e123d60bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Texture</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_format.html</anchorfile>
      <anchor>af7f909106d08e36cd50aa58e36f9bf47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::gl::Texture::Obj</name>
    <filename>structcinder_1_1gl_1_1_texture_1_1_obj.html</filename>
    <member kind="function">
      <type></type>
      <name>Obj</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_obj.html</anchorfile>
      <anchor>a0ccb16370bd9a2a6226e53be1c2e26f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Obj</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_obj.html</anchorfile>
      <anchor>ae11f713efad6d2452dfbd509512202a9</anchor>
      <arglist>(int aWidth, int aHeight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Obj</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_obj.html</anchorfile>
      <anchor>a5f7580cd175cc30566fbe75abdc3a8f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>GLint</type>
      <name>mWidth</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_obj.html</anchorfile>
      <anchor>a4eae9f07a6dce920c4e5b6e76ffe9f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLint</type>
      <name>mHeight</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_obj.html</anchorfile>
      <anchor>a6d42fc8575b2e7ae156de40a30910579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLint</type>
      <name>mCleanWidth</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_obj.html</anchorfile>
      <anchor>af65516d5eca290fb860cb81f81fed872</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLint</type>
      <name>mCleanHeight</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_obj.html</anchorfile>
      <anchor>a1be2c4e8ab7ffde4f1b4a94fb4b0cecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mMaxU</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_obj.html</anchorfile>
      <anchor>acb21aedfa0aa80e37222480345689d45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mMaxV</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_obj.html</anchorfile>
      <anchor>a4c8d7b34cb979308dfd82a3309fe5f3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLint</type>
      <name>mInternalFormat</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_obj.html</anchorfile>
      <anchor>a3c9aedcc86da3984e351be864f908a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLenum</type>
      <name>mTarget</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_obj.html</anchorfile>
      <anchor>a75ff9ded1e53334de7bcaca76e73ad94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLuint</type>
      <name>mTextureID</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_obj.html</anchorfile>
      <anchor>afabcf08838dcb558abe6235429c93acf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mDoNotDispose</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_obj.html</anchorfile>
      <anchor>a3b710b37b65d08a882ccadc1ee5dd3f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mFlipped</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_obj.html</anchorfile>
      <anchor>a81143e08bbdad6e9e75dcb0184f7c29a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>mDeallocatorFunc</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_obj.html</anchorfile>
      <anchor>ac46cd488306f48a116ccaebcc368800b</anchor>
      <arglist>)(void *refcon)</arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>mDeallocatorRefcon</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_1_1_obj.html</anchorfile>
      <anchor>aabfa47f03c9744ceccbd457a5b132514</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::TextureCache</name>
    <filename>classcinder_1_1gl_1_1_texture_cache.html</filename>
    <class kind="struct">cinder::gl::TextureCache::Obj</class>
    <member kind="function">
      <type></type>
      <name>TextureCache</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_cache.html</anchorfile>
      <anchor>a443d6cfee0c266ce1f5c1ca22552e25b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TextureCache</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_cache.html</anchorfile>
      <anchor>a6fdb89489af1ec242f0b73b85b92d2d5</anchor>
      <arglist>(const Surface8u &amp;prototypeSurface, const Texture::Format &amp;format)</arglist>
    </member>
    <member kind="function">
      <type>gl::Texture</type>
      <name>cache</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_cache.html</anchorfile>
      <anchor>ad128dc619b87115d4dde541dd2b7fa7f</anchor>
      <arglist>(const Surface8u &amp;data)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Obj &gt;</type>
      <name>mObj</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_cache.html</anchorfile>
      <anchor>a988df70a0f71bde19a6fc19f681055bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Obj &gt; TextureCache::*</type>
      <name>unspecified_bool_type</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_cache.html</anchorfile>
      <anchor>a8520f890a7c179eb2cb98c8834ceceab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unspecified_bool_type</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_cache.html</anchorfile>
      <anchor>a6f8d8b0b6923a30fcf162be8c2d75efb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_cache.html</anchorfile>
      <anchor>adc7701a6f3ac55efbf33ec0095885702</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::gl::TextureCache::Obj</name>
    <filename>structcinder_1_1gl_1_1_texture_cache_1_1_obj.html</filename>
    <member kind="function">
      <type></type>
      <name>Obj</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_cache_1_1_obj.html</anchorfile>
      <anchor>a6fd73be21d6fb83bbd37d9f92df7f969</anchor>
      <arglist>(const Surface8u &amp;prototypeSurface, const Texture::Format &amp;format)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markTextureAsFree</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_cache_1_1_obj.html</anchorfile>
      <anchor>a20426b93748ee18331126a5ba425f311</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>TextureCacheDeallocator</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_cache_1_1_obj.html</anchorfile>
      <anchor>a24dff6ac94f131835734f0de22592e11</anchor>
      <arglist>(void *aDeallocatorRefcon)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mWidth</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_cache_1_1_obj.html</anchorfile>
      <anchor>ad05a05c11ce247286a6d430fad20376a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mHeight</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_cache_1_1_obj.html</anchorfile>
      <anchor>a915b0586a04933910c18f749c510f236</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Texture::Format</type>
      <name>mFormat</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_cache_1_1_obj.html</anchorfile>
      <anchor>a8d6a324f6ba36dd562a0ebc7dfc8291b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mNextId</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_cache_1_1_obj.html</anchorfile>
      <anchor>adaaf5141ef224da39d7833766abddbd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::pair&lt; int, gl::Texture &gt; &gt;</type>
      <name>mTextures</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_cache_1_1_obj.html</anchorfile>
      <anchor>a0d6f25793a60ec78a3b1b31037f1c77b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::SurfaceConstraintsGLTexture</name>
    <filename>classcinder_1_1gl_1_1_surface_constraints_g_l_texture.html</filename>
    <base>cinder::SurfaceConstraints</base>
    <member kind="function" virtualness="virtual">
      <type>virtual SurfaceChannelOrder</type>
      <name>getChannelOrder</name>
      <anchorfile>classcinder_1_1gl_1_1_surface_constraints_g_l_texture.html</anchorfile>
      <anchor>a429454689fef9bf11a6f512cb0b53d96</anchor>
      <arglist>(bool alpha) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32_t</type>
      <name>getRowBytes</name>
      <anchorfile>classcinder_1_1gl_1_1_surface_constraints_g_l_texture.html</anchorfile>
      <anchor>a8f0bbb79b277823dbebfce1902ecfd25</anchor>
      <arglist>(int requestedWidth, const SurfaceChannelOrder &amp;sco, int elementSize) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::TextureDataExc</name>
    <filename>classcinder_1_1gl_1_1_texture_data_exc.html</filename>
    <member kind="function">
      <type></type>
      <name>TextureDataExc</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_data_exc.html</anchorfile>
      <anchor>ae145bca850f42ff2ce972d6f147b7c96</anchor>
      <arglist>(const std::string &amp;log)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_data_exc.html</anchorfile>
      <anchor>a8ffacaa300fe2d3a2c8f3dcc73403be0</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::TextureFont</name>
    <filename>classcinder_1_1gl_1_1_texture_font.html</filename>
    <class kind="struct">cinder::gl::TextureFont::DrawOptions</class>
    <class kind="class">cinder::gl::TextureFont::Format</class>
    <class kind="struct">cinder::gl::TextureFont::GlyphInfo</class>
    <member kind="function">
      <type>void</type>
      <name>drawString</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>a0b714fd06a5833267321bdb6df06e4e0</anchor>
      <arglist>(const std::string &amp;str, const Vec2f &amp;baseline, const DrawOptions &amp;options=DrawOptions())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawString</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>afc70b66d863be6ce363c9129743f2b0e</anchor>
      <arglist>(const std::string &amp;str, const Rectf &amp;fitRect, const Vec2f &amp;offset=Vec2f::zero(), const DrawOptions &amp;options=DrawOptions())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawStringWrapped</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>a9984074c578f0367d683dc597b0ac0b2</anchor>
      <arglist>(const std::string &amp;str, const Rectf &amp;fitRect, const Vec2f &amp;offset=Vec2f::zero(), const DrawOptions &amp;options=DrawOptions())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawGlyphs</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>a25e1625169e8a1ef48ff4d801d5c62e5</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; uint16_t, Vec2f &gt; &gt; &amp;glyphMeasures, const Vec2f &amp;baseline, const DrawOptions &amp;options=DrawOptions(), const std::vector&lt; ColorA8u &gt; &amp;colors=std::vector&lt; ColorA8u &gt;())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawGlyphs</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>a83bf013c33fc64bd80093a5ff616e2f8</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; uint16_t, Vec2f &gt; &gt; &amp;glyphMeasures, const Rectf &amp;clip, Vec2f offset, const DrawOptions &amp;options=DrawOptions(), const std::vector&lt; ColorA8u &gt; &amp;colors=std::vector&lt; ColorA8u &gt;())</arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>measureString</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>a9e0410099147334d819116fcc40fcd76</anchor>
      <arglist>(const std::string &amp;str, const DrawOptions &amp;options=DrawOptions()) const </arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>measureStringWrapped</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>a202243fe7a8d9559b62f4361037186e3</anchor>
      <arglist>(const std::string &amp;str, const Rectf &amp;fitRect, const DrawOptions &amp;options=DrawOptions()) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::pair&lt; uint16_t, Vec2f &gt; &gt;</type>
      <name>getGlyphPlacements</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>a7591d36a5ec557f2dfb3c8a0676895b7</anchor>
      <arglist>(const std::string &amp;str, const DrawOptions &amp;options=DrawOptions()) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::pair&lt; uint16_t, Vec2f &gt; &gt;</type>
      <name>getGlyphPlacements</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>a21cf7f606f91a57d5a0a94f87b8ca73e</anchor>
      <arglist>(const std::string &amp;str, const Rectf &amp;fitRect, const DrawOptions &amp;options=DrawOptions()) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::pair&lt; uint16_t, Vec2f &gt; &gt;</type>
      <name>getGlyphPlacementsWrapped</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>a3cf3b89ff71b106cb89e641f46bd869b</anchor>
      <arglist>(const std::string &amp;str, const Rectf &amp;fitRect, const DrawOptions &amp;options=DrawOptions()) const </arglist>
    </member>
    <member kind="function">
      <type>const Font &amp;</type>
      <name>getFont</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>ac823b606530d7749cbfa9baffb6aa79a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>a190c846405f825a0d51f5768b35be686</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAscent</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>a8eaca6fe80e3899729676b028f42ccde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDescent</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>a0f368fa4f44f1055ebd23e2dc09de1e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPremultiplied</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>a42dd729be0c77300599494ad240aab82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TextureFontRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>a87215ce6eecc2ca822b0e1a02935d73d</anchor>
      <arglist>(const Font &amp;font, const Format &amp;format=Format(), const std::string &amp;supportedChars=TextureFont::defaultChars())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>defaultChars</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>af46daf21f17f296cf371022dc67a342d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TextureFont</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>ad7923627a7d8b1ce4cad726285f2c782</anchor>
      <arglist>(const Font &amp;font, const std::string &amp;supportedChars, const Format &amp;format)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unordered_map&lt; Font::Glyph, GlyphInfo &gt;</type>
      <name>mGlyphMap</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>ad325f66681ce877dc09822f880ebf48b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::unordered_map&lt; Font::Glyph, GlyphInfo &gt;</type>
      <name>mGlyphMap</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>a10aa85d243ae6ac584b077587bcf8b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; gl::Texture &gt;</type>
      <name>mTextures</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>ae339ebb84c9d705d7b73462b3ae28339</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Font</type>
      <name>mFont</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>a292e2b62333efdaa1a4bdb04acd48e5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Format</type>
      <name>mFormat</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font.html</anchorfile>
      <anchor>a52add659d64a040220246590b838db4a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::gl::TextureFont::DrawOptions</name>
    <filename>structcinder_1_1gl_1_1_texture_font_1_1_draw_options.html</filename>
    <member kind="function">
      <type></type>
      <name>DrawOptions</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_font_1_1_draw_options.html</anchorfile>
      <anchor>abeaf8b2f76b900649a5d047ea728aac4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getClipHorizontal</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_font_1_1_draw_options.html</anchorfile>
      <anchor>a96afbe61557361b520e485ac15b83afe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DrawOptions &amp;</type>
      <name>clipHorizontal</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_font_1_1_draw_options.html</anchorfile>
      <anchor>a1725d9b8fa0a6c2b084ede5c9f791678</anchor>
      <arglist>(bool clipH=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getClipVertical</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_font_1_1_draw_options.html</anchorfile>
      <anchor>ab63dfb04768f56c5a746dd83c147582b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DrawOptions &amp;</type>
      <name>clipVertical</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_font_1_1_draw_options.html</anchorfile>
      <anchor>a6dbf1bffaf4da62cb2cce49d64b026c9</anchor>
      <arglist>(bool clipV=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPixelSnap</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_font_1_1_draw_options.html</anchorfile>
      <anchor>a5f50aa6b1d9ebca2e438ebf180dc17fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DrawOptions &amp;</type>
      <name>pixelSnap</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_font_1_1_draw_options.html</anchorfile>
      <anchor>abc6407c001d917855a0e96aac84e12c1</anchor>
      <arglist>(bool pixelSnap=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getLigate</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_font_1_1_draw_options.html</anchorfile>
      <anchor>a8dcf5fb6a9bdf29d0cd772c7c86ccf87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DrawOptions &amp;</type>
      <name>ligate</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_font_1_1_draw_options.html</anchorfile>
      <anchor>a3ac1800c5348528141f36ed44cf555ef</anchor>
      <arglist>(bool useLigatures=true)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getScale</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_font_1_1_draw_options.html</anchorfile>
      <anchor>a25d7e7d75f91baab0a12f94a7a6609ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DrawOptions &amp;</type>
      <name>scale</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_font_1_1_draw_options.html</anchorfile>
      <anchor>a9523a62a4c411eabe8143f8a702d2558</anchor>
      <arglist>(float sc)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mClipHorizontal</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_font_1_1_draw_options.html</anchorfile>
      <anchor>a7b9e1c5ba139a7048ba1e72c701fc287</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mClipVertical</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_font_1_1_draw_options.html</anchorfile>
      <anchor>a497303eb3ab68d2883faa5315fa829e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mPixelSnap</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_font_1_1_draw_options.html</anchorfile>
      <anchor>a800d24936bac2bf1f311bcedc7d4d1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mLigate</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_font_1_1_draw_options.html</anchorfile>
      <anchor>a428c61d34bc24e54496a3099e3a6e5f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mScale</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_font_1_1_draw_options.html</anchorfile>
      <anchor>a397acd7434c46439762604d754885c0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::TextureFont::Format</name>
    <filename>classcinder_1_1gl_1_1_texture_font_1_1_format.html</filename>
    <member kind="function">
      <type></type>
      <name>Format</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font_1_1_format.html</anchorfile>
      <anchor>ac9f8c153306c691b07949aee4d3f7c73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Format &amp;</type>
      <name>textureWidth</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font_1_1_format.html</anchorfile>
      <anchor>a4c916e6ac99c8bc6e8727bbedb99594a</anchor>
      <arglist>(int32_t textureWidth)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getTextureWidth</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font_1_1_format.html</anchorfile>
      <anchor>acd2afdd5216ae22e489994135deb8d92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Format &amp;</type>
      <name>textureHeight</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font_1_1_format.html</anchorfile>
      <anchor>ab63a1e5c109bca71b6e05ffd5944395d</anchor>
      <arglist>(int32_t textureHeight)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getTextureHeight</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font_1_1_format.html</anchorfile>
      <anchor>a35b4ff1a357068d2e0c0cceccaa2b1e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Format &amp;</type>
      <name>premultiply</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font_1_1_format.html</anchorfile>
      <anchor>a8303023713dcb14cecb256bb44572a69</anchor>
      <arglist>(bool premult=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPremultiply</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font_1_1_format.html</anchorfile>
      <anchor>a2d1e8cedca10bb9d48d6680ae6d3c9c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Format &amp;</type>
      <name>enableMipmapping</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font_1_1_format.html</anchorfile>
      <anchor>affd5e84a09c03906fabb856a9383f505</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMipmapping</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font_1_1_format.html</anchorfile>
      <anchor>a55cd455f140e06f4707d6862481d85d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mTextureWidth</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font_1_1_format.html</anchorfile>
      <anchor>ad072c4f552b9ea1b2dd62dd7804c2d22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mTextureHeight</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font_1_1_format.html</anchorfile>
      <anchor>aa596e8ccbc980bf5969ddd707e59c3a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mPremultiply</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font_1_1_format.html</anchorfile>
      <anchor>ad8f43cf827734001a205bce94ceeb456</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mMipmapping</name>
      <anchorfile>classcinder_1_1gl_1_1_texture_font_1_1_format.html</anchorfile>
      <anchor>a2792132c0c3d6d1a2b140a76a32acc29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::gl::TextureFont::GlyphInfo</name>
    <filename>structcinder_1_1gl_1_1_texture_font_1_1_glyph_info.html</filename>
    <member kind="variable">
      <type>uint8_t</type>
      <name>mTextureIndex</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_font_1_1_glyph_info.html</anchorfile>
      <anchor>afc7da521a990cfd39646568b3e1ed99e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Area</type>
      <name>mTexCoords</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_font_1_1_glyph_info.html</anchorfile>
      <anchor>a79fc56ec1b5b30abecc48312af4374f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec2f</type>
      <name>mOriginOffset</name>
      <anchorfile>structcinder_1_1gl_1_1_texture_font_1_1_glyph_info.html</anchorfile>
      <anchor>af301750062904277c71e5ed2ec60533a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::TileRender</name>
    <filename>classcinder_1_1gl_1_1_tile_render.html</filename>
    <member kind="function">
      <type></type>
      <name>TileRender</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>a1e22cec4a0f1dab9cb550bb332de7368</anchor>
      <arglist>(int32_t imageWidth, int32_t imageHeight, int32_t tileWidth=512, int32_t tileHeight=512)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextTile</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>a987cada54ab2fb46e53eb7ad97b96b06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getImageWidth</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>a9ccb084d6a71912165729a9b2a6b3820</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getImageHeight</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>a07b3098ac1c4ab51a96e7269a611a344</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getImageAspectRatio</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>a77f4eeef851bf86a664ae7a512fd1fae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>getCurrentTileArea</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>a35300b1d1fe2819767db30f24faac300</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Surface</type>
      <name>getSurface</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>ae5876c17cf97416ab98dd859b71c3ad0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatricesWindow</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>a95826d8a43297cea96647f53d5fe2c50</anchor>
      <arglist>(int32_t windowWidth, int32_t windowHeight)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatricesWindow</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>ad41f482a8ae32aaef1b5b01647ce0de1</anchor>
      <arglist>(const Vec2i &amp;windowSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatricesWindowPersp</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>a47fbe548080f9be01eab444ace45d370</anchor>
      <arglist>(int screenWidth, int screenHeight, float fovDegrees=60.0f, float nearPlane=1.0f, float farPlane=1000.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatricesWindowPersp</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>aaf8e55ff5d5033562533493d82bace76</anchor>
      <arglist>(const Vec2i &amp;windowSize, float fovDegrees=60.0f, float nearPlane=1.0f, float farPlane=1000.0f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrices</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>a159a57508037b0e9f85a0c213b82971f</anchor>
      <arglist>(const Camera &amp;camera)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>frustum</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>af945e92d4a6551d0719448c6cedd08f7</anchor>
      <arglist>(float left, float right, float bottom, float top, float nearPlane, float farPlane)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ortho</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>a2cbd4f5147e1ba0936332dccf1d3a159</anchor>
      <arglist>(float left, float right, float bottom, float top, float nearPlane, float farPlane)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateFrustum</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>a895fdcbe61d10347339aab0a8f9110ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mImageWidth</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>a0990fe6da19bf143744d64318bc36c23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mImageHeight</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>a3b2ae508bf4cb2256f56ea4fafb8caf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mTileWidth</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>ab1ad09324227da3dcf1cb26487f256b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mTileHeight</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>a9be317bea0cea3dd52b89a622adb92c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mNumTilesX</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>a942554f50cce2c6ef91e302a80cf4ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mNumTilesY</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>a44dd6be1c6b0c8a598696aded99da228</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mCurrentTile</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>abc17e6aeb5eaf996fe3037d661aef30c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Area</type>
      <name>mCurrentArea</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>a84452efcea95db3a1926ca990cb99fb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Rectf</type>
      <name>mCurrentFrustumCoords</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>a8ae57d9aaacc9acd3f4ed2e691c0f8e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mCurrentFrustumNear</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>a655345c32768c12ed118537cb5959659</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mCurrentFrustumFar</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>af778c5c3d79bc78b73435a62e2e54d00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mCurrentFrustumPersp</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>a26ebad124e5c77a99e79df62b5c961a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Area</type>
      <name>mSavedViewport</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>a6e82e6e6fd0cd6cc68e5875000904937</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Surface</type>
      <name>mSurface</name>
      <anchorfile>classcinder_1_1gl_1_1_tile_render.html</anchorfile>
      <anchor>ad1e2bf37d01397aa6e963ad3c4c6cd5c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::Vbo</name>
    <filename>classcinder_1_1gl_1_1_vbo.html</filename>
    <class kind="struct">cinder::gl::Vbo::Obj</class>
    <member kind="function">
      <type></type>
      <name>Vbo</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo.html</anchorfile>
      <anchor>a132646e3fe03b9270ce14dadfb1421b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vbo</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo.html</anchorfile>
      <anchor>aee6aad373e7d5adad472db2244b7d6ae</anchor>
      <arglist>(GLenum aTarget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo.html</anchorfile>
      <anchor>afca5d4925017b485e66791d4c9e9c226</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unbind</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo.html</anchorfile>
      <anchor>a7ad6c59c76e80e442eef852af01a231a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bufferData</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo.html</anchorfile>
      <anchor>a98c4719756610842b7a50bad1752b862</anchor>
      <arglist>(size_t size, const void *data, GLenum usage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bufferSubData</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo.html</anchorfile>
      <anchor>a8dcab914dd9d8c42fefb61fc8c051980</anchor>
      <arglist>(ptrdiff_t offset, size_t size, const void *data)</arglist>
    </member>
    <member kind="function">
      <type>uint8_t *</type>
      <name>map</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo.html</anchorfile>
      <anchor>ae0991987f5e08952a85e261b534a1e13</anchor>
      <arglist>(GLenum access)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unmap</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo.html</anchorfile>
      <anchor>a419e8cf70449519417c84d158fa4a3ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>getTarget</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo.html</anchorfile>
      <anchor>a18e3c76a1744c8d41c72540ebd5bdd27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLuint</type>
      <name>getId</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo.html</anchorfile>
      <anchor>a091ffd4416d08f911e442258c6c63608</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Obj &gt;</type>
      <name>mObj</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo.html</anchorfile>
      <anchor>a72d1595b73b3ac0e0e9cc31c2fee3681</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Obj &gt; Vbo::*</type>
      <name>unspecified_bool_type</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo.html</anchorfile>
      <anchor>a89347409e86989f4b36d4585e3690baf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unspecified_bool_type</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo.html</anchorfile>
      <anchor>a86d91034ad80d613230bc1efcff643a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo.html</anchorfile>
      <anchor>a3979287b04811604ca443f1962cac836</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::gl::Vbo::Obj</name>
    <filename>structcinder_1_1gl_1_1_vbo_1_1_obj.html</filename>
    <member kind="function">
      <type></type>
      <name>Obj</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_1_1_obj.html</anchorfile>
      <anchor>a5cd63682d264cedd9717d6623cfb5789</anchor>
      <arglist>(GLenum aTarget)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Obj</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_1_1_obj.html</anchorfile>
      <anchor>a08e44f6e9184fc2f263d9e90bd758ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>GLenum</type>
      <name>mTarget</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_1_1_obj.html</anchorfile>
      <anchor>aed3ee297df0ae34729ab0cd22b6c93d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLuint</type>
      <name>mId</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_1_1_obj.html</anchorfile>
      <anchor>a9f79dbbbd871e513cc868c4d40a2b6ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::VboMesh</name>
    <filename>classcinder_1_1gl_1_1_vbo_mesh.html</filename>
    <class kind="struct">cinder::gl::VboMesh::Layout</class>
    <class kind="struct">cinder::gl::VboMesh::Obj</class>
    <class kind="class">cinder::gl::VboMesh::VertexIter</class>
    <member kind="enumvalue">
      <type>@</type>
      <name>NONE</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a620fbfb15d0c09f0894bbe9d1285d42fa07c1367512e79b227902fd1a573e2a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>STATIC</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a620fbfb15d0c09f0894bbe9d1285d42faea00993fc241756fbd8e2b657027994a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DYNAMIC</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a620fbfb15d0c09f0894bbe9d1285d42fa52aa4186a7b2de957d451c62d5fa74e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ATTR_INDICES</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a1904c35075f27d7eb9df19a7c1379b47af1926c41a2a39683f943d89e02eacfca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ATTR_POSITIONS</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a1904c35075f27d7eb9df19a7c1379b47a5749e4d52cd91b7eaa74bc5cdc6c3257</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ATTR_NORMALS</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a1904c35075f27d7eb9df19a7c1379b47a323df833bc1e02e076f0c2d038c155bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ATTR_COLORS_RGB</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a1904c35075f27d7eb9df19a7c1379b47a6d1bada79e7ff42368e164f9c4448f88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ATTR_COLORS_RGBA</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a1904c35075f27d7eb9df19a7c1379b47afad54c907c16e300a593a718879a7c42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ATTR_TEXCOORDS2D_0</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a1904c35075f27d7eb9df19a7c1379b47a1cc4d2b7e04a70d933ee8d18226aa670</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ATTR_TEXCOORDS2D_1</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a1904c35075f27d7eb9df19a7c1379b47ac0fd84160d1aa372a415c86d56ae02a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ATTR_TEXCOORDS2D_2</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a1904c35075f27d7eb9df19a7c1379b47a4e9416c697032f2f7717284245a8893e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ATTR_TEXCOORDS2D_3</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a1904c35075f27d7eb9df19a7c1379b47a2017f6614dd18a78861532ec714cc677</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ATTR_TEXCOORDS3D_0</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a1904c35075f27d7eb9df19a7c1379b47a6bf808a7cd1aad794d9b5ffa3624084a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ATTR_TEXCOORDS3D_1</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a1904c35075f27d7eb9df19a7c1379b47a8b7d1660777b0668d65cf029a7e71963</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ATTR_TEXCOORDS3D_2</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a1904c35075f27d7eb9df19a7c1379b47af756d573217f6c9124e14528b7899532</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ATTR_TEXCOORDS3D_3</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a1904c35075f27d7eb9df19a7c1379b47a8e6842575e6860c8811f612bfc30b670</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ATTR_TOTAL</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a1904c35075f27d7eb9df19a7c1379b47a4998e2385aee4125bd522c1713a56a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ATTR_MAX_TEXTURE_UNIT</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a11aa796f083ea358d34168aa69f16f3fa784d0c5ae1a7142d0d94f157b140eff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INDEX_BUFFER</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a510e9b3c56d59c0e33b5c9fe806936a7a94d0a6ca0951f318a75f90672a81fa7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>STATIC_BUFFER</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a510e9b3c56d59c0e33b5c9fe806936a7a01173481154e7b4f32119faf51001642</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>DYNAMIC_BUFFER</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a510e9b3c56d59c0e33b5c9fe806936a7aef40c78ac5ec10eafad3a4fa172b0270</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TOTAL_BUFFERS</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a510e9b3c56d59c0e33b5c9fe806936a7aa5cd48e96775b659c6890cd53ec652ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VboMesh</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>abb7a26104480923eac28288e75985270</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VboMesh</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a2638719dd6d972cd91a44bf546fb749b</anchor>
      <arglist>(const TriMesh &amp;triMesh, Layout layout=Layout())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VboMesh</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a244b93e31036cb4207344d637c61a44c</anchor>
      <arglist>(const TriMesh2d &amp;triMesh, Layout layout=Layout())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VboMesh</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a77ba0b7d47c157e72408f72e0a354bca</anchor>
      <arglist>(size_t numVertices, size_t numIndices, Layout layout, GLenum primitiveType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VboMesh</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a583b134966398379d1231eb905ebbbbb</anchor>
      <arglist>(size_t numVertices, size_t numIndices, Layout layout, GLenum primitiveType, Vbo *indexBuffer, Vbo *staticBuffer, Vbo *dynamicBuffer)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumIndices</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a99451d5dff6aff1307b0d197281417f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumVertices</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a7eafd43a8cfd24f39f7ddabdd4251b38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GLenum</type>
      <name>getPrimitiveType</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>ab6bdbadb406f993a803b29ad21e35d74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Layout &amp;</type>
      <name>getLayout</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a3c05a2d2b3ce633bad9ee49864b8a504</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bindIndexBuffer</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a590a7eaad3c72dde1debd9569cc685f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enableClientStates</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a03495028e41e4cd0a6b7384149738848</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disableClientStates</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>ad5a0b70c1fc4e902ed324cd6a4798ff4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bindAllData</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a308b526272460160a9b8eb461960ef71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bufferIndices</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a74052ca7beace97bdad57e555e22feb3</anchor>
      <arglist>(const std::vector&lt; uint32_t &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bufferPositions</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a3f7475f6a4687e97a992263dd91a57a5</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;positions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bufferPositions</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a2f43b12b31d0566448a729dda8230def</anchor>
      <arglist>(const Vec3f *positions, size_t count)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bufferNormals</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a73df35099c21e0469c126ae38693c9b5</anchor>
      <arglist>(const std::vector&lt; Vec3f &gt; &amp;normals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bufferTexCoords2d</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a7330f6226808c2e3a18bc0136632cd00</anchor>
      <arglist>(size_t unit, const std::vector&lt; Vec2f &gt; &amp;texCoords)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bufferTexCoords3d</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a664adc31f82d3b47f090de998bba5ac0</anchor>
      <arglist>(size_t unit, const std::vector&lt; Vec3f &gt; &amp;texCoords)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bufferColorsRGB</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a051d43815b5f01533882bda6fc9eb7ae</anchor>
      <arglist>(const std::vector&lt; Color &gt; &amp;colors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bufferColorsRGBA</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a30f368c2e5489da8d0f260bd2b8fab22</anchor>
      <arglist>(const std::vector&lt; ColorA &gt; &amp;colors)</arglist>
    </member>
    <member kind="function">
      <type>class VertexIter</type>
      <name>mapVertexBuffer</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>ae66703f7e7ddcde3cd337f5fef6cb735</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vbo &amp;</type>
      <name>getIndexVbo</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a8b1221c139b4dd79f4d1dfe6686665d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vbo &amp;</type>
      <name>getStaticVbo</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a600894a5a7db1e39bdec52f184a22e4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vbo &amp;</type>
      <name>getDynamicVbo</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>abdbbeca215c858c6abf275b6558148e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCustomStaticLocation</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>ac9dd4c509fc546af33770e8c6bb3fd62</anchor>
      <arglist>(size_t internalIndex, GLuint location)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCustomDynamicLocation</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>ae6184621baa86f03e0f048254c1b3318</anchor>
      <arglist>(size_t internalIndex, GLuint location)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getTexCoordOffset</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a134c29fbe307240036579e6bc5919543</anchor>
      <arglist>(size_t unit) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTexCoordOffset</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a309d852b4bd8bdc9f4a7b4d40bbed41a</anchor>
      <arglist>(size_t unit, size_t aTexCoordOffset)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VboMeshRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>ac2825f3c9d5e8e96115ec0a3bd2af3a8</anchor>
      <arglist>(const TriMesh &amp;triMesh, Layout layout=Layout())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VboMeshRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a58d5453354492572c66bac26dc2acc36</anchor>
      <arglist>(const TriMesh2d &amp;triMesh, Layout layout=Layout())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VboMeshRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a08ed945dede8ed09ad9cae486b4308d8</anchor>
      <arglist>(size_t numVertices, size_t numIndices, Layout layout, GLenum primitiveType)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VboMeshRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a8cd94c4d2a4b8168e53b8ade987f6a2c</anchor>
      <arglist>(size_t numVertices, size_t numIndices, Layout layout, GLenum primitiveType, Vbo *indexBuffer, Vbo *staticBuffer, Vbo *dynamicBuffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unbindBuffers</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a780af198f097902fc5eeba70c67e4e1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initializeBuffers</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>aa79608eccedc1f943d20be410499d3ba</anchor>
      <arglist>(bool staticDataPlanar)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Obj &gt;</type>
      <name>mObj</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>af4fe2dddb94f86a2e91615e203ccf94b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Obj &gt; VboMesh::*</type>
      <name>unspecified_bool_type</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a977e3a2c4453f3a4f18e20e20be20934</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unspecified_bool_type</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>a8031d535ab448c8b90147833eba73a00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh.html</anchorfile>
      <anchor>aa74f109af7e0cd10c4906ccacab7dc71</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::gl::VboMesh::Layout</name>
    <filename>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>CustomAttr</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a82c401949c9dcaae9786dbe54ef71fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CUSTOM_ATTR_FLOAT</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a82c401949c9dcaae9786dbe54ef71fe6a7d98a97cdf80756d959c4d1c0cab6955</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CUSTOM_ATTR_FLOAT2</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a82c401949c9dcaae9786dbe54ef71fe6aedf66cc215eb1c0c6f79c3c3b49193a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CUSTOM_ATTR_FLOAT3</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a82c401949c9dcaae9786dbe54ef71fe6ace2c27a8c4f66b3a06988a88314b1f60</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CUSTOM_ATTR_FLOAT4</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a82c401949c9dcaae9786dbe54ef71fe6acaac0533ab5764ada4ec54f6ee7cc6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>TOTAL_CUSTOM_ATTR_TYPES</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a82c401949c9dcaae9786dbe54ef71fe6a30e609420bfccd52b22daa42505f33e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Layout</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>aa614891e17de43fa3141fb681e37f243</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDefaults</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a78b583df65700fac8d5ceecd39f17b1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNormals</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>adbca8ad80fbdb0505ec023273405f6ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStaticNormals</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>ae658f4a4d4a04366ae8b5a1b27c04efc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDynamicNormals</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a9bff77be738a6b1f9b56c7382509000c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStaticNormals</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>adea781e0f73ca23e15c42315ca4f1629</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDynamicNormals</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>aa74f1f97973df7cac118dfc968c2dee4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasColorsRGB</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>abdd92228fc2cf80f1017d0f336840ced</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStaticColorsRGB</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>aadd96c35f50912e5a30f59e3a4e3cb6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDynamicColorsRGB</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a47c79f76e1b7ff81985ef5b73262ba78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStaticColorsRGB</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a8b5c531e7441e778ab0c2adaa1cdba77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDynamicColorsRGB</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a90f573e2606c00e90391afa234111984</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasColorsRGBA</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>aee36692d0b0d4607f38e130c13e1fa06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStaticColorsRGBA</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a81a6ae32687404006dfab1a9f1a1eab6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDynamicColorsRGBA</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a0976377ec553c97b18444b0a59982e6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStaticColorsRGBA</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a888b92fc28b2748459dd3bd76e42e43d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDynamicColorsRGBA</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>ae481b2853401e067ed17774549cb26fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTexCoords2d</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a823fe041ff5f54856d65aced2ab12e4e</anchor>
      <arglist>(size_t unit=0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStaticTexCoords2d</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>aa94db40634513b4ab8ce508df43f9555</anchor>
      <arglist>(size_t unit=0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDynamicTexCoords2d</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>ad273648a2ddef0463e6d7dc301a4ac0d</anchor>
      <arglist>(size_t unit=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStaticTexCoords2d</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>ae9c9f28f539cf5d922c5cc4c064b9bff</anchor>
      <arglist>(size_t unit=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDynamicTexCoords2d</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a49f4a628a30b5ab3942294f76a7736a0</anchor>
      <arglist>(size_t unit=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStaticTexCoords</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a71be72db71816da90d8dfb0c6d81aa0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDynamicTexCoords</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>ae2c0a9424708c3511cbf9a349c56f6c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTexCoords</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>ae9f86942bc2d4499d83559e82c68c4ad</anchor>
      <arglist>(size_t unit) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasTexCoords3d</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a81ab806ecd0ee39e2cedba9ccf43e1d3</anchor>
      <arglist>(size_t unit=0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStaticTexCoords3d</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>aeb3c82d6e641bd449fa7c5db93d20e90</anchor>
      <arglist>(size_t unit=0) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDynamicTexCoords3d</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a2915e3082612fdfb8754c5a62afc5cde</anchor>
      <arglist>(size_t unit=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStaticTexCoords3d</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a87d7ae7c8c92f9a920596e1a5e809a39</anchor>
      <arglist>(size_t unit=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDynamicTexCoords3d</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>acac9310d2c404685e28ab7614f81dd86</anchor>
      <arglist>(size_t unit=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasIndices</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>ae3f9ef25865b6af6f5b521b7fe66a363</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStaticIndices</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>aea29effd724d57e4cb002781f42885fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDynamicIndices</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a07ef39970657436b0d8049cfe6db0092</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStaticIndices</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>ac5d3372ed0cef4f2006213ef0438d888</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDynamicIndices</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a5357c8d9b24ed080380d68a40b726487</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPositions</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a07f9af478dd946402cb29002a14b12d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasStaticPositions</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>aa1d01b685ad641313ae22425fa400a0c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDynamicPositions</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a57ce13a595a90e79fa86b1bb9c5c396d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStaticPositions</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a389cec6375fa2e5cb307d3626f911169</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDynamicPositions</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a087b6a6e207b56c7d4442d3eebad7a41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDynamicCustomFloat</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a5bc0c4643c3eacb34ec22b4a31567e6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDynamicCustomVec2f</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a219e32e0841806eae09da463a01d340d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDynamicCustomVec3f</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a6aa593559478f88a67fbd05f725ef5d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDynamicCustomVec4f</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a45dd66d8414f2937e22399b044594d7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>mAttributes</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a2bc6f1e4e606c8b6205cb05149b875f5</anchor>
      <arglist>[ATTR_TOTAL]</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::pair&lt; CustomAttr, size_t &gt; &gt;</type>
      <name>mCustomDynamic</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a9a759090f3dd2c450e33d9fdd72b5315</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::pair&lt; CustomAttr, size_t &gt; &gt;</type>
      <name>mCustomStatic</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a90048aa0af92c852de7092fb0dae1485</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static int</type>
      <name>sCustomAttrSizes</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a24ed517d347cd75dc133ac26231f11c6</anchor>
      <arglist>[TOTAL_CUSTOM_ATTR_TYPES]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static GLint</type>
      <name>sCustomAttrNumComponents</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a31bb71f6016ead49abe8d24a7bfc33ab</anchor>
      <arglist>[TOTAL_CUSTOM_ATTR_TYPES]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static GLenum</type>
      <name>sCustomAttrTypes</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_layout.html</anchorfile>
      <anchor>a33e1d475c797bece0c4728dc3cbe424c</anchor>
      <arglist>[TOTAL_CUSTOM_ATTR_TYPES]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::gl::VboMesh::Obj</name>
    <filename>structcinder_1_1gl_1_1_vbo_mesh_1_1_obj.html</filename>
    <member kind="variable">
      <type>size_t</type>
      <name>mNumIndices</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_obj.html</anchorfile>
      <anchor>aebcef892019280e7e04ef5523c3002a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>mNumVertices</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_obj.html</anchorfile>
      <anchor>a806c01b159fc0b2d904c22ad9d037c5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vbo</type>
      <name>mBuffers</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_obj.html</anchorfile>
      <anchor>a8335321c188978746a732c9fc72115b8</anchor>
      <arglist>[TOTAL_BUFFERS]</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>mPositionOffset</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_obj.html</anchorfile>
      <anchor>a946bcac616c915ee0fd3acad60b335cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>mNormalOffset</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_obj.html</anchorfile>
      <anchor>ab75ee13c2066666866809b6fa1c277fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>mColorRGBOffset</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_obj.html</anchorfile>
      <anchor>a78f447f34f99491ea440b928d2f6d4f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>mColorRGBAOffset</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_obj.html</anchorfile>
      <anchor>a91bbc7f441c773aa0e2cf264455c0d17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>mTexCoordOffset</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_obj.html</anchorfile>
      <anchor>a7eb19c47bfd0f8e6376b438ed712d6fd</anchor>
      <arglist>[ATTR_MAX_TEXTURE_UNIT+1]</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>mStaticStride</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_obj.html</anchorfile>
      <anchor>a8074af6e0a1d8fec234d60d9f04576ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>mDynamicStride</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_obj.html</anchorfile>
      <anchor>ad41a69fc8b1778d473f7c0bf54e45601</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GLenum</type>
      <name>mPrimitiveType</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_obj.html</anchorfile>
      <anchor>a1832c2034366b1ee427aa96562840866</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Layout</type>
      <name>mLayout</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_obj.html</anchorfile>
      <anchor>a562ee71313e6d9cc1dd41194d2be28ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; GLint &gt;</type>
      <name>mCustomStaticLocations</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_obj.html</anchorfile>
      <anchor>a6ef5014e212403f85500b55fab90589d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; GLint &gt;</type>
      <name>mCustomDynamicLocations</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_obj.html</anchorfile>
      <anchor>ac8df1089ab4682862668fbf194bc55ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::VboMesh::VertexIter</name>
    <filename>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</filename>
    <class kind="struct">cinder::gl::VboMesh::VertexIter::Obj</class>
    <member kind="function">
      <type></type>
      <name>VertexIter</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>a24cbcc3af8e787a75bff4da6654ee274</anchor>
      <arglist>(const VboMesh &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>ac392305ef5ef85082cc06cd1e5b66fb5</anchor>
      <arglist>(const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>ad2fba3b918d9064cbd6ef204d64e487d</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNormal</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>a3dae8aeb1e418e480eaf8055ef255df6</anchor>
      <arglist>(const Vec3f &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColorRGB</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>aa6138c972273bc318d772e65028ee70c</anchor>
      <arglist>(const Color &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColorRGBA</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>a23574a8fee04be706f4c728d3375a010</anchor>
      <arglist>(const ColorA &amp;n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTexCoord2d0</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>ae84185d4269604e06ce8966f89dfed19</anchor>
      <arglist>(const Vec2f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTexCoord3d0</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>aed0d5affc8df451bd0fca4213ec70232</anchor>
      <arglist>(const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTexCoord2d1</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>aeda796112613e41ae4b37f86a2e7dcf9</anchor>
      <arglist>(const Vec2f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTexCoord3d1</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>a710b0f853eaf78b1855405f10adbabd5</anchor>
      <arglist>(const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTexCoord2d2</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>ac8e4218fa4d93e4e62aee27d7745fb02</anchor>
      <arglist>(const Vec2f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTexCoord3d2</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>af9747e68cf28cfdc2e95037b2aa07345</anchor>
      <arglist>(const Vec3f &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCustomFloat</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>a525267910cc9dc9c7b038034d869848c</anchor>
      <arglist>(size_t index, float v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCustomVec2f</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>a6ea62ad454dd6b2832e71891f7f39ba9</anchor>
      <arglist>(size_t index, const Vec2f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCustomVec3f</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>a1d1dac6507c36ab8d231606031b97108</anchor>
      <arglist>(size_t index, const Vec3f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCustomVec4f</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>a9616c3480772be18bec6a14ff2aeb8b9</anchor>
      <arglist>(size_t index, const Vec4f &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>a40e946696b9e129259cfd36db8c3ebdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDone</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>a382315bec2164ea9aa530d0265ed6863</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getIndex</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>a2a8b25c95ec08a87e0afd4df980b0ae5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getStride</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>ad94da8794ed8af5dd0a31861d215e827</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getPointer</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>a0dee522fc4c072b9c0cd7bc7840e1476</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3f *</type>
      <name>getPositionPointer</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>a34e6fe9bae68d900d8139a36739af197</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>set</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>a154ceaf8d6fa3baef092a3c743e71619</anchor>
      <arglist>(const VertexIter &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Obj &gt;</type>
      <name>mObj</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>a3e0741f527f1d153f402d89497608c0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint8_t *</type>
      <name>mPtr</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>ac2053a25ba2dd26e0432428fe799e16e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint8_t *</type>
      <name>mData</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>a0f429910dd7c671f25d67db775853902</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint8_t *</type>
      <name>mDataEnd</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>a07f00107a7e962b4b4266e38bb52ffbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>mPositionOffset</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>a00ca8777ff17904119c32c66a8126850</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>mNormalOffset</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>a6d364de7d34afd9bdd2da690d4e4e732</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>mColorRGBOffset</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>ad65e84a0d5c57a13bdb62cf2de38a76f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>mColorRGBAOffset</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>ab62ade8dc845fa354fa6bb08fd109a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>mTexCoordOffset</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>a19bb8f7623d21e0032e130213b1ebe74</anchor>
      <arglist>[ATTR_MAX_TEXTURE_UNIT+1]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint8_t</type>
      <name>mStride</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter.html</anchorfile>
      <anchor>af013dfad5e26bba50957718215e20b9a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cinder::gl::VboMesh::VertexIter::Obj</name>
    <filename>structcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter_1_1_obj.html</filename>
    <member kind="function">
      <type></type>
      <name>Obj</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter_1_1_obj.html</anchorfile>
      <anchor>acace5400195506fe3e88f2d6841e988f</anchor>
      <arglist>(const VboMesh &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Obj</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter_1_1_obj.html</anchorfile>
      <anchor>ae3d36b738e7f800f9b368941875cd447</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t *</type>
      <name>mData</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter_1_1_obj.html</anchorfile>
      <anchor>a5368da8561f676c18dafe7f94380f35a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t *</type>
      <name>mDataEnd</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter_1_1_obj.html</anchorfile>
      <anchor>afea5ae0702a82a7414d6ba8f514a2e45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_t &gt;</type>
      <name>mCustomOffsets</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter_1_1_obj.html</anchorfile>
      <anchor>a4e22888e69be909aec2017fa4e088440</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vbo</type>
      <name>mVbo</name>
      <anchorfile>structcinder_1_1gl_1_1_vbo_mesh_1_1_vertex_iter_1_1_obj.html</anchorfile>
      <anchor>a5f207c44a391366dcfd4ca54812d9bd0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::VboExc</name>
    <filename>classcinder_1_1gl_1_1_vbo_exc.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_exc.html</anchorfile>
      <anchor>a7e6d4d376a9f9a73d27595bbfa2ca61d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::VboInvalidTargetExc</name>
    <filename>classcinder_1_1gl_1_1_vbo_invalid_target_exc.html</filename>
    <base>cinder::gl::VboExc</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_invalid_target_exc.html</anchorfile>
      <anchor>a33b2fbc36d328beb9402b493818f2136</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::VboFailedMapExc</name>
    <filename>classcinder_1_1gl_1_1_vbo_failed_map_exc.html</filename>
    <base>cinder::gl::VboExc</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_failed_map_exc.html</anchorfile>
      <anchor>aef5e2afadce3ff1a872996fac9c1a721</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::gl::VboFailedUnmapExc</name>
    <filename>classcinder_1_1gl_1_1_vbo_failed_unmap_exc.html</filename>
    <base>cinder::gl::VboExc</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classcinder_1_1gl_1_1_vbo_failed_unmap_exc.html</anchorfile>
      <anchor>a20f3fb724f563c45e0f824fcaf0c03ca</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>cinder::ip</name>
    <filename>namespacecinder_1_1ip.html</filename>
    <class kind="class">cinder::ip::AdaptiveThresholdT</class>
    <member kind="typedef">
      <type>AdaptiveThresholdT&lt; uint8_t &gt;</type>
      <name>AdaptiveThreshold</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>af9d1d2fcc9fe3c8ff8f665f685ddd3be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AdaptiveThresholdT&lt; uint8_t &gt;</type>
      <name>AdaptiveThreshold8u</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>ae7594852b0a8b2bdba815fdf36cb6287</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AdaptiveThresholdT&lt; float &gt;</type>
      <name>AdaptiveThreshold32f</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a8640195bda9d5e73379af686d1fbb37f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blendImpl_u8</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a38e3f58523d410ebeee2e21ff50e1400</anchor>
      <arglist>(Surface8u *background, const Surface8u &amp;foreground, const Area &amp;srcArea, Vec2i absOffset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blendImpl_float</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a4343c0206739fe055135fce542f8fbdd</anchor>
      <arglist>(Surface32f *background, const Surface32f &amp;foreground, const Area &amp;srcArea, Vec2i absOffset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blend</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>af0e25688db87eb142bc83716ed61d459</anchor>
      <arglist>(Surface8u *background, const Surface8u &amp;foreground, const Area &amp;srcArea, const Vec2i &amp;dstRelativeOffset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blend</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a151e524445f4ecc63f4b2d5f10d3b3a1</anchor>
      <arglist>(Surface32f *background, const Surface32f &amp;foreground, const Area &amp;srcArea, const Vec2i &amp;dstRelativeOffset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>edgeDetectSobel</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a36507c81c87598c5eae5cbb86bd9824b</anchor>
      <arglist>(const ChannelT&lt; T &gt; &amp;srcChannel, const Area &amp;srcArea, const Vec2i &amp;dstLT, ChannelT&lt; T &gt; *dstChannel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>edgeDetectSobel</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>aa1721dd257fedc943d4046bb0651d7aa</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;srcSurface, const Area &amp;srcArea, const Vec2i &amp;dstLT, SurfaceT&lt; T &gt; *dstSurface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>edgeDetectSobel</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a423d62f1230aa9c9ecd4009025398ded</anchor>
      <arglist>(const ChannelT&lt; T &gt; &amp;srcChannel, ChannelT&lt; T &gt; *dstChannel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>edgeDetectSobel</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a0f98a9c55148e4242eee7d67c36f9541</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;srcSurface, SurfaceT&lt; T &gt; *dstSuface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill_impl</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a9124f03d376f3acdf63ebaef5d4cd2cf</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface, const ColorT&lt; T &gt; &amp;color, const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill_impl</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a8a82377949d0a2f12114e97dd999b34f</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface, const ColorAT&lt; T &gt; &amp;color, const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a42640fcd5c146acee137a7a17a429b0b</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface, const ColorT&lt; Y &gt; &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>ae54e2982f99dab546b74722c4caabb4d</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface, const ColorT&lt; Y &gt; &amp;color, const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a5fd6e80a839c27829a7a57f0776d5ebc</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface, const ColorAT&lt; Y &gt; &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a05bb74fbdc9679de3bdad5e611878905</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface, const ColorAT&lt; Y &gt; &amp;color, const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a5214b75d677736cc4fe03a715a64e25d</anchor>
      <arglist>(ChannelT&lt; T &gt; *channel, T value, const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>ab58741abc47c307a9bb45a95b098a716</anchor>
      <arglist>(ChannelT&lt; T &gt; *channel, T value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flipVertical</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a854e44fc952a20333240bf01f7945bae</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grayscale</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>af8aa1575a86b86d3a3a6514e3a25780c</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;srcSurface, SurfaceT&lt; T &gt; *dstSurface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grayscale</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a29913cc34abf7c0f36900146be2e0f67</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;srcSurface, ChannelT&lt; T &gt; *dstChannel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>grayscale</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a431b35bbbc7adbb14e33ecc2e4566646</anchor>
      <arglist>(const Surface8u &amp;srcSurface, Channel8u *dstChannel)</arglist>
    </member>
    <member kind="function">
      <type>template void</type>
      <name>grayscale</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a725449a2493df2c5363e50217c36918e</anchor>
      <arglist>(const SurfaceT&lt; float &gt; &amp;srcSurface, ChannelT&lt; float &gt; *dstChannel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hdrNormalize</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a8b001a0abaaa8ecacf7dbb87a28f870b</anchor>
      <arglist>(Surface32f *surface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hdrNormalize</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a5b11a3511a558d244845988df195ff53</anchor>
      <arglist>(Channel32f *channel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMinMax</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>aa3e5f5f8bbdacda8b01954b44c36cfc5</anchor>
      <arglist>(const Channel32f &amp;channel, float *resultMin, float *resultMax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>premultiply</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>aa7fda293d635e185744ef25a4a443149</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpremultiply&lt; uint8_t &gt;</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a9f98c7b751de0adef7dd2174bd2dddeb</anchor>
      <arglist>(SurfaceT&lt; uint8_t &gt; *surface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpremultiply&lt; float &gt;</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>ad811b15b2ef339e47a1bd76e7d8fe12d</anchor>
      <arglist>(SurfaceT&lt; float &gt; *surface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scanlineAccumulate</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a9b0b7f7981e5d85cdd38d8efd535cc0a</anchor>
      <arglist>(LT weight, LT *lineBuffer, int32_t lineBufferWidth, AT *accum)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeWeightTable</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>ac15a4107eb2db43ae4a9de3b8d85f625</anchor>
      <arglist>(int32_t b, float cen, const FilterBase &amp;filter, const FilterParams *params, int32_t len, bool trimzeros, WeightTable&lt; WT &gt; *wtab)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scanlineShiftAccumToChannel</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>abdb1d20e2b669fc77fcb6f780e05a696</anchor>
      <arglist>(AT *accum, int32_t x1, int32_t y, int32_t width, ChannelT&lt; T &gt; *channel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scanlineFilterChannelToBuffer</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a423df24894840d73beeff3e4394085f2</anchor>
      <arglist>(WeightTable&lt; WT &gt; *weights, int32_t x, int32_t y, const ChannelT&lt; T &gt; &amp;channel, AT *lineBuffer, int32_t width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resample</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a4b44eebb83009049ab8efe8da81c5026</anchor>
      <arglist>(const vector&lt; const ChannelT&lt; T &gt; * &gt; &amp;srcChannels, const FilterBase &amp;filter, const Area &amp;srcArea, const Area &amp;dstArea, const vector&lt; ChannelT&lt; T &gt; * &gt; &amp;dstChannels)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>ae026e34521dd718b23ddce7423b09805</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;srcSurface, const Area &amp;srcArea, SurfaceT&lt; T &gt; *dstSurface, const Area &amp;dstArea, const FilterBase &amp;filter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a6da7127f976e6d60bd5f77ba08ee4491</anchor>
      <arglist>(const ChannelT&lt; T &gt; &amp;srcChannel, const Area &amp;srcArea, ChannelT&lt; T &gt; *dstChannel, const Area &amp;dstArea, const FilterBase &amp;filter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>afb1a60d4493cdb11bae0d3230c0bbb15</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;srcSurface, SurfaceT&lt; T &gt; *dstSurface, const FilterBase &amp;filter)</arglist>
    </member>
    <member kind="function">
      <type>SurfaceT&lt; T &gt;</type>
      <name>resizeCopy</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>aa41d13752aa8c247d32559d39da42a93</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;srcSurface, const Area &amp;srcArea, const Vec2i &amp;dstSize, const FilterBase &amp;filter=FilterTriangle())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a4b46128dca78b4db039b4f795c400a5b</anchor>
      <arglist>(const ChannelT&lt; T &gt; &amp;srcChannel, ChannelT&lt; T &gt; *dstChannel, const FilterBase &amp;filter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thresholdImpl</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>ad3a9346851f3d31dfbfa16903593a590</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface, T value, const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thresholdImpl</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a666ca62a6a95baf277f123ec25f271ca</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;srcSurface, T value, const Area &amp;srcArea, const Vec2i &amp;dstLT, SurfaceT&lt; T &gt; *dstSurface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>thresholdImpl</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a1355c410cbcde1050aff5b81ff4f7099</anchor>
      <arglist>(const ChannelT&lt; T &gt; &amp;srcChannel, T value, const Area &amp;srcArea, const Vec2i &amp;dstLT, ChannelT&lt; T &gt; *dstChannel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>threshold</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>aad266a9ef17649fc58118f4232ea699d</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface, T value, const Area &amp;area)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>threshold</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>ac6283a4085cd1d3e81bca27dbaf4803f</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface, T value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>threshold</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a41f7406ecce2b029423cbbab9380765b</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;srcSurface, T value, SurfaceT&lt; T &gt; *dstSurface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>threshold</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>aa5bfaa452ae9955f76d0209a749dbe4b</anchor>
      <arglist>(const ChannelT&lt; T &gt; &amp;srcSurface, T value, ChannelT&lt; T &gt; *dstSurface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateAdaptiveThreshold</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>af2e1d7c820949c3c16d33a7f4f4df0a5</anchor>
      <arglist>(const ChannelT&lt; T &gt; *srcChannel, typename CHANTRAIT&lt; T &gt;::Accum *integralImage, int32_t windowSize, float percentageDelta, ChannelT&lt; T &gt; *dstChannel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateAdaptiveThresholdZero</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a491c2582a29119aa25d0df35d2c3512f</anchor>
      <arglist>(const ChannelT&lt; T &gt; *srcChannel, typename CHANTRAIT&lt; T &gt;::Accum *integralImage, int32_t windowSize, ChannelT&lt; T &gt; *dstChannel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculateIntegralImage</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>ae0953669ec156ceb423b0ad46d3091b6</anchor>
      <arglist>(const ChannelT&lt; T &gt; &amp;channel, typename CHANTRAIT&lt; T &gt;::Accum *integralImage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adaptiveThreshold</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>aef4612413e9e141c262ffa0b05043de2</anchor>
      <arglist>(const ChannelT&lt; T &gt; &amp;srcChannel, int32_t windowSize, float percentageDelta, ChannelT&lt; T &gt; *dstChannel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adaptiveThreshold</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a3785da48a1d8d4e5d922e27d53170d10</anchor>
      <arglist>(ChannelT&lt; T &gt; *channel, int32_t windowSize, float percentageDelta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adaptiveThresholdZero</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a4116c5393f0823d84c0d5669035bda91</anchor>
      <arglist>(ChannelT&lt; T &gt; *channel, int32_t windowSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adaptiveThresholdZero</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>ae6b9f9cf2b29b4732970513c5a265b43</anchor>
      <arglist>(const ChannelT&lt; T &gt; &amp;srcChannel, int32_t windowSize, ChannelT&lt; T &gt; *dstChannel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>transparentHorizontalScanline</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a57cc8a90d3556b81f7233512e8f0eac0</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;surface, int32_t row, int32_t x1, int32_t x2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>transparentVerticalScanline</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a34fb0480b444b5f121410f4efff7f6a8</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;surface, int32_t column, int32_t y1, int32_t y2)</arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>findNonTransparentArea</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a713299f55cf2af9245003a9c35a70992</anchor>
      <arglist>(const SurfaceT&lt; T &gt; &amp;surface, const Area &amp;unclippedBounds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blend</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a6867bbe9e05065dfa82322c2af612578</anchor>
      <arglist>(Surface *background, const Surface &amp;foreground)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blend</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>a4d080b09cfa51917a6f330fcc656b09d</anchor>
      <arglist>(Surface32f *background, const Surface32f &amp;foreground)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpremultiply</name>
      <anchorfile>namespacecinder_1_1ip.html</anchorfile>
      <anchor>adc64ba5544d29502945259bf445bd161</anchor>
      <arglist>(SurfaceT&lt; T &gt; *surface)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::ip::AdaptiveThresholdT</name>
    <filename>classcinder_1_1ip_1_1_adaptive_threshold_t.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>AdaptiveThresholdT</name>
      <anchorfile>classcinder_1_1ip_1_1_adaptive_threshold_t.html</anchorfile>
      <anchor>ad2c2f60fa6703923f7d0595de540d2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdaptiveThresholdT</name>
      <anchorfile>classcinder_1_1ip_1_1_adaptive_threshold_t.html</anchorfile>
      <anchor>abbbd6d11b1deb61b5458850e1c14d535</anchor>
      <arglist>(ChannelT&lt; T &gt; *channel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate</name>
      <anchorfile>classcinder_1_1ip_1_1_adaptive_threshold_t.html</anchorfile>
      <anchor>aa097bdb0fbd53a7cab473882ab0fdbd3</anchor>
      <arglist>(int32_t windowSize, float percentageDelta, ChannelT&lt; T &gt; *dstChannel)</arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Obj &gt; AdaptiveThresholdT::*</type>
      <name>unspecified_bool_type</name>
      <anchorfile>classcinder_1_1ip_1_1_adaptive_threshold_t.html</anchorfile>
      <anchor>ae52f364a0a5d2eac19c1417931f28d29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unspecified_bool_type</name>
      <anchorfile>classcinder_1_1ip_1_1_adaptive_threshold_t.html</anchorfile>
      <anchor>a07138f825283bce9d33ba213a434039b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classcinder_1_1ip_1_1_adaptive_threshold_t.html</anchorfile>
      <anchor>aa84629a4a5c75c698dca4a01e9859a6d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>cinder::msw</name>
    <filename>namespacecinder_1_1msw.html</filename>
    <class kind="class">cinder::msw::ComOStream</class>
    <class kind="class">cinder::msw::basic_debugbuf</class>
    <class kind="class">cinder::msw::basic_dostream</class>
    <member kind="typedef">
      <type>basic_dostream&lt; char &gt;</type>
      <name>dostream</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>aa7705287ff21fbd19e2aa84553eadff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>basic_dostream&lt; wchar_t &gt;</type>
      <name>wdostream</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>acd14b7dd46fa4a017e64eaac3c2a632d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Surface8u</type>
      <name>convertHBitmap</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>ae208567f3e50dd5e473fd0a533fa7bb0</anchor>
      <arglist>(HBITMAP hbitmap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ComDelete</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>aeafaf64ffe1e678bba0ee205f7d83f1c</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initializeCom</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>ae16a1c902bb9d05617ee34c371d11b20</anchor>
      <arglist>(DWORD params=COINIT_APARTMENTTHREADED|COINIT_DISABLE_OLE1DDE)</arglist>
    </member>
    <member kind="function">
      <type>Surface8u</type>
      <name>convertGdiplusBitmap</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>a21021d5b84d665017bc0b41bbeeee190</anchor>
      <arglist>(Gdiplus::Bitmap &amp;bitmap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gdiplusPixelFormatToSurfaceChannelOrder</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>a469d676472bd64f62f6911f000362936</anchor>
      <arglist>(Gdiplus::PixelFormat format, SurfaceChannelOrder *resultChannelOrder, bool *resultPremultiplied)</arglist>
    </member>
    <member kind="function">
      <type>Gdiplus::PixelFormat</type>
      <name>surfaceChannelOrderToGdiplusPixelFormat</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>a6d7293f3a14091ae423df4ae70b72480</anchor>
      <arglist>(const SurfaceChannelOrder &amp;sco, bool premultiplied)</arglist>
    </member>
    <member kind="function">
      <type>Gdiplus::Bitmap *</type>
      <name>createGdiplusBitmap</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>a8cd61428e19b5f938ca119ada932825e</anchor>
      <arglist>(const Surface8u &amp;surface)</arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>toVec2f</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>a6110afc4db24bfce1b0f3adbf0feb3ae</anchor>
      <arglist>(const ::POINTFX &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; T &gt;</type>
      <name>makeComShared</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>a545a324c46702cc589c881080cf3d98f</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="variable">
      <type>boost::thread_specific_ptr&lt; ComInitializer &gt;</type>
      <name>threadComInitializer</name>
      <anchorfile>namespacecinder_1_1msw.html</anchorfile>
      <anchor>a6ff3cd02b33c1961d101988eded56352</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::msw::ComOStream</name>
    <filename>classcinder_1_1msw_1_1_com_o_stream.html</filename>
    <base>cinder::IStream</base>
    <member kind="function">
      <type></type>
      <name>ComOStream</name>
      <anchorfile>classcinder_1_1msw_1_1_com_o_stream.html</anchorfile>
      <anchor>ad87e32bff4604de3ab5ea08a1a75ca6e</anchor>
      <arglist>(cinder::OStreamRef aOStream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HRESULT STDMETHODCALLTYPE</type>
      <name>QueryInterface</name>
      <anchorfile>classcinder_1_1msw_1_1_com_o_stream.html</anchorfile>
      <anchor>a29f11e3d4ed815c28a36910f997a68c2</anchor>
      <arglist>(REFIID iid, void **ppvObject)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ULONG STDMETHODCALLTYPE</type>
      <name>AddRef</name>
      <anchorfile>classcinder_1_1msw_1_1_com_o_stream.html</anchorfile>
      <anchor>ac50bada5acf8448ad7e4017a972eb62b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ULONG STDMETHODCALLTYPE</type>
      <name>Release</name>
      <anchorfile>classcinder_1_1msw_1_1_com_o_stream.html</anchorfile>
      <anchor>ae36828c482d3d5f71f3b8bf0ad919cf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HRESULT STDMETHODCALLTYPE</type>
      <name>Read</name>
      <anchorfile>classcinder_1_1msw_1_1_com_o_stream.html</anchorfile>
      <anchor>a341a52db8cbd522d92e804f1aba7e87b</anchor>
      <arglist>(void *pv, ULONG cb, ULONG *pcbRead)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HRESULT STDMETHODCALLTYPE</type>
      <name>Write</name>
      <anchorfile>classcinder_1_1msw_1_1_com_o_stream.html</anchorfile>
      <anchor>aa1903a1bbcf635e5057a723946b2bb30</anchor>
      <arglist>(void const *pv, ULONG cb, ULONG *pcbWritten)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HRESULT STDMETHODCALLTYPE</type>
      <name>SetSize</name>
      <anchorfile>classcinder_1_1msw_1_1_com_o_stream.html</anchorfile>
      <anchor>a3ecf94e0bfceb8f8623f34d59f5ba11b</anchor>
      <arglist>(ULARGE_INTEGER)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HRESULT STDMETHODCALLTYPE</type>
      <name>CopyTo</name>
      <anchorfile>classcinder_1_1msw_1_1_com_o_stream.html</anchorfile>
      <anchor>a0fb3f9b7bad4ade77bdb037d37506f3c</anchor>
      <arglist>(::IStream *, ULARGE_INTEGER, ULARGE_INTEGER *, ULARGE_INTEGER *)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HRESULT STDMETHODCALLTYPE</type>
      <name>Commit</name>
      <anchorfile>classcinder_1_1msw_1_1_com_o_stream.html</anchorfile>
      <anchor>ae198dbf79c8caa4c66f9edc6f7b0c056</anchor>
      <arglist>(DWORD)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HRESULT STDMETHODCALLTYPE</type>
      <name>Revert</name>
      <anchorfile>classcinder_1_1msw_1_1_com_o_stream.html</anchorfile>
      <anchor>a451d2b36ee1ca0a0cd4356867f16bff7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HRESULT STDMETHODCALLTYPE</type>
      <name>LockRegion</name>
      <anchorfile>classcinder_1_1msw_1_1_com_o_stream.html</anchorfile>
      <anchor>a3d14b843cded74cc0b31d6fd341f4dea</anchor>
      <arglist>(ULARGE_INTEGER, ULARGE_INTEGER, DWORD)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HRESULT STDMETHODCALLTYPE</type>
      <name>UnlockRegion</name>
      <anchorfile>classcinder_1_1msw_1_1_com_o_stream.html</anchorfile>
      <anchor>ad35b3060e848b27adffe9b2e9b847843</anchor>
      <arglist>(ULARGE_INTEGER, ULARGE_INTEGER, DWORD)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HRESULT STDMETHODCALLTYPE</type>
      <name>Clone</name>
      <anchorfile>classcinder_1_1msw_1_1_com_o_stream.html</anchorfile>
      <anchor>abf5e1e149327ab58e017d723e275d36e</anchor>
      <arglist>(IStream **)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HRESULT STDMETHODCALLTYPE</type>
      <name>Seek</name>
      <anchorfile>classcinder_1_1msw_1_1_com_o_stream.html</anchorfile>
      <anchor>a72f008d272e22bd41dfc297306e447b2</anchor>
      <arglist>(LARGE_INTEGER liDistanceToMove, DWORD dwOrigin, ULARGE_INTEGER *lpNewFilePointer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual HRESULT STDMETHODCALLTYPE</type>
      <name>Stat</name>
      <anchorfile>classcinder_1_1msw_1_1_com_o_stream.html</anchorfile>
      <anchor>ad45d505ac54a2789f264c847936101cc</anchor>
      <arglist>(STATSTG *pStatstg, DWORD grfStatFlag)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::msw::basic_debugbuf</name>
    <filename>classcinder_1_1msw_1_1basic__debugbuf.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~basic_debugbuf</name>
      <anchorfile>classcinder_1_1msw_1_1basic__debugbuf.html</anchorfile>
      <anchor>a8e6c0107c4948e96248fb3569905828c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>sync</name>
      <anchorfile>classcinder_1_1msw_1_1basic__debugbuf.html</anchorfile>
      <anchor>a3ef7fad7d13198da595cddb2da7f3601</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>output_debug_string</name>
      <anchorfile>classcinder_1_1msw_1_1basic__debugbuf.html</anchorfile>
      <anchor>a497e18328767afb5f9f3d2d6c518c13c</anchor>
      <arglist>(const CharT *text)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>output_debug_string</name>
      <anchorfile>classcinder_1_1msw_1_1basic__debugbuf.html</anchorfile>
      <anchor>ad62f2a8b426647fb95b601580dbbdf53</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>output_debug_string</name>
      <anchorfile>classcinder_1_1msw_1_1basic__debugbuf.html</anchorfile>
      <anchor>a5480a71523494dd30eea60ca759a17a7</anchor>
      <arglist>(const wchar_t *text)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::msw::basic_dostream</name>
    <filename>classcinder_1_1msw_1_1basic__dostream.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>basic_dostream</name>
      <anchorfile>classcinder_1_1msw_1_1basic__dostream.html</anchorfile>
      <anchor>aab062168b54d0440b2604b8fec73f6c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~basic_dostream</name>
      <anchorfile>classcinder_1_1msw_1_1basic__dostream.html</anchorfile>
      <anchor>a45e4ad527730f6873315844a91e87223</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>cinder::params</name>
    <filename>namespacecinder_1_1params.html</filename>
    <class kind="class">cinder::params::InterfaceGl</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class InterfaceGl &gt;</type>
      <name>InterfaceGlRef</name>
      <anchorfile>namespacecinder_1_1params.html</anchorfile>
      <anchor>a7ce98af0bd691ab4aa7bb949b35857f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>initAntGl</name>
      <anchorfile>namespacecinder_1_1params.html</anchorfile>
      <anchor>a368526abebb87d32fd0696f4d59fb6bc</anchor>
      <arglist>(weak_ptr&lt; app::Window &gt; winWeak)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::params::InterfaceGl</name>
    <filename>classcinder_1_1params_1_1_interface_gl.html</filename>
    <member kind="function">
      <type></type>
      <name>InterfaceGl</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>acc081f6c2bbc8da9ea2583f336e7d8d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterfaceGl</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>a8c9b647314a8805f94938828e52dda69</anchor>
      <arglist>(const std::string &amp;title, const Vec2i &amp;size, const ColorA &amp;color=ColorA(0.3f, 0.3f, 0.3f, 0.4f))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterfaceGl</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>a0b2c7c4d35deb8c2a19a45587170a0e7</anchor>
      <arglist>(cinder::app::WindowRef window, const std::string &amp;title, const Vec2i &amp;size, const ColorA &amp;color=ColorA(0.3f, 0.3f, 0.3f, 0.4f))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>a54559d22db098333653b7bd9b0ce148e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>abcc4e0058778d552c7d29cdf48ad6a10</anchor>
      <arglist>(bool visible=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hide</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>addb100718c4662a03fd8d4fef9a8c8b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>aa5bcbad1be242c6846957462b3666343</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maximize</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>aad8b1f1820c5fa00cd271a7a46444126</anchor>
      <arglist>(bool maximized=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>minimize</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>a9223911a8d5f977ef06ad5756ee3db9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMaximized</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>a6e626d6a26999527a56cae39dfbe681b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParam</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>a27ad59e9304a2361bcbb7333d9d4e138</anchor>
      <arglist>(const std::string &amp;name, bool *boolParam, const std::string &amp;optionsStr=&quot;&quot;, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParam</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>ac7197162a089876a723c626ecdbbb635</anchor>
      <arglist>(const std::string &amp;name, float *floatParam, const std::string &amp;optionsStr=&quot;&quot;, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParam</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>ae58b4335af154a0535560facb374913f</anchor>
      <arglist>(const std::string &amp;name, double *doubleParam, const std::string &amp;optionsStr=&quot;&quot;, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParam</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>af4cc5c66526cae360203bad4282a6567</anchor>
      <arglist>(const std::string &amp;name, int32_t *intParam, const std::string &amp;optionsStr=&quot;&quot;, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParam</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>adefb9fc9e47a14b040f522c036195590</anchor>
      <arglist>(const std::string &amp;name, Vec3f *vectorParam, const std::string &amp;optionsStr=&quot;&quot;, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParam</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>a708e6b8163df126cfdb67ed42066ec4f</anchor>
      <arglist>(const std::string &amp;name, Quatf *quatParam, const std::string &amp;optionsStr=&quot;&quot;, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParam</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>a8e1912146f000df7ac4ab3e6ed19f420</anchor>
      <arglist>(const std::string &amp;name, Color *quatParam, const std::string &amp;optionsStr=&quot;&quot;, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParam</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>a970f1cbfb266bfcdd6ec982687923542</anchor>
      <arglist>(const std::string &amp;name, ColorA *quatParam, const std::string &amp;optionsStr=&quot;&quot;, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParam</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>afc19ad29b8e3fc5d138e454121d56be8</anchor>
      <arglist>(const std::string &amp;name, std::string *strParam, const std::string &amp;optionsStr=&quot;&quot;, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addParam</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>abcab582ad150c7221689983e208cb0cc</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; std::string &gt; &amp;enumNames, int *param, const std::string &amp;optionsStr=&quot;&quot;, bool readOnly=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSeparator</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>a427ef88221133833c4b3921fddbb01c5</anchor>
      <arglist>(const std::string &amp;name=&quot;&quot;, const std::string &amp;optionsStr=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addText</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>a9dca3ac8540b8eeb1239534414b91d25</anchor>
      <arglist>(const std::string &amp;name=&quot;&quot;, const std::string &amp;optionsStr=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addButton</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>a11b191912b4167d53dd9bd36eaed68ee</anchor>
      <arglist>(const std::string &amp;name, const std::function&lt; void()&gt; &amp;callback, const std::string &amp;optionsStr=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeParam</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>a8b36ffc37bf63ca9937b7126f3c13021</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>aa317bc2c0e07d773808459ca06240325</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOptions</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>a7c561780a5705aea75d7e0bc07d87fab</anchor>
      <arglist>(const std::string &amp;name=&quot;&quot;, const std::string &amp;optionsStr=&quot;&quot;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterfaceGlRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>a181bc288039fc19525fbfd2ebf6b890c</anchor>
      <arglist>(const std::string &amp;title, const Vec2i &amp;size, const ColorA &amp;color=ColorA(0.3f, 0.3f, 0.3f, 0.4f))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static InterfaceGlRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>a3f99be1f1b05f62dc64be84edfc52712</anchor>
      <arglist>(cinder::app::WindowRef window, const std::string &amp;title, const Vec2i &amp;size, const ColorA &amp;color=ColorA(0.3f, 0.3f, 0.3f, 0.4f))</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>a223d81dbb422ec33a0221e9d95a13fc5</anchor>
      <arglist>(app::WindowRef window, const std::string &amp;title, const Vec2i &amp;size, const ColorA color)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>implAddParam</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>ac40bc179cf8ebeda26f811846807a386</anchor>
      <arglist>(const std::string &amp;name, void *param, int type, const std::string &amp;optionsStr, bool readOnly)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::weak_ptr&lt; app::Window &gt;</type>
      <name>mWindow</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>aa5a009c53b86bc607fa8987ac770328e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; TwBar &gt;</type>
      <name>mBar</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>a02f0240f2f61ebab67f113861799c7e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>mTwWindowId</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>a224bd2601d2b2667f77e9fb8c6473e53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; std::function&lt; void()&gt; &gt; &gt;</type>
      <name>mButtonCallbacks</name>
      <anchorfile>classcinder_1_1params_1_1_interface_gl.html</anchorfile>
      <anchor>a7fc69fe6ca353298d3a8b6d2ac2f4cae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>cinder::qtime</name>
    <filename>namespacecinder_1_1qtime.html</filename>
    <class kind="class">cinder::qtime::MovieWriter</class>
    <class kind="class">cinder::qtime::MovieWriterExc</class>
    <class kind="class">cinder::qtime::MovieWriterExcInvalidPath</class>
    <class kind="class">cinder::qtime::MovieWriterExcFrameEncode</class>
    <class kind="class">cinder::qtime::MovieWriterExcAlreadyFinished</class>
    <class kind="class">cinder::qtime::MovieBase</class>
    <class kind="class">cinder::qtime::ImageTargetCvPixelBuffer</class>
    <class kind="class">cinder::qtime::ImageTargetGWorld</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; MovieWriter &gt;</type>
      <name>MovieWriterRef</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>aa7b8abc1c1726ab6ee69a93d8b7a7a7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; MovieLoader &gt;</type>
      <name>MovieLoaderRef</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a235cd867fb9ef3d7d63f9dd7565750fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; MovieSurface &gt;</type>
      <name>MovieSurfaceRef</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a3c747c23ff8169495a9915a1c14e7c5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageTargetCvPixelBuffer &gt;</type>
      <name>ImageTargetCvPixelBufferRef</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a877e7323ec66121fa14bb721986be17f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; class ImageTargetGWorld &gt;</type>
      <name>ImageTargetGWorldRef</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a87ae7a6b7609af21dfcbeaedf078dfd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>OSStatus</type>
      <name>enableMultiPassWithTemporaryFile</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>afb4a682b21ce48c6ca80e04c24b85e1e</anchor>
      <arglist>(ICMCompressionSessionOptionsRef inCompressionSessionOptions, ICMMultiPassStorageRef *outMultiPassStorage)</arglist>
    </member>
    <member kind="function">
      <type>::Movie</type>
      <name>openMovieFromUrl</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a8142f9b8e3765982177f867955229a91</anchor>
      <arglist>(const Url &amp;url)</arglist>
    </member>
    <member kind="function">
      <type>::Movie</type>
      <name>openMovieFromPath</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>abe998e5387368166ba91e386849c3228</anchor>
      <arglist>(const fs::path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startQuickTime</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a4a8216e6a310f79e904a08818d846eac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getQuickTimeVersion</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>ae9b4d6b136b59de1ae3e1d82a4bf4d13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getQuickTimeVersionString</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a683d1761480a9d2399b1f8c9865b46ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quickTimeTask</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>ab497ea551ed6a6163489fffa92b2e660</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dictionarySetValue</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>ae7ca69309d5cbbaf186fdcc40fd85046</anchor>
      <arglist>(CFMutableDictionaryRef dict, CFStringRef key, SInt32 value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dictionarySetPixelBufferPixelFormatType</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>ac81d27422c2b56f0d0ec59bdeb2dd514</anchor>
      <arglist>(bool alpha, CFMutableDictionaryRef dict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dictionarySetPixelBufferSize</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>aed68ef39b727c7c199f813665b8f92c1</anchor>
      <arglist>(const unsigned int width, const unsigned int height, CFMutableDictionaryRef dict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dictionarySetPixelBufferBytesPerRowAlignment</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a3c39e3309c12fea19df4455886f26e14</anchor>
      <arglist>(CFMutableDictionaryRef dict)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dictionarySetPixelBufferOpenGLCompatibility</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a7868680cefd2128a9ea5883887326c04</anchor>
      <arglist>(CFMutableDictionaryRef dict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dictionarySetPixelBufferOptions</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a5557b1b8090efcf48f94432fbc5c3c69</anchor>
      <arglist>(unsigned int width, unsigned int height, bool alpha, CFMutableDictionaryRef *pixelBufferOptions)</arglist>
    </member>
    <member kind="function">
      <type>CFMutableDictionaryRef</type>
      <name>initQTVisualContextOptions</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>ab580d688633967582431444e993bbf32</anchor>
      <arglist>(int width, int height, bool alpha)</arglist>
    </member>
    <member kind="function">
      <type>::ItemCount</type>
      <name>openMovieBaseProperties</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a7119854b268c3963174b2b95f3449863</anchor>
      <arglist>(QTNewMoviePropertyElement movieProps[10])</arglist>
    </member>
    <member kind="function">
      <type>Handle</type>
      <name>createPointerReferenceHandle</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a5e65328344cc109491ecb1edda4d9b3c</anchor>
      <arglist>(void *data, Size dataSize)</arglist>
    </member>
    <member kind="function">
      <type>OSStatus</type>
      <name>ptrDataRefAddFileNameExtension</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>ac75a1e3799eec3731d0dec6cc1380678</anchor>
      <arglist>(ComponentInstance dataRefHandler, const string &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>OSStatus</type>
      <name>ptrDataRefAddMIMETypeExtension</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a4f34cb45f5344e79f6566179849c011d</anchor>
      <arglist>(ComponentInstance dataRefHandler, const std::string &amp;mimeType)</arglist>
    </member>
    <member kind="function">
      <type>Handle</type>
      <name>createPointerDataRefWithExtensions</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>adcc2da0d18108b7a7dcc7d7336182527</anchor>
      <arglist>(void *data, size_t dataSize, const string &amp;fileName, const string &amp;mimeType)</arglist>
    </member>
    <member kind="function">
      <type>::Movie</type>
      <name>openMovieFromMemory</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a756310d585911e3ea58f7ee0f4a414d0</anchor>
      <arglist>(const void *data, size_t dataSize, const string &amp;fileNameHint, const string &amp;mimeTypeHint)</arglist>
    </member>
    <member kind="function">
      <type>Surface8u</type>
      <name>convertCVPixelBufferToSurface</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>ad20e733061754a7b862bf42c5cc94c84</anchor>
      <arglist>(CVPixelBufferRef pixelBufferRef)</arglist>
    </member>
    <member kind="function">
      <type>CVPixelBufferRef</type>
      <name>createCvPixelBuffer</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a56275d8d179a17bc93429d39b1bcf9c5</anchor>
      <arglist>(ImageSourceRef imageSource, bool convertToYpCbCr=false)</arglist>
    </member>
    <member kind="function">
      <type>GWorldPtr</type>
      <name>createGWorld</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>a63199e5dc471ae46d36e967f6ea31105</anchor>
      <arglist>(ImageSourceRef imageSource)</arglist>
    </member>
    <member kind="variable">
      <type>const float</type>
      <name>PLATFORM_DEFAULT_GAMMA</name>
      <anchorfile>namespacecinder_1_1qtime.html</anchorfile>
      <anchor>af2505c9cec93c2b8e242ce67ea90b560</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::qtime::MovieWriter</name>
    <filename>classcinder_1_1qtime_1_1_movie_writer.html</filename>
    <class kind="class">cinder::qtime::MovieWriter::Format</class>
    <member kind="enumvalue">
      <type>@</type>
      <name>CODEC_H264</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>a557b0c22b517527f2f4333f62f10fa3aa621b453377233c619ec2aed289a6f2e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CODEC_JPEG</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>a557b0c22b517527f2f4333f62f10fa3aaaf838ff7898432bad0646bd14174656e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CODEC_MP4</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>a557b0c22b517527f2f4333f62f10fa3aa54ac23f6e3c7351ea59ac8cd25fac571</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CODEC_PNG</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>a557b0c22b517527f2f4333f62f10fa3aa3bcfa3cdd48f56697e9841c220c219ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CODEC_RAW</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>a557b0c22b517527f2f4333f62f10fa3aaccf52a21d3fb10a99c2cbb59764b9f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CODEC_ANIMATION</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>a557b0c22b517527f2f4333f62f10fa3aa72f1ba3ea2ac9810ce32c305cac3c51b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MovieWriter</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>a171364944fdca4aaec886f06d5924516</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MovieWriter</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>a6987a3aedc4dec3d42bff80c91ecb45f</anchor>
      <arglist>(const fs::path &amp;path, int32_t width, int32_t height, const Format &amp;format=Format::Format())</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDefaultDuration</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>a11a667df85e395175303dd304d82a3a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getWidth</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>a7cabb2fd1b70aa8a4599854768d2b1d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getHeight</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>a80edfc2538964efcf728ff44667f4102</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getSize</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>aff3bc4ba1b90864116129e155a831a03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAspectRatio</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>aa39e46df517749c3d43a2d86ee935fb8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>getBounds</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>a12786b553ae896473a2c50fb9adc5cd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Format &amp;</type>
      <name>getFormat</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>a5d415542c446deb35feed9f0be0498a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFrame</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>ab0e78cf4f22cf5ce4dd9db87ba34b9e9</anchor>
      <arglist>(const ImageSourceRef &amp;imageSource, float duration=-1.0f)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getNumFrames</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>abc3c639402f1cad93665c0a2d82e1148</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>a00c46b387ad4fb0d1fea32668170694d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MovieWriterRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>aad10f33574b2385452cc3ad38c15f0be</anchor>
      <arglist>(const fs::path &amp;path, int32_t width, int32_t height, const Format &amp;format=Format::Format())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getUserCompressionSettings</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>aaae6074825b2e8acfdfec51124ad4675</anchor>
      <arglist>(Format *result, ImageSourceRef previewImage=ImageSourceRef())</arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Obj &gt; MovieWriter::*</type>
      <name>unspecified_bool_type</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>a29b3ff8a957f9949bd0a1371f41fd3f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unspecified_bool_type</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>ad3f347f087a35466de0a5e187708d3e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer.html</anchorfile>
      <anchor>ac08f83f66fe584af52e1a66c6ce19180</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::qtime::MovieWriter::Format</name>
    <filename>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</filename>
    <member kind="function">
      <type></type>
      <name>Format</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>ae8e2dab4327148af8d755a358ecccc99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Format</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>a85455c71910104e46e98cc0638574b3c</anchor>
      <arglist>(uint32_t codec, float quality)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Format</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>acc69c61a533462a7356ecb7a83ad6f7c</anchor>
      <arglist>(const ICMCompressionSessionOptionsRef settings, uint32_t codec, float quality, float frameRate, bool enableMultiPass)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Format</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>a36795d4835b0f3fd2f6d303d8dcef46c</anchor>
      <arglist>(const Format &amp;format)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Format</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>ac49b3eaa5047a6178e153c48ba5a73a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Format &amp;</type>
      <name>operator=</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>a330c2f53a8d2a40497db09f042b1f440</anchor>
      <arglist>(const Format &amp;format)</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getCodec</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>af82b4406913f2391b6f400e0c7742698</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Format &amp;</type>
      <name>setCodec</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>a08a2b918227f2a0a6eaf1f7c7017586f</anchor>
      <arglist>(uint32_t codec)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getQuality</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>a5fa9487a0e43e1db150a634ba36d8d5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Format &amp;</type>
      <name>setQuality</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>a4d4402b55ab8e4b8dafc76b37f75025e</anchor>
      <arglist>(float quality)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDefaultDuration</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>a65584cd89876d95f408fcfc6c33c6640</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Format &amp;</type>
      <name>setDefaultDuration</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>a4047a2a2dda16df76a948c218f1bb4e9</anchor>
      <arglist>(float defaultDuration)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getTimeScale</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>aedf0cd565ff50b4f1dd3e66f871cd33a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Format &amp;</type>
      <name>setTimeScale</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>a77bf84940ab6a0ac63b0c2da5c96cace</anchor>
      <arglist>(long timeScale)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getGamma</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>a8558f262073296deda99db91eb94d02d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Format &amp;</type>
      <name>setGamma</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>a8bea7df7fe6dd7f4eaef3753631584ed</anchor>
      <arglist>(float gamma)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTemporal</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>a76db0563388468124a894da270b5f562</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Format &amp;</type>
      <name>enableTemporal</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>a09328cd66edc5d88cf7146883dfb9473</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReordering</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>aeaa3d035f43b2ec48c1447e5a1d7f7eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Format &amp;</type>
      <name>enableReordering</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>acee96e287a55431ba7c4ff2ef0b2350b</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getMaxKeyFrameRate</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>a3a438fb88c28b571c4ff171c506731f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Format &amp;</type>
      <name>setMaxKeyFrameRate</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>a396656e5ab8ed005f2b0f01382d29584</anchor>
      <arglist>(int32_t rate)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFrameTimeChanges</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>a0984caa6b9abeb41a526ea21174166cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Format &amp;</type>
      <name>enableFrameTimeChanges</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>af89eff219b9bec57c7eaf8d0f942cea0</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMultiPass</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>adda15a36a199b036424f6629a2179f05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Format &amp;</type>
      <name>enableMultiPass</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>a128666c829fb5b5d6c526a68d1405914</anchor>
      <arglist>(bool enable=true)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MovieWriter</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>ad8df23e2bef21579eb2943551047dbec</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>Obj</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_writer_1_1_format.html</anchorfile>
      <anchor>a25555bebf354140e42fe725c030a50cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::qtime::MovieWriterExc</name>
    <filename>classcinder_1_1qtime_1_1_movie_writer_exc.html</filename>
    <base>cinder::Exception</base>
  </compound>
  <compound kind="class">
    <name>cinder::qtime::MovieWriterExcInvalidPath</name>
    <filename>classcinder_1_1qtime_1_1_movie_writer_exc_invalid_path.html</filename>
    <base>cinder::qtime::MovieWriterExc</base>
  </compound>
  <compound kind="class">
    <name>cinder::qtime::MovieWriterExcFrameEncode</name>
    <filename>classcinder_1_1qtime_1_1_movie_writer_exc_frame_encode.html</filename>
    <base>cinder::qtime::MovieWriterExc</base>
  </compound>
  <compound kind="class">
    <name>cinder::qtime::MovieWriterExcAlreadyFinished</name>
    <filename>classcinder_1_1qtime_1_1_movie_writer_exc_already_finished.html</filename>
    <base>cinder::qtime::MovieWriterExc</base>
  </compound>
  <compound kind="class" objc="yes">
    <name>cinder::qtime::MovieBase</name>
    <filename>classcinder_1_1qtime_1_1_movie_base.html</filename>
    <class kind="struct">cinder::qtime::MovieBase::Obj</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MovieBase</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a6381af3dde95b088e9936fc11d621bcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkPlayable</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>ae05692510ba129e8b480cd929966d64f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getWidth</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>aa1326092edd9bf47443932a67ff98b96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getHeight</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>acf7e52def389ca9ee9306c71d6f27c66</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getSize</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a1d114ad791c51d24a12823f2a665c79e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAspectRatio</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>afcebf0f03309ff68ba6847b0ed579f1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>getBounds</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a1b2bcf3cdfb8b4bf5de884654b6d4a41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getPixelAspectRatio</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a6e0f2c65ae45f45dac6123f3dc50a4ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDuration</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a4d204530814f69361fa1b5e144ada58e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFramerate</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a196def3e521f05995e15a543d14ddd9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getNumFrames</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>aff654f1c0bf1b248c142619744ee873b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAlpha</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a2427eb3ce8922a979e98a2fd6eb024b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasVisuals</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a15de301eb08386f678b265d86e2c7d97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAudio</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a509e05c37e7918f01f9b2ee4c66fa58b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkNewFrame</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a9111b757c0d7d235905d2f8c00c38b52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getCurrentTime</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a922d614738c582f8397ca5c518533367</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seekToTime</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a62465624344d3a67a190c627af0ca9f5</anchor>
      <arglist>(float seconds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seekToFrame</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>aa3f751c588327faaf3d9e6e2343a8205</anchor>
      <arglist>(int frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seekToStart</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>af352021950aa535297cec56dcc2210f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seekToEnd</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a2c22c1bc1a830d170f16bc70b20d60d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setActiveSegment</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a527f93f30db7a4d85b15a451493c4cfc</anchor>
      <arglist>(float startTime, float duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetActiveSegment</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a29bac77397ca1215409eff1f058c0f3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLoop</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>afaacea11bfdd40a8a7d6fc1822d44ee9</anchor>
      <arglist>(bool loop=true, bool palindrome=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stepForward</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>aa62c2ca128071291cff254d3d8048212</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stepBackward</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>aee8dd710e275b9c604a1334d0196e26a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRate</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>ac7b0b0b96e8bcce61ae1211bd7bf29c8</anchor>
      <arglist>(float rate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>ae180c56d1ec4dadbba6a07ee523edfa5</anchor>
      <arglist>(float volume)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getVolume</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a46de64320181a8e0bf9942266f7909f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupMonoFft</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>acd7a86bd2d45b0c04ea30ce1196ca559</anchor>
      <arglist>(uint32_t numBands)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupStereoFft</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a2a2f7af3ad402c9b11e55568c92d2008</anchor>
      <arglist>(uint32_t numBands)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupMultiChannelFft</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a76a16c19e38d55889b989488bebaa792</anchor>
      <arglist>(uint32_t numBands)</arglist>
    </member>
    <member kind="function">
      <type>float *</type>
      <name>getFftData</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a089b67aa2f475863628a57fc747c8b5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getNumFftBands</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a21ecdbedcf1968bbcf92929f362938be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getNumFftChannels</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a9fe8ebf82a181b03f65e30a539a12a0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPlaying</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a6590a676516a23593fcedd7d1050eb8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDone</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a0886ebf39bb85052a9fe1b307e676697</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>play</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a3a3547433c455ce84852882ca82f3071</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a2c68c4705e8216235e17bc8c51e40cd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNewFrameCallback</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a43643b4b481c653b9d6c5aed1a3ea7fa</anchor>
      <arglist>(void(*aNewFrameCallback)(long, void *), void *aNewFrameCallbackRefcon)</arglist>
    </member>
    <member kind="function">
      <type>::Movie</type>
      <name>getMovieHandle</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a2df755177133c50d6c76013feaf0c86f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MovieBase</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a6381a1829e3e16865de5b7f8c70a9465</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>aa57c9d1c1e4e6c4d24fec747c575043d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateFrame</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a1a3c29753540942eaf9bce14b85467c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateLoadState</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>ad2b80488a312b8e7bd947d194e6d361b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setupFft</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>abd928dbf4c3f8dfaab581a2651326091</anchor>
      <arglist>(FourCharCode code, uint32_t bandNum, uint8_t channelNum)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TimeValue</type>
      <name>getStartTimeOfFirstSample</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>ae9392248ad324967d2b7f64d70ec94ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initFromPath</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a44fcd37ed26806b5078da4ab2a9cfb2d</anchor>
      <arglist>(const fs::path &amp;filePath)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initFromLoader</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a6197a208f952bb76844a5ba3eb5675dc</anchor>
      <arglist>(const class MovieLoader &amp;loader)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initFromMemory</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>ac7b9fabed9865336c4383c68b235eb01</anchor>
      <arglist>(const void *data, size_t dataSize, const std::string &amp;fileNameHint, const std::string &amp;mimeTypeHint)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initFromDataSource</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a5262ac6d7bdc40f0f9976c09f9cd2415</anchor>
      <arglist>(DataSourceRef dataSource, const std::string &amp;mimeTypeHint)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual Obj *</type>
      <name>getObj</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a8e17213478dae3b4bd21afb271f4ebee</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int32_t</type>
      <name>countFrames</name>
      <anchorfile>classcinder_1_1qtime_1_1_movie_base.html</anchorfile>
      <anchor>a3e268ac53956c30f84340da8d645a142</anchor>
      <arglist>(::Movie theMovie)</arglist>
    </member>
  </compound>
  <compound kind="struct" objc="yes">
    <name>cinder::qtime::MovieBase::Obj</name>
    <filename>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>Obj</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>a2e7e4ba00f69af4fb30b8db8c2194bc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~Obj</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>a3297310ba4654eb5cb0f553e7b864746</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>prepareForDestruction</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>a43997317cd886ddad7449bc2186f73f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>lock</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>ab3f655fd1b7a19b02d09de340cbf1a64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>unlock</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>a09c45b7b31b50516f425a6b85a978a66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>releaseFrame</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>a89177f5964dbea6d014e70c2ad52bccc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>newFrame</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>a0f681b2adebec198aab5dd19db9e95ea</anchor>
      <arglist>(CVImageBufferRef cvImage)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mWidth</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>a3f47cbcb1ed0ce548f1c2bb28693f1bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mHeight</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>a108e4dc98cb6f45004af6c8bbf89d985</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32_t</type>
      <name>mFrameCount</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>a927f40beb02d233c8eff6cd508e53856</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mDuration</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>a7b1f0596daa934fcb2b7ec7dea598e7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mLoaded</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>a86f23659abd5bd88eb9b80ed5fac4009</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mPlayable</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>a7967e314e1c8962ece1dc5d5d570da41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mPlayingForward</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>a75d3510004a30da7f3d20ab77c146dbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mLoop</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>a8c1244bd35de0699e6a343d18786675a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mPalindrome</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>a11b8c06e5f9a34976abf6c8953e274a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QTAudioFrequencyLevels *</type>
      <name>mFFTData</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>adbc35bc9d714ad2e27baf638605c670b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FourCharCode</type>
      <name>mFFTFourCharCode</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>ad30363c7550aaa664aed0f720028da1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>mFFTNumBandLevels</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>a3a653f6ab25d5fc089afafe17e7af659</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32_t</type>
      <name>mFFTNumChannels</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>ad009d512d680f46855553be285dca9a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>QTVisualContextRef</type>
      <name>mVisualContext</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>ab59a7bb10c55b1eb8f507b303f1c4d11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::Movie</type>
      <name>mMovie</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>a52c6c2d42eb009c607de45999e1905b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void(*</type>
      <name>mNewFrameCallback</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>a3a748c65130cde6d71e312863e8a1ade</anchor>
      <arglist>)(long timeValue, void *refcon)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>mNewFrameCallbackRefcon</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>a34e6019ba1a13087f8204befa26d18b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>mMutex</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>a4ffb36821aebd39c702e438d9608cea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataSourceRef</type>
      <name>mDataSource</name>
      <anchorfile>structcinder_1_1qtime_1_1_movie_base_1_1_obj.html</anchorfile>
      <anchor>ac78838e61546ac775a8e608760d96e24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::qtime::ImageTargetCvPixelBuffer</name>
    <filename>classcinder_1_1qtime_1_1_image_target_cv_pixel_buffer.html</filename>
    <base>cinder::ImageTarget</base>
    <member kind="function">
      <type></type>
      <name>~ImageTargetCvPixelBuffer</name>
      <anchorfile>classcinder_1_1qtime_1_1_image_target_cv_pixel_buffer.html</anchorfile>
      <anchor>a92194ad82f8b6cf7f4a385779345c152</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>getRowPointer</name>
      <anchorfile>classcinder_1_1qtime_1_1_image_target_cv_pixel_buffer.html</anchorfile>
      <anchor>a26a34cb2f959b54ca581746cbde8cc7b</anchor>
      <arglist>(int32_t row)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalize</name>
      <anchorfile>classcinder_1_1qtime_1_1_image_target_cv_pixel_buffer.html</anchorfile>
      <anchor>a78ff8d29fd5910fb4777807ea9c4d2f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::CVPixelBufferRef</type>
      <name>getCvPixelBuffer</name>
      <anchorfile>classcinder_1_1qtime_1_1_image_target_cv_pixel_buffer.html</anchorfile>
      <anchor>a53cdfb29d5203904fa6a459bf2eef4e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageTargetCvPixelBufferRef</type>
      <name>createRef</name>
      <anchorfile>classcinder_1_1qtime_1_1_image_target_cv_pixel_buffer.html</anchorfile>
      <anchor>a873c9a704f0b2877095f5b3657c8b55f</anchor>
      <arglist>(ImageSourceRef imageSource, bool convertToYpCbCr=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageTargetCvPixelBuffer</name>
      <anchorfile>classcinder_1_1qtime_1_1_image_target_cv_pixel_buffer.html</anchorfile>
      <anchor>ae87a9f675ca2cb3861bab973c371a122</anchor>
      <arglist>(ImageSourceRef imageSource, bool convertToYpCbCr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>convertDataToYpCbCr</name>
      <anchorfile>classcinder_1_1qtime_1_1_image_target_cv_pixel_buffer.html</anchorfile>
      <anchor>a12f0b091417ac8214fb79e6f3195d2d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>convertDataToAYpCbCr</name>
      <anchorfile>classcinder_1_1qtime_1_1_image_target_cv_pixel_buffer.html</anchorfile>
      <anchor>a1df811d6b3ce319de5ddbc717e37dc63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::CVPixelBufferRef</type>
      <name>mPixelBufferRef</name>
      <anchorfile>classcinder_1_1qtime_1_1_image_target_cv_pixel_buffer.html</anchorfile>
      <anchor>a0639bb9853ccba07512154314b845483</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>mRowBytes</name>
      <anchorfile>classcinder_1_1qtime_1_1_image_target_cv_pixel_buffer.html</anchorfile>
      <anchor>a2bd700ae2c1ab46559f9408c9fe4598a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint8_t *</type>
      <name>mData</name>
      <anchorfile>classcinder_1_1qtime_1_1_image_target_cv_pixel_buffer.html</anchorfile>
      <anchor>a0b055e4eabd9a7e6be9acaf418257ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mConvertToYpCbCr</name>
      <anchorfile>classcinder_1_1qtime_1_1_image_target_cv_pixel_buffer.html</anchorfile>
      <anchor>a898f82d6216e5cc1fca6cd4c3b9e9593</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::qtime::ImageTargetGWorld</name>
    <filename>classcinder_1_1qtime_1_1_image_target_g_world.html</filename>
    <base>cinder::ImageTarget</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>getRowPointer</name>
      <anchorfile>classcinder_1_1qtime_1_1_image_target_g_world.html</anchorfile>
      <anchor>a48eefcf1da7020f21b54e5c47a7ff4fe</anchor>
      <arglist>(int32_t row)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalize</name>
      <anchorfile>classcinder_1_1qtime_1_1_image_target_g_world.html</anchorfile>
      <anchor>a348475338bde2fe364a9076a118e09cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>::GWorldPtr</type>
      <name>getGWorld</name>
      <anchorfile>classcinder_1_1qtime_1_1_image_target_g_world.html</anchorfile>
      <anchor>aac1ca6e825e2292943403c243d44b60a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageTargetGWorldRef</type>
      <name>createRef</name>
      <anchorfile>classcinder_1_1qtime_1_1_image_target_g_world.html</anchorfile>
      <anchor>abbb6a822cd92497e8337fe688889d642</anchor>
      <arglist>(ImageSourceRef imageSource)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageTargetGWorld</name>
      <anchorfile>classcinder_1_1qtime_1_1_image_target_g_world.html</anchorfile>
      <anchor>a11c3a2ea4ed703d1e48bfcd90293a8fd</anchor>
      <arglist>(ImageSourceRef imageSource)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::GWorldPtr</type>
      <name>mGWorld</name>
      <anchorfile>classcinder_1_1qtime_1_1_image_target_g_world.html</anchorfile>
      <anchor>ab8c20f1e09287d46879d8c2f2f145919</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>::PixMapHandle</type>
      <name>mPixMap</name>
      <anchorfile>classcinder_1_1qtime_1_1_image_target_g_world.html</anchorfile>
      <anchor>aafd9fb21a65fbf2359fe0e729e3ca39d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>mRowBytes</name>
      <anchorfile>classcinder_1_1qtime_1_1_image_target_g_world.html</anchorfile>
      <anchor>acebe46f1a3427392b6888199d0169643</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint8_t *</type>
      <name>mData</name>
      <anchorfile>classcinder_1_1qtime_1_1_image_target_g_world.html</anchorfile>
      <anchor>ae44a42c9d4edf0fd60b1a3587ee96ecb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>cinder::signals</name>
    <filename>namespacecinder_1_1signals.html</filename>
  </compound>
  <compound kind="namespace">
    <name>cinder::svg</name>
    <filename>namespacecinder_1_1svg.html</filename>
    <class kind="class">cinder::svg::Renderer</class>
    <class kind="class">cinder::svg::Value</class>
    <class kind="class">cinder::svg::Paint</class>
    <class kind="class">cinder::svg::Style</class>
    <class kind="class">cinder::svg::Node</class>
    <class kind="class">cinder::svg::Gradient</class>
    <class kind="class">cinder::svg::LinearGradient</class>
    <class kind="class">cinder::svg::RadialGradient</class>
    <class kind="class">cinder::svg::Circle</class>
    <class kind="class">cinder::svg::Ellipse</class>
    <class kind="class">cinder::svg::Path</class>
    <class kind="class">cinder::svg::Line</class>
    <class kind="class">cinder::svg::Rect</class>
    <class kind="class">cinder::svg::Polygon</class>
    <class kind="class">cinder::svg::Polyline</class>
    <class kind="class">cinder::svg::Use</class>
    <class kind="class">cinder::svg::Image</class>
    <class kind="class">cinder::svg::TextSpan</class>
    <class kind="class">cinder::svg::Text</class>
    <class kind="class">cinder::svg::Group</class>
    <class kind="class">cinder::svg::Doc</class>
    <class kind="class">cinder::svg::Exc</class>
    <class kind="class">cinder::svg::ValueExc</class>
    <class kind="class">cinder::svg::FloatParseExc</class>
    <class kind="class">cinder::svg::PathParseExc</class>
    <class kind="class">cinder::svg::TransformParseExc</class>
    <class kind="class">cinder::svg::ExcChildNotFound</class>
    <member kind="typedef">
      <type>std::function&lt; bool(const Node &amp;, svg::Style *)&gt;</type>
      <name>RenderVisitor</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>afe12e333736854f15e38036db034cedf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; TextSpan &gt;</type>
      <name>TextSpanRef</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>a382056ff45060d1b6b42b5605120c4b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Doc &gt;</type>
      <name>DocRef</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>af002e73e44dd222738515e38a7f9cbaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FillRule</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>aac326690dec1e2bf20e8dbf0072197f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILL_RULE_NONZERO</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>aac326690dec1e2bf20e8dbf0072197f3af51015cc4136be4798a9fe29f145efa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>FILL_RULE_EVENODD</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>aac326690dec1e2bf20e8dbf0072197f3a7272ebb1f74e7a1b66522337d513204d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LineCap</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>a3584e121924b34f82dade5b191620eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LINE_CAP_BUTT</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>a3584e121924b34f82dade5b191620eb5a29b17ce46048d8bc9ec29803a7cfcf39</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LINE_CAP_ROUND</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>a3584e121924b34f82dade5b191620eb5a9df2b74913569c0973cf6170f3870b9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LINE_CAP_SQUARE</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>a3584e121924b34f82dade5b191620eb5a87ec85fe66c5039438ddfc955e4a309c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LineJoin</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>afb945f112425694fe967574754a9e867</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LINE_JOIN_MITER</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>afb945f112425694fe967574754a9e867ac9ef735142d011770eefabd0570d16c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LINE_JOIN_ROUND</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>afb945f112425694fe967574754a9e867a8e2bfab10d4db158212f2a9950918375</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LINE_JOIN_BEVEL</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>afb945f112425694fe967574754a9e867a583c367d9b8a8bd3ff5b4eb2a9cae0b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FontWeight</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_100</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16a0c8798c639b8562d4f905805707304d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_200</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16a653e4e89bbfeb09532a4b429b2218a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_300</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16af097a55cfddab1c6d15c9eb73600450b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_400</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16ab0eb201e13a8d846e8b2f32ce3891fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_NORMAL</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16a76436d9379245753326552508e0c8a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_500</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16a281b9cfb9ea1bcca28b71801d7b741de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_600</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16a024e261fd332d290304a44d76a26f185</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_700</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16a1532f3d79d81e3e1a5eb4966ff44806f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_BOLD</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16a59ed9d3465464c7ba42e1cd358ea767e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_800</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16afca04e6138e67c6c539ad6d7835b44f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>WEIGHT_900</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>ae1e64d03db1807d7fd4773b09040fd16a3a08d23164abd8c5ad1d9a10e043a253</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ellipticalArc</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>a9df806a8b1002e827edbb84852fef1bb</anchor>
      <arglist>(Shape2d &amp;path, float x1, float y1, float x2, float y2, float rx, float ry, float xAxisRotation, bool largeArcFlag, bool sweepFlag)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>readNextCommand</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>acab60cb4e6eabc0a1c5e689cb8481e4d</anchor>
      <arglist>(const char **sInOut)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readFlag</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>a835e846fa0dd7dfe6b03f128a4b81340</anchor>
      <arglist>(const char **sInOut)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextItemIsFloat</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>af64a73b970503922157bb5f92ed0fc1d</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>Shape2d</type>
      <name>parsePath</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>a4142d36d11cd515da4036f1878a8e020</anchor>
      <arglist>(const std::string &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>vector&lt; Vec2f &gt;</type>
      <name>parsePointList</name>
      <anchorfile>namespacecinder_1_1svg.html</anchorfile>
      <anchor>a21ede2c7201c00989279288e1dff6f5f</anchor>
      <arglist>(const std::string &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::Renderer</name>
    <filename>classcinder_1_1svg_1_1_renderer.html</filename>
    <member kind="function">
      <type></type>
      <name>Renderer</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>aaa1e55576420f01e457e7e7e097f4295</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Renderer</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a03d30c4f2beff5d1c3edf29a0561f3f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pushGroup</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a8ae45acd3365248392301af5c0eee90d</anchor>
      <arglist>(const Group &amp;group, float opacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>popGroup</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>ab41b5408f5664114e12d0d712cbea321</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawPath</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a5d910052ae35d5e2417d5b6f3172cf6d</anchor>
      <arglist>(const svg::Path &amp;path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawPolyline</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a63d6a06368281265026ce5c36f4bd377</anchor>
      <arglist>(const svg::Polyline &amp;polyline)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawPolygon</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a13639bf582c3a0d431b4514dd13db88c</anchor>
      <arglist>(const svg::Polygon &amp;polygon)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawLine</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a8f4106b23e41a291d2318e97a5f0ff04</anchor>
      <arglist>(const svg::Line &amp;line)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawRect</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>ad01a1f6e38ec8afb54614ff05c7fe7cd</anchor>
      <arglist>(const svg::Rect &amp;rect)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawCircle</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>ad8d98217a969955258194b42a0283d1f</anchor>
      <arglist>(const svg::Circle &amp;circle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawEllipse</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a4ff240ccfa236151feba2e6600be356e</anchor>
      <arglist>(const svg::Ellipse &amp;ellipse)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>drawTextSpan</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>afc640c819b8a4cb6f5fe7d49e979ec47</anchor>
      <arglist>(const svg::TextSpan &amp;span)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pushMatrix</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>ad4db20859cf61694f559f889af35653b</anchor>
      <arglist>(const MatrixAffine2f &amp;m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>popMatrix</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a452a6db87da377e09e8367bf02417f37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>popFill</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a179da8f8744ac6bcd28e43af0c25b15a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>popStroke</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a2aaa45f057a6d6a91c98751679d3aa83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pushFillOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a112a3595f560807c41ecf9a8bc185456</anchor>
      <arglist>(float opacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>popFillOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a19fe640134237f0aecd7538e9d19b706</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pushStrokeOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>ab43cdf39bcd287b98627114a4b1514ac</anchor>
      <arglist>(float opacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>popStrokeOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>ab26d460c83b9d4b91d8f904270b4df92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pushStrokeWidth</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a6fedbfc92aae5874be5c532020b05514</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>popStrokeWidth</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a3d48c398e9ecc856752add6ede4bd1c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pushFillRule</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a0614cb5c2653cb29cf1215092990aeee</anchor>
      <arglist>(FillRule rule)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>popFillRule</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>a7d9d6e1d88c63e86aea38921f6cf8a72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>svg::Node</name>
      <anchorfile>classcinder_1_1svg_1_1_renderer.html</anchorfile>
      <anchor>af96209bf021ba4fc0034112e9ceb8764</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::Value</name>
    <filename>classcinder_1_1svg_1_1_value.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Unit</name>
      <anchorfile>classcinder_1_1svg_1_1_value.html</anchorfile>
      <anchor>aaf45634887988cdda4ed2527c56b045f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>USER</name>
      <anchorfile>classcinder_1_1svg_1_1_value.html</anchorfile>
      <anchor>aaf45634887988cdda4ed2527c56b045fab2bcd1b75c3fd4c09381c99ed9706eae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PX</name>
      <anchorfile>classcinder_1_1svg_1_1_value.html</anchorfile>
      <anchor>aaf45634887988cdda4ed2527c56b045fa9aa666c278ba5fe756a37e3416699e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PERCENT</name>
      <anchorfile>classcinder_1_1svg_1_1_value.html</anchorfile>
      <anchor>aaf45634887988cdda4ed2527c56b045fac6a9b33aaaef874e414cf1f4635cfb28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PT</name>
      <anchorfile>classcinder_1_1svg_1_1_value.html</anchorfile>
      <anchor>aaf45634887988cdda4ed2527c56b045fa9678f3ac3659fb0b675af0f809797c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PC</name>
      <anchorfile>classcinder_1_1svg_1_1_value.html</anchorfile>
      <anchor>aaf45634887988cdda4ed2527c56b045fa2f6c83bac5477af002237d809b1c0fc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>MM</name>
      <anchorfile>classcinder_1_1svg_1_1_value.html</anchorfile>
      <anchor>aaf45634887988cdda4ed2527c56b045fa311a91b3a541881245586f7bdd441c16</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CM</name>
      <anchorfile>classcinder_1_1svg_1_1_value.html</anchorfile>
      <anchor>aaf45634887988cdda4ed2527c56b045fa54582b610c5156aeaf83417467671bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>INCH</name>
      <anchorfile>classcinder_1_1svg_1_1_value.html</anchorfile>
      <anchor>aaf45634887988cdda4ed2527c56b045fa7dd46aa2233149fcee6d8fd8e4235d0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EM</name>
      <anchorfile>classcinder_1_1svg_1_1_value.html</anchorfile>
      <anchor>aaf45634887988cdda4ed2527c56b045fa2142dca9a1b0d22d1f0e9f5c16580422</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>EX</name>
      <anchorfile>classcinder_1_1svg_1_1_value.html</anchorfile>
      <anchor>aaf45634887988cdda4ed2527c56b045fa40c04c20530527aba0954f5efffa6373</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Value</name>
      <anchorfile>classcinder_1_1svg_1_1_value.html</anchorfile>
      <anchor>a778ea597d2e7e8f2ee665f11f4dd0d05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Value</name>
      <anchorfile>classcinder_1_1svg_1_1_value.html</anchorfile>
      <anchor>a0175fd1751fcd74d7b3e0eab3951dd97</anchor>
      <arglist>(float value, Unit unit=USER)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>asUser</name>
      <anchorfile>classcinder_1_1svg_1_1_value.html</anchorfile>
      <anchor>a8faef5e5d4cacbfeecc7b066bb516d5e</anchor>
      <arglist>(float percentOf=100, float dpi=72, float fontSize=12, float fontXHeight=7) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUser</name>
      <anchorfile>classcinder_1_1svg_1_1_value.html</anchorfile>
      <anchor>abaabd86901ddcc4876c3c7cede82fd91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPercent</name>
      <anchorfile>classcinder_1_1svg_1_1_value.html</anchorfile>
      <anchor>ae78020ace56230df748f5d91fbfa0e57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPixels</name>
      <anchorfile>classcinder_1_1svg_1_1_value.html</anchorfile>
      <anchor>a863cd635bc92de2140f707de457e98c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Value</type>
      <name>parse</name>
      <anchorfile>classcinder_1_1svg_1_1_value.html</anchorfile>
      <anchor>a030ae93457416d92fb7652448709f320</anchor>
      <arglist>(const char **sInOut)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Value</type>
      <name>parse</name>
      <anchorfile>classcinder_1_1svg_1_1_value.html</anchorfile>
      <anchor>ad4545c028d01280c5903f103564155aa</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="variable">
      <type>Unit</type>
      <name>mUnit</name>
      <anchorfile>classcinder_1_1svg_1_1_value.html</anchorfile>
      <anchor>ad17499a9eb4cddec1d8f5e2ab4230359</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mValue</name>
      <anchorfile>classcinder_1_1svg_1_1_value.html</anchorfile>
      <anchor>a1ca86fb7f42004e87229ef8c16ab8ec3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::Paint</name>
    <filename>classcinder_1_1svg_1_1_paint.html</filename>
    <member kind="enumvalue">
      <type>@</type>
      <name>NONE</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>af3dd27e48a224049f6aadab070a6cd82a547fcfde4a4e4cf983ff78c47ae1269e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>COLOR</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>af3dd27e48a224049f6aadab070a6cd82a09e6d8a61a6c6519bb5dedaf826d1a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LINEAR_GRADIENT</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>af3dd27e48a224049f6aadab070a6cd82a20bd545aa9384c467da3ad0c0cd2c3b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>RADIAL_GRADIENT</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>af3dd27e48a224049f6aadab070a6cd82ae5a0d4effe7875e33f4d2949135ca686</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Paint</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>ac79373c70d72430c448312c3d4564f9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Paint</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>a5dc25aa9ca06b919c1a8a3d982192720</anchor>
      <arglist>(uint8_t type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Paint</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>a9a90597fd968d48a2ae700034e0d7a20</anchor>
      <arglist>(const ColorA8u &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNone</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>a17f9bacbc93c168de63b01501b7176f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLinearGradient</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>af720857b4850f0ac17120aa3e846ae9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRadialGradient</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>a4fe09666f2614dd6238a84f472c39cf1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ColorA8u &amp;</type>
      <name>getColor</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>a8d65e74d65367fa44ac9026b5938485f</anchor>
      <arglist>(size_t idx=0) const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOffset</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>a89420d54d950b4de2588b82c09653523</anchor>
      <arglist>(size_t idx) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getNumColors</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>a3a70fdfa7872132a2fb8985a614a6dc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>getCoords0</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>a6cd8d97f277e86e32b88fffd05fff546</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>getCoords1</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>a788566cc2a55a3719976809a0137886c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRadius</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>a743adfd39b53955cfc5c0e6ea46ec52e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>useObjectBoundingBox</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>a8fa0dbe2f8e44005161ad91d996b06f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>specifiesTransform</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>adb1be14144f6738adb8192e8caf477a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixAffine2f</type>
      <name>getTransform</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>a974840bca0b74fb7608ff3e62645e55c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Paint</type>
      <name>parse</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>a9dd39e6db8f9d3b337aee265e9702fef</anchor>
      <arglist>(const char *value, bool *specified, const Node *parentNode)</arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>mType</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>a088be0cb9b9a38e52ca1ee414160dbdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::pair&lt; float, ColorA8u &gt; &gt;</type>
      <name>mStops</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>ab3bb4b6bf3820e04adca2b5497f01c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec2f</type>
      <name>mCoords0</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>ac3b9b4ba939f733c6e116aa87fcc852a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec2f</type>
      <name>mCoords1</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>a34939544e19f155dff6ab952d5523a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mRadius</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>abbff727fed991a81d29039dadf018370</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mUseObjectBoundingBox</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>ab48b1d38e2d5ff86b6586ca1231b95a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MatrixAffine2f</type>
      <name>mTransform</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>ad842c5f6b0c4668a0006790f4859d87f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mSpecifiesTransform</name>
      <anchorfile>classcinder_1_1svg_1_1_paint.html</anchorfile>
      <anchor>a4ced1b73cfc8e2c8d45df27d893b5c02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::Style</name>
    <filename>classcinder_1_1svg_1_1_style.html</filename>
    <member kind="function">
      <type></type>
      <name>Style</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a3a3333f86f7f0736921b5fa24962b4d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Style</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>af5e1ded6440cc4181f2eca9787a5dfff</anchor>
      <arglist>(const XmlTree &amp;xml, const Node *parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>ab7c5a2bc8466f57bc6f413a88e46433b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>specifiesFill</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a1d014da1d828c6a9e7ad2e925fa31c23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unspecifyFill</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a289e7ac1caef68f61dd7ef0663099ce0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Paint &amp;</type>
      <name>getFill</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a5e71f0be7512eb545f9fbb4eb09303ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFill</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a520864aa4cf246192f9d65f30ee6a923</anchor>
      <arglist>(const Paint &amp;fill)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>specifiesStroke</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a8ade682d975d0c56c58f1025726df8d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unspecifyStroke</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a31e6e1966fdda4c10ee791d4c45d186b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Paint &amp;</type>
      <name>getStroke</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>abb753ce4e490d2a3f245af090d0e41b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStroke</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>aee30aa2d81aa7d922a4f55864cde3679</anchor>
      <arglist>(const Paint &amp;stroke)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>specifiesOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a1bafe6f6e67f8f7c97e5c20bb8499aee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unspecifyOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a88a0a87ca92674b3ee144907d2fbc74e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>ad44e56f2dbb8e5a114884f2f01531c0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a26fc8b45cb7c0869bd6938077a056d63</anchor>
      <arglist>(float opacity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>specifiesStrokeOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a4cc88eb3fb35b9a8d1b2108c66caa3e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unspecifyStrokeOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>ae33d0e40351a12b6ad2149430fed439b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getStrokeOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a2efa5c4a1bdcf31ec86dab9303e595ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrokeOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a61efc0576639578018626aaf37ae2bc4</anchor>
      <arglist>(float strokeOpacity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>specifiesFillOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a00f815b78b5628650730bd1e634b4be3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unspecifyFillOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a3101ebc0eff9855f04145060a0f090b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFillOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a2aea7803e0827217d511cd45354a2ab5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFillOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a38d1eb1ee2d2c2099e4698772e02d178</anchor>
      <arglist>(float fillOpacity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>specifiesStrokeWidth</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a84cfd281f2e8e0de66a62b0b0e931bb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unspecifyStrokeWidth</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a2cd09235feb6198d808902612518553d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getStrokeWidth</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>ae968e045d66653356d8435a0ae7b5353</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrokeWidth</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>aa34bfa14ed72d59b457b1d7f4c76e9b6</anchor>
      <arglist>(float strokeWidth)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>specifiesFillRule</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a17d8665dfb708584a844ccb16a619ce0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unspecifyFillRule</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>adb8fbc576db238ccc4107633cbee9473</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FillRule</type>
      <name>getFillRule</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a23b0fd2b70c0d4eae613741b676da230</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFillRule</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a3aba6098a5909e007d70b5f77bee7c39</anchor>
      <arglist>(FillRule fillRule)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>specifiesLineCap</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>ac1f00073982cf8b3f7d983bc3bb379f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unspecifyLineCap</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>ad1c80e530875e1b5e85afc0d888c481d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LineCap</type>
      <name>getLineCap</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a803db36d0443e9d956542ff2478a6adf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLineCap</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a06733cb37790ae7004718f213a368d89</anchor>
      <arglist>(LineCap lineCap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>specifiesLineJoin</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a5e23be26a752dc467675d70a77ed96a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unspecifyLineJoin</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>ad0a505562cc1a0c5ab8c3ddf6243994c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>LineJoin</type>
      <name>getLineJoin</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a1b04d8e6855156136d40d5cde3c83153</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLineJoin</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>aeba1ff55517a3a8ae0dc896ca23bb7dc</anchor>
      <arglist>(LineJoin lineJoin)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>specifiesFontFamilies</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>aee58450eddcf88ad60623136bc08dacd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unspecifyFontFamilies</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>aa122807781ca7f7bc9f377c31a426007</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getFontFamilies</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a00900c62fa9611f3fb0616b44aee04ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt; &amp;</type>
      <name>getFontFamilies</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a4427f03e88dddd4ae2d1b4cd02cffc3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontFamily</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a6392f287b966ca2fc44559149b55b74f</anchor>
      <arglist>(const std::string &amp;family)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontFamilies</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a187be5ab40d6ca93f0ac2fdc6f708c26</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;families)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>specifiesFontSize</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>af4ac83b70a5ccb621c18877a504042fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unspecifyFontSize</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>aa0f23fbe749940edbdf73eadc1fc016a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getFontSize</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a78d1a833eefedc7a38481bdc7d06f7fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontSize</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>ab3ee4bd8a472ced5fdc73978f9f47cf5</anchor>
      <arglist>(const Value &amp;fontSize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>specifiesFontWeight</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>ad9657aa3762d1c87ca4b243a75951fc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unspecifyFontWeight</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a36e7449053560b1392cebbe46d45e375</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FontWeight</type>
      <name>getFontWeight</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a1771a1430bc8ccbd8deff670db142855</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFontWeight</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a2306d1f9967bb54fe93f863752e8d20f</anchor>
      <arglist>(FontWeight weight)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>specifiesVisible</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a92f2becf662ed4f20a47bf1ad9356856</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>afe60bd006e589e710a515fa46b6db326</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>ac2d0ff7e4d574ed4b30ba505478e03b2</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unspecifyVisible</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a9776bc2e946e9716d476fe75d7889283</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDisplayNone</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a0194f3fa67cf82f2606d84938f84781e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisplayNone</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>aa77821c5756742fddec2d6bc001733b5</anchor>
      <arglist>(bool displayNone)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startRender</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>afb485a7b971fe1cf04eb05d6fa3b33b0</anchor>
      <arglist>(Renderer &amp;renderer, bool isNodeDrawable) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finishRender</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a71e60727116f8a8b47388d5644579601</anchor>
      <arglist>(Renderer &amp;renderer, bool isNodeDrawable) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parseStyleAttribute</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a20790ee72368b81c956b0df25cfd1c2d</anchor>
      <arglist>(const std::string &amp;stylePropertyString, const Node *parent)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parseProperty</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a97a3858f26a3881029b6d478a4b8c075</anchor>
      <arglist>(const std::string &amp;key, const std::string &amp;value, const Node *parent)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Style</type>
      <name>makeGlobalDefaults</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a2e2ae0d42a304b40691a8c4f49c89427</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Paint &amp;</type>
      <name>getFillDefault</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a518fa080e325ab061b980f6556eb9d11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Paint &amp;</type>
      <name>getStrokeDefault</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a96cc4feb1fdf3b6758046d2b48324118</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getOpacityDefault</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>aa98b46536b18c2318c9eab82445c9ef3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getStrokeOpacityDefault</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a1244969f3510d87cc59fbe28065ac485</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getFillOpacityDefault</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a2f9e9a7b476aa2b1a8f15e154fbe8655</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>getStrokeWidthDefault</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>aeff4bdcae0a9cf6765da4cd49818617b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FillRule</type>
      <name>getFillRuleDefault</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a9e9a09927234ce34b52bcf9895dafb09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LineCap</type>
      <name>getLineCapDefault</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>adbb51bb598aba9e7a799b3ede9d5d1a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LineJoin</type>
      <name>getLineJoinDefault</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a5a09779a8e85581e3aa2ab4daf7743f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::vector&lt; std::string &gt; &amp;</type>
      <name>getFontFamiliesDefault</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a8335d0550cab8b6457518aed59385833</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Value</type>
      <name>getFontSizeDefault</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a2fad554e64a0c19f48b583502fbc9dd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FontWeight</type>
      <name>getFontWeightDefault</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>ade6fe568886832666400ec51357c005f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mSpecifiesOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a2575fc2431f91de32b74c95e45a3740c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a66cda073d088ddc15493f427001ae737</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mSpecifiesFillOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a45ebf07dfb02fcaf20ed592e6b1468de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mSpecifiesStrokeOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a9618506b1c9077ce652425e5f0ef91b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mFillOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>ac522fb3bdff29dbe1e4523ce27d41b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mStrokeOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a6f1d52b6ab8d19b89bd03419d809738a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mSpecifiesFill</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a37166f166c60ea604f85f72c8f769f6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mSpecifiesStroke</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>aa33df403cae421075977c947ee374c8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Paint</type>
      <name>mFill</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>aed83f55a54495cdeee1fea89c755d9ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Paint</type>
      <name>mStroke</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a6dd4f24bdeb968c215da5a3b65a24027</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mSpecifiesStrokeWidth</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a5f480cd9e89d457b5fd0ae2e69ce378c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mStrokeWidth</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a8d84c1b8d0922efb4191b02f2f9ac652</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mSpecifiesFillRule</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a3a24abbe98a45a6e66c7af7222b32fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FillRule</type>
      <name>mFillRule</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>abba00113ac20ae31c73bb5d340c0c3f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mSpecifiesLineCap</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>af96f6399afa87a27872d1863d24541b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LineCap</type>
      <name>mLineCap</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>ad2883eee2113da8cd6d5f13147886fa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mSpecifiesLineJoin</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>abf4fbe930fe4d06327904adebf309107</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LineJoin</type>
      <name>mLineJoin</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>aabb89bda8e0027f7387af98cc379e28b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mSpecifiesFontFamilies</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a1ce1998d3eba6460fffe1d49c56c8bf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mSpecifiesFontSize</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a65b566eeaa66f2f9fd40751874159286</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mSpecifiesFontWeight</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>aef4f2af95dbfee975ae83b80d2f728df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>mFontFamilies</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a40b200da4e76bdfe6a7dbea5f2ab2342</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Value</type>
      <name>mFontSize</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a09e2625b4646c6da8068b659a42604a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FontWeight</type>
      <name>mFontWeight</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>ada0cfd37b35b1f799bf803c36dfb5880</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mSpecifiesVisible</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>abad5266a1ace1aa0621bd35a07965ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mVisible</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>a6333abc996f21f476d348a49c2639654</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mDisplayNone</name>
      <anchorfile>classcinder_1_1svg_1_1_style.html</anchorfile>
      <anchor>aa9f3b8a377d903d9715b65f067070a8c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::Node</name>
    <filename>classcinder_1_1svg_1_1_node.html</filename>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a19745ed433f2ea91e6a77aca1e4e3544</anchor>
      <arglist>(const Node *parent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Node</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>aad2f1192848a06dc78eaf7a3b075db20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>class Doc *</type>
      <name>getDoc</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a8ce9e8fd093411b25dd9e619f562c2b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>getParent</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>af4abcd99381394ebe6f2e6f5f317eb1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getId</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>afda6335ee7ab5202bf89c4697b5a62c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDomPath</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a523741fa2e7066dedb179e8a1e3c6c86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Style &amp;</type>
      <name>getStyle</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>ad4f833968b675788dca6ef9b4fd75f98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStyle</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>af09a430c007cdc1c28753a68d5b25bba</anchor>
      <arglist>(const Style &amp;style)</arglist>
    </member>
    <member kind="function">
      <type>Style</type>
      <name>calcInheritedStyle</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>ac4c29d03f8e5bad1178963641a96d194</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsPoint</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a3266c92f24ebb1102fd0a4c612962ff9</anchor>
      <arglist>(const Vec2f &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>render</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a052d522dd796aca6d3c90efb0f55d8c8</anchor>
      <arglist>(Renderer &amp;renderer) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Node *</type>
      <name>findInAncestors</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>aa3ea2ddaba841fbd38c2849e313c9d9f</anchor>
      <arglist>(const std::string &amp;elementId) const </arglist>
    </member>
    <member kind="function">
      <type>Paint</type>
      <name>findPaintInAncestors</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a1246ca749e1bd44ebcf23c650764b921</anchor>
      <arglist>(const std::string &amp;paintName) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>specifiesTransform</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a88ed15f468a74b1647ec3bd9af0b31ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixAffine2f</type>
      <name>getTransform</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a54ec58d4feb1e1d3ae0e6f035fc9fbce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTransform</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a4efa154c52a5028df358242d4e8c7281</anchor>
      <arglist>(const MatrixAffine2f &amp;transform)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unspecifyTransform</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a2d4706c3e304b2b0e6a9cfd3bcb6ab51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixAffine2f</type>
      <name>getTransformInverse</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a9c738c758828e9cb40d902a86f8c27fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixAffine2f</type>
      <name>getTransformAbsolute</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a9e57fe270815dfb00424df5bafcf5311</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MatrixAffine2f</type>
      <name>getTransformAbsoluteInverse</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>abb44b1ca4cbea98857e67319756ec471</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rectf</type>
      <name>getBoundingBox</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>abbf1b613f99deb70af552ba74b062f32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Rectf</type>
      <name>getBoundingBoxAbsolute</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a1657f22b5fd4d7743fc16a4062cb7d68</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Shape2d</type>
      <name>getShape</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a667465e498fb6e102309894ac5bec251</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Shape2d</type>
      <name>getShapeAbsolute</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>ad44ffe396dd8892c49b0fa726f8aa3e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Paint &amp;</type>
      <name>getFill</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a68849c9fcb34918ab7e248bd73715606</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Paint &amp;</type>
      <name>getStroke</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a5c08eb7d7ad7dc5957c5cabf7950bb4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>afa112e0c94feaa1960e8a3c8b86e32e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFillOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>ad73d4d318298eaa8d6882b4442fcb3be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getStrokeOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a2088607fc6fb779dd9e117dc6bbeaba2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FillRule</type>
      <name>getFillRule</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>aa9e5c0cb651769b873e1a3b1ec9c1950</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LineCap</type>
      <name>getLineCap</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>ae6df33951f8c8e5e44d86629f4cc88b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>LineJoin</type>
      <name>getLineJoin</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a16bdf9f6f4bb3537502a9befc917af37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getStrokeWidth</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a90ad050a6db67f3c4837d53130601a28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getFontFamilies</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>aacbe5424c2f3582d49fe8a1e3396fd80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getFontSize</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a20e8c1d7b1a8ac0790bc16166d029325</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>ac205f3484f47ba59e544bd3ced4f3180</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDisplayNone</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>aec90ff76022c33bedc6614158267e2ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Node</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>ad95decad3402056bfd37d39f8187d6f2</anchor>
      <arglist>(const Node *parent, const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDrawable</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a18e7d77b545f93edc634bf88422e3085</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>startRender</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>ad0ef2ae56d9f47189d2616fa3a52b6b5</anchor>
      <arglist>(Renderer &amp;renderer, const Style &amp;style) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finishRender</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>ac2363a4c0410b723b6f1811dcfeec1c0</anchor>
      <arglist>(Renderer &amp;renderer, const Style &amp;style) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>renderSelf</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a45edac4f8c6728e35e978ea53d3fdd62</anchor>
      <arglist>(Renderer &amp;renderer) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Rectf</type>
      <name>calcBoundingBox</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a7f6ab534126d391696b36424c04b5343</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parseStyle</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>ac1e44d34ff40e1b51dca9a47ba6dd7d9</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Paint</type>
      <name>parsePaint</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a0bef0bd66ecf56c29181d952a18cf468</anchor>
      <arglist>(const char *value, bool *specified, const Node *parentNode)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static MatrixAffine2f</type>
      <name>parseTransform</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a25115b2264f06dbf570137904ea058c7</anchor>
      <arglist>(const std::string &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>parseTransformComponent</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>accbd31311d9b9da710bfc5bcb05ca95e</anchor>
      <arglist>(const char **c, MatrixAffine2f *result)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>findStyleValue</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a5dbdf4575265aa0f0149c83a1999525c</anchor>
      <arglist>(const std::string &amp;styleString, const std::string &amp;key)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Node *</type>
      <name>mParent</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a5ca29737a2c6424210f2b4f9bd8273cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mId</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a16265d18c95a0a9f312d029f718662a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Style</type>
      <name>mStyle</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a8dd4ceb2295474dcb12ebc1bfc86a3a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mSpecifiesTransform</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a37fd05fda3bb7c25645ac87dbe54a480</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MatrixAffine2f</type>
      <name>mTransform</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>af4a1ee75573b5d9aec2cf94a64a229f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mBoundingBoxCached</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>ab019ac5b0a33095e1b5cc719972a5e78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Rectf</type>
      <name>mBoundingBox</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a346efd899af34e90d0284c0f5538b0bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Group</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a2697825715974a353728f0d4d5658112</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Use</name>
      <anchorfile>classcinder_1_1svg_1_1_node.html</anchorfile>
      <anchor>a7b479862be57f4448b155a225b5972ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::Gradient</name>
    <filename>classcinder_1_1svg_1_1_gradient.html</filename>
    <base>cinder::svg::Node</base>
    <class kind="class">cinder::svg::Gradient::Stop</class>
    <member kind="function">
      <type></type>
      <name>Gradient</name>
      <anchorfile>classcinder_1_1svg_1_1_gradient.html</anchorfile>
      <anchor>a990f627caf22eedec09395552dab00e8</anchor>
      <arglist>(const Node *parent, const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>useObjectBoundingBox</name>
      <anchorfile>classcinder_1_1svg_1_1_gradient.html</anchorfile>
      <anchor>ae6f0ec97a5da226dfb149729fe4a36b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>specifiesTransform</name>
      <anchorfile>classcinder_1_1svg_1_1_gradient.html</anchorfile>
      <anchor>a054098bc07c39ed64cb400bf92ad4559</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderSelf</name>
      <anchorfile>classcinder_1_1svg_1_1_gradient.html</anchorfile>
      <anchor>af0dcdb6f199c1106ce7459d52f5b4dfc</anchor>
      <arglist>(Renderer &amp;renderer) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classcinder_1_1svg_1_1_gradient.html</anchorfile>
      <anchor>a23e8b4475d7da1c03d15cd44a7bef5a0</anchor>
      <arglist>(const Node *parent, const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copyAttributesFrom</name>
      <anchorfile>classcinder_1_1svg_1_1_gradient.html</anchorfile>
      <anchor>a2103412468f71b07f5b719b2d29a9789</anchor>
      <arglist>(const Gradient &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Paint</type>
      <name>asPaint</name>
      <anchorfile>classcinder_1_1svg_1_1_gradient.html</anchorfile>
      <anchor>a6b44804e594157c21d28f191da9cf5f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Stop &gt;</type>
      <name>mStops</name>
      <anchorfile>classcinder_1_1svg_1_1_gradient.html</anchorfile>
      <anchor>a5bd375af62d70f8ffb678d2709a84978</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec2f</type>
      <name>mCoords0</name>
      <anchorfile>classcinder_1_1svg_1_1_gradient.html</anchorfile>
      <anchor>a03b71dccd191db4e169f4458b91c3121</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec2f</type>
      <name>mCoords1</name>
      <anchorfile>classcinder_1_1svg_1_1_gradient.html</anchorfile>
      <anchor>a30a904335325911777828589f594983b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mUseObjectBoundingBox</name>
      <anchorfile>classcinder_1_1svg_1_1_gradient.html</anchorfile>
      <anchor>a4d40059711a11934bf49b549895220d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mSpecifiesTransform</name>
      <anchorfile>classcinder_1_1svg_1_1_gradient.html</anchorfile>
      <anchor>a96665fa773a5ed63d58002eb3d0ffde1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MatrixAffine2f</type>
      <name>mTransform</name>
      <anchorfile>classcinder_1_1svg_1_1_gradient.html</anchorfile>
      <anchor>aa3a1fb1ec982822f8485b34e288c1b31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::Gradient::Stop</name>
    <filename>classcinder_1_1svg_1_1_gradient_1_1_stop.html</filename>
    <member kind="function">
      <type></type>
      <name>Stop</name>
      <anchorfile>classcinder_1_1svg_1_1_gradient_1_1_stop.html</anchorfile>
      <anchor>a51b3df6d10383ada23a706ea7e4eba2d</anchor>
      <arglist>(const Node *parent, const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mOffset</name>
      <anchorfile>classcinder_1_1svg_1_1_gradient_1_1_stop.html</anchorfile>
      <anchor>a15fe1cd482a44ea1966ea9202e4ccc89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ColorA8u</type>
      <name>mColor</name>
      <anchorfile>classcinder_1_1svg_1_1_gradient_1_1_stop.html</anchorfile>
      <anchor>ac50439aa1cd9376f7010ffc84524571c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_gradient_1_1_stop.html</anchorfile>
      <anchor>a542d64f83f083b066b9722fc79b5ba79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mSpecifiesColor</name>
      <anchorfile>classcinder_1_1svg_1_1_gradient_1_1_stop.html</anchorfile>
      <anchor>aeb0de6c4b555e837324937eb19c369db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mSpecifiesOpacity</name>
      <anchorfile>classcinder_1_1svg_1_1_gradient_1_1_stop.html</anchorfile>
      <anchor>aff620eeccb5c52ce50cccdea9ec769c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::LinearGradient</name>
    <filename>classcinder_1_1svg_1_1_linear_gradient.html</filename>
    <base>cinder::svg::Gradient</base>
    <member kind="function">
      <type></type>
      <name>LinearGradient</name>
      <anchorfile>classcinder_1_1svg_1_1_linear_gradient.html</anchorfile>
      <anchor>adacb4fbb401952b4bdd978ae22baa7c9</anchor>
      <arglist>(const Node *parent, const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="function">
      <type>Paint</type>
      <name>asPaint</name>
      <anchorfile>classcinder_1_1svg_1_1_linear_gradient.html</anchorfile>
      <anchor>a98bd180a04dc56b0fa264b89a71858f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classcinder_1_1svg_1_1_linear_gradient.html</anchorfile>
      <anchor>ad6c27cb362bc8c4f291aba2e20638007</anchor>
      <arglist>(const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDrawable</name>
      <anchorfile>classcinder_1_1svg_1_1_linear_gradient.html</anchorfile>
      <anchor>aef48747ca4ab6145f3507fc3d00fae6d</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::RadialGradient</name>
    <filename>classcinder_1_1svg_1_1_radial_gradient.html</filename>
    <base>cinder::svg::Gradient</base>
    <member kind="function">
      <type></type>
      <name>RadialGradient</name>
      <anchorfile>classcinder_1_1svg_1_1_radial_gradient.html</anchorfile>
      <anchor>a3603e401dbac1831deb7fcc73f6798be</anchor>
      <arglist>(const Node *parent, const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="function">
      <type>Paint</type>
      <name>asPaint</name>
      <anchorfile>classcinder_1_1svg_1_1_radial_gradient.html</anchorfile>
      <anchor>a514e8938ea2bdae9630488bcae020220</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classcinder_1_1svg_1_1_radial_gradient.html</anchorfile>
      <anchor>af3fd38766faaef774b4f9fdbc2c2c22a</anchor>
      <arglist>(const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDrawable</name>
      <anchorfile>classcinder_1_1svg_1_1_radial_gradient.html</anchorfile>
      <anchor>afcb948ecb0d2fc79f0c46517159396a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mRadius</name>
      <anchorfile>classcinder_1_1svg_1_1_radial_gradient.html</anchorfile>
      <anchor>a5dd38c0f4769100cc686ed8693384820</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::Circle</name>
    <filename>classcinder_1_1svg_1_1_circle.html</filename>
    <base>cinder::svg::Node</base>
    <member kind="function">
      <type></type>
      <name>Circle</name>
      <anchorfile>classcinder_1_1svg_1_1_circle.html</anchorfile>
      <anchor>a7016562080ea7a7722cc93510aaa4dce</anchor>
      <arglist>(const Node *parent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Circle</name>
      <anchorfile>classcinder_1_1svg_1_1_circle.html</anchorfile>
      <anchor>ab4ea2773f86b27feba0d39666fb82f01</anchor>
      <arglist>(const Node *parent, const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>getCenter</name>
      <anchorfile>classcinder_1_1svg_1_1_circle.html</anchorfile>
      <anchor>a9731ea938d48d09dafde31667b97102c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRadius</name>
      <anchorfile>classcinder_1_1svg_1_1_circle.html</anchorfile>
      <anchor>a8723e28106750df8f95d285adc5af970</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsPoint</name>
      <anchorfile>classcinder_1_1svg_1_1_circle.html</anchorfile>
      <anchor>a0e302a5e789d95d28ab90e3dcfb15eb0</anchor>
      <arglist>(const Vec2f &amp;pt) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Shape2d</type>
      <name>getShape</name>
      <anchorfile>classcinder_1_1svg_1_1_circle.html</anchorfile>
      <anchor>ac49d30ed87b5dfc20eafd62b82769988</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderSelf</name>
      <anchorfile>classcinder_1_1svg_1_1_circle.html</anchorfile>
      <anchor>a96b2f4f477be8aa4799c25d608b02ea4</anchor>
      <arglist>(Renderer &amp;renderer) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Rectf</type>
      <name>calcBoundingBox</name>
      <anchorfile>classcinder_1_1svg_1_1_circle.html</anchorfile>
      <anchor>aeb0bdd68fa20447e89643e844debf95e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec2f</type>
      <name>mCenter</name>
      <anchorfile>classcinder_1_1svg_1_1_circle.html</anchorfile>
      <anchor>af723d546f6d3d192ca4804fe3fd39677</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mRadius</name>
      <anchorfile>classcinder_1_1svg_1_1_circle.html</anchorfile>
      <anchor>a32287b8b2d665c7db758985eaa561063</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::Ellipse</name>
    <filename>classcinder_1_1svg_1_1_ellipse.html</filename>
    <base>cinder::svg::Node</base>
    <member kind="function">
      <type></type>
      <name>Ellipse</name>
      <anchorfile>classcinder_1_1svg_1_1_ellipse.html</anchorfile>
      <anchor>a1f97e1e1b79256648dd245d66e0f1553</anchor>
      <arglist>(const Node *parent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ellipse</name>
      <anchorfile>classcinder_1_1svg_1_1_ellipse.html</anchorfile>
      <anchor>a385856a4895e8880a5ea99b1b471b97b</anchor>
      <arglist>(const Node *parent, const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>getCenter</name>
      <anchorfile>classcinder_1_1svg_1_1_ellipse.html</anchorfile>
      <anchor>ada3b460053ab8b174c8d1248183873c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRadiusX</name>
      <anchorfile>classcinder_1_1svg_1_1_ellipse.html</anchorfile>
      <anchor>a7136f6f352e284ab154a7b1274a59103</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRadiusY</name>
      <anchorfile>classcinder_1_1svg_1_1_ellipse.html</anchorfile>
      <anchor>a45febac4d9d8515410e9bbeec4e5f90e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsPoint</name>
      <anchorfile>classcinder_1_1svg_1_1_ellipse.html</anchorfile>
      <anchor>a6f30749f16bffbccd6a82968f1ac271b</anchor>
      <arglist>(const Vec2f &amp;pt) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Shape2d</type>
      <name>getShape</name>
      <anchorfile>classcinder_1_1svg_1_1_ellipse.html</anchorfile>
      <anchor>ad08a3c1761acd02ed5eb7dd5a7a598ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderSelf</name>
      <anchorfile>classcinder_1_1svg_1_1_ellipse.html</anchorfile>
      <anchor>a28dcb57ade1a5cff913f71198ab52b9e</anchor>
      <arglist>(Renderer &amp;renderer) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Rectf</type>
      <name>calcBoundingBox</name>
      <anchorfile>classcinder_1_1svg_1_1_ellipse.html</anchorfile>
      <anchor>a6acb66b4df1cd09ea2560252bb3787a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec2f</type>
      <name>mCenter</name>
      <anchorfile>classcinder_1_1svg_1_1_ellipse.html</anchorfile>
      <anchor>a7d574435270417491d49f1b04524689e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mRadiusX</name>
      <anchorfile>classcinder_1_1svg_1_1_ellipse.html</anchorfile>
      <anchor>a59ff376890e9144070327a878852871b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>mRadiusY</name>
      <anchorfile>classcinder_1_1svg_1_1_ellipse.html</anchorfile>
      <anchor>a908b7e9104f9bb41dd9b02b6a991ada5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::Path</name>
    <filename>classcinder_1_1svg_1_1_path.html</filename>
    <base>cinder::svg::Node</base>
    <member kind="function">
      <type></type>
      <name>Path</name>
      <anchorfile>classcinder_1_1svg_1_1_path.html</anchorfile>
      <anchor>a1c466a5a4d165a86fe057d2c450202bc</anchor>
      <arglist>(const Node *parent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Path</name>
      <anchorfile>classcinder_1_1svg_1_1_path.html</anchorfile>
      <anchor>afcf3a7654fe73e289f03afe576bfc785</anchor>
      <arglist>(const Node *parent, const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="function">
      <type>const Shape2d &amp;</type>
      <name>getShape2d</name>
      <anchorfile>classcinder_1_1svg_1_1_path.html</anchorfile>
      <anchor>a90baf4916bfbcadc7a86f79ccd92a329</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendShape2d</name>
      <anchorfile>classcinder_1_1svg_1_1_path.html</anchorfile>
      <anchor>a264797a289b83cbdada90481ff6b13b0</anchor>
      <arglist>(Shape2d *appendTo) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsPoint</name>
      <anchorfile>classcinder_1_1svg_1_1_path.html</anchorfile>
      <anchor>a624526cbc6d0bce302233fa9b5521f0c</anchor>
      <arglist>(const Vec2f &amp;pt) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Shape2d</type>
      <name>getShape</name>
      <anchorfile>classcinder_1_1svg_1_1_path.html</anchorfile>
      <anchor>abed82e217106f9e886b20ba189431f95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderSelf</name>
      <anchorfile>classcinder_1_1svg_1_1_path.html</anchorfile>
      <anchor>a93924064bf55aeda8362de6b4f7a6a2f</anchor>
      <arglist>(Renderer &amp;renderer) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Rectf</type>
      <name>calcBoundingBox</name>
      <anchorfile>classcinder_1_1svg_1_1_path.html</anchorfile>
      <anchor>a4308e38a7642ae64d253df2480b532b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Shape2d</type>
      <name>mPath</name>
      <anchorfile>classcinder_1_1svg_1_1_path.html</anchorfile>
      <anchor>a09651e3dff6a02eea26b598b9b9e8b27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::Line</name>
    <filename>classcinder_1_1svg_1_1_line.html</filename>
    <base>cinder::svg::Node</base>
    <member kind="function">
      <type></type>
      <name>Line</name>
      <anchorfile>classcinder_1_1svg_1_1_line.html</anchorfile>
      <anchor>a185413d41ad678d77d560cdafe26d84c</anchor>
      <arglist>(const Node *parent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Line</name>
      <anchorfile>classcinder_1_1svg_1_1_line.html</anchorfile>
      <anchor>ab0dc73e0ea9d08fe015d3eb55109d11e</anchor>
      <arglist>(const Node *parent, const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="function">
      <type>const Vec2f &amp;</type>
      <name>getPoint1</name>
      <anchorfile>classcinder_1_1svg_1_1_line.html</anchorfile>
      <anchor>a9309854050870962d5294fd22e8ac968</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec2f &amp;</type>
      <name>getPoint2</name>
      <anchorfile>classcinder_1_1svg_1_1_line.html</anchorfile>
      <anchor>a416b62ef61d6dc544365943bc3579602</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Shape2d</type>
      <name>getShape</name>
      <anchorfile>classcinder_1_1svg_1_1_line.html</anchorfile>
      <anchor>acf9a2b81ab7ffaf1fa0dc1a9a1fb9450</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderSelf</name>
      <anchorfile>classcinder_1_1svg_1_1_line.html</anchorfile>
      <anchor>afbe336a7df7ba7408cdf67b54f1da324</anchor>
      <arglist>(Renderer &amp;renderer) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Rectf</type>
      <name>calcBoundingBox</name>
      <anchorfile>classcinder_1_1svg_1_1_line.html</anchorfile>
      <anchor>a4300201e2ec893e66582175a38e5b3b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec2f</type>
      <name>mPoint1</name>
      <anchorfile>classcinder_1_1svg_1_1_line.html</anchorfile>
      <anchor>aaf6a7474a57c76043422ab2d0b386925</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vec2f</type>
      <name>mPoint2</name>
      <anchorfile>classcinder_1_1svg_1_1_line.html</anchorfile>
      <anchor>a2d2f11e385ab12d21c582cad7e111b38</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::Rect</name>
    <filename>classcinder_1_1svg_1_1_rect.html</filename>
    <base>cinder::svg::Node</base>
    <member kind="function">
      <type></type>
      <name>Rect</name>
      <anchorfile>classcinder_1_1svg_1_1_rect.html</anchorfile>
      <anchor>af3f7750909189b340c1588420748eca8</anchor>
      <arglist>(const Node *parent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rect</name>
      <anchorfile>classcinder_1_1svg_1_1_rect.html</anchorfile>
      <anchor>aceefb23cc68b0c357397cd6ca28374ea</anchor>
      <arglist>(const Node *parent, const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="function">
      <type>const Rectf &amp;</type>
      <name>getRect</name>
      <anchorfile>classcinder_1_1svg_1_1_rect.html</anchorfile>
      <anchor>ab91a7c223029b510094b840f841bcfcf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsPoint</name>
      <anchorfile>classcinder_1_1svg_1_1_rect.html</anchorfile>
      <anchor>ae5f808a23e6651f8e679ec2683b4f9a1</anchor>
      <arglist>(const Vec2f &amp;pt) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Shape2d</type>
      <name>getShape</name>
      <anchorfile>classcinder_1_1svg_1_1_rect.html</anchorfile>
      <anchor>a28c9b3db544f77f825a72aad28ca1a99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderSelf</name>
      <anchorfile>classcinder_1_1svg_1_1_rect.html</anchorfile>
      <anchor>ace946222623cdbc8ffb16aead78d0d32</anchor>
      <arglist>(Renderer &amp;renderer) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Rectf</type>
      <name>calcBoundingBox</name>
      <anchorfile>classcinder_1_1svg_1_1_rect.html</anchorfile>
      <anchor>a12c180b18a8044d992c74e3e61ea6fef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Rectf</type>
      <name>mRect</name>
      <anchorfile>classcinder_1_1svg_1_1_rect.html</anchorfile>
      <anchor>aea24e2ae9a1751477a51ecbe6dda9be1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::Polygon</name>
    <filename>classcinder_1_1svg_1_1_polygon.html</filename>
    <base>cinder::svg::Node</base>
    <member kind="function">
      <type></type>
      <name>Polygon</name>
      <anchorfile>classcinder_1_1svg_1_1_polygon.html</anchorfile>
      <anchor>a26e62e7b5a571926d6510d96b210099f</anchor>
      <arglist>(const Node *parent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Polygon</name>
      <anchorfile>classcinder_1_1svg_1_1_polygon.html</anchorfile>
      <anchor>ac1fad94d62c711c9a5f7e220fc85d191</anchor>
      <arglist>(const Node *parent, const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="function">
      <type>const PolyLine2f &amp;</type>
      <name>getPolyLine</name>
      <anchorfile>classcinder_1_1svg_1_1_polygon.html</anchorfile>
      <anchor>a0db77ece47d63e6f907a9ea1fb3d8e91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PolyLine2f &amp;</type>
      <name>getPolyLine</name>
      <anchorfile>classcinder_1_1svg_1_1_polygon.html</anchorfile>
      <anchor>a524180f6543573cb972a9c6e636dda45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsPoint</name>
      <anchorfile>classcinder_1_1svg_1_1_polygon.html</anchorfile>
      <anchor>a69ed524861c254e743b07911e736d613</anchor>
      <arglist>(const Vec2f &amp;pt) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Shape2d</type>
      <name>getShape</name>
      <anchorfile>classcinder_1_1svg_1_1_polygon.html</anchorfile>
      <anchor>aa774337ae93c6a50c57a4efc55815a3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderSelf</name>
      <anchorfile>classcinder_1_1svg_1_1_polygon.html</anchorfile>
      <anchor>ae7adb1654f8457365d11af5246dd05cd</anchor>
      <arglist>(Renderer &amp;renderer) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Rectf</type>
      <name>calcBoundingBox</name>
      <anchorfile>classcinder_1_1svg_1_1_polygon.html</anchorfile>
      <anchor>a19c56f9daefdfc80a313487c80fa8119</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PolyLine2f</type>
      <name>mPolyLine</name>
      <anchorfile>classcinder_1_1svg_1_1_polygon.html</anchorfile>
      <anchor>af70e07fe3d5e5ea9b7ef78d21170eb19</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::Polyline</name>
    <filename>classcinder_1_1svg_1_1_polyline.html</filename>
    <base>cinder::svg::Node</base>
    <member kind="function">
      <type></type>
      <name>Polyline</name>
      <anchorfile>classcinder_1_1svg_1_1_polyline.html</anchorfile>
      <anchor>a8902106381e5760ab5cd5e4d6d480918</anchor>
      <arglist>(const Node *parent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Polyline</name>
      <anchorfile>classcinder_1_1svg_1_1_polyline.html</anchorfile>
      <anchor>a1fcecdefe09b303dfd1b97f012f69d99</anchor>
      <arglist>(const Node *parent, const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="function">
      <type>const PolyLine2f &amp;</type>
      <name>getPolyLine</name>
      <anchorfile>classcinder_1_1svg_1_1_polyline.html</anchorfile>
      <anchor>ac9c5f5f90455d468282f395e3acfc18d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PolyLine2f &amp;</type>
      <name>getPolyLine</name>
      <anchorfile>classcinder_1_1svg_1_1_polyline.html</anchorfile>
      <anchor>a94bd878928adcb6cf69e325375667d5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsPoint</name>
      <anchorfile>classcinder_1_1svg_1_1_polyline.html</anchorfile>
      <anchor>a75fe73f264bdb0cb1f9ea2de2ddb5c1e</anchor>
      <arglist>(const Vec2f &amp;pt) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Shape2d</type>
      <name>getShape</name>
      <anchorfile>classcinder_1_1svg_1_1_polyline.html</anchorfile>
      <anchor>adb985d504949470920aacb92d65838d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderSelf</name>
      <anchorfile>classcinder_1_1svg_1_1_polyline.html</anchorfile>
      <anchor>a57108b28806c9d7486cdfb531a505496</anchor>
      <arglist>(Renderer &amp;renderer) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Rectf</type>
      <name>calcBoundingBox</name>
      <anchorfile>classcinder_1_1svg_1_1_polyline.html</anchorfile>
      <anchor>a4bf58eba88946e8c8ebba33ca39bbcd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PolyLine2f</type>
      <name>mPolyLine</name>
      <anchorfile>classcinder_1_1svg_1_1_polyline.html</anchorfile>
      <anchor>a0f3ae4bf7d00aafd9deaea2506abdc52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::Use</name>
    <filename>classcinder_1_1svg_1_1_use.html</filename>
    <base>cinder::svg::Node</base>
    <member kind="function">
      <type></type>
      <name>Use</name>
      <anchorfile>classcinder_1_1svg_1_1_use.html</anchorfile>
      <anchor>a7b5400702385e041634a1a534aa75041</anchor>
      <arglist>(const Node *parent, const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDrawable</name>
      <anchorfile>classcinder_1_1svg_1_1_use.html</anchorfile>
      <anchor>a02aa90ba913e220dac47c16639db2dfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Shape2d</type>
      <name>getShape</name>
      <anchorfile>classcinder_1_1svg_1_1_use.html</anchorfile>
      <anchor>ad0b35bd76511c7f7d593d2fca1faed22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderSelf</name>
      <anchorfile>classcinder_1_1svg_1_1_use.html</anchorfile>
      <anchor>aa8e3c67143ffb16e1e534fb232802650</anchor>
      <arglist>(Renderer &amp;renderer) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Rectf</type>
      <name>calcBoundingBox</name>
      <anchorfile>classcinder_1_1svg_1_1_use.html</anchorfile>
      <anchor>a5cb7992b9da920a2cd7f6ab4fe9f6826</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classcinder_1_1svg_1_1_use.html</anchorfile>
      <anchor>a93b87fde3ba560ee48027141430b090b</anchor>
      <arglist>(const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Node *</type>
      <name>mReferenced</name>
      <anchorfile>classcinder_1_1svg_1_1_use.html</anchorfile>
      <anchor>a10b4c88ebe1c4d77469a4c1cff1f2f61</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::Image</name>
    <filename>classcinder_1_1svg_1_1_image.html</filename>
    <base>cinder::svg::Node</base>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classcinder_1_1svg_1_1_image.html</anchorfile>
      <anchor>a1dbd95fabcbf3a2078475cba8f7cb972</anchor>
      <arglist>(const Node *parent, const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="function">
      <type>const Rectf &amp;</type>
      <name>getRect</name>
      <anchorfile>classcinder_1_1svg_1_1_image.html</anchorfile>
      <anchor>a41ec91f172414bb74e8cc901777ccf25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; Surface8u &gt;</type>
      <name>getSurface</name>
      <anchorfile>classcinder_1_1svg_1_1_image.html</anchorfile>
      <anchor>a71a26bc3611e4e007bc313a2cd2f516d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsPoint</name>
      <anchorfile>classcinder_1_1svg_1_1_image.html</anchorfile>
      <anchor>a19808ab559b69ed2f23cfe0c976dc119</anchor>
      <arglist>(const Vec2f &amp;pt) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderSelf</name>
      <anchorfile>classcinder_1_1svg_1_1_image.html</anchorfile>
      <anchor>aab9aa44feb07d8a2228b2018c459bfb9</anchor>
      <arglist>(Renderer &amp;renderer) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Rectf</type>
      <name>calcBoundingBox</name>
      <anchorfile>classcinder_1_1svg_1_1_image.html</anchorfile>
      <anchor>a28bb1db6884acd710187812782043da4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::shared_ptr&lt; Surface8u &gt;</type>
      <name>parseDataImage</name>
      <anchorfile>classcinder_1_1svg_1_1_image.html</anchorfile>
      <anchor>ade0fb3965c794c321166804fb478c55f</anchor>
      <arglist>(const std::string &amp;data)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Rectf</type>
      <name>mRect</name>
      <anchorfile>classcinder_1_1svg_1_1_image.html</anchorfile>
      <anchor>a91598eeae46e0836ba649fd2e5de6f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fs::path</type>
      <name>mFilePath</name>
      <anchorfile>classcinder_1_1svg_1_1_image.html</anchorfile>
      <anchor>a8753ecc969eade2f332f9e9ae923971c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Surface8u &gt;</type>
      <name>mImage</name>
      <anchorfile>classcinder_1_1svg_1_1_image.html</anchorfile>
      <anchor>af7d8b6b7280b231f672c0b7b95794190</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::TextSpan</name>
    <filename>classcinder_1_1svg_1_1_text_span.html</filename>
    <base>cinder::svg::Node</base>
    <class kind="class">cinder::svg::TextSpan::Attributes</class>
    <member kind="function">
      <type></type>
      <name>TextSpan</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span.html</anchorfile>
      <anchor>ab24d09ded802d9f4bc1044ffcb3bdfc4</anchor>
      <arglist>(const Node *parent, const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TextSpan</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span.html</anchorfile>
      <anchor>aa4f26a58e3c265acf8682ce48e22a96b</anchor>
      <arglist>(const Node *parent, const std::string &amp;spanString)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getString</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span.html</anchorfile>
      <anchor>a1344ae68e23ad83e04e5918d0b5b9e70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; Font &gt;</type>
      <name>getFont</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span.html</anchorfile>
      <anchor>a515740229bd1761a44af20bb1c6aae8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::pair&lt; uint16_t, Vec2f &gt; &gt;</type>
      <name>getGlyphMeasures</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span.html</anchorfile>
      <anchor>a480646c90fd7818d07cfb7e0e773a51a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>getTextPen</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span.html</anchorfile>
      <anchor>a80ba861097b01bad171544249d7dafb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span.html</anchorfile>
      <anchor>add333044d4f0b22b0e91b7851db06b74</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderSelf</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span.html</anchorfile>
      <anchor>a28756137ef86edbc983734d0946e80fa</anchor>
      <arglist>(Renderer &amp;renderer) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>mIgnoreAttributes</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span.html</anchorfile>
      <anchor>a1854a830d29a33e2d868d6ea0d819efb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Attributes</type>
      <name>mAttributes</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span.html</anchorfile>
      <anchor>af309d294377b57b64eeac9f66f6b26f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>mString</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span.html</anchorfile>
      <anchor>a8c21c38b4d3bc6e3c8af69b4cd011f82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Font &gt;</type>
      <name>mFont</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span.html</anchorfile>
      <anchor>a66b40b6be0d5d40099e581581fb16da0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; std::vector&lt; std::pair&lt; uint16_t, Vec2f &gt; &gt; &gt;</type>
      <name>mGlyphMeasures</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span.html</anchorfile>
      <anchor>a2a1ad16a691f7f133fbcdf39d0d62f5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Shape2d &gt;</type>
      <name>mShape</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span.html</anchorfile>
      <anchor>af282d3ef77a45e3c15b54fdebdb03b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; TextSpanRef &gt;</type>
      <name>mSpans</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span.html</anchorfile>
      <anchor>a9d0c73181bec1ea49e8e693868926ec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Text</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span.html</anchorfile>
      <anchor>aee0ad1dafe471596e6d25530d9fbaf0c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::TextSpan::Attributes</name>
    <filename>classcinder_1_1svg_1_1_text_span_1_1_attributes.html</filename>
    <member kind="function">
      <type></type>
      <name>Attributes</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span_1_1_attributes.html</anchorfile>
      <anchor>a398c4d20a3ede4b4c3858a8953846edc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Attributes</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span_1_1_attributes.html</anchorfile>
      <anchor>ab2d09965fc142adbbc84701caa379664</anchor>
      <arglist>(const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startRender</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span_1_1_attributes.html</anchorfile>
      <anchor>a55fa63299ff8cf3ecb22525d73fd5fdb</anchor>
      <arglist>(Renderer &amp;renderer) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finishRender</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span_1_1_attributes.html</anchorfile>
      <anchor>a2842680a9c0363d3adde95e5f4ea39b4</anchor>
      <arglist>(Renderer &amp;renderer) const </arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Value &gt;</type>
      <name>mX</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span_1_1_attributes.html</anchorfile>
      <anchor>a2c0747591cd0ac0b6cb6de17b05ab379</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Value &gt;</type>
      <name>mY</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span_1_1_attributes.html</anchorfile>
      <anchor>ae0fc5d2099744a4f7977de135a86f897</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mDx</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span_1_1_attributes.html</anchorfile>
      <anchor>a8aba1a6e8d8d87d65667c8c378ccce7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mDy</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span_1_1_attributes.html</anchorfile>
      <anchor>ab2b2f6d7c111235912e8dc18daf639bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; Value &gt;</type>
      <name>mRotate</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span_1_1_attributes.html</anchorfile>
      <anchor>adbc2316a20f100f12ae4c4dbba4d3a6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mTextLength</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span_1_1_attributes.html</anchorfile>
      <anchor>a6970b4888dda74b425318a863dc98e22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>mLengthAdjust</name>
      <anchorfile>classcinder_1_1svg_1_1_text_span_1_1_attributes.html</anchorfile>
      <anchor>a595bb8a959ba64f7f6a494f8c918905d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::Text</name>
    <filename>classcinder_1_1svg_1_1_text.html</filename>
    <base>cinder::svg::Node</base>
    <member kind="function">
      <type></type>
      <name>Text</name>
      <anchorfile>classcinder_1_1svg_1_1_text.html</anchorfile>
      <anchor>a8f32b015bd6cbda2ae4853d4abf81c76</anchor>
      <arglist>(const Node *parent, const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="function">
      <type>Vec2f</type>
      <name>getTextPen</name>
      <anchorfile>classcinder_1_1svg_1_1_text.html</anchorfile>
      <anchor>a97a8034ec35739c430d0ad68bdf6397a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classcinder_1_1svg_1_1_text.html</anchorfile>
      <anchor>a1a01226e6266bcb8dbde898b8be65919</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderSelf</name>
      <anchorfile>classcinder_1_1svg_1_1_text.html</anchorfile>
      <anchor>a3d21890915806f810d1938c20ecb7629</anchor>
      <arglist>(Renderer &amp;renderer) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TextSpan::Attributes</type>
      <name>mAttributes</name>
      <anchorfile>classcinder_1_1svg_1_1_text.html</anchorfile>
      <anchor>a2d268ba5fa63d3161d7045bed4ae8254</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; TextSpanRef &gt;</type>
      <name>mSpans</name>
      <anchorfile>classcinder_1_1svg_1_1_text.html</anchorfile>
      <anchor>a06d5971a6486f30e45c4896ed0b497e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::Group</name>
    <filename>classcinder_1_1svg_1_1_group.html</filename>
    <base>cinder::svg::Node</base>
    <member kind="function">
      <type></type>
      <name>Group</name>
      <anchorfile>classcinder_1_1svg_1_1_group.html</anchorfile>
      <anchor>ab7e70a1a8b18375ec5f35e0e20a1112d</anchor>
      <arglist>(const Node *parent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Group</name>
      <anchorfile>classcinder_1_1svg_1_1_group.html</anchorfile>
      <anchor>a529d0254488c2fafa2a6d62d9fe29f75</anchor>
      <arglist>(const Node *parent, const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Group</name>
      <anchorfile>classcinder_1_1svg_1_1_group.html</anchorfile>
      <anchor>a483fee77d4ff929920829d66e506ca7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>find</name>
      <anchorfile>classcinder_1_1svg_1_1_group.html</anchorfile>
      <anchor>af27c74e75157ee1c56d26208bc53798c</anchor>
      <arglist>(const std::string &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>findNode</name>
      <anchorfile>classcinder_1_1svg_1_1_group.html</anchorfile>
      <anchor>a1e5227701985a799c99667362d7fc86e</anchor>
      <arglist>(const std::string &amp;id, bool recurse=true) const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>findByIdContains</name>
      <anchorfile>classcinder_1_1svg_1_1_group.html</anchorfile>
      <anchor>a4d70669b693dc65afa04271eb0b0322a</anchor>
      <arglist>(const std::string &amp;idPartial)</arglist>
    </member>
    <member kind="function">
      <type>const Node *</type>
      <name>findNodeByIdContains</name>
      <anchorfile>classcinder_1_1svg_1_1_group.html</anchorfile>
      <anchor>ab18716a3553634d723ef955fae1c3be6</anchor>
      <arglist>(const std::string &amp;idPartial, bool recurse=true) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Node *</type>
      <name>findInAncestors</name>
      <anchorfile>classcinder_1_1svg_1_1_group.html</anchorfile>
      <anchor>a4b96ca0d196b1a4a251840ac6790cb4e</anchor>
      <arglist>(const std::string &amp;elementId) const </arglist>
    </member>
    <member kind="function">
      <type>const Node &amp;</type>
      <name>getChild</name>
      <anchorfile>classcinder_1_1svg_1_1_group.html</anchorfile>
      <anchor>af54b4bed9d0897988c126aa67502a3a8</anchor>
      <arglist>(const std::string &amp;id) const </arglist>
    </member>
    <member kind="function">
      <type>const Node &amp;</type>
      <name>operator/</name>
      <anchorfile>classcinder_1_1svg_1_1_group.html</anchorfile>
      <anchor>ad602abcded8b064a0a7e2500777c3732</anchor>
      <arglist>(const std::string &amp;id) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Shape2d</type>
      <name>getShape</name>
      <anchorfile>classcinder_1_1svg_1_1_group.html</anchorfile>
      <anchor>a0b6883e5a67e29770d784950eaa4e91f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendMergedShape2d</name>
      <anchorfile>classcinder_1_1svg_1_1_group.html</anchorfile>
      <anchor>a38683f4cb9acc3d4d30e9b4587169a62</anchor>
      <arglist>(Shape2d *appendTo) const </arglist>
    </member>
    <member kind="function">
      <type>const std::list&lt; Node * &gt; &amp;</type>
      <name>getChildren</name>
      <anchorfile>classcinder_1_1svg_1_1_group.html</anchorfile>
      <anchor>abf9c5d0d357cfa8e79e515b5f1cbd665</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; Node * &gt; &amp;</type>
      <name>getChildren</name>
      <anchorfile>classcinder_1_1svg_1_1_group.html</anchorfile>
      <anchor>abfeb3e8944126e0ec952e2dfc1169dd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Node *</type>
      <name>nodeUnderPoint</name>
      <anchorfile>classcinder_1_1svg_1_1_group.html</anchorfile>
      <anchor>a3e1e621f71a9f3bfbd4578be180d30ad</anchor>
      <arglist>(const Vec2f &amp;absolutePoint, const MatrixAffine2f &amp;parentInverseMatrix) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Shape2d</type>
      <name>getMergedShape2d</name>
      <anchorfile>classcinder_1_1svg_1_1_group.html</anchorfile>
      <anchor>aaf89e4bd49bbb5c83a8e27327f81db29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>renderSelf</name>
      <anchorfile>classcinder_1_1svg_1_1_group.html</anchorfile>
      <anchor>a60466c2a8e2e25e3157753ea96868939</anchor>
      <arglist>(Renderer &amp;renderer) const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Rectf</type>
      <name>calcBoundingBox</name>
      <anchorfile>classcinder_1_1svg_1_1_group.html</anchorfile>
      <anchor>a515fe9a65fd36f8a39b92ef91caf557f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDrawable</name>
      <anchorfile>classcinder_1_1svg_1_1_group.html</anchorfile>
      <anchor>aa9c0966eebd1bf83fc989506a9f550a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classcinder_1_1svg_1_1_group.html</anchorfile>
      <anchor>a3b7ce4cfcdd0aa6d09c0fe9f4f09d937</anchor>
      <arglist>(const XmlTree &amp;xml)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; Node * &gt;</type>
      <name>mChildren</name>
      <anchorfile>classcinder_1_1svg_1_1_group.html</anchorfile>
      <anchor>a2071de0c53f53524595c9e77dacc375c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Group &gt;</type>
      <name>mDefs</name>
      <anchorfile>classcinder_1_1svg_1_1_group.html</anchorfile>
      <anchor>a9beb73010be9e623c3e77cabd1d97943</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::Doc</name>
    <filename>classcinder_1_1svg_1_1_doc.html</filename>
    <base>cinder::svg::Group</base>
    <member kind="function">
      <type></type>
      <name>Doc</name>
      <anchorfile>classcinder_1_1svg_1_1_doc.html</anchorfile>
      <anchor>a5f6d25c06ae4ac23880b4a14b061ef5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Doc</name>
      <anchorfile>classcinder_1_1svg_1_1_doc.html</anchorfile>
      <anchor>a27aea76f7edcb166a0eba4406ff1847c</anchor>
      <arglist>(const fs::path &amp;filePath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Doc</name>
      <anchorfile>classcinder_1_1svg_1_1_doc.html</anchorfile>
      <anchor>ada1adaadd6fb6144a9b2ca3bcb8ee570</anchor>
      <arglist>(DataSourceRef dataSource, const fs::path &amp;filePath=fs::path())</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getWidth</name>
      <anchorfile>classcinder_1_1svg_1_1_doc.html</anchorfile>
      <anchor>a82f551c2f487dad60845c2a59c1c6ed4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>getHeight</name>
      <anchorfile>classcinder_1_1svg_1_1_doc.html</anchorfile>
      <anchor>a13bb534412fcedc36336a0c2c79e8837</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec2i</type>
      <name>getSize</name>
      <anchorfile>classcinder_1_1svg_1_1_doc.html</anchorfile>
      <anchor>a5d97657ad3ba2ac980373b8648353587</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAspectRatio</name>
      <anchorfile>classcinder_1_1svg_1_1_doc.html</anchorfile>
      <anchor>ad69115c20bfb515aa7f6ff38c8b81edd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Area</type>
      <name>getBounds</name>
      <anchorfile>classcinder_1_1svg_1_1_doc.html</anchorfile>
      <anchor>a1e955ecb61dfa967938c3abf4eaf778b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDpi</name>
      <anchorfile>classcinder_1_1svg_1_1_doc.html</anchorfile>
      <anchor>a885057774a14ef28a178591ea0627fc6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>nodeUnderPoint</name>
      <anchorfile>classcinder_1_1svg_1_1_doc.html</anchorfile>
      <anchor>acb805b549e8b8120f47a5405633c69d2</anchor>
      <arglist>(const Vec2f &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Surface8u &gt;</type>
      <name>loadImage</name>
      <anchorfile>classcinder_1_1svg_1_1_doc.html</anchorfile>
      <anchor>af9274465a3fe4d6f4a2eef7cf34f7164</anchor>
      <arglist>(fs::path relativePath)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DocRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1svg_1_1_doc.html</anchorfile>
      <anchor>a6b49aa8c7b71f71d70faab04f597e1c9</anchor>
      <arglist>(const fs::path &amp;filePath)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DocRef</type>
      <name>create</name>
      <anchorfile>classcinder_1_1svg_1_1_doc.html</anchorfile>
      <anchor>a768b56ddf69c8e613b53dfa8113b5603</anchor>
      <arglist>(DataSourceRef dataSource, const fs::path &amp;filePath=fs::path())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DocRef</type>
      <name>createFromSvgz</name>
      <anchorfile>classcinder_1_1svg_1_1_doc.html</anchorfile>
      <anchor>af3786c15574a2f818b59981ead8a145a</anchor>
      <arglist>(DataSourceRef dataSource, const fs::path &amp;filePath=fs::path())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cinder::svg::Exc</name>
    <filename>classcinder_1_1svg_1_1_exc.html</filename>
    <base>cinder::Exception</base>
  </compound>
  <compound kind="class">
    <name>cinder::svg::ValueExc</name>
    <filename>classcinder_1_1svg_1_1_value_exc.html</filename>
    <base>cinder::svg::Exc</base>
  </compound>
  <compound kind="class">
    <name>cinder::svg::FloatParseExc</name>
    <filename>classcinder_1_1svg_1_1_float_parse_exc.html</filename>
    <base>cinder::svg::Exc</base>
  </compound>
  <compound kind="class">
    <name>cinder::svg::PathParseExc</name>
    <filename>classcinder_1_1svg_1_1_path_parse_exc.html</filename>
    <base>cinder::svg::Exc</base>
  </compound>
  <compound kind="class">
    <name>cinder::svg::TransformParseExc</name>
    <filename>classcinder_1_1svg_1_1_transform_parse_exc.html</filename>
    <base>cinder::svg::Exc</base>
  </compound>
  <compound kind="class">
    <name>cinder::svg::ExcChildNotFound</name>
    <filename>classcinder_1_1svg_1_1_exc_child_not_found.html</filename>
    <base>cinder::svg::Exc</base>
    <member kind="function">
      <type></type>
      <name>ExcChildNotFound</name>
      <anchorfile>classcinder_1_1svg_1_1_exc_child_not_found.html</anchorfile>
      <anchor>a214dc6c1c2145c6a37f8825e6500c7a0</anchor>
      <arglist>(const std::string &amp;child)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classcinder_1_1svg_1_1_exc_child_not_found.html</anchorfile>
      <anchor>a40c4346f2aadbb395fb3466616736e82</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Gdiplus</name>
    <filename>namespace_gdiplus.html</filename>
  </compound>
  <compound kind="namespace">
    <name>Json</name>
    <filename>namespace_json.html</filename>
  </compound>
  <compound kind="namespace">
    <name>std::this_thread</name>
    <filename>namespacestd_1_1this__thread.html</filename>
  </compound>
  <compound kind="dir">
    <name>src/cinder/app</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/app/</path>
    <filename>dir_db4f17e486386d38723e6590f865a6ba.html</filename>
    <file>App.cpp</file>
    <file>AppBasic.cpp</file>
    <file>AppCocoaTouch.mm</file>
    <file>AppCocoaView.mm</file>
    <file>AppImplCocoaBasic.mm</file>
    <file>AppImplCocoaRendererGl.mm</file>
    <file>AppImplCocoaRendererQuartz.mm</file>
    <file>AppImplCocoaScreenSaver.mm</file>
    <file>AppImplCocoaTouchRendererGl.mm</file>
    <file>AppImplCocoaTouchRendererQuartz.mm</file>
    <file>AppImplMsw.cpp</file>
    <file>AppImplMswBasic.cpp</file>
    <file>AppImplMswRendererGdi.cpp</file>
    <file>AppImplMswRendererGl.cpp</file>
    <file>AppImplMswScreenSaver.cpp</file>
    <file>AppScreenSaver.cpp</file>
    <file>CinderView.mm</file>
    <file>CinderViewCocoaTouch.mm</file>
    <file>KeyEvent.cpp</file>
    <file>Renderer.cpp</file>
    <file>Window.cpp</file>
  </compound>
  <compound kind="dir">
    <name>include/cinder/app</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/app/</path>
    <filename>dir_99a4489fdcfec2ca6741c3db06b77bdd.html</filename>
    <file>App.h</file>
    <file>AppBasic.h</file>
    <file>AppCocoaTouch.h</file>
    <file>AppCocoaView.h</file>
    <file>AppImplCocoaBasic.h</file>
    <file>AppImplCocoaRendererGl.h</file>
    <file>AppImplCocoaRendererQuartz.h</file>
    <file>AppImplCocoaScreenSaver.h</file>
    <file>AppImplCocoaTouchRendererGl.h</file>
    <file>AppImplCocoaTouchRendererQuartz.h</file>
    <file>AppImplMsw.h</file>
    <file>AppImplMswBasic.h</file>
    <file>AppImplMswRenderer.h</file>
    <file>AppImplMswRendererGdi.h</file>
    <file>AppImplMswRendererGl.h</file>
    <file>AppImplMswScreenSaver.h</file>
    <file>AppNative.h</file>
    <file>AppScreenSaver.h</file>
    <file>CinderView.h</file>
    <file>CinderViewCocoaTouch.h</file>
    <file>Event.h</file>
    <file>FileDropEvent.h</file>
    <file>KeyEvent.h</file>
    <file>MouseEvent.h</file>
    <file>Renderer.h</file>
    <file>TouchEvent.h</file>
    <file>Window.h</file>
  </compound>
  <compound kind="dir">
    <name>src/cinder/audio</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/audio/</path>
    <filename>dir_70dad54e961807c113211c644a23f402.html</filename>
    <file>CocoaCaConverter.cpp</file>
    <file>FftProcessor.cpp</file>
    <file>FftProcessorImplAccelerate.cpp</file>
    <file>Input.cpp</file>
    <file>InputImplAudioUnit.cpp</file>
    <file>Io.cpp</file>
    <file>Output.cpp</file>
    <file>OutputImplAudioUnit.cpp</file>
    <file>OutputImplXAudio.cpp</file>
    <file>PcmBuffer.cpp</file>
    <file>SourceFile.cpp</file>
    <file>SourceFileWav.cpp</file>
    <file>SourceFileWindowsMedia.cpp</file>
  </compound>
  <compound kind="dir">
    <name>include/cinder/audio</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/audio/</path>
    <filename>dir_6216da5a8bb6b335ec7266cef3be80d4.html</filename>
    <file>Callback.h</file>
    <file>CircularBuffer.h</file>
    <file>CocoaCaConverter.h</file>
    <file>FftProcessor.h</file>
    <file>FftProcessorImplAccelerate.h</file>
    <file>Input.h</file>
    <file>InputImplAudioUnit.h</file>
    <file>Io.h</file>
    <file>Output.h</file>
    <file>OutputImplAudioUnit.h</file>
    <file>OutputImplXAudio.h</file>
    <file>PcmBuffer.h</file>
    <file>SourceFile.h</file>
    <file>SourceFileWav.h</file>
    <file>SourceFileWindowsMedia.h</file>
  </compound>
  <compound kind="dir">
    <name>src/cinder</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/</path>
    <filename>dir_243096399b5b2c1ff97f7736b0cce319.html</filename>
    <dir>src/cinder/app</dir>
    <dir>src/cinder/audio</dir>
    <dir>src/cinder/cocoa</dir>
    <dir>src/cinder/gl</dir>
    <dir>src/cinder/ip</dir>
    <dir>src/cinder/msw</dir>
    <dir>src/cinder/params</dir>
    <dir>src/cinder/qtime</dir>
    <dir>src/cinder/svg</dir>
    <file>Area.cpp</file>
    <file>AxisAlignedBox.cpp</file>
    <file>BandedMatrix.cpp</file>
    <file>Base64.cpp</file>
    <file>BSpline.cpp</file>
    <file>BSplineFit.cpp</file>
    <file>Buffer.cpp</file>
    <file>Camera.cpp</file>
    <file>Capture.cpp</file>
    <file>CaptureImplAvFoundation.mm</file>
    <file>CaptureImplCocoaDummy.mm</file>
    <file>CaptureImplDirectShow.cpp</file>
    <file>CaptureImplQtKit.mm</file>
    <file>Channel.cpp</file>
    <file>CinderMath.cpp</file>
    <file>Clipboard.cpp</file>
    <file>Color.cpp</file>
    <file>ConvexHull.cpp</file>
    <file>DataSource.cpp</file>
    <file>DataTarget.cpp</file>
    <file>Display.cpp</file>
    <file>Exception.cpp</file>
    <file>Font.cpp</file>
    <file>Frustum.cpp</file>
    <file>ImageIo.cpp</file>
    <file>ImageSourceFileQuartz.cpp</file>
    <file>ImageSourceFileWic.cpp</file>
    <file>ImageSourcePng.cpp</file>
    <file>ImageTargetFileQuartz.cpp</file>
    <file>ImageTargetFileWic.cpp</file>
    <file>Json.cpp</file>
    <file>Matrix.cpp</file>
    <file>ObjLoader.cpp</file>
    <file>Path2d.cpp</file>
    <file>Perlin.cpp</file>
    <file>Plane.cpp</file>
    <file>PolyLine.cpp</file>
    <file>Rand.cpp</file>
    <file>Ray.cpp</file>
    <file>Rect.cpp</file>
    <file>Serial.cpp</file>
    <file>Shape2d.cpp</file>
    <file>Sphere.cpp</file>
    <file>Stream.cpp</file>
    <file>Surface.cpp</file>
    <file>System.cpp</file>
    <file>Text.cpp</file>
    <file>Timeline.cpp</file>
    <file>TimelineItem.cpp</file>
    <file>Timer.cpp</file>
    <file>Triangulate.cpp</file>
    <file>TriMesh.cpp</file>
    <file>Tween.cpp</file>
    <file>Unicode.cpp</file>
    <file>Url.cpp</file>
    <file>UrlImplCocoa.mm</file>
    <file>UrlImplCurl.cpp</file>
    <file>UrlImplWinInet.cpp</file>
    <file>Utilities.cpp</file>
    <file>Xml.cpp</file>
  </compound>
  <compound kind="dir">
    <name>include/cinder</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/</path>
    <filename>dir_41030c22d7e25923061af1d72cf8cf68.html</filename>
    <dir>include/cinder/app</dir>
    <dir>include/cinder/audio</dir>
    <dir>include/cinder/cocoa</dir>
    <dir>include/cinder/gl</dir>
    <dir>include/cinder/ip</dir>
    <dir>include/cinder/msw</dir>
    <dir>include/cinder/params</dir>
    <dir>include/cinder/qtime</dir>
    <dir>include/cinder/svg</dir>
    <file>Arcball.h</file>
    <file>Area.h</file>
    <file>AxisAlignedBox.h</file>
    <file>BandedMatrix.h</file>
    <file>Base64.h</file>
    <file>BSpline.h</file>
    <file>BSplineFit.h</file>
    <file>Buffer.h</file>
    <file>Camera.h</file>
    <file>Capture.h</file>
    <file>CaptureImplAvFoundation.h</file>
    <file>CaptureImplCocoaDummy.h</file>
    <file>CaptureImplDirectShow.h</file>
    <file>CaptureImplQtKit.h</file>
    <file>Channel.h</file>
    <file>ChanTraits.h</file>
    <file>Cinder.h</file>
    <file>CinderMath.h</file>
    <file>CinderResources.h</file>
    <file>Clipboard.h</file>
    <file>Color.h</file>
    <file>ConcurrentCircularBuffer.h</file>
    <file>ConvexHull.h</file>
    <file>DataSource.h</file>
    <file>DataTarget.h</file>
    <file>Display.h</file>
    <file>Easing.h</file>
    <file>Exception.h</file>
    <file>Filesystem.h</file>
    <file>Filter.h</file>
    <file>Font.h</file>
    <file>Frustum.h</file>
    <file>Function.h</file>
    <file>ImageIo.h</file>
    <file>ImageSourceFileQuartz.h</file>
    <file>ImageSourceFileWic.h</file>
    <file>ImageSourcePng.h</file>
    <file>ImageTargetFileQuartz.h</file>
    <file>ImageTargetFileWic.h</file>
    <file>Json.h</file>
    <file>KdTree.h</file>
    <file>Matrix.h</file>
    <file>Matrix22.h</file>
    <file>Matrix33.h</file>
    <file>Matrix44.h</file>
    <file>MatrixAffine2.h</file>
    <file>MatrixAlgo.h</file>
    <file>MayaCamUI.h</file>
    <file>ObjLoader.h</file>
    <file>Path2d.h</file>
    <file>Perlin.h</file>
    <file>Plane.h</file>
    <file>PolyLine.h</file>
    <file>Quaternion.h</file>
    <file>Rand.h</file>
    <file>Ray.h</file>
    <file>Rect.h</file>
    <file>Serial.h</file>
    <file>Shape2d.h</file>
    <file>Sphere.h</file>
    <file>Stream.h</file>
    <file>Surface.h</file>
    <file>System.h</file>
    <file>Text.h</file>
    <file>Thread.h</file>
    <file>Timeline.h</file>
    <file>TimelineItem.h</file>
    <file>Timer.h</file>
    <file>Triangulate.h</file>
    <file>TriMesh.h</file>
    <file>Tween.h</file>
    <file>Unicode.h</file>
    <file>Url.h</file>
    <file>UrlImplCocoa.h</file>
    <file>UrlImplCurl.h</file>
    <file>UrlImplWinInet.h</file>
    <file>Utilities.h</file>
    <file>Vector.h</file>
    <file>Xml.h</file>
  </compound>
  <compound kind="dir">
    <name>src/cinder/cocoa</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/cocoa/</path>
    <filename>dir_8b064919aad7a85e80fc24b8088345a3.html</filename>
    <file>CinderCocoa.mm</file>
    <file>CinderCocoaTouch.mm</file>
  </compound>
  <compound kind="dir">
    <name>include/cinder/cocoa</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/cocoa/</path>
    <filename>dir_a156749fb1d06c573710d4b291846b73.html</filename>
    <file>CinderCocoa.h</file>
    <file>CinderCocoaTouch.h</file>
  </compound>
  <compound kind="dir">
    <name>src/cinder/gl</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/gl/</path>
    <filename>dir_64b077a4720e1a24fc8fae5c0ff1bc44.html</filename>
    <file>DisplayList.cpp</file>
    <file>Fbo.cpp</file>
    <file>gl.cpp</file>
    <file>GLee.c</file>
    <file>GlslProg.cpp</file>
    <file>Light.cpp</file>
    <file>Material.cpp</file>
    <file>StereoAutoFocuser.cpp</file>
    <file>Texture.cpp</file>
    <file>TextureFont.cpp</file>
    <file>TileRender.cpp</file>
    <file>Vbo.cpp</file>
  </compound>
  <compound kind="dir">
    <name>include/cinder/gl</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/gl/</path>
    <filename>dir_847de12698c6bf70bf3be9626b731d46.html</filename>
    <file>DisplayList.h</file>
    <file>Fbo.h</file>
    <file>gl.h</file>
    <file>GlslProg.h</file>
    <file>Light.h</file>
    <file>Material.h</file>
    <file>StereoAutoFocuser.h</file>
    <file>Texture.h</file>
    <file>TextureFont.h</file>
    <file>TileRender.h</file>
    <file>Vbo.h</file>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/</path>
    <filename>dir_d44c64559bbebec7f509842c48db8b23.html</filename>
    <dir>include/cinder</dir>
  </compound>
  <compound kind="dir">
    <name>src/cinder/ip</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/ip/</path>
    <filename>dir_7891985a646e432cc1903f99d761f446.html</filename>
    <file>Blend.cpp</file>
    <file>EdgeDetect.cpp</file>
    <file>Fill.cpp</file>
    <file>Flip.cpp</file>
    <file>Grayscale.cpp</file>
    <file>Hdr.cpp</file>
    <file>Premultiply.cpp</file>
    <file>Resize.cpp</file>
    <file>Threshold.cpp</file>
    <file>Trim.cpp</file>
  </compound>
  <compound kind="dir">
    <name>include/cinder/ip</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/ip/</path>
    <filename>dir_0ed0722c8a281cbbafd2d54af5d73667.html</filename>
    <file>Blend.h</file>
    <file>EdgeDetect.h</file>
    <file>Fill.h</file>
    <file>Flip.h</file>
    <file>Grayscale.h</file>
    <file>Hdr.h</file>
    <file>Premultiply.h</file>
    <file>Resize.h</file>
    <file>Threshold.h</file>
    <file>Trim.h</file>
  </compound>
  <compound kind="dir">
    <name>src/cinder/msw</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/msw/</path>
    <filename>dir_5d4ed85d389f78b21dd5435355d3f98c.html</filename>
    <file>CinderMsw.cpp</file>
    <file>CinderMswGdiPlus.cpp</file>
    <file>StackWalker.cpp</file>
  </compound>
  <compound kind="dir">
    <name>include/cinder/msw</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/msw/</path>
    <filename>dir_77c956755b4f38d4468ecc83bba62311.html</filename>
    <file>CinderMsw.h</file>
    <file>CinderMswGdiPlus.h</file>
    <file>OutputDebugStringStream.h</file>
    <file>StackWalker.h</file>
  </compound>
  <compound kind="dir">
    <name>src/cinder/params</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/params/</path>
    <filename>dir_737d80337eeae175e7ad3ee79d75db72.html</filename>
    <file>Params.cpp</file>
  </compound>
  <compound kind="dir">
    <name>include/cinder/params</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/params/</path>
    <filename>dir_ee1d502a27f93edbbca1f12d9d3f8aee.html</filename>
    <file>Params.h</file>
  </compound>
  <compound kind="dir">
    <name>src/cinder/qtime</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/qtime/</path>
    <filename>dir_33f1eabbf6621750eb3c48358bdb7971.html</filename>
    <file>MovieWriter.cpp</file>
    <file>QuickTime.cpp</file>
    <file>QuickTimeUtils.cpp</file>
  </compound>
  <compound kind="dir">
    <name>include/cinder/qtime</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/qtime/</path>
    <filename>dir_b7f57a829a55bb424e8b101062cb2fa5.html</filename>
    <file>MovieWriter.h</file>
    <file>QuickTime.h</file>
    <file>QuickTimeUtils.h</file>
  </compound>
  <compound kind="dir">
    <name>src</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/</path>
    <filename>dir_68267d1309a1af8e8297ef4c3efbcdba.html</filename>
    <dir>src/cinder</dir>
  </compound>
  <compound kind="dir">
    <name>src/cinder/svg</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/src/cinder/svg/</path>
    <filename>dir_3bbb5bb59fcad14111117dfc6a600d9f.html</filename>
    <file>Svg.cpp</file>
  </compound>
  <compound kind="dir">
    <name>include/cinder/svg</name>
    <path>/Users/jamescalhoun/Documents/rehash/projects/Cinder/include/cinder/svg/</path>
    <filename>dir_2af33ec90dc2219cb7252c7a1ec5bb27.html</filename>
    <file>Svg.h</file>
    <file>SvgGl.h</file>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>Cinder Documentation</title>
    <filename>index</filename>
    <docanchor file="index" title="Welcome">welcome</docanchor>
    <docanchor file="index" title="Guides">guides</docanchor>
  </compound>
</tagfile>
